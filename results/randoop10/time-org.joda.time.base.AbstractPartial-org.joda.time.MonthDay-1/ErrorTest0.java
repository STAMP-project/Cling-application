import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test001");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime4.toMutableDateTime(chronology15);
        org.joda.time.Instant instant17 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property18 = dateTime4.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant17", (dateTime11.compareTo(instant17) == 0) == dateTime11.equals(instant17));
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test002");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime14 = property13.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test003");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime14 = property13.withMinimumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test004");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay(0L);
        java.lang.String str10 = monthDay9.toString();
        org.joda.time.Chronology chronology11 = monthDay9.getChronology();
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime2.plusMinutes(23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and dateTime12", (mutableDateTime7.compareTo(dateTime12) == 0) == mutableDateTime7.equals(dateTime12));
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test005");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField16 = monthDay14.getField((int) (byte) 0);
        java.util.Locale locale20 = new java.util.Locale("", "", "hi!");
        int int21 = dateTimeField16.getMaximumTextLength(locale20);
        long long24 = dateTimeField16.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay25.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField34 = monthDay32.getField((int) (byte) 0);
        java.util.Locale locale38 = new java.util.Locale("", "", "hi!");
        int int39 = dateTimeField34.getMaximumTextLength(locale38);
        java.lang.String str40 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) monthDay25, locale38);
        int int41 = property10.getMaximumTextLength(locale38);
        org.joda.time.DateTimeField dateTimeField42 = property10.getField();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        int int45 = property10.getMaximumTextLength(locale43);
        boolean boolean46 = locale43.hasExtensions();
        java.lang.String str47 = locale43.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter2.withLocale(locale43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter48.withZoneUTC();
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.MonthDay monthDay52 = new org.joda.time.MonthDay(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property58 = dateTime57.hourOfDay();
        org.joda.time.DateTime dateTime60 = dateTime57.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology61 = dateTime60.getChronology();
        org.joda.time.MonthDay monthDay62 = monthDay52.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.millisOfDay();
        boolean boolean65 = durationFieldType50.isSupported(chronology61);
        org.joda.time.DurationField durationField66 = chronology61.millis();
        org.joda.time.DurationField durationField67 = chronology61.eras();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter49.withChronology(chronology61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField66 and durationField67", Math.signum(durationField66.compareTo(durationField67)) == -Math.signum(durationField67.compareTo(durationField66)));
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test006");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(0L);
        java.lang.String str11 = monthDay10.toString();
        org.joda.time.Chronology chronology12 = monthDay10.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime8.withChronology(chronology12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(chronology12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime13", (dateTime8.compareTo(dateTime13) == 0) == dateTime8.equals(dateTime13));
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test007");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.MonthDay monthDay12 = monthDay2.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfDay();
        boolean boolean15 = durationFieldType0.isSupported(chronology11);
        org.joda.time.DurationField durationField16 = chronology11.eras();
        org.joda.time.DurationField durationField17 = chronology11.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField16, durationField17, and durationField16", !(durationField16.compareTo(durationField17) == 0) || (Math.signum(durationField16.compareTo(durationField16)) == Math.signum(durationField17.compareTo(durationField16))));
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test008");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime4.toMutableDateTime(chronology15);
        org.joda.time.Instant instant17 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime19 = dateTime4.withYearOfEra(1970);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant17", (dateTime11.compareTo(instant17) == 0) == dateTime11.equals(instant17));
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test009");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime9.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone12.isStandardOffset(10L);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone12);
        int int17 = dateTimeZone12.getStandardOffset((long) 52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime15", (dateTime9.compareTo(dateTime15) == 0) == dateTime9.equals(dateTime15));
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test010");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withDurationAdded(1L, 52);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear(52);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTime11, dateTimeZone14);
        java.lang.String str16 = dateTimeZone14.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime15", (dateTime11.compareTo(dateTime15) == 0) == dateTime11.equals(dateTime15));
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test011");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        int int14 = property13.getMinimumValueOverall();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test012");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime4.minusSeconds((int) (short) -1);
        org.joda.time.DateTime.Property property16 = dateTime15.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test013");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.minusMinutes(52);
        org.joda.time.DateTime dateTime16 = dateTime14.minusYears(4);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMonths((int) 'x');
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime23.hourOfDay();
        org.joda.time.DateTime dateTime26 = dateTime23.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime28 = dateTime23.withYearOfEra((int) ' ');
        int int29 = dateTime28.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean33 = dateTimeZone31.isStandardOffset(10L);
        org.joda.time.DateTime dateTime34 = dateTime28.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = dateTime16.withZone(dateTimeZone31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and dateTime34", (dateTime28.compareTo(dateTime34) == 0) == dateTime28.equals(dateTime34));
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test014");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        java.lang.Object obj13 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long20 = dateTimeZone16.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(obj13, dateTimeZone16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        java.lang.String str24 = dateTimeZone16.getShortName((long) 12);
        org.joda.time.DateTime dateTime25 = dateTime4.toDateTime(dateTimeZone16);
        java.lang.String str26 = dateTimeZone16.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test015");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.minusMinutes(52);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        long long20 = dateTimeZone16.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime21 = dateTime2.withZone(dateTimeZone16);
        org.joda.time.Instant instant22 = dateTime2.toInstant();
        org.joda.time.DateTime dateTime24 = dateTime2.plus((long) '#');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant22", (dateTime2.compareTo(instant22) == 0) == dateTime2.equals(instant22));
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test016");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.era();
        int int14 = dateTimeField12.getMinimumValue(0L);
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        calendar16.setLenient(true);
        calendar16.setMinimalDaysInFirstWeek(1970);
        int int22 = calendar16.getGreatestMinimum(10);
        java.time.Instant instant23 = calendar16.toInstant();
        java.util.Date date24 = java.util.Date.from(instant23);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.fromDateFields(date24);
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property28 = monthDay27.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property28.getFieldType();
        org.joda.time.DurationField durationField30 = property28.getRangeDurationField();
        org.joda.time.MonthDay monthDay32 = property28.addWrapFieldToCopy((int) ' ');
        int int33 = monthDay25.compareTo((org.joda.time.ReadablePartial) monthDay32);
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale35);
        java.lang.String str37 = locale35.getCountry();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property43 = dateTime42.hourOfDay();
        java.lang.String str44 = property43.getAsShortText();
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay47 = monthDay45.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField49 = monthDay47.getField((int) (byte) 0);
        java.util.Locale locale53 = new java.util.Locale("", "", "hi!");
        int int54 = dateTimeField49.getMaximumTextLength(locale53);
        long long57 = dateTimeField49.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay58 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay60 = monthDay58.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay58.minus(readablePeriod61);
        org.joda.time.MonthDay monthDay63 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay65 = monthDay63.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField67 = monthDay65.getField((int) (byte) 0);
        java.util.Locale locale71 = new java.util.Locale("", "", "hi!");
        int int72 = dateTimeField67.getMaximumTextLength(locale71);
        java.lang.String str73 = dateTimeField49.getAsShortText((org.joda.time.ReadablePartial) monthDay58, locale71);
        int int74 = property43.getMaximumTextLength(locale71);
        java.lang.String str75 = locale35.getDisplayVariant(locale71);
        java.util.Locale locale77 = new java.util.Locale("en-US");
        java.lang.String str78 = locale71.getDisplayLanguage(locale77);
        java.lang.String str79 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) monthDay25, 0, locale71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar16 and calendar36", (calendar16.compareTo(calendar36) == 0) == calendar16.equals(calendar36));
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test017");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays((int) '#');
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = localDate8.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime3.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = dateTime3.plusWeeks(5);
        int int16 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology30 = chronology26.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = chronology26.weekyearOfCentury();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(83968099800000L, chronology26);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime36 = localDate32.toDateTimeAtStartOfDay(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays((int) '#');
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(dateTimeZone43);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = localDate44.toDateTimeAtStartOfDay(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime39.toDateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime51 = dateTime39.plusWeeks(5);
        int int52 = dateTimeZone35.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime3.toMutableDateTime(dateTimeZone35);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 1439, dateTimeZone35);
        long long56 = dateTimeZone35.previousTransition((long) 11);
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and mutableDateTime53", (dateTime3.compareTo(mutableDateTime53) == 0) == dateTime3.equals(mutableDateTime53));
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test018");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay(0L);
        java.lang.String str10 = monthDay9.toString();
        org.joda.time.Chronology chronology11 = monthDay9.getChronology();
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(chronology11);
        int int13 = dateTime2.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and dateTime12", (mutableDateTime7.compareTo(dateTime12) == 0) == mutableDateTime7.equals(dateTime12));
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test019");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate.Property property11 = localDate7.weekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean17 = dateTimeZone15.isStandardOffset(10L);
        java.lang.Object obj18 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long25 = dateTimeZone21.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(obj18, dateTimeZone21);
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTime();
        int int28 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime26);
        long long32 = dateTimeZone15.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime34 = localDate7.toDateTimeAtStartOfDay(dateTimeZone15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and dateTime33", (dateTime26.compareTo(dateTime33) == 0) == dateTime26.equals(dateTime33));
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test020");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        java.lang.String str20 = property19.getAsShortText();
        org.joda.time.MonthDay monthDay21 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay23 = monthDay21.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField25 = monthDay23.getField((int) (byte) 0);
        java.util.Locale locale29 = new java.util.Locale("", "", "hi!");
        int int30 = dateTimeField25.getMaximumTextLength(locale29);
        long long33 = dateTimeField25.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay34 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay36 = monthDay34.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay34.minus(readablePeriod37);
        org.joda.time.MonthDay monthDay39 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay41 = monthDay39.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField43 = monthDay41.getField((int) (byte) 0);
        java.util.Locale locale47 = new java.util.Locale("", "", "hi!");
        int int48 = dateTimeField43.getMaximumTextLength(locale47);
        java.lang.String str49 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) monthDay34, locale47);
        int int50 = property19.getMaximumTextLength(locale47);
        org.joda.time.DateTimeField dateTimeField51 = property19.getField();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(locale52);
        int int54 = property19.getMaximumTextLength(locale52);
        java.lang.String str55 = locale52.getDisplayVariant();
        java.util.Locale locale56 = java.util.Locale.US;
        java.lang.String str57 = locale56.toLanguageTag();
        java.lang.String str58 = locale52.getDisplayName(locale56);
        java.lang.String str59 = locale56.getLanguage();
        java.lang.String str60 = property13.getAsText(locale56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test021");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean15 = dateTime4.isSupported(dateTimeFieldType14);
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType14.getDurationType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test022");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType0.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays((int) '#');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate10.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime5.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = dateTime5.plusWeeks(5);
        org.joda.time.Chronology chronology18 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekyear();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology18);
        boolean boolean21 = durationFieldType2.isSupported(chronology18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays((int) '#');
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone28);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtStartOfDay(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime24.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime24.plusWeeks(5);
        org.joda.time.Chronology chronology37 = dateTime24.getChronology();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology37);
        org.joda.time.DurationField durationField39 = chronology37.minutes();
        org.joda.time.DurationField durationField40 = durationFieldType2.getField(chronology37);
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.now(chronology37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField39 and durationField40", Math.signum(durationField39.compareTo(durationField40)) == -Math.signum(durationField40.compareTo(durationField39)));
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test023");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean3 = dateTimeZone1.isStandardOffset(10L);
        java.lang.Object obj4 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long11 = dateTimeZone7.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj4, dateTimeZone7);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        int int14 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime12);
        long long18 = dateTimeZone1.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay(dateTimeZone1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime19", (dateTime12.compareTo(dateTime19) == 0) == dateTime12.equals(dateTime19));
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test024");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime4.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime4.withYearOfCentury(5);
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = null;
        org.joda.time.format.DateTimeParser dateTimeParser19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser19);
        org.joda.time.Chronology chronology21 = dateTimeFormatter20.getChronology();
        boolean boolean22 = dateTimeFormatter20.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter20.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter20.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter27 = dateTimeFormatter20.getPrinter();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate31 = localDate28.withPeriodAdded(readablePeriod29, (int) (byte) 0);
        org.joda.time.LocalDate.Property property32 = localDate28.year();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 4, dateTimeZone36);
        org.joda.time.DateTime dateTime38 = localDate28.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        java.lang.Object obj39 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long46 = dateTimeZone42.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(obj39, dateTimeZone42);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime37.toMutableDateTime(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter20.withZone(dateTimeZone42);
        java.lang.String str51 = dateTimeZone42.getID();
        org.joda.time.DateTime dateTime52 = dateTime17.toDateTime(dateTimeZone42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test025");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        java.lang.String str7 = property6.getAsShortText();
        org.joda.time.DurationField durationField8 = property6.getDurationField();
        org.joda.time.DateTime dateTime10 = property6.addToCopy((long) 239);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay14 = new org.joda.time.MonthDay(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        int int20 = dateTime17.getWeekyear();
        org.joda.time.DateMidnight dateMidnight21 = dateTime17.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property23 = dateTime17.property(dateTimeFieldType22);
        org.joda.time.DateTime.Property property24 = dateTime17.centuryOfEra();
        org.joda.time.DateTime dateTime26 = dateTime17.withCenturyOfEra(20);
        int int27 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime28 = dateTime10.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-349259996L), dateTimeZone13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime28", (dateTime10.compareTo(dateTime28) == 0) == dateTime10.equals(dateTime28));
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test026");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str2 = locale1.getLanguage();
        java.lang.String str3 = locale0.getDisplayScript(locale1);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale1);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale1);
        boolean boolean6 = calendar5.isWeekDateSupported();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        calendar8.setLenient(true);
        calendar8.setMinimalDaysInFirstWeek(1970);
        int int14 = calendar8.getGreatestMinimum(10);
        java.time.Instant instant15 = calendar8.toInstant();
        calendar8.setLenient(false);
        java.util.TimeZone timeZone18 = calendar8.getTimeZone();
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale19);
        java.lang.String str21 = locale19.getDisplayCountry();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone18, locale19);
        calendar5.setTimeZone(timeZone18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar8", (calendar4.compareTo(calendar8) == 0) == calendar4.equals(calendar8));
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test027");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean3 = dateTimeZone1.isStandardOffset(10L);
        java.lang.Object obj4 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long11 = dateTimeZone7.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj4, dateTimeZone7);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        int int14 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime12);
        long long18 = dateTimeZone1.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str21 = dateTimeZone1.getName(2678400000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime19", (dateTime12.compareTo(dateTime19) == 0) == dateTime12.equals(dateTime19));
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test028");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        calendar1.setLenient(false);
        java.util.TimeZone timeZone11 = calendar1.getTimeZone();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone11, locale12);
        java.lang.String str16 = locale12.getLanguage();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar15", (calendar1.compareTo(calendar15) == 0) == calendar1.equals(calendar15));
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test029");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        int int20 = dateTime17.getWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime17.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime17.plus(readablePeriod23);
        int int25 = property13.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.minus(readableDuration26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(4);
        org.joda.time.Instant instant30 = dateTime27.toInstant();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) dateTime27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant30", (dateTime2.compareTo(instant30) == 0) == dateTime2.equals(instant30));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test030");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(0L);
        java.lang.String str11 = monthDay10.toString();
        org.joda.time.Chronology chronology12 = monthDay10.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime8.withChronology(chronology12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateTime dateTime21 = dateTime16.minusMillis((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays((int) '#');
        boolean boolean27 = dateTime24.isBeforeNow();
        boolean boolean28 = dateTime16.isBefore((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean29 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays((int) '#');
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone36);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtStartOfDay(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime32.toDateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime44 = dateTime32.minusMinutes(52);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(dateTimeZone46);
        long long50 = dateTimeZone46.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime51 = dateTime32.withZone(dateTimeZone46);
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime16.toMutableDateTime(dateTimeZone46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime13", (dateTime8.compareTo(dateTime13) == 0) == dateTime8.equals(dateTime13));
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test031");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.DateTime.Property property23 = dateTime16.centuryOfEra();
        org.joda.time.DateTime dateTime25 = dateTime16.withCenturyOfEra(20);
        int int26 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime27 = dateTime9.toDateTime(dateTimeZone12);
        boolean boolean28 = dateTime9.isEqualNow();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime31 = dateTime9.withDurationAdded(readableDuration29, 21);
        org.joda.time.DateTime dateTime33 = dateTime31.withSecondOfMinute(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime27", (dateTime31.compareTo(dateTime27) == 0) == dateTime31.equals(dateTime27));
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test032");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusMillis(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        java.lang.String str8 = durationFieldType7.getName();
        org.joda.time.DateTime dateTime10 = dateTime6.withFieldAdded(durationFieldType7, 1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone12.isStandardOffset(10L);
        java.lang.Object obj15 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long22 = dateTimeZone18.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(obj15, dateTimeZone18);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTime();
        int int25 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime23);
        long long29 = dateTimeZone12.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime10.toMutableDateTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(3);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(3);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property40 = dateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime41 = dateTime39.toLocalDateTime();
        boolean boolean42 = dateTimeZone34.isLocalDateTimeGap(localDateTime41);
        boolean boolean43 = dateTimeZone32.isLocalDateTimeGap(localDateTime41);
        boolean boolean44 = dateTimeZone12.isLocalDateTimeGap(localDateTime41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and mutableDateTime30", (dateTime10.compareTo(mutableDateTime30) == 0) == dateTime10.equals(mutableDateTime30));
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test033");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime9.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone12.isStandardOffset(10L);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone12);
        java.lang.String str17 = dateTimeZone12.getName(1273616701036000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime15", (dateTime9.compareTo(dateTime15) == 0) == dateTime9.equals(dateTime15));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test034");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.minuteOfDay();
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        calendar18.setLenient(true);
        calendar18.setMinimalDaysInFirstWeek(1970);
        int int24 = calendar18.getGreatestMinimum(10);
        java.time.Instant instant25 = calendar18.toInstant();
        calendar18.setLenient(false);
        java.util.TimeZone timeZone28 = calendar18.getTimeZone();
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale29);
        java.lang.String str31 = locale29.getDisplayCountry();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone28, locale29);
        java.lang.String str33 = dateTimeField15.getAsText(83652552000000L, locale29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar32", (calendar18.compareTo(calendar32) == 0) == calendar18.equals(calendar32));
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test035");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.weekyearOfCentury();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(83968099800000L, chronology9);
        org.joda.time.DateTimeField dateTimeField16 = chronology9.dayOfYear();
        org.joda.time.DurationField durationField17 = chronology9.eras();
        org.joda.time.DurationField durationField18 = chronology9.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField17, durationField18, and durationField17", !(durationField17.compareTo(durationField18) == 0) || (Math.signum(durationField17.compareTo(durationField17)) == Math.signum(durationField18.compareTo(durationField17))));
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test036");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        int int7 = property2.getMaximumTextLength(locale3);
        java.lang.String str8 = property2.getAsString();
        org.joda.time.MonthDay monthDay9 = property2.getMonthDay();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        calendar11.setLenient(true);
        calendar11.setMinimalDaysInFirstWeek(1970);
        int int17 = calendar11.getGreatestMinimum(10);
        java.time.Instant instant18 = calendar11.toInstant();
        calendar11.setLenient(false);
        java.util.TimeZone timeZone21 = calendar11.getTimeZone();
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale22);
        java.lang.String str24 = locale22.getDisplayCountry();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone21, locale22);
        java.lang.String str26 = property2.getAsShortText(locale22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar25", (calendar11.compareTo(calendar25) == 0) == calendar11.equals(calendar25));
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test037");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime4.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime4.withYearOfCentury(5);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours(21);
        boolean boolean27 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test038");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        java.lang.Object obj13 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long20 = dateTimeZone16.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(obj13, dateTimeZone16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        java.lang.String str24 = dateTimeZone16.getShortName((long) 12);
        org.joda.time.DateTime dateTime25 = dateTime4.toDateTime(dateTimeZone16);
        java.lang.String str27 = dateTimeZone16.getShortName(8823412800000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test039");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay3 = new org.joda.time.MonthDay(dateTimeZone2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.lang.Object obj5 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long12 = dateTimeZone8.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(obj5, dateTimeZone8);
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay(0L);
        java.lang.String str16 = monthDay15.toString();
        org.joda.time.Chronology chronology17 = monthDay15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime13.withChronology(chronology17);
        boolean boolean19 = dateTimeZone2.equals((java.lang.Object) chronology17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime18", (dateTime13.compareTo(dateTime18) == 0) == dateTime13.equals(dateTime18));
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test040");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.DateTime.Property property23 = dateTime16.centuryOfEra();
        org.joda.time.DateTime dateTime25 = dateTime16.withCenturyOfEra(20);
        int int26 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime27 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfCentury();
        boolean boolean29 = property28.isLeap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime27", (dateTime9.compareTo(dateTime27) == 0) == dateTime9.equals(dateTime27));
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test041");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType0.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays((int) '#');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate10.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime5.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = dateTime5.plusWeeks(5);
        org.joda.time.Chronology chronology18 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekyear();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology18);
        boolean boolean21 = durationFieldType2.isSupported(chronology18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays((int) '#');
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone28);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtStartOfDay(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime24.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime24.plusWeeks(5);
        org.joda.time.Chronology chronology37 = dateTime24.getChronology();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology37);
        org.joda.time.DurationField durationField39 = chronology37.minutes();
        org.joda.time.DurationField durationField40 = durationFieldType2.getField(chronology37);
        java.lang.String str41 = durationFieldType2.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField39 and durationField40", Math.signum(durationField39.compareTo(durationField40)) == -Math.signum(durationField40.compareTo(durationField39)));
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test042");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getDayOfWeek();
        org.joda.time.DateTime.Property property6 = dateTime2.minuteOfHour();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        calendar8.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar8.set(0, (int) (byte) 10, (int) (short) 10);
        int int19 = calendar8.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(100);
        int int25 = localDate22.size();
        org.joda.time.LocalDate localDate27 = localDate22.plusMonths(6);
        java.util.Date date28 = localDate27.toDate();
        calendar8.setTime(date28);
        java.util.TimeZone timeZone30 = calendar8.getTimeZone();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone30);
        java.util.Locale locale32 = java.util.Locale.UK;
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.lang.String str34 = locale32.getDisplayScript(locale33);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone30, locale33);
        java.lang.String str36 = property6.getAsText(locale33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar31 and calendar35", (calendar31.compareTo(calendar35) == 0) == calendar31.equals(calendar35));
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test043");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime12 = dateTime7.withCenturyOfEra(0);
        int int13 = dateTime12.getYear();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        java.lang.String str20 = property19.getAsShortText();
        org.joda.time.DurationField durationField21 = property19.getDurationField();
        org.joda.time.DateTime dateTime23 = property19.addToCopy((long) 239);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays((int) '#');
        int int33 = dateTime30.getWeekyear();
        org.joda.time.DateMidnight dateMidnight34 = dateTime30.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property36 = dateTime30.property(dateTimeFieldType35);
        org.joda.time.DateTime.Property property37 = dateTime30.centuryOfEra();
        org.joda.time.DateTime dateTime39 = dateTime30.withCenturyOfEra(20);
        int int40 = dateTimeZone26.getOffset((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime41 = dateTime23.toDateTime(dateTimeZone26);
        int int42 = dateTime41.getMillisOfSecond();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property51 = dateTime50.hourOfDay();
        org.joda.time.DateTime dateTime53 = dateTime50.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology54 = dateTime53.getChronology();
        org.joda.time.MonthDay monthDay55 = monthDay45.withChronologyRetainFields(chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology54.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.millisOfDay();
        boolean boolean58 = durationFieldType43.isSupported(chronology54);
        org.joda.time.DateTimeField dateTimeField59 = chronology54.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.Chronology chronology61 = chronology54.withZone(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(chronology54);
        int int63 = dateTime41.compareTo((org.joda.time.ReadableInstant) dateTime62);
        boolean boolean64 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and dateTime41", (dateTime23.compareTo(dateTime41) == 0) == dateTime23.equals(dateTime41));
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test044");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime12.hourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime12.withMillisOfDay(8);
        boolean boolean19 = dateTime12.isAfter((long) 17);
        org.joda.time.Instant instant20 = dateTime12.toInstant();
        org.joda.time.DateTime.Property property21 = dateTime12.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean23 = dateTime12.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDateTime localDateTime24 = dateTime12.toLocalDateTime();
        boolean boolean25 = dateTimeZone6.isLocalDateTimeGap(localDateTime24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant20", (dateTime4.compareTo(instant20) == 0) == dateTime4.equals(instant20));
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test045");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime4.minusSeconds((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        java.lang.String str17 = dateTimeFieldType16.getName();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType16.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays((int) '#');
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone25);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtStartOfDay(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime21.toDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime33 = dateTime21.plusWeeks(5);
        org.joda.time.Chronology chronology34 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.weekyear();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology34);
        boolean boolean37 = durationFieldType18.isSupported(chronology34);
        org.joda.time.DateTime dateTime38 = dateTime4.toDateTime(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property45 = dateTime44.hourOfDay();
        org.joda.time.DateTime dateTime47 = dateTime44.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology48 = dateTime47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology52 = chronology48.withZone(dateTimeZone51);
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.now(chronology48);
        org.joda.time.DateTimeField dateTimeField54 = chronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField55 = chronology48.year();
        org.joda.time.DateTimeField dateTimeField56 = chronology48.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField57 = chronology48.era();
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType39.getField(chronology48);
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(chronology48);
        boolean boolean60 = dateTime38.isAfter((org.joda.time.ReadableInstant) dateTime59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime38 and instant12", (dateTime38.compareTo(instant12) == 0) == dateTime38.equals(instant12));
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test046");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear(100);
        int int14 = localDate11.size();
        org.joda.time.LocalDate localDate16 = localDate11.plusMonths(6);
        int int18 = localDate16.getValue(0);
        java.lang.String str19 = localDate16.toString();
        org.joda.time.LocalDate localDate21 = localDate16.withWeekyear(1);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = localDate21.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTime dateTime30 = dateTime7.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = dateTime7.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime36.hourOfDay();
        org.joda.time.DateTime dateTime39 = dateTime36.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology44 = chronology40.withZone(dateTimeZone43);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(dateTimeZone48);
        long long53 = dateTimeZone48.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 'a', dateTimeZone48);
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(locale56);
        java.lang.String str58 = locale56.getCountry();
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str60 = locale56.getDisplayVariant(locale59);
        java.lang.String str61 = dateTimeZone48.getShortName((long) 20, locale56);
        java.lang.String str62 = locale56.getDisplayScript();
        java.lang.String str63 = locale56.getDisplayName();
        java.lang.String str64 = dateTimeZone43.getShortName((long) 9, locale56);
        org.joda.time.DateTime dateTime65 = dateTime31.toDateTime(dateTimeZone43);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.DateTime dateTime67 = dateTime31.minus(readablePeriod66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime67 and dateTime65", (dateTime67.compareTo(dateTime65) == 0) == dateTime67.equals(dateTime65));
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test047");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.dayOfYear();
        org.joda.time.DurationField durationField14 = chronology10.eras();
        org.joda.time.DurationField durationField15 = chronology10.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField15, and durationField14", !(durationField14.compareTo(durationField15) == 0) || (Math.signum(durationField14.compareTo(durationField14)) == Math.signum(durationField15.compareTo(durationField14))));
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test048");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.DateTime.Property property23 = dateTime16.centuryOfEra();
        org.joda.time.DateTime dateTime25 = dateTime16.withCenturyOfEra(20);
        int int26 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime27 = dateTime9.toDateTime(dateTimeZone12);
        boolean boolean28 = dateTime9.isEqualNow();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime31 = dateTime9.withDurationAdded(readableDuration29, 21);
        org.joda.time.DateTime dateTime33 = dateTime9.plusMonths(15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime9", (dateTime27.compareTo(dateTime9) == 0) == dateTime27.equals(dateTime9));
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test049");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime4.minusSeconds((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        java.lang.String str17 = dateTimeFieldType16.getName();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType16.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays((int) '#');
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone25);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtStartOfDay(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime21.toDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime33 = dateTime21.plusWeeks(5);
        org.joda.time.Chronology chronology34 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.weekyear();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology34);
        boolean boolean37 = durationFieldType18.isSupported(chronology34);
        org.joda.time.DateTime dateTime38 = dateTime4.toDateTime(chronology34);
        org.joda.time.DateTimeField dateTimeField39 = chronology34.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test050");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay(0L);
        java.lang.String str10 = monthDay9.toString();
        org.joda.time.Chronology chronology11 = monthDay9.getChronology();
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.withPeriodAdded(readablePeriod13, 54);
        java.lang.String str17 = dateTime12.toString("8");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime12", (dateTime2.compareTo(dateTime12) == 0) == dateTime2.equals(dateTime12));
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test051");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        int int20 = dateTime17.getWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime17.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime17.plus(readablePeriod23);
        int int25 = property13.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.minus(readableDuration26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(4);
        org.joda.time.Instant instant30 = dateTime27.toInstant();
        org.joda.time.Instant instant31 = dateTime27.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant30", (dateTime2.compareTo(instant30) == 0) == dateTime2.equals(instant30));
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test052");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear(100);
        int int14 = localDate11.size();
        org.joda.time.LocalDate localDate16 = localDate11.plusMonths(6);
        int int18 = localDate16.getValue(0);
        java.lang.String str19 = localDate16.toString();
        org.joda.time.LocalDate localDate21 = localDate16.withWeekyear(1);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = localDate21.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTime dateTime30 = dateTime7.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = dateTime7.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime36.hourOfDay();
        org.joda.time.DateTime dateTime39 = dateTime36.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology44 = chronology40.withZone(dateTimeZone43);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(dateTimeZone48);
        long long53 = dateTimeZone48.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 'a', dateTimeZone48);
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(locale56);
        java.lang.String str58 = locale56.getCountry();
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str60 = locale56.getDisplayVariant(locale59);
        java.lang.String str61 = dateTimeZone48.getShortName((long) 20, locale56);
        java.lang.String str62 = locale56.getDisplayScript();
        java.lang.String str63 = locale56.getDisplayName();
        java.lang.String str64 = dateTimeZone43.getShortName((long) 9, locale56);
        org.joda.time.DateTime dateTime65 = dateTime31.toDateTime(dateTimeZone43);
        org.joda.time.DateTime dateTime67 = dateTime31.plusWeeks(45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime65", (dateTime31.compareTo(dateTime65) == 0) == dateTime31.equals(dateTime65));
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test053");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.MonthDay monthDay12 = monthDay2.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfDay();
        boolean boolean15 = durationFieldType0.isSupported(chronology11);
        org.joda.time.DurationField durationField16 = chronology11.millis();
        org.joda.time.DurationField durationField17 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField17", Math.signum(durationField16.compareTo(durationField17)) == -Math.signum(durationField17.compareTo(durationField16)));
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test054");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.MonthDay monthDay7 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay9 = monthDay7.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField11 = monthDay9.getField((int) (byte) 0);
        java.util.Locale locale15 = new java.util.Locale("", "", "hi!");
        int int16 = dateTimeField11.getMaximumTextLength(locale15);
        long long19 = dateTimeField11.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay22 = monthDay20.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay20.minus(readablePeriod23);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField29 = monthDay27.getField((int) (byte) 0);
        java.util.Locale locale33 = new java.util.Locale("", "", "hi!");
        int int34 = dateTimeField29.getMaximumTextLength(locale33);
        java.lang.String str35 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) monthDay20, locale33);
        int int36 = property5.getMaximumTextLength(locale33);
        org.joda.time.DateTimeField dateTimeField37 = property5.getField();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale38);
        int int40 = property5.getMaximumTextLength(locale38);
        int int41 = property5.getLeapAmount();
        int int42 = property5.getMinimumValue();
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = property5.getAsShortText(locale43);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(locale43);
        org.joda.time.MonthDay monthDay47 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property48 = monthDay47.monthOfYear();
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        int int50 = property48.getMaximumShortTextLength(locale49);
        java.lang.String str51 = locale43.getDisplayVariant(locale49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar39 and calendar45", (calendar39.compareTo(calendar45) == 0) == calendar39.equals(calendar45));
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test055");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withDurationAdded(1L, 52);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear(52);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded(readableDuration12, (int) 'a');
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        int int16 = dateTime14.getDayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant15", (dateTime14.compareTo(instant15) == 0) == dateTime14.equals(instant15));
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test056");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.DateTime.Property property23 = dateTime16.centuryOfEra();
        org.joda.time.DateTime dateTime25 = dateTime16.withCenturyOfEra(20);
        int int26 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime27 = dateTime9.toDateTime(dateTimeZone12);
        boolean boolean28 = dateTime9.isEqualNow();
        org.joda.time.DateTime.Property property29 = dateTime9.millisOfSecond();
        org.joda.time.DateTime dateTime30 = property29.roundFloorCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and dateTime27", (dateTime30.compareTo(dateTime27) == 0) == dateTime30.equals(dateTime27));
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test057");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate localDate6 = localDate4.withWeekOfWeekyear((int) (byte) 1);
        int int7 = localDate6.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime12.hourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(100);
        int int22 = localDate19.size();
        org.joda.time.LocalDate localDate24 = localDate19.plusMonths(6);
        int int26 = localDate24.getValue(0);
        java.lang.String str27 = localDate24.toString();
        org.joda.time.LocalDate localDate29 = localDate24.withWeekyear(1);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(dateTimeZone31);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = localDate32.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = localDate29.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.DateTime dateTime38 = dateTime15.toDateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime39 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property45 = dateTime44.hourOfDay();
        org.joda.time.DateTime dateTime47 = dateTime44.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology48 = dateTime47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology52 = chronology48.withZone(dateTimeZone51);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(dateTimeZone56);
        long long61 = dateTimeZone56.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) 'a', dateTimeZone56);
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(locale64);
        java.lang.String str66 = locale64.getCountry();
        java.util.Locale locale67 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str68 = locale64.getDisplayVariant(locale67);
        java.lang.String str69 = dateTimeZone56.getShortName((long) 20, locale64);
        java.lang.String str70 = locale64.getDisplayScript();
        java.lang.String str71 = locale64.getDisplayName();
        java.lang.String str72 = dateTimeZone51.getShortName((long) 9, locale64);
        org.joda.time.DateTime dateTime73 = dateTime39.toDateTime(dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight74 = localDate6.toDateMidnight(dateTimeZone51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime73", (dateTime15.compareTo(dateTime73) == 0) == dateTime15.equals(dateTime73));
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test058");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime8.getZone();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.getDefault(category13);
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        java.lang.String str17 = locale15.getCountry();
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str19 = locale15.getDisplayVariant(locale18);
        java.util.Locale.setDefault(category13, locale18);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone11, locale18);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar16 and calendar21", (calendar16.compareTo(calendar21) == 0) == calendar16.equals(calendar21));
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test059");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        int int20 = dateTime17.getWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime17.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime17.plus(readablePeriod23);
        int int25 = property13.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = property13.addToCopy((long) 11);
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("fr");
        java.lang.String str30 = property13.getAsShortText(locale29);
        int int31 = property13.get();
        org.joda.time.DateTime dateTime32 = property13.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfEra((int) '4');
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime35.toMutableDateTime(dateTimeZone39);
        org.joda.time.MonthDay monthDay42 = new org.joda.time.MonthDay(0L);
        java.lang.String str43 = monthDay42.toString();
        org.joda.time.Chronology chronology44 = monthDay42.getChronology();
        org.joda.time.DateTime dateTime45 = dateTime35.toDateTime(chronology44);
        int int46 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime45", (dateTime2.compareTo(dateTime45) == 0) == dateTime2.equals(dateTime45));
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test060");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.DateTime.Property property23 = dateTime16.centuryOfEra();
        org.joda.time.DateTime dateTime25 = dateTime16.withCenturyOfEra(20);
        int int26 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime27 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime30 = dateTime9.withDurationAdded((long) ' ', 14399999);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks(16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime27", (dateTime9.compareTo(dateTime27) == 0) == dateTime9.equals(dateTime27));
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test061");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.minuteOfDay();
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.now(chronology4);
        org.joda.time.Chronology chronology7 = monthDay6.getChronology();
        org.joda.time.Chronology chronology8 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.centuryOfEra();
        org.joda.time.DurationField durationField10 = chronology8.eras();
        org.joda.time.DurationField durationField11 = chronology8.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField11, and durationField10", !(durationField10.compareTo(durationField11) == 0) || (Math.signum(durationField10.compareTo(durationField10)) == Math.signum(durationField11.compareTo(durationField10))));
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test062");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology4.eras();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology4.getZone();
        org.joda.time.DurationField durationField8 = chronology4.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField6, durationField8, and durationField6", !(durationField6.compareTo(durationField8) == 0) || (Math.signum(durationField6.compareTo(durationField6)) == Math.signum(durationField8.compareTo(durationField6))));
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test063");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        java.lang.Object obj13 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long20 = dateTimeZone16.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(obj13, dateTimeZone16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        java.lang.String str24 = dateTimeZone16.getShortName((long) 12);
        org.joda.time.DateTime dateTime25 = dateTime4.toDateTime(dateTimeZone16);
        org.joda.time.Instant instant26 = dateTime25.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test064");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime dateTime12 = dateTime9.plusMonths((int) 'x');
        int int13 = dateTime9.getMonthOfYear();
        org.joda.time.Instant instant14 = dateTime9.toInstant();
        org.joda.time.DateTime dateTime16 = dateTime9.withYear(60);
        java.lang.Class<?> wildcardClass17 = dateTime16.getClass();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and instant14", (dateTime9.compareTo(instant14) == 0) == dateTime9.equals(instant14));
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test065");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withPivotYear(52);
        org.joda.time.Chronology chronology13 = dateTimeFormatter12.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = dateTime19.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property27 = dateTime26.hourOfDay();
        org.joda.time.DateTime dateTime29 = dateTime26.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime19.toMutableDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekOfWeekyear();
        org.joda.time.DurationField durationField34 = chronology30.eras();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter12.withChronology(chronology30);
        org.joda.time.DurationField durationField36 = chronology30.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField34, durationField36, and durationField34", !(durationField34.compareTo(durationField36) == 0) || (Math.signum(durationField34.compareTo(durationField34)) == Math.signum(durationField36.compareTo(durationField34))));
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test066");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.MonthDay monthDay12 = monthDay2.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfDay();
        boolean boolean15 = durationFieldType0.isSupported(chronology11);
        org.joda.time.DurationField durationField16 = chronology11.eras();
        org.joda.time.DurationField durationField17 = chronology11.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField16, durationField17, and durationField16", !(durationField16.compareTo(durationField17) == 0) || (Math.signum(durationField16.compareTo(durationField16)) == Math.signum(durationField17.compareTo(durationField16))));
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test067");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime4.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime4.withYearOfCentury(5);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate20.withDayOfYear(100);
        int int23 = localDate20.size();
        org.joda.time.LocalDate localDate25 = localDate20.plusMonths(6);
        org.joda.time.LocalTime localTime26 = null;
        org.joda.time.DateTime dateTime27 = localDate20.toDateTime(localTime26);
        int int28 = dateTime27.getEra();
        org.joda.time.DateTime dateTime30 = dateTime27.plusMonths((int) 'x');
        org.joda.time.DateTime dateTime31 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime.Property property32 = dateTime27.secondOfDay();
        int int33 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test068");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar1.set(0, (int) (byte) 10, (int) (short) 10);
        int int12 = calendar1.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        int int18 = localDate15.size();
        org.joda.time.LocalDate localDate20 = localDate15.plusMonths(6);
        java.util.Date date21 = localDate20.toDate();
        calendar1.setTime(date21);
        java.util.TimeZone timeZone23 = calendar1.getTimeZone();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone23);
        java.util.Locale locale25 = java.util.Locale.UK;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale25.getDisplayScript(locale26);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone23, locale26);
        java.util.Locale locale32 = new java.util.Locale("", "", "hi!");
        java.lang.String str33 = locale26.getDisplayCountry(locale32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar24 and calendar28", (calendar24.compareTo(calendar28) == 0) == calendar24.equals(calendar28));
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test069");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.millisOfDay();
        org.joda.time.DurationField durationField14 = chronology10.days();
        org.joda.time.DurationField durationField15 = chronology10.eras();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField14 and durationField15", Math.signum(durationField14.compareTo(durationField15)) == -Math.signum(durationField15.compareTo(durationField14)));
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test070");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTime dateTime10 = property8.setCopy((int) (short) 100);
        org.joda.time.Instant instant11 = dateTime10.toInstant();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(227, 28);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime10.toMutableDateTime(dateTimeZone14);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now(dateTimeZone14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant11", (dateTime10.compareTo(instant11) == 0) == dateTime10.equals(instant11));
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test071");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withDurationAdded(1L, 52);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear(52);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded(readableDuration12, (int) 'a');
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays(95307);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant15", (dateTime14.compareTo(instant15) == 0) == dateTime14.equals(instant15));
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test072");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.MonthDay monthDay7 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay9 = monthDay7.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField11 = monthDay9.getField((int) (byte) 0);
        java.util.Locale locale15 = new java.util.Locale("", "", "hi!");
        int int16 = dateTimeField11.getMaximumTextLength(locale15);
        long long19 = dateTimeField11.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay22 = monthDay20.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay20.minus(readablePeriod23);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField29 = monthDay27.getField((int) (byte) 0);
        java.util.Locale locale33 = new java.util.Locale("", "", "hi!");
        int int34 = dateTimeField29.getMaximumTextLength(locale33);
        java.lang.String str35 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) monthDay20, locale33);
        int int36 = property5.getMaximumTextLength(locale33);
        org.joda.time.DateTimeField dateTimeField37 = property5.getField();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale38);
        int int40 = property5.getMaximumTextLength(locale38);
        java.lang.String str41 = locale38.getDisplayVariant();
        java.util.Locale locale42 = java.util.Locale.US;
        java.lang.String str43 = locale42.toLanguageTag();
        java.lang.String str44 = locale38.getDisplayName(locale42);
        java.lang.String str45 = locale42.getLanguage();
        java.util.Set<java.lang.Character> charSet46 = locale42.getExtensionKeys();
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(locale42);
        java.util.Locale locale48 = java.util.Locale.ITALY;
        java.lang.String str49 = locale48.getVariant();
        java.lang.String str50 = locale42.getDisplayVariant(locale48);
        java.util.Locale locale51 = java.util.Locale.UK;
        java.lang.String str52 = locale42.getDisplayVariant(locale51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar39 and calendar47", (calendar39.compareTo(calendar47) == 0) == calendar39.equals(calendar47));
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test073");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime8.getZone();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.getDefault(category13);
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        java.lang.String str17 = locale15.getCountry();
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str19 = locale15.getDisplayVariant(locale18);
        java.util.Locale.setDefault(category13, locale18);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone11, locale18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property27 = dateTime26.hourOfDay();
        org.joda.time.DateTime dateTime29 = dateTime26.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime31 = dateTime26.withYearOfEra((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int33 = dateTime26.get(dateTimeFieldType32);
        org.joda.time.DateTime dateTime35 = dateTime26.minusMonths((int) (byte) 10);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone37);
        org.joda.time.LocalDate localDate40 = localDate38.withDayOfYear(100);
        org.joda.time.Interval interval41 = localDate40.toInterval();
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.days();
        java.lang.String str43 = durationFieldType42.getName();
        org.joda.time.LocalDate localDate45 = localDate40.withFieldAdded(durationFieldType42, 32770);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDate localDate47 = localDate40.plus(readablePeriod46);
        org.joda.time.LocalDate localDate49 = localDate47.withDayOfMonth(23);
        java.util.Locale locale50 = java.util.Locale.UK;
        boolean boolean51 = localDate47.equals((java.lang.Object) locale50);
        java.lang.String str52 = locale50.getScript();
        java.util.Calendar calendar53 = dateTime35.toCalendar(locale50);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone11, locale50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar16 and calendar21", (calendar16.compareTo(calendar21) == 0) == calendar16.equals(calendar21));
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test074");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours(21);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime16 = dateTime13.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime18 = dateTime13.withMillisOfDay(8);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.LocalDate localDate23 = localDate21.withDayOfYear(100);
        org.joda.time.LocalDate.Property property24 = localDate21.dayOfMonth();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        org.joda.time.LocalDate localDate27 = property24.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate28 = property24.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property24.getFieldType();
        org.joda.time.LocalDate localDate30 = property24.roundHalfFloorCopy();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone32);
        org.joda.time.LocalDate localDate35 = localDate33.withDayOfYear(100);
        org.joda.time.Interval interval36 = localDate35.toInterval();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate35.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.era();
        int int42 = localDate35.get(dateTimeFieldType41);
        boolean boolean43 = localDate30.isSupported(dateTimeFieldType41);
        boolean boolean44 = dateTime13.isSupported(dateTimeFieldType41);
        boolean boolean45 = dateTime6.isSupported(dateTimeFieldType41);
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType41.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusDays((int) '#');
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(dateTimeZone53);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = localDate54.toDateTimeAtStartOfDay(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime49.toDateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime61 = dateTime49.plusWeeks(5);
        org.joda.time.Chronology chronology62 = dateTime49.getChronology();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.millisOfDay();
        org.joda.time.DurationField durationField66 = chronology62.weeks();
        org.joda.time.DurationField durationField67 = durationFieldType46.getField(chronology62);
        org.joda.time.Chronology chronology68 = chronology62.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField66 and durationField67", Math.signum(durationField66.compareTo(durationField67)) == -Math.signum(durationField67.compareTo(durationField66)));
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test075");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime4.minusSeconds((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        java.lang.String str17 = dateTimeFieldType16.getName();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType16.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays((int) '#');
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone25);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtStartOfDay(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime21.toDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime33 = dateTime21.plusWeeks(5);
        org.joda.time.Chronology chronology34 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.weekyear();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology34);
        boolean boolean37 = durationFieldType18.isSupported(chronology34);
        org.joda.time.DateTime dateTime38 = dateTime4.toDateTime(chronology34);
        org.joda.time.DurationField durationField39 = chronology34.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test076");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) 239);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.minus(readablePeriod2);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.parse("1969-12-31T23:59:59.999Z");
        org.joda.time.DateTime dateTime7 = dateTime5.plusYears(17);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay(dateTimeZone8);
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay13 = monthDay11.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay11.minus(readablePeriod14);
        org.joda.time.MonthDay.Property property16 = monthDay11.dayOfMonth();
        java.lang.String str17 = property16.toString();
        java.util.Locale locale18 = null;
        int int19 = property16.getMaximumShortTextLength(locale18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime24.hourOfDay();
        java.lang.String str26 = property25.getAsShortText();
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay29 = monthDay27.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField31 = monthDay29.getField((int) (byte) 0);
        java.util.Locale locale35 = new java.util.Locale("", "", "hi!");
        int int36 = dateTimeField31.getMaximumTextLength(locale35);
        long long39 = dateTimeField31.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay40 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay42 = monthDay40.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay40.minus(readablePeriod43);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay47 = monthDay45.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField49 = monthDay47.getField((int) (byte) 0);
        java.util.Locale locale53 = new java.util.Locale("", "", "hi!");
        int int54 = dateTimeField49.getMaximumTextLength(locale53);
        java.lang.String str55 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) monthDay40, locale53);
        int int56 = property25.getMaximumTextLength(locale53);
        org.joda.time.DateTimeField dateTimeField57 = property25.getField();
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(locale58);
        int int60 = property25.getMaximumTextLength(locale58);
        boolean boolean61 = locale58.hasExtensions();
        java.lang.String str62 = locale58.getDisplayCountry();
        boolean boolean63 = locale58.hasExtensions();
        int int64 = property16.getMaximumShortTextLength(locale58);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = property16.getFieldType();
        boolean boolean66 = monthDay9.isSupported(dateTimeFieldType65);
        int int67 = dateTime5.get(dateTimeFieldType65);
        org.joda.time.MonthDay.Property property68 = monthDay1.property(dateTimeFieldType65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime22", (dateTime5.compareTo(dateTime22) == 0) == dateTime5.equals(dateTime22));
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test077");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType0.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays((int) '#');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate10.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime5.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = dateTime5.plusWeeks(5);
        org.joda.time.Chronology chronology18 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekyear();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology18);
        boolean boolean21 = durationFieldType2.isSupported(chronology18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays((int) '#');
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone28);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtStartOfDay(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime24.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime24.plusWeeks(5);
        org.joda.time.Chronology chronology37 = dateTime24.getChronology();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology37);
        org.joda.time.DurationField durationField39 = chronology37.minutes();
        org.joda.time.DurationField durationField40 = durationFieldType2.getField(chronology37);
        org.joda.time.DateTimeField dateTimeField41 = chronology37.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField39 and durationField40", Math.signum(durationField39.compareTo(durationField40)) == -Math.signum(durationField40.compareTo(durationField39)));
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test078");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property8 = dateTime2.property(dateTimeFieldType7);
        org.joda.time.DateTime.Property property9 = dateTime2.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays((int) '#');
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localDate17.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime12.toDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime24 = dateTime12.plusWeeks(5);
        org.joda.time.DateTime dateTime26 = dateTime12.minusMillis(13);
        int int27 = property9.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Instant instant28 = dateTime26.toInstant();
        int int29 = dateTime26.getDayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime26.toMutableDateTime();
        org.joda.time.LocalDate localDate31 = dateTime26.toLocalDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant28 and mutableDateTime30", (instant28.compareTo(mutableDateTime30) == 0) == instant28.equals(mutableDateTime30));
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test079");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime9.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone12.isStandardOffset(10L);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = dateTime21.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology29 = chronology25.withZone(dateTimeZone28);
        org.joda.time.DurationField durationField30 = chronology25.weeks();
        org.joda.time.DateTimeField dateTimeField31 = chronology25.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = chronology25.hourOfHalfday();
        int int33 = dateTimeField32.getMaximumValue();
        java.util.Locale locale35 = java.util.Locale.US;
        java.lang.String str36 = dateTimeField32.getAsShortText(1, locale35);
        java.lang.String str37 = dateTimeZone12.getShortName(17L, locale35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime15", (dateTime9.compareTo(dateTime15) == 0) == dateTime9.equals(dateTime15));
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test080");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.now(dateTimeZone6);
        int int10 = dateTimeZone6.getOffsetFromLocal((-60494601600001L));
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.now(dateTimeZone6);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime23 = dateTime18.minusDays((int) 'u');
        org.joda.time.Instant instant24 = dateTime18.toInstant();
        boolean boolean25 = mutableDateTime13.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant24", (dateTime4.compareTo(instant24) == 0) == dateTime4.equals(instant24));
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test081");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        int int7 = property2.getMaximumTextLength(locale3);
        org.joda.time.DurationField durationField8 = property2.getDurationField();
        int int9 = property2.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField10 = property2.getField();
        org.joda.time.DateTimeField dateTimeField11 = property2.getField();
        int int12 = property2.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) '4');
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime15.toMutableDateTime(dateTimeZone19);
        java.util.TimeZone timeZone21 = dateTimeZone19.toTimeZone();
        org.joda.time.MonthDay monthDay23 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property24 = monthDay23.monthOfYear();
        org.joda.time.MonthDay monthDay26 = property24.addToCopy((int) ' ');
        int int27 = property24.get();
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale28);
        java.lang.String str30 = locale28.getCountry();
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str32 = locale28.getDisplayVariant(locale31);
        java.lang.String str33 = property24.getAsShortText(locale28);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone21, locale28);
        java.lang.String str35 = property2.getAsText(locale28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar29 and calendar34", (calendar29.compareTo(calendar34) == 0) == calendar29.equals(calendar34));
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test082");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.MonthDay monthDay12 = monthDay2.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfDay();
        boolean boolean15 = durationFieldType0.isSupported(chronology11);
        org.joda.time.DurationField durationField16 = chronology11.millis();
        org.joda.time.DurationField durationField17 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField17", Math.signum(durationField16.compareTo(durationField17)) == -Math.signum(durationField17.compareTo(durationField16)));
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test083");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType0.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology15 = chronology11.withZone(dateTimeZone14);
        org.joda.time.DurationField durationField16 = chronology11.weeks();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType0.getField(chronology11);
        org.joda.time.DurationField durationField20 = dateTimeField19.getDurationField();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(100);
        int int26 = localDate23.size();
        org.joda.time.LocalDate localDate28 = localDate23.plusMonths(6);
        int int30 = localDate28.getValue(0);
        java.lang.String str31 = localDate28.toString();
        org.joda.time.LocalDate.Property property32 = localDate28.dayOfMonth();
        int int33 = localDate28.getDayOfMonth();
        org.joda.time.MonthDay monthDay35 = new org.joda.time.MonthDay(0L);
        java.lang.String str36 = monthDay35.toString();
        org.joda.time.Chronology chronology37 = monthDay35.getChronology();
        org.joda.time.Chronology chronology38 = monthDay35.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.minuteOfDay();
        java.util.Locale locale41 = java.util.Locale.US;
        java.lang.String str42 = dateTimeField39.getAsShortText(365L, locale41);
        java.lang.String str43 = locale41.getVariant();
        java.lang.String str44 = dateTimeField19.getAsText((org.joda.time.ReadablePartial) localDate28, locale41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField20", Math.signum(durationField16.compareTo(durationField20)) == -Math.signum(durationField20.compareTo(durationField16)));
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test084");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology14 = chronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.weekyearOfCentury();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(83968099800000L, chronology10);
        org.joda.time.DurationField durationField17 = durationFieldType0.getField(chronology10);
        org.joda.time.DurationField durationField18 = chronology10.eras();
        org.joda.time.DurationField durationField19 = chronology10.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField17 and durationField18", Math.signum(durationField17.compareTo(durationField18)) == -Math.signum(durationField18.compareTo(durationField17)));
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test085");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays((int) '#');
        int int6 = dateTime3.getWeekyear();
        org.joda.time.DateTime dateTime8 = dateTime3.minusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime11 = property9.setCopy((int) (short) 100);
        org.joda.time.Instant instant12 = dateTime11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(227, 28);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime11.toMutableDateTime(dateTimeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 1051, dateTimeZone15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant12", (dateTime11.compareTo(instant12) == 0) == dateTime11.equals(instant12));
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test086");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.now(chronology9);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField16 = chronology9.millis();
        org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay(obj0, chronology9);
        org.joda.time.DurationField durationField18 = chronology9.eras();
        org.joda.time.DurationField durationField19 = chronology9.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField18", Math.signum(durationField16.compareTo(durationField18)) == -Math.signum(durationField18.compareTo(durationField16)));
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test087");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay(0L);
        java.lang.String str10 = monthDay9.toString();
        org.joda.time.Chronology chronology11 = monthDay9.getChronology();
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(chronology11);
        org.joda.time.DurationField durationField13 = chronology11.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime12", (dateTime2.compareTo(dateTime12) == 0) == dateTime2.equals(dateTime12));
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test088");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology14 = chronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.weekyearOfCentury();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(83968099800000L, chronology10);
        org.joda.time.DurationField durationField17 = durationFieldType0.getField(chronology10);
        org.joda.time.DurationField durationField18 = chronology10.eras();
        org.joda.time.DurationField durationField19 = chronology10.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField19 and durationField18", Math.signum(durationField19.compareTo(durationField18)) == -Math.signum(durationField18.compareTo(durationField19)));
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test089");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType0.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays((int) '#');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate10.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime5.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = dateTime5.plusWeeks(5);
        org.joda.time.Chronology chronology18 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekyear();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology18);
        boolean boolean21 = durationFieldType2.isSupported(chronology18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays((int) '#');
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone28);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtStartOfDay(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime24.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime24.plusWeeks(5);
        org.joda.time.Chronology chronology37 = dateTime24.getChronology();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology37);
        org.joda.time.DurationField durationField39 = chronology37.minutes();
        org.joda.time.DurationField durationField40 = durationFieldType2.getField(chronology37);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusDays((int) '#');
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(dateTimeZone47);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = localDate48.toDateTimeAtStartOfDay(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime43.toDateTime(dateTimeZone50);
        org.joda.time.DateTime dateTime55 = dateTime43.plusWeeks(5);
        org.joda.time.Chronology chronology56 = dateTime43.getChronology();
        org.joda.time.Chronology chronology57 = dateTime43.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.months();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.dayOfWeek();
        boolean boolean60 = durationFieldType2.isSupported(chronology57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField39 and durationField40", Math.signum(durationField39.compareTo(durationField40)) == -Math.signum(durationField40.compareTo(durationField39)));
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test090");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(0L);
        java.lang.String str11 = monthDay10.toString();
        org.joda.time.Chronology chronology12 = monthDay10.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime8.withChronology(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = chronology12.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime13", (dateTime8.compareTo(dateTime13) == 0) == dateTime8.equals(dateTime13));
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test091");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        org.joda.time.LocalDate.Property property10 = localDate2.weekyear();
        org.joda.time.LocalDate localDate11 = property10.roundCeilingCopy();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime17.hourOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime20.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime25 = dateTime20.withCenturyOfEra(0);
        int int26 = dateTime20.getSecondOfDay();
        org.joda.time.LocalTime localTime27 = dateTime20.toLocalTime();
        java.lang.Object obj28 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long35 = dateTimeZone31.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(obj28, dateTimeZone31);
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime36.getZone();
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = locale42.getCountry();
        java.lang.String str44 = dateTimeZone40.getName((-123075459313645000L), locale42);
        org.joda.time.DateTime dateTime45 = localDate11.toDateTime(localTime27, dateTimeZone40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime36", (dateTime9.compareTo(dateTime36) == 0) == dateTime9.equals(dateTime36));
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test092");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay(0L);
        java.lang.String str10 = monthDay9.toString();
        org.joda.time.Chronology chronology11 = monthDay9.getChronology();
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.withPeriodAdded(readablePeriod13, 54);
        org.joda.time.DateTime.Property property16 = dateTime12.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime12", (dateTime2.compareTo(dateTime12) == 0) == dateTime2.equals(dateTime12));
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test093");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        java.util.TimeZone timeZone8 = dateTimeZone6.toTimeZone();
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property11 = monthDay10.monthOfYear();
        org.joda.time.MonthDay monthDay13 = property11.addToCopy((int) ' ');
        int int14 = property11.get();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        java.lang.String str17 = locale15.getCountry();
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str19 = locale15.getDisplayVariant(locale18);
        java.lang.String str20 = property11.getAsShortText(locale15);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone8, locale15);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar16 and calendar21", (calendar16.compareTo(calendar21) == 0) == calendar16.equals(calendar21));
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test094");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        java.util.TimeZone timeZone8 = dateTimeZone6.toTimeZone();
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property11 = monthDay10.monthOfYear();
        org.joda.time.MonthDay monthDay13 = property11.addToCopy((int) ' ');
        int int14 = property11.get();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        java.lang.String str17 = locale15.getCountry();
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str19 = locale15.getDisplayVariant(locale18);
        java.lang.String str20 = property11.getAsShortText(locale15);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone8, locale15);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = locale22.getDisplayLanguage();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone8, locale22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar16 and calendar21", (calendar16.compareTo(calendar21) == 0) == calendar16.equals(calendar21));
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test095");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.minusMinutes(52);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        long long20 = dateTimeZone16.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime21 = dateTime2.withZone(dateTimeZone16);
        org.joda.time.Instant instant22 = dateTime2.toInstant();
        org.joda.time.DateTime dateTime24 = dateTime2.minusYears(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and instant22", (dateTime24.compareTo(instant22) == 0) == dateTime24.equals(instant22));
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test096");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        int int14 = property13.getMaximumValue();
        org.joda.time.DateTime dateTime16 = property13.addToCopy((long) (byte) -1);
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.DateTime dateTime19 = property17.roundFloorCopy();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(100);
        int int25 = localDate22.size();
        org.joda.time.LocalDate localDate27 = localDate22.plusMonths(6);
        org.joda.time.LocalTime localTime28 = null;
        org.joda.time.DateTime dateTime29 = localDate22.toDateTime(localTime28);
        int int30 = dateTime29.getEra();
        org.joda.time.DateTime dateTime32 = dateTime29.withYear(26);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.minus(readableDuration33);
        long long35 = property17.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime.Property property36 = dateTime32.centuryOfEra();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(dateTimeZone38);
        org.joda.time.LocalDate localDate41 = localDate39.withDayOfYear(100);
        org.joda.time.Interval interval42 = localDate41.toInterval();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.days();
        java.lang.String str44 = durationFieldType43.getName();
        org.joda.time.LocalDate localDate46 = localDate41.withFieldAdded(durationFieldType43, 32770);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.plus(readablePeriod50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property54 = dateTime53.dayOfWeek();
        org.joda.time.DateTime dateTime55 = localDate41.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean59 = dateTimeZone57.isStandardOffset(10L);
        java.lang.Object obj60 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long67 = dateTimeZone63.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(obj60, dateTimeZone63);
        org.joda.time.DateTime dateTime69 = dateTime68.toDateTime();
        int int70 = dateTimeZone57.getOffset((org.joda.time.ReadableInstant) dateTime68);
        long long74 = dateTimeZone57.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.LocalDate localDate75 = org.joda.time.LocalDate.now(dateTimeZone57);
        java.util.TimeZone timeZone76 = null;
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forTimeZone(timeZone76);
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate(dateTimeZone77);
        long long81 = dateTimeZone77.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime82 = localDate75.toDateTimeAtCurrentTime(dateTimeZone77);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((java.lang.Object) dateTime53, dateTimeZone77);
        org.joda.time.DateTime dateTime84 = dateTime32.withZone(dateTimeZone77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime29 and dateTime68", (dateTime29.compareTo(dateTime68) == 0) == dateTime29.equals(dateTime68));
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test097");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays((int) '#');
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(dateTimeZone8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = localDate9.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime4.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime4.plusWeeks(5);
        int int17 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime23.hourOfDay();
        org.joda.time.DateTime dateTime26 = dateTime23.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology31 = chronology27.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = chronology27.weekyearOfCentury();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(83968099800000L, chronology27);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime37 = localDate33.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays((int) '#');
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(dateTimeZone44);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = localDate45.toDateTimeAtStartOfDay(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime40.toDateTime(dateTimeZone47);
        org.joda.time.DateTime dateTime52 = dateTime40.plusWeeks(5);
        int int53 = dateTimeZone36.getOffset((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime4.toMutableDateTime(dateTimeZone36);
        long long56 = dateTimeZone1.getMillisKeepLocal(dateTimeZone36, (long) 365);
        java.lang.String str58 = dateTimeZone1.getNameKey(83652552000000L);
        org.joda.time.LocalDate localDate59 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime54", (dateTime4.compareTo(mutableDateTime54) == 0) == dateTime4.equals(mutableDateTime54));
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test098");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime4.toMutableDateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology15.eras();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.millisOfDay();
        org.joda.time.DurationField durationField22 = dateTimeField21.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField19, durationField22, and durationField19", !(durationField19.compareTo(durationField22) == 0) || (Math.signum(durationField19.compareTo(durationField19)) == Math.signum(durationField22.compareTo(durationField19))));
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test099");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.withDayOfYear(100);
        int int6 = localDate3.size();
        org.joda.time.LocalDate localDate8 = localDate3.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) '#');
        int int14 = dateTime11.getWeekyear();
        org.joda.time.DateMidnight dateMidnight15 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property17 = dateTime11.property(dateTimeFieldType16);
        org.joda.time.LocalDate.Property property18 = localDate8.property(dateTimeFieldType16);
        java.lang.String str19 = localDate8.toString();
        org.joda.time.LocalDate localDate21 = localDate8.minusYears(4);
        org.joda.time.LocalDate localDate23 = localDate21.plusWeeks(229);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays((int) '#');
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone30);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = localDate31.toDateTimeAtStartOfDay(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime26.toDateTime(dateTimeZone33);
        java.lang.Object obj37 = null;
        boolean boolean38 = dateTimeZone33.equals(obj37);
        int int40 = dateTimeZone33.getStandardOffset((long) 0);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDate localDate44 = localDate41.withPeriodAdded(readablePeriod42, (int) (byte) 0);
        org.joda.time.LocalDate.Property property45 = localDate41.year();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 4, dateTimeZone49);
        org.joda.time.DateTime dateTime51 = localDate41.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        java.lang.Object obj52 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long59 = dateTimeZone55.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(obj52, dateTimeZone55);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime50.toMutableDateTime(dateTimeZone55);
        int int63 = dateTimeZone33.getOffset((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateMidnight dateMidnight64 = localDate23.toDateMidnight(dateTimeZone33);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) 1970, dateTimeZone33);
        java.util.Locale locale67 = null;
        java.lang.String str68 = dateTimeZone33.getShortName((-62180539200000L), locale67);
        long long71 = dateTimeZone33.convertLocalToUTC((-58474832460001L), false);
        int int73 = dateTimeZone33.getOffsetFromLocal((-9193325335413479000L));
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone75);
        org.joda.time.DateTime dateTime78 = dateTime76.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property79 = dateTime78.hourOfDay();
        org.joda.time.DateTime dateTime81 = dateTime78.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime83 = dateTime78.withMillisOfDay(8);
        boolean boolean85 = dateTime78.isAfter((long) 17);
        org.joda.time.Instant instant86 = dateTime78.toInstant();
        org.joda.time.DateTime.Property property87 = dateTime78.dayOfYear();
        org.joda.time.DateTime dateTime89 = dateTime78.minusSeconds((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime90 = dateTime78.toLocalDateTime();
        boolean boolean91 = dateTimeZone33.isLocalDateTimeGap(localDateTime90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime78 and instant86", (dateTime78.compareTo(instant86) == 0) == dateTime78.equals(instant86));
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test100");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(0L);
        java.lang.String str11 = monthDay10.toString();
        org.joda.time.Chronology chronology12 = monthDay10.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime8.withChronology(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime13", (dateTime8.compareTo(dateTime13) == 0) == dateTime8.equals(dateTime13));
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test101");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        java.lang.String str6 = durationFieldType5.getName();
        org.joda.time.DateTime dateTime8 = dateTime4.withFieldAdded(durationFieldType5, (int) 'u');
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate12 = localDate9.withPeriodAdded(readablePeriod10, (int) (byte) 0);
        int int13 = localDate12.getYearOfCentury();
        boolean boolean15 = localDate12.equals((java.lang.Object) 32762L);
        org.joda.time.Chronology chronology16 = localDate12.getChronology();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime8.toMutableDateTime(chronology16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        long long30 = dateTimeField22.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay33 = monthDay31.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay31.minus(readablePeriod34);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay38 = monthDay36.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField40 = monthDay38.getField((int) (byte) 0);
        java.util.Locale locale44 = new java.util.Locale("", "", "hi!");
        int int45 = dateTimeField40.getMaximumTextLength(locale44);
        java.lang.String str46 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) monthDay31, locale44);
        int[] intArray47 = monthDay31.getValues();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MonthDay monthDay50 = monthDay31.withPeriodAdded(readablePeriod48, 59);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property56 = dateTime55.hourOfDay();
        org.joda.time.DateTime dateTime58 = dateTime55.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology59 = dateTime58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology63 = chronology59.withZone(dateTimeZone62);
        org.joda.time.MonthDay monthDay64 = org.joda.time.MonthDay.now(chronology59);
        org.joda.time.DateTimeField dateTimeField65 = chronology59.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField66 = chronology59.year();
        org.joda.time.DateTimeField dateTimeField67 = chronology59.minuteOfDay();
        org.joda.time.MonthDay monthDay68 = monthDay50.withChronologyRetainFields(chronology59);
        org.joda.time.MonthDay monthDay69 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay71 = monthDay69.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField73 = monthDay71.getField((int) (byte) 0);
        java.util.Locale locale77 = new java.util.Locale("", "", "hi!");
        int int78 = dateTimeField73.getMaximumTextLength(locale77);
        long long81 = dateTimeField73.add((long) 9, (long) (short) 0);
        org.joda.time.DurationField durationField82 = dateTimeField73.getLeapDurationField();
        org.joda.time.DurationField durationField83 = dateTimeField73.getLeapDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = dateTimeField73.getType();
        boolean boolean85 = monthDay50.isSupported(dateTimeFieldType84);
        java.lang.String str86 = monthDay50.toString();
        int[] intArray87 = monthDay50.getValues();
        long long89 = chronology16.set((org.joda.time.ReadablePartial) monthDay50, (long) 2922789);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime17", (dateTime8.compareTo(mutableDateTime17) == 0) == dateTime8.equals(mutableDateTime17));
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test102");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.weekyearOfCentury();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(83968099800000L, chronology9);
        org.joda.time.DateTimeField dateTimeField16 = chronology9.dayOfYear();
        org.joda.time.DurationField durationField17 = chronology9.eras();
        org.joda.time.DurationField durationField18 = chronology9.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField17, durationField18, and durationField17", !(durationField17.compareTo(durationField18) == 0) || (Math.signum(durationField17.compareTo(durationField17)) == Math.signum(durationField18.compareTo(durationField17))));
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test103");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        java.lang.Object obj13 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long20 = dateTimeZone16.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(obj13, dateTimeZone16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        java.lang.String str24 = dateTimeZone16.getShortName((long) 12);
        org.joda.time.DateTime dateTime25 = dateTime4.toDateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test104");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.DateTime.Property property23 = dateTime16.centuryOfEra();
        org.joda.time.DateTime dateTime25 = dateTime16.withCenturyOfEra(20);
        int int26 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime27 = dateTime9.toDateTime(dateTimeZone12);
        int int28 = dateTime27.getMillisOfSecond();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime36.hourOfDay();
        org.joda.time.DateTime dateTime39 = dateTime36.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.MonthDay monthDay41 = monthDay31.withChronologyRetainFields(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.millisOfDay();
        boolean boolean44 = durationFieldType29.isSupported(chronology40);
        org.joda.time.DateTimeField dateTimeField45 = chronology40.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = chronology40.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(chronology40);
        int int49 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean51 = dateTime48.isBefore((long) (-292275055));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime27", (dateTime9.compareTo(dateTime27) == 0) == dateTime9.equals(dateTime27));
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test105");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.MonthDay monthDay7 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay9 = monthDay7.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField11 = monthDay9.getField((int) (byte) 0);
        java.util.Locale locale15 = new java.util.Locale("", "", "hi!");
        int int16 = dateTimeField11.getMaximumTextLength(locale15);
        long long19 = dateTimeField11.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay22 = monthDay20.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay20.minus(readablePeriod23);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField29 = monthDay27.getField((int) (byte) 0);
        java.util.Locale locale33 = new java.util.Locale("", "", "hi!");
        int int34 = dateTimeField29.getMaximumTextLength(locale33);
        java.lang.String str35 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) monthDay20, locale33);
        int int36 = property5.getMaximumTextLength(locale33);
        org.joda.time.DateTimeField dateTimeField37 = property5.getField();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale38);
        int int40 = property5.getMaximumTextLength(locale38);
        java.lang.String str41 = locale38.getDisplayVariant();
        java.util.Locale locale42 = java.util.Locale.US;
        java.lang.String str43 = locale42.toLanguageTag();
        java.lang.String str44 = locale38.getDisplayName(locale42);
        java.lang.String str45 = locale42.getLanguage();
        java.util.Set<java.lang.Character> charSet46 = locale42.getExtensionKeys();
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(locale42);
        java.util.Locale locale48 = java.util.Locale.ITALY;
        java.lang.String str49 = locale48.getVariant();
        java.lang.String str50 = locale42.getDisplayVariant(locale48);
        java.util.Locale.setDefault(locale42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar39 and calendar47", (calendar39.compareTo(calendar47) == 0) == calendar39.equals(calendar47));
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test106");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.plus(readablePeriod11);
        boolean boolean13 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) dateTime2);
        org.joda.time.DateTime dateTime16 = dateTime2.withSecondOfMinute(59);
        int int17 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime19 = dateTime2.plusWeeks(14403);
        boolean boolean21 = dateTime2.equals((java.lang.Object) "2022");
        org.joda.time.Instant instant22 = dateTime2.toInstant();
        int int23 = dateTime2.getYearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant22", (dateTime2.compareTo(instant22) == 0) == dateTime2.equals(instant22));
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test107");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.MonthDay monthDay12 = monthDay2.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfDay();
        boolean boolean15 = durationFieldType0.isSupported(chronology11);
        org.joda.time.DurationField durationField16 = chronology11.millis();
        org.joda.time.DurationField durationField17 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField17", Math.signum(durationField16.compareTo(durationField17)) == -Math.signum(durationField17.compareTo(durationField16)));
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test108");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime9.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone12.isStandardOffset(10L);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.DateTime.Property property16 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime18 = property16.addToCopy(2730);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime15", (dateTime9.compareTo(dateTime15) == 0) == dateTime9.equals(dateTime15));
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test109");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.lang.String str3 = property2.getAsText();
        int int4 = property2.get();
        int int5 = property2.getMaximumValueOverall();
        int int6 = property2.get();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.MonthDay monthDay14 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay16 = monthDay14.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField18 = monthDay16.getField((int) (byte) 0);
        java.util.Locale locale22 = new java.util.Locale("", "", "hi!");
        int int23 = dateTimeField18.getMaximumTextLength(locale22);
        long long26 = dateTimeField18.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay29 = monthDay27.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay27.minus(readablePeriod30);
        org.joda.time.MonthDay monthDay32 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay34 = monthDay32.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField36 = monthDay34.getField((int) (byte) 0);
        java.util.Locale locale40 = new java.util.Locale("", "", "hi!");
        int int41 = dateTimeField36.getMaximumTextLength(locale40);
        java.lang.String str42 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) monthDay27, locale40);
        int int43 = property12.getMaximumTextLength(locale40);
        org.joda.time.DateTimeField dateTimeField44 = property12.getField();
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(locale45);
        int int47 = property12.getMaximumTextLength(locale45);
        java.lang.String str48 = locale45.getDisplayVariant();
        java.util.Locale locale49 = java.util.Locale.US;
        java.lang.String str50 = locale49.toLanguageTag();
        java.lang.String str51 = locale45.getDisplayName(locale49);
        java.lang.String str52 = locale49.getLanguage();
        java.util.Set<java.lang.Character> charSet53 = locale49.getExtensionKeys();
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(locale49);
        java.util.Locale locale55 = java.util.Locale.ITALY;
        java.lang.String str56 = locale55.getVariant();
        java.lang.String str57 = locale49.getDisplayVariant(locale55);
        java.lang.String str58 = property2.getAsShortText(locale55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar46 and calendar54", (calendar46.compareTo(calendar54) == 0) == calendar46.equals(calendar54));
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test110");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        java.lang.String str13 = dateTime4.toString();
        org.joda.time.DateTime dateTime15 = dateTime4.minusMonths(14);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test111");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        java.lang.String str6 = durationFieldType5.getName();
        org.joda.time.DateTime dateTime8 = dateTime4.withFieldAdded(durationFieldType5, (int) 'u');
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate12 = localDate9.withPeriodAdded(readablePeriod10, (int) (byte) 0);
        int int13 = localDate12.getYearOfCentury();
        boolean boolean15 = localDate12.equals((java.lang.Object) 32762L);
        org.joda.time.Chronology chronology16 = localDate12.getChronology();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime8.toMutableDateTime(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime17", (dateTime8.compareTo(mutableDateTime17) == 0) == dateTime8.equals(mutableDateTime17));
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test112");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology14 = chronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.weekyearOfCentury();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(83968099800000L, chronology10);
        org.joda.time.DateTimeField dateTimeField17 = chronology10.dayOfYear();
        org.joda.time.DurationField durationField18 = chronology10.eras();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-60526224000001L), chronology10);
        org.joda.time.DateTimeField dateTimeField20 = chronology10.era();
        org.joda.time.DurationField durationField21 = chronology10.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField18, durationField21, and durationField18", !(durationField18.compareTo(durationField21) == 0) || (Math.signum(durationField18.compareTo(durationField18)) == Math.signum(durationField21.compareTo(durationField18))));
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test113");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology14 = chronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.weekyearOfCentury();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(83968099800000L, chronology10);
        org.joda.time.DurationField durationField17 = durationFieldType0.getField(chronology10);
        org.joda.time.DurationField durationField18 = chronology10.eras();
        org.joda.time.DurationField durationField19 = chronology10.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField17 and durationField19", Math.signum(durationField17.compareTo(durationField19)) == -Math.signum(durationField19.compareTo(durationField17)));
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test114");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay(chronology8);
        org.joda.time.DateTimeField dateTimeField16 = chronology8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = chronology8.add(readablePeriod17, 1644591900822L, 22);
        org.joda.time.DurationField durationField21 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField22 = chronology8.yearOfEra();
        org.joda.time.DurationField durationField23 = chronology8.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField23, durationField14, and durationField21", !(durationField23.compareTo(durationField14) == 0) || (Math.signum(durationField23.compareTo(durationField21)) == Math.signum(durationField14.compareTo(durationField21))));
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test115");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay(dateTimeZone4);
        org.joda.time.DateTime.Property property7 = dateTime6.weekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime16 = dateTime13.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology21 = chronology17.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.weekyearOfCentury();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(83968099800000L, chronology17);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtStartOfDay(dateTimeZone26);
        long long28 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime29 = property7.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property35 = dateTime34.hourOfDay();
        org.joda.time.DateTime dateTime37 = dateTime34.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime39 = dateTime34.withMillisOfDay(8);
        boolean boolean41 = dateTime34.isAfter((long) 17);
        org.joda.time.Instant instant42 = dateTime34.toInstant();
        java.lang.String str43 = dateTime34.toString();
        org.joda.time.DateTime dateTime45 = dateTime34.minusMonths(14);
        int int46 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and instant42", (dateTime13.compareTo(instant42) == 0) == dateTime13.equals(instant42));
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test116");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.DateTime.Property property23 = dateTime16.centuryOfEra();
        org.joda.time.DateTime dateTime25 = dateTime16.withCenturyOfEra(20);
        int int26 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime27 = dateTime9.toDateTime(dateTimeZone12);
        boolean boolean28 = dateTime9.isEqualNow();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime31 = dateTime9.withDurationAdded(readableDuration29, 21);
        org.joda.time.DateTime.Property property32 = dateTime9.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime9", (dateTime27.compareTo(dateTime9) == 0) == dateTime27.equals(dateTime9));
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test117");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        boolean boolean13 = dateTime10.isBeforeNow();
        boolean boolean14 = dateTime2.isBefore((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime2.plus(readableDuration15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) '#');
        int int22 = dateTime19.getWeekyear();
        org.joda.time.DateTime dateTime24 = dateTime19.minusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property25 = dateTime24.minuteOfDay();
        org.joda.time.DateTime dateTime27 = property25.setCopy((int) (short) 100);
        org.joda.time.Instant instant28 = dateTime27.toInstant();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(227, 28);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime27.toMutableDateTime(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime16.toMutableDateTime(dateTimeZone31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and instant28", (dateTime27.compareTo(instant28) == 0) == dateTime27.equals(instant28));
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test118");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1969-12-31T23:59:59.999Z");
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears(17);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MonthDay monthDay5 = new org.joda.time.MonthDay(dateTimeZone4);
        org.joda.time.MonthDay monthDay7 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay9 = monthDay7.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay7.minus(readablePeriod10);
        org.joda.time.MonthDay.Property property12 = monthDay7.dayOfMonth();
        java.lang.String str13 = property12.toString();
        java.util.Locale locale14 = null;
        int int15 = property12.getMaximumShortTextLength(locale14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property21 = dateTime20.hourOfDay();
        java.lang.String str22 = property21.getAsShortText();
        org.joda.time.MonthDay monthDay23 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay25 = monthDay23.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField27 = monthDay25.getField((int) (byte) 0);
        java.util.Locale locale31 = new java.util.Locale("", "", "hi!");
        int int32 = dateTimeField27.getMaximumTextLength(locale31);
        long long35 = dateTimeField27.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay38 = monthDay36.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay36.minus(readablePeriod39);
        org.joda.time.MonthDay monthDay41 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay43 = monthDay41.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField45 = monthDay43.getField((int) (byte) 0);
        java.util.Locale locale49 = new java.util.Locale("", "", "hi!");
        int int50 = dateTimeField45.getMaximumTextLength(locale49);
        java.lang.String str51 = dateTimeField27.getAsShortText((org.joda.time.ReadablePartial) monthDay36, locale49);
        int int52 = property21.getMaximumTextLength(locale49);
        org.joda.time.DateTimeField dateTimeField53 = property21.getField();
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(locale54);
        int int56 = property21.getMaximumTextLength(locale54);
        boolean boolean57 = locale54.hasExtensions();
        java.lang.String str58 = locale54.getDisplayCountry();
        boolean boolean59 = locale54.hasExtensions();
        int int60 = property12.getMaximumShortTextLength(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property12.getFieldType();
        boolean boolean62 = monthDay5.isSupported(dateTimeFieldType61);
        int int63 = dateTime1.get(dateTimeFieldType61);
        org.joda.time.DateTime dateTime65 = dateTime1.plus((-123075459313645000L));
        org.joda.time.DateTime dateTime67 = dateTime65.plus(5907399684280970087L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime18", (dateTime1.compareTo(dateTime18) == 0) == dateTime1.equals(dateTime18));
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test119");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        java.util.TimeZone timeZone8 = dateTimeZone6.toTimeZone();
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property11 = monthDay10.monthOfYear();
        org.joda.time.MonthDay monthDay13 = property11.addToCopy((int) ' ');
        int int14 = property11.get();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        java.lang.String str17 = locale15.getCountry();
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str19 = locale15.getDisplayVariant(locale18);
        java.lang.String str20 = property11.getAsShortText(locale15);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone8, locale15);
        java.lang.String str22 = locale15.getVariant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar16 and calendar21", (calendar16.compareTo(calendar21) == 0) == calendar16.equals(calendar21));
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test120");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        java.lang.String str11 = property10.getAsText();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.plus(readablePeriod16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis(2022);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays((int) '#');
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = localDate28.toDateTimeAtStartOfDay(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime23.toDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime35 = dateTime23.plusWeeks(5);
        org.joda.time.Chronology chronology36 = dateTime23.getChronology();
        org.joda.time.Chronology chronology37 = dateTime23.getChronology();
        org.joda.time.DateTime dateTime38 = dateTime20.withChronology(chronology37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(5907399684280970662L, chronology37);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology37);
        int int41 = dateTime40.getYearOfCentury();
        long long42 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateMidnight dateMidnight43 = dateTime40.toDateMidnight();
        org.joda.time.DateTime dateTime45 = dateTime40.plusMonths(11);
        org.joda.time.DateTime dateTime46 = dateTime45.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusDays((int) '#');
        int int52 = dateTime49.getWeekyear();
        org.joda.time.DateTime dateTime54 = dateTime49.minusMillis((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.DateTime dateTime59 = dateTime57.plus(readablePeriod58);
        boolean boolean60 = dateTime49.isEqual((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((java.lang.Object) dateTime49);
        org.joda.time.DateTime dateTime63 = dateTime49.withSecondOfMinute(59);
        int int64 = dateTime49.getDayOfYear();
        org.joda.time.DateTime dateTime66 = dateTime49.plusWeeks(14403);
        boolean boolean68 = dateTime49.equals((java.lang.Object) "2022");
        org.joda.time.Instant instant69 = dateTime49.toInstant();
        boolean boolean70 = dateTime45.isAfter((org.joda.time.ReadableInstant) dateTime49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and instant69", (dateTime15.compareTo(instant69) == 0) == dateTime15.equals(instant69));
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test121");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime4.getYearOfCentury();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime4.withDurationAdded(readableDuration11, (int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology26 = chronology22.withZone(dateTimeZone25);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now(chronology26);
        org.joda.time.DateTime dateTime28 = dateTime13.withChronology(chronology26);
        java.lang.String str29 = dateTime13.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime28", (dateTime13.compareTo(dateTime28) == 0) == dateTime13.equals(dateTime28));
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test122");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTime dateTime10 = property8.setCopy((int) (short) 100);
        org.joda.time.Instant instant11 = dateTime10.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.era();
        int int13 = instant11.get(dateTimeFieldType12);
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType12.getDurationType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant11", (dateTime10.compareTo(instant11) == 0) == dateTime10.equals(instant11));
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test123");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(100);
        org.joda.time.Interval interval17 = localDate16.toInterval();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.days();
        java.lang.String str19 = durationFieldType18.getName();
        org.joda.time.LocalDate localDate21 = localDate16.withFieldAdded(durationFieldType18, 32770);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays((int) '#');
        int int27 = dateTime24.getWeekyear();
        org.joda.time.DateMidnight dateMidnight28 = dateTime24.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property30 = dateTime24.property(dateTimeFieldType29);
        boolean boolean31 = localDate16.isSupported(dateTimeFieldType29);
        int int32 = localDate11.get(dateTimeFieldType29);
        org.joda.time.LocalDate localDate34 = localDate11.withWeekyear(187200000);
        org.joda.time.DateMidnight dateMidnight35 = localDate11.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays((int) '#');
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(dateTimeZone43);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = localDate44.toDateTimeAtStartOfDay(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime39.toDateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime51 = dateTime39.plusWeeks(5);
        int int52 = dateTime39.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property59 = dateTime58.hourOfDay();
        org.joda.time.DateTime dateTime61 = dateTime58.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology62 = dateTime61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology66 = chronology62.withZone(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField67 = chronology62.weekyearOfCentury();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate(83968099800000L, chronology62);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime72 = localDate68.toDateTimeAtStartOfDay(dateTimeZone71);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone74);
        org.joda.time.DateTime dateTime77 = dateTime75.minusDays((int) '#');
        java.util.TimeZone timeZone78 = null;
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone78);
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate(dateTimeZone79);
        java.util.TimeZone timeZone81 = null;
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forTimeZone(timeZone81);
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate(dateTimeZone82);
        org.joda.time.DateTime dateTime84 = localDate80.toDateTimeAtStartOfDay(dateTimeZone82);
        org.joda.time.DateTime dateTime85 = dateTime75.toDateTime(dateTimeZone82);
        org.joda.time.DateTime dateTime87 = dateTime75.plusWeeks(5);
        int int88 = dateTimeZone71.getOffset((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableDateTime mutableDateTime89 = dateTime39.toMutableDateTime(dateTimeZone71);
        org.joda.time.LocalDate localDate90 = new org.joda.time.LocalDate((long) 1439, dateTimeZone71);
        java.lang.String str92 = dateTimeZone71.getNameKey(757674678994L);
        org.joda.time.DateTime dateTime93 = localDate11.toDateTimeAtStartOfDay(dateTimeZone71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and mutableDateTime89", (dateTime24.compareTo(mutableDateTime89) == 0) == dateTime24.equals(mutableDateTime89));
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test124");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.roll((int) (short) 100, 0);
        int int8 = calendar1.getGreatestMinimum(0);
        calendar1.clear();
        calendar1.clear(0);
        calendar1.set(8, 0, (int) 'a', 2021, 3);
        int int19 = calendar1.getGreatestMinimum(3);
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale20);
        calendar21.setLenient(true);
        calendar21.setMinimalDaysInFirstWeek(1970);
        int int27 = calendar21.getGreatestMinimum(10);
        java.time.Instant instant28 = calendar21.toInstant();
        calendar21.setTimeInMillis(1L);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYearOfEra((int) '4');
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime33.toMutableDateTime(dateTimeZone37);
        java.util.TimeZone timeZone39 = dateTimeZone37.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        calendar21.setTimeZone(timeZone39);
        calendar1.setTimeZone(timeZone39);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone39, locale44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property56 = dateTime55.hourOfDay();
        org.joda.time.DateTime dateTime58 = dateTime55.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology59 = dateTime58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology63 = chronology59.withZone(dateTimeZone62);
        org.joda.time.MonthDay monthDay64 = new org.joda.time.MonthDay((java.lang.Object) dateTime50, chronology59);
        java.lang.String str66 = monthDay64.toString("35");
        org.joda.time.MonthDay.Property property67 = monthDay64.monthOfYear();
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        int int69 = property67.getMaximumTextLength(locale68);
        java.util.Calendar calendar70 = java.util.Calendar.getInstance(timeZone39, locale68);
        java.lang.String str71 = locale68.getISO3Language();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar45 and calendar70", (calendar45.compareTo(calendar70) == 0) == calendar45.equals(calendar70));
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test125");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay(0L);
        java.lang.String str10 = monthDay9.toString();
        org.joda.time.Chronology chronology11 = monthDay9.getChronology();
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.withPeriodAdded(readablePeriod13, 54);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) '#');
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime19.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = dateTime19.plusWeeks(5);
        int int32 = dateTime19.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property39 = dateTime38.hourOfDay();
        org.joda.time.DateTime dateTime41 = dateTime38.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology42 = dateTime41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology46 = chronology42.withZone(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = chronology42.weekyearOfCentury();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(83968099800000L, chronology42);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime52 = localDate48.toDateTimeAtStartOfDay(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.minusDays((int) '#');
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(dateTimeZone59);
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = localDate60.toDateTimeAtStartOfDay(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime55.toDateTime(dateTimeZone62);
        org.joda.time.DateTime dateTime67 = dateTime55.plusWeeks(5);
        int int68 = dateTimeZone51.getOffset((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime19.toMutableDateTime(dateTimeZone51);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((long) 1439, dateTimeZone51);
        java.lang.String str72 = dateTimeZone51.getNameKey(757674678994L);
        boolean boolean73 = dateTime12.equals((java.lang.Object) dateTimeZone51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime12", (dateTime2.compareTo(dateTime12) == 0) == dateTime2.equals(dateTime12));
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test126");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime12 = dateTime7.plusSeconds(13);
        org.joda.time.DateTime dateTime14 = dateTime7.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDate18.toDateTimeAtStartOfDay(dateTimeZone20);
        java.util.Date date23 = dateTime22.toDate();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays((int) '#');
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone30);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = localDate31.toDateTimeAtStartOfDay(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime26.toDateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime38 = dateTime26.minusMinutes(52);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone40);
        long long44 = dateTimeZone40.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime45 = dateTime26.withZone(dateTimeZone40);
        int int46 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology47 = dateTime26.getChronology();
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime26.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property54 = dateTime53.hourOfDay();
        org.joda.time.DateTime dateTime56 = dateTime53.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology57 = dateTime56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology61 = chronology57.withZone(dateTimeZone60);
        org.joda.time.DurationField durationField62 = chronology57.weeks();
        org.joda.time.DateTimeField dateTimeField63 = chronology57.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology57.dayOfYear();
        org.joda.time.DurationField durationField65 = chronology57.halfdays();
        org.joda.time.DateTimeField dateTimeField66 = chronology57.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime67 = mutableDateTime48.toMutableDateTime(chronology57);
        org.joda.time.DateTime dateTime68 = dateTime14.withChronology(chronology57);
        int int69 = dateTime14.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and dateTime14", (instant15.compareTo(dateTime14) == 0) == instant15.equals(dateTime14));
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test127");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withPivotYear(52);
        org.joda.time.Chronology chronology13 = dateTimeFormatter12.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = dateTime19.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property27 = dateTime26.hourOfDay();
        org.joda.time.DateTime dateTime29 = dateTime26.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime19.toMutableDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekOfWeekyear();
        org.joda.time.DurationField durationField34 = chronology30.eras();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter12.withChronology(chronology30);
        org.joda.time.Chronology chronology36 = dateTimeFormatter12.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property42 = dateTime41.hourOfDay();
        org.joda.time.DateTime dateTime44 = dateTime41.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology45 = dateTime44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology49 = chronology45.withZone(dateTimeZone48);
        java.lang.String str50 = chronology45.toString();
        org.joda.time.DurationField durationField51 = chronology45.seconds();
        org.joda.time.DateTimeField dateTimeField52 = chronology45.yearOfCentury();
        org.joda.time.DurationField durationField53 = chronology45.years();
        org.joda.time.DateTimeField dateTimeField54 = chronology45.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone55 = chronology45.getZone();
        java.lang.String str57 = dateTimeZone55.getName((-184277211L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter12.withZone(dateTimeZone55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField34 and durationField51", Math.signum(durationField34.compareTo(durationField51)) == -Math.signum(durationField51.compareTo(durationField34)));
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test128");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.plus(readablePeriod11);
        boolean boolean13 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) dateTime2);
        org.joda.time.DateTime dateTime16 = dateTime2.withSecondOfMinute(59);
        int int17 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime19 = dateTime2.plusWeeks(14403);
        boolean boolean21 = dateTime2.equals((java.lang.Object) "2022");
        org.joda.time.Instant instant22 = dateTime2.toInstant();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime25 = dateTime2.withPeriodAdded(readablePeriod23, 1965);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and instant22", (dateTime25.compareTo(instant22) == 0) == dateTime25.equals(instant22));
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test129");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis(2022);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) '#');
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime11.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime11.plusWeeks(5);
        org.joda.time.Chronology chronology24 = dateTime11.getChronology();
        org.joda.time.Chronology chronology25 = dateTime11.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime8.withChronology(chronology25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(5907399684280970662L, chronology25);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology25);
        boolean boolean30 = dateTime28.isEqual((-14L));
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime36.hourOfDay();
        org.joda.time.DateTime dateTime39 = dateTime36.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology44 = chronology40.withZone(dateTimeZone43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (byte) 1, dateTimeZone43);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(dateTimeZone43);
        java.util.Locale.Builder builder48 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder48.setExtension('u', "en-US");
        java.util.Locale locale52 = builder51.build();
        java.lang.String str53 = dateTimeZone43.getName((long) (short) 0, locale52);
        boolean boolean54 = dateTimeZone43.isFixed();
        org.joda.time.DateTime dateTime55 = dateTime28.withZone(dateTimeZone43);
        java.lang.String str56 = dateTimeZone43.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and dateTime55", (dateTime28.compareTo(dateTime55) == 0) == dateTime28.equals(dateTime55));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test130");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar1.set(0, (int) (byte) 10, (int) (short) 10);
        int int12 = calendar1.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        int int18 = localDate15.size();
        org.joda.time.LocalDate localDate20 = localDate15.plusMonths(6);
        java.util.Date date21 = localDate20.toDate();
        calendar1.setTime(date21);
        java.util.TimeZone timeZone23 = calendar1.getTimeZone();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone23);
        java.util.Locale locale25 = java.util.Locale.UK;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale25.getDisplayScript(locale26);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone23, locale26);
        int int29 = calendar28.getMinimalDaysInFirstWeek();
        java.time.Instant instant30 = calendar28.toInstant();
        java.util.Date date31 = java.util.Date.from(instant30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar24 and calendar28", (calendar24.compareTo(calendar28) == 0) == calendar24.equals(calendar28));
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test131");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays((int) 'u');
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        java.util.GregorianCalendar gregorianCalendar12 = dateTime11.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays((int) '#');
        int int18 = dateTime15.getDayOfWeek();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.LocalDate localDate23 = localDate21.withDayOfYear(100);
        int int24 = localDate21.size();
        org.joda.time.LocalDate localDate26 = localDate21.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays((int) '#');
        int int32 = dateTime29.getWeekyear();
        org.joda.time.DateMidnight dateMidnight33 = dateTime29.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property35 = dateTime29.property(dateTimeFieldType34);
        org.joda.time.LocalDate.Property property36 = localDate26.property(dateTimeFieldType34);
        boolean boolean37 = dateTime15.equals((java.lang.Object) property36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.plus(readablePeriod41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime46 = dateTime42.withYearOfCentury(1);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate50 = localDate47.withPeriodAdded(readablePeriod48, (int) (byte) 0);
        org.joda.time.LocalDate.Property property51 = localDate47.year();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 4, dateTimeZone55);
        org.joda.time.DateTime dateTime57 = localDate47.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        java.lang.Object obj58 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long65 = dateTimeZone61.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(obj58, dateTimeZone61);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone61);
        org.joda.time.MutableDateTime mutableDateTime68 = dateTime56.toMutableDateTime(dateTimeZone61);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((java.lang.Object) dateTime42, dateTimeZone61);
        int int70 = dateTime42.getYear();
        boolean boolean71 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Instant instant72 = dateTime42.toInstant();
        boolean boolean73 = gregorianCalendar12.equals((java.lang.Object) dateTime42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant72", (dateTime2.compareTo(instant72) == 0) == dateTime2.equals(instant72));
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test132");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusMillis(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        java.lang.String str8 = durationFieldType7.getName();
        org.joda.time.DateTime dateTime10 = dateTime6.withFieldAdded(durationFieldType7, 1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone12.isStandardOffset(10L);
        java.lang.Object obj15 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long22 = dateTimeZone18.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(obj15, dateTimeZone18);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTime();
        int int25 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime23);
        long long29 = dateTimeZone12.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime10.toMutableDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and mutableDateTime30", (dateTime10.compareTo(mutableDateTime30) == 0) == dateTime10.equals(mutableDateTime30));
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test133");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property8 = dateTime2.property(dateTimeFieldType7);
        org.joda.time.DateTime.Property property9 = dateTime2.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays((int) '#');
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localDate17.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime12.toDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime24 = dateTime12.plusWeeks(5);
        org.joda.time.DateTime dateTime26 = dateTime12.minusMillis(13);
        int int27 = property9.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Instant instant28 = dateTime26.toInstant();
        int int29 = dateTime26.getDayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime26.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property36 = dateTime35.hourOfDay();
        org.joda.time.DateTime dateTime38 = dateTime35.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime40 = dateTime35.minusDays((int) 'u');
        boolean boolean41 = dateTime40.isBeforeNow();
        org.joda.time.DateTime dateTime42 = dateTime40.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime40.getZone();
        boolean boolean44 = mutableDateTime30.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and instant28", (dateTime26.compareTo(instant28) == 0) == dateTime26.equals(instant28));
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test134");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime4.plusYears((int) '4');
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime13 = dateTime4.withFieldAdded(durationFieldType11, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean17 = dateTimeZone15.isStandardOffset(10L);
        java.lang.Object obj18 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long25 = dateTimeZone21.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(obj18, dateTimeZone21);
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTime();
        int int28 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime26);
        long long32 = dateTimeZone15.convertLocalToUTC((long) 32772, false, (long) 292278994);
        long long34 = dateTimeZone15.nextTransition((-62135596800000L));
        org.joda.time.DateTime dateTime35 = dateTime4.withZoneRetainFields(dateTimeZone15);
        int int36 = dateTime4.getMinuteOfDay();
        java.lang.Object obj37 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long44 = dateTimeZone40.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(obj37, dateTimeZone40);
        org.joda.time.MonthDay monthDay47 = new org.joda.time.MonthDay(0L);
        java.lang.String str48 = monthDay47.toString();
        org.joda.time.Chronology chronology49 = monthDay47.getChronology();
        org.joda.time.DateTime dateTime50 = dateTime45.withChronology(chronology49);
        org.joda.time.DateTime dateTime52 = dateTime50.withDayOfMonth(17);
        org.joda.time.DateTime dateTime54 = dateTime50.minus((long) 17);
        org.joda.time.DateTime dateTime56 = dateTime50.minusWeeks(187200000);
        org.joda.time.DateTime dateTime58 = dateTime50.withMillisOfSecond(0);
        boolean boolean59 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and dateTime50", (dateTime26.compareTo(dateTime50) == 0) == dateTime26.equals(dateTime50));
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test135");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MonthDay monthDay3 = new org.joda.time.MonthDay(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime8.hourOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology12);
        org.joda.time.DurationField durationField14 = chronology12.eras();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.secondOfDay();
        org.joda.time.DurationField durationField17 = chronology12.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField17, and durationField14", !(durationField14.compareTo(durationField17) == 0) || (Math.signum(durationField14.compareTo(durationField14)) == Math.signum(durationField17.compareTo(durationField14))));
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test136");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology14 = chronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.weekyearOfCentury();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(83968099800000L, chronology10);
        org.joda.time.DurationField durationField17 = durationFieldType0.getField(chronology10);
        org.joda.time.DurationField durationField18 = chronology10.eras();
        org.joda.time.DateTimeField dateTimeField19 = chronology10.hourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField17 and durationField18", Math.signum(durationField17.compareTo(durationField18)) == -Math.signum(durationField18.compareTo(durationField17)));
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test137");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = localDate7.toInterval();
        org.joda.time.LocalDate.Property property16 = localDate7.year();
        org.joda.time.LocalDate.Property property17 = localDate7.era();
        org.joda.time.DurationField durationField18 = property17.getDurationField();
        org.joda.time.LocalDate localDate19 = property17.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime24.hourOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime29 = dateTime24.withMillisOfDay(8);
        boolean boolean31 = dateTime24.isAfter((long) 17);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone33);
        org.joda.time.LocalDate localDate36 = localDate34.withDayOfYear(100);
        org.joda.time.Interval interval37 = localDate36.toInterval();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.days();
        java.lang.String str39 = durationFieldType38.getName();
        org.joda.time.LocalDate localDate41 = localDate36.withFieldAdded(durationFieldType38, 32770);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDate localDate43 = localDate36.plus(readablePeriod42);
        org.joda.time.LocalDate localDate45 = localDate43.withDayOfMonth(23);
        int int46 = localDate43.getDayOfWeek();
        org.joda.time.LocalDate.Property property47 = localDate43.yearOfEra();
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(dateTimeZone49);
        org.joda.time.LocalDate localDate52 = localDate50.withDayOfYear(100);
        int int53 = localDate50.size();
        org.joda.time.LocalDate localDate55 = localDate50.plusMonths(6);
        int int57 = localDate55.getValue(0);
        java.lang.String str58 = localDate55.toString();
        org.joda.time.LocalDate localDate60 = localDate55.withWeekyear(1);
        org.joda.time.LocalDate localDate62 = localDate55.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime63 = localDate62.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate65 = localDate62.plusDays((int) 'a');
        int int66 = localDate43.compareTo((org.joda.time.ReadablePartial) localDate65);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.minusDays((int) '#');
        org.joda.time.Chronology chronology72 = dateTime71.getChronology();
        long long76 = chronology72.add((-2608L), (long) 'a', (int) (byte) 100);
        org.joda.time.DurationField durationField77 = chronology72.months();
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.LocalDate localDate81 = localDate78.withPeriodAdded(readablePeriod79, (int) (byte) 0);
        int int82 = localDate78.getYearOfEra();
        int int83 = localDate78.getDayOfWeek();
        long long85 = chronology72.set((org.joda.time.ReadablePartial) localDate78, (long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.weekyear();
        int int87 = localDate78.get(dateTimeFieldType86);
        int int88 = localDate43.get(dateTimeFieldType86);
        boolean boolean89 = dateTime24.isSupported(dateTimeFieldType86);
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        org.joda.time.DateTime dateTime91 = dateTime24.plus(readablePeriod90);
        boolean boolean93 = dateTime91.isAfter(14400L);
        org.joda.time.ReadablePeriod readablePeriod94 = null;
        org.joda.time.DateTime dateTime95 = dateTime91.minus(readablePeriod94);
        boolean boolean96 = localDate19.equals((java.lang.Object) dateTime91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField18 and durationField77", Math.signum(durationField18.compareTo(durationField77)) == -Math.signum(durationField77.compareTo(durationField18)));
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test138");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours(21);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime16 = dateTime13.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime18 = dateTime13.withMillisOfDay(8);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.LocalDate localDate23 = localDate21.withDayOfYear(100);
        org.joda.time.LocalDate.Property property24 = localDate21.dayOfMonth();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        org.joda.time.LocalDate localDate27 = property24.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate28 = property24.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property24.getFieldType();
        org.joda.time.LocalDate localDate30 = property24.roundHalfFloorCopy();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone32);
        org.joda.time.LocalDate localDate35 = localDate33.withDayOfYear(100);
        org.joda.time.Interval interval36 = localDate35.toInterval();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate35.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.era();
        int int42 = localDate35.get(dateTimeFieldType41);
        boolean boolean43 = localDate30.isSupported(dateTimeFieldType41);
        boolean boolean44 = dateTime13.isSupported(dateTimeFieldType41);
        boolean boolean45 = dateTime6.isSupported(dateTimeFieldType41);
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType41.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusDays((int) '#');
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(dateTimeZone53);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = localDate54.toDateTimeAtStartOfDay(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime49.toDateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime61 = dateTime49.plusWeeks(5);
        org.joda.time.Chronology chronology62 = dateTime49.getChronology();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.millisOfDay();
        org.joda.time.DurationField durationField66 = chronology62.weeks();
        org.joda.time.DurationField durationField67 = durationFieldType46.getField(chronology62);
        org.joda.time.DateTimeField dateTimeField68 = chronology62.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField66 and durationField67", Math.signum(durationField66.compareTo(durationField67)) == -Math.signum(durationField67.compareTo(durationField66)));
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test139");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        int int9 = calendar1.getWeekYear();
        calendar1.setMinimalDaysInFirstWeek(8);
        java.lang.Object obj12 = null;
        boolean boolean13 = calendar1.before(obj12);
        java.util.TimeZone timeZone14 = calendar1.getTimeZone();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone14);
        long long16 = calendar15.getTimeInMillis();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) '#');
        boolean boolean22 = dateTime19.isBeforeNow();
        int int23 = dateTime19.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property29 = dateTime28.hourOfDay();
        org.joda.time.DateTime dateTime31 = dateTime28.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime33 = dateTime28.withYearOfEra((int) ' ');
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale34);
        java.lang.String str36 = locale34.getCountry();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property42 = dateTime41.hourOfDay();
        java.lang.String str43 = property42.getAsShortText();
        org.joda.time.MonthDay monthDay44 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay46 = monthDay44.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField48 = monthDay46.getField((int) (byte) 0);
        java.util.Locale locale52 = new java.util.Locale("", "", "hi!");
        int int53 = dateTimeField48.getMaximumTextLength(locale52);
        long long56 = dateTimeField48.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay57 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay59 = monthDay57.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay57.minus(readablePeriod60);
        org.joda.time.MonthDay monthDay62 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay64 = monthDay62.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField66 = monthDay64.getField((int) (byte) 0);
        java.util.Locale locale70 = new java.util.Locale("", "", "hi!");
        int int71 = dateTimeField66.getMaximumTextLength(locale70);
        java.lang.String str72 = dateTimeField48.getAsShortText((org.joda.time.ReadablePartial) monthDay57, locale70);
        int int73 = property42.getMaximumTextLength(locale70);
        java.lang.String str74 = locale34.getDisplayVariant(locale70);
        java.util.Locale locale75 = java.util.Locale.ITALIAN;
        java.lang.String str76 = locale70.getDisplayScript(locale75);
        java.util.Calendar calendar77 = dateTime33.toCalendar(locale70);
        java.util.Calendar calendar78 = dateTime19.toCalendar(locale70);
        int int79 = calendar15.compareTo(calendar78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar35", (calendar1.compareTo(calendar35) == 0) == calendar1.equals(calendar35));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test140");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTime dateTime10 = property5.roundFloorCopy();
        org.joda.time.DateTime dateTime12 = property5.addToCopy((long) 2730);
        org.joda.time.Instant instant13 = dateTime12.toInstant();
        org.joda.time.DateTime.Property property14 = dateTime12.weekOfWeekyear();
        org.joda.time.DateTime dateTime15 = property14.roundCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant13", (dateTime12.compareTo(instant13) == 0) == dateTime12.equals(instant13));
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test141");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        org.joda.time.LocalDate localDate13 = localDate4.withYearOfEra(32769);
        org.joda.time.LocalDate localDate15 = localDate4.minusDays((int) (byte) -1);
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime18 = dateTime16.plusWeeks(100);
        org.joda.time.DateTime.Property property19 = dateTime16.secondOfDay();
        java.lang.String str20 = property19.getAsText();
        java.lang.String str21 = property19.getName();
        org.joda.time.DateTime dateTime23 = property19.addWrapFieldToCopy(0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone25);
        org.joda.time.LocalDate localDate28 = localDate26.withDayOfYear(100);
        org.joda.time.LocalDate.Property property29 = localDate26.dayOfMonth();
        org.joda.time.LocalDate localDate30 = property29.getLocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.plusWeeks(14);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra(52);
        org.joda.time.LocalDate.Property property36 = localDate35.weekOfWeekyear();
        org.joda.time.LocalDate.Property property37 = localDate35.centuryOfEra();
        int int38 = localDate30.compareTo((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.Chronology chronology39 = localDate30.getChronology();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) dateTime23, chronology39);
        int int41 = dateTime23.getWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and dateTime40", (dateTime23.compareTo(dateTime40) == 0) == dateTime23.equals(dateTime40));
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test142");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime8.toMutableDateTime(dateTimeZone12);
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay(0L);
        java.lang.String str16 = monthDay15.toString();
        org.joda.time.Chronology chronology17 = monthDay15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime8.toDateTime(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.withPeriodAdded(readablePeriod19, 54);
        boolean boolean22 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime21", (dateTime8.compareTo(dateTime21) == 0) == dateTime8.equals(dateTime21));
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test143");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withDurationAdded(1L, 52);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear(52);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTime11, dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(17);
        org.joda.time.DateTime dateTime19 = dateTime15.withMillis(757674678994L);
        org.joda.time.DateTime dateTime21 = dateTime19.plusDays(49006181);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime15", (dateTime11.compareTo(dateTime15) == 0) == dateTime11.equals(dateTime15));
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test144");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear(100);
        int int14 = localDate11.size();
        org.joda.time.LocalDate localDate16 = localDate11.plusMonths(6);
        int int18 = localDate16.getValue(0);
        java.lang.String str19 = localDate16.toString();
        org.joda.time.LocalDate localDate21 = localDate16.withWeekyear(1);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = localDate21.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTime dateTime30 = dateTime7.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = dateTime7.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime36.hourOfDay();
        org.joda.time.DateTime dateTime39 = dateTime36.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology44 = chronology40.withZone(dateTimeZone43);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(dateTimeZone48);
        long long53 = dateTimeZone48.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 'a', dateTimeZone48);
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(locale56);
        java.lang.String str58 = locale56.getCountry();
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str60 = locale56.getDisplayVariant(locale59);
        java.lang.String str61 = dateTimeZone48.getShortName((long) 20, locale56);
        java.lang.String str62 = locale56.getDisplayScript();
        java.lang.String str63 = locale56.getDisplayName();
        java.lang.String str64 = dateTimeZone43.getShortName((long) 9, locale56);
        org.joda.time.DateTime dateTime65 = dateTime31.toDateTime(dateTimeZone43);
        org.joda.time.LocalDate localDate66 = dateTime65.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property72 = dateTime71.hourOfDay();
        org.joda.time.LocalDateTime localDateTime73 = dateTime71.toLocalDateTime();
        org.joda.time.DateTime dateTime76 = dateTime71.withDurationAdded(1L, 52);
        org.joda.time.DateTime dateTime78 = dateTime76.withDayOfYear(52);
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.DateTime dateTime81 = dateTime78.withDurationAdded(readableDuration79, (int) 'a');
        org.joda.time.Instant instant82 = dateTime81.toInstant();
        org.joda.time.DateTime dateTime83 = localDate66.toDateTime((org.joda.time.ReadableInstant) instant82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime65", (dateTime7.compareTo(dateTime65) == 0) == dateTime7.equals(dateTime65));
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test145");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar1.set(0, (int) (byte) 10, (int) (short) 10);
        int int12 = calendar1.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        int int18 = localDate15.size();
        org.joda.time.LocalDate localDate20 = localDate15.plusMonths(6);
        java.util.Date date21 = localDate20.toDate();
        calendar1.setTime(date21);
        java.util.TimeZone timeZone23 = calendar1.getTimeZone();
        java.util.Locale locale27 = new java.util.Locale("years", "italien", "Cina");
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone23, locale27);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar28 and calendar29", (calendar28.compareTo(calendar29) == 0) == calendar28.equals(calendar29));
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test146");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        int int20 = dateTime17.getWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime17.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime17.plus(readablePeriod23);
        int int25 = property13.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.minus(readableDuration26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(4);
        org.joda.time.Instant instant30 = dateTime27.toInstant();
        org.joda.time.Chronology chronology31 = dateTime27.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant30", (dateTime2.compareTo(instant30) == 0) == dateTime2.equals(instant30));
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test147");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes(100);
        org.joda.time.DateTime dateTime23 = dateTime19.withYearOfEra(26);
        org.joda.time.DateTime dateTime25 = dateTime19.withMinuteOfHour(3);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean30 = dateTimeZone28.isStandardOffset(10L);
        long long33 = dateTimeZone28.adjustOffset((-58474832460001L), false);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone28);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 187200000, dateTimeZone28);
        org.joda.time.DateTime dateTime36 = dateTime19.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime36", (dateTime19.compareTo(dateTime36) == 0) == dateTime19.equals(dateTime36));
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test148");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.Chronology chronology13 = dateTimeFormatter12.getChronology();
        boolean boolean14 = dateTimeFormatter12.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter12.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter12.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter19 = dateTimeFormatter12.getPrinter();
        org.joda.time.Chronology chronology20 = dateTimeFormatter12.getChronology();
        org.joda.time.Chronology chronology21 = dateTimeFormatter12.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter12.withPivotYear(999);
        java.lang.Object obj24 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long31 = dateTimeZone27.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(obj24, dateTimeZone27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter23.withZone(dateTimeZone27);
        boolean boolean34 = dateTimeZone27.isFixed();
        org.joda.time.DateTime dateTime35 = dateTime4.toDateTime(dateTimeZone27);
        java.lang.String str37 = dateTimeZone27.getNameKey(622254311000L);
        java.lang.String str39 = dateTimeZone27.getShortName((long) (short) 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime35", (dateTime4.compareTo(dateTime35) == 0) == dateTime4.equals(dateTime35));
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test149");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        int int10 = dateTime9.getYearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime9.minusHours(28);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime9.plus(readableDuration13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate22.toDateTimeAtStartOfDay(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime17.toDateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime29 = dateTime17.plusWeeks(5);
        org.joda.time.Chronology chronology30 = dateTime17.getChronology();
        org.joda.time.Chronology chronology31 = dateTime17.getChronology();
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime14.toMutableDateTime(chronology31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays((int) '#');
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(dateTimeZone39);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtStartOfDay(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime35.toDateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime47 = dateTime35.plusWeeks(5);
        int int48 = dateTime35.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property55 = dateTime54.hourOfDay();
        org.joda.time.DateTime dateTime57 = dateTime54.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology58 = dateTime57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology62 = chronology58.withZone(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField63 = chronology58.weekyearOfCentury();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(83968099800000L, chronology58);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime68 = localDate64.toDateTimeAtStartOfDay(dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.minusDays((int) '#');
        java.util.TimeZone timeZone74 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate(dateTimeZone75);
        java.util.TimeZone timeZone77 = null;
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forTimeZone(timeZone77);
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate(dateTimeZone78);
        org.joda.time.DateTime dateTime80 = localDate76.toDateTimeAtStartOfDay(dateTimeZone78);
        org.joda.time.DateTime dateTime81 = dateTime71.toDateTime(dateTimeZone78);
        org.joda.time.DateTime dateTime83 = dateTime71.plusWeeks(5);
        int int84 = dateTimeZone67.getOffset((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.MutableDateTime mutableDateTime85 = dateTime35.toMutableDateTime(dateTimeZone67);
        org.joda.time.DateTime dateTime86 = dateTime14.withZone(dateTimeZone67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and mutableDateTime85", (dateTime2.compareTo(mutableDateTime85) == 0) == dateTime2.equals(mutableDateTime85));
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test150");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology14 = chronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.weekyearOfCentury();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(83968099800000L, chronology10);
        org.joda.time.DateTimeField dateTimeField17 = chronology10.dayOfYear();
        org.joda.time.DurationField durationField18 = chronology10.eras();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-60526224000001L), chronology10);
        org.joda.time.DurationField durationField20 = chronology10.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField18, durationField20, and durationField18", !(durationField18.compareTo(durationField20) == 0) || (Math.signum(durationField18.compareTo(durationField18)) == Math.signum(durationField20.compareTo(durationField18))));
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test151");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1969-12-31T23:59:59.999Z");
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears(17);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MonthDay monthDay5 = new org.joda.time.MonthDay(dateTimeZone4);
        org.joda.time.MonthDay monthDay7 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay9 = monthDay7.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay7.minus(readablePeriod10);
        org.joda.time.MonthDay.Property property12 = monthDay7.dayOfMonth();
        java.lang.String str13 = property12.toString();
        java.util.Locale locale14 = null;
        int int15 = property12.getMaximumShortTextLength(locale14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property21 = dateTime20.hourOfDay();
        java.lang.String str22 = property21.getAsShortText();
        org.joda.time.MonthDay monthDay23 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay25 = monthDay23.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField27 = monthDay25.getField((int) (byte) 0);
        java.util.Locale locale31 = new java.util.Locale("", "", "hi!");
        int int32 = dateTimeField27.getMaximumTextLength(locale31);
        long long35 = dateTimeField27.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay38 = monthDay36.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay36.minus(readablePeriod39);
        org.joda.time.MonthDay monthDay41 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay43 = monthDay41.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField45 = monthDay43.getField((int) (byte) 0);
        java.util.Locale locale49 = new java.util.Locale("", "", "hi!");
        int int50 = dateTimeField45.getMaximumTextLength(locale49);
        java.lang.String str51 = dateTimeField27.getAsShortText((org.joda.time.ReadablePartial) monthDay36, locale49);
        int int52 = property21.getMaximumTextLength(locale49);
        org.joda.time.DateTimeField dateTimeField53 = property21.getField();
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(locale54);
        int int56 = property21.getMaximumTextLength(locale54);
        boolean boolean57 = locale54.hasExtensions();
        java.lang.String str58 = locale54.getDisplayCountry();
        boolean boolean59 = locale54.hasExtensions();
        int int60 = property12.getMaximumShortTextLength(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property12.getFieldType();
        boolean boolean62 = monthDay5.isSupported(dateTimeFieldType61);
        int int63 = dateTime1.get(dateTimeFieldType61);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.DateTime dateTime65 = dateTime1.minus(readablePeriod64);
        int int66 = dateTime65.getMinuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime65 and dateTime18", (dateTime65.compareTo(dateTime18) == 0) == dateTime65.equals(dateTime18));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test152");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays((int) '#');
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(dateTimeZone8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = localDate9.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime4.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime4.plusWeeks(5);
        int int17 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime23.hourOfDay();
        org.joda.time.DateTime dateTime26 = dateTime23.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology31 = chronology27.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = chronology27.weekyearOfCentury();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(83968099800000L, chronology27);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime37 = localDate33.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays((int) '#');
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(dateTimeZone44);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = localDate45.toDateTimeAtStartOfDay(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime40.toDateTime(dateTimeZone47);
        org.joda.time.DateTime dateTime52 = dateTime40.plusWeeks(5);
        int int53 = dateTimeZone36.getOffset((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime4.toMutableDateTime(dateTimeZone36);
        long long56 = dateTimeZone1.getMillisKeepLocal(dateTimeZone36, (long) 365);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(dateTimeZone59);
        long long62 = dateTimeZone1.getMillisKeepLocal(dateTimeZone59, 9L);
        org.joda.time.ReadableInstant readableInstant63 = null;
        int int64 = dateTimeZone1.getOffset(readableInstant63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime54", (dateTime4.compareTo(mutableDateTime54) == 0) == dateTime4.equals(mutableDateTime54));
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test153");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        calendar1.setLenient(false);
        java.util.TimeZone timeZone11 = calendar1.getTimeZone();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone11, locale12);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone11);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(100);
        int int22 = localDate19.size();
        org.joda.time.LocalDate localDate24 = localDate19.plusMonths(6);
        java.util.Date date25 = localDate24.toDate();
        calendar16.setTime(date25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar15", (calendar1.compareTo(calendar15) == 0) == calendar1.equals(calendar15));
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test154");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime9.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone12.isStandardOffset(10L);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.DateTime.Property property16 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime18 = dateTime9.plusSeconds(0);
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks(8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime15", (dateTime18.compareTo(dateTime15) == 0) == dateTime18.equals(dateTime15));
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test155");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.roll((int) (short) 100, 0);
        int int8 = calendar1.getGreatestMinimum(0);
        calendar1.clear();
        calendar1.clear(0);
        calendar1.set(8, 0, (int) 'a', 2021, 3);
        java.util.TimeZone timeZone18 = calendar1.getTimeZone();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone18);
        org.joda.time.MonthDay monthDay21 = new org.joda.time.MonthDay(0L);
        java.lang.String str22 = monthDay21.toString();
        org.joda.time.Chronology chronology23 = monthDay21.getChronology();
        org.joda.time.Chronology chronology24 = monthDay21.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial26 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property33 = dateTime32.hourOfDay();
        org.joda.time.DateTime dateTime35 = dateTime32.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology40 = chronology36.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology36.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology36.weekOfWeekyear();
        org.joda.time.MonthDay monthDay44 = new org.joda.time.MonthDay(0L);
        java.lang.String str45 = monthDay44.toString();
        org.joda.time.Chronology chronology46 = monthDay44.getChronology();
        org.joda.time.Chronology chronology47 = monthDay44.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.days();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.millisOfDay();
        org.joda.time.MonthDay monthDay52 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property53 = monthDay52.monthOfYear();
        java.util.Locale locale54 = java.util.Locale.ITALY;
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        java.lang.String str56 = locale55.getLanguage();
        java.lang.String str57 = locale54.getDisplayScript(locale55);
        int int58 = property53.getMaximumTextLength(locale54);
        java.lang.String str59 = property53.getAsString();
        java.lang.String str60 = property53.getAsShortText();
        java.util.Locale locale61 = java.util.Locale.ROOT;
        int int62 = property53.getMaximumTextLength(locale61);
        java.lang.String str63 = dateTimeField49.getAsShortText(2, locale61);
        int int64 = dateTimeField42.getMaximumShortTextLength(locale61);
        java.lang.String str65 = dateTimeField25.getAsText(readablePartial26, 364, locale61);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone18, locale61);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar66", (calendar19.compareTo(calendar66) == 0) == calendar19.equals(calendar66));
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test156");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.DateTime.Property property23 = dateTime16.centuryOfEra();
        org.joda.time.DateTime dateTime25 = dateTime16.withCenturyOfEra(20);
        int int26 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime27 = dateTime9.toDateTime(dateTimeZone12);
        int int28 = dateTime9.getMillisOfSecond();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.millis();
        java.lang.String str30 = durationFieldType29.getName();
        org.joda.time.DateTime dateTime32 = dateTime9.withFieldAdded(durationFieldType29, 160);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property38 = dateTime37.hourOfDay();
        org.joda.time.DateTime dateTime40 = dateTime37.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology45 = chronology41.withZone(dateTimeZone44);
        java.lang.String str46 = chronology41.toString();
        org.joda.time.DurationField durationField47 = chronology41.seconds();
        org.joda.time.MonthDay monthDay48 = new org.joda.time.MonthDay(chronology41);
        org.joda.time.DateTimeField dateTimeField49 = chronology41.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        long long53 = chronology41.add(readablePeriod50, 1644591900822L, 22);
        org.joda.time.DurationField durationField54 = chronology41.centuries();
        org.joda.time.DateTimeField dateTimeField55 = chronology41.yearOfEra();
        int int56 = dateTime32.get(dateTimeField55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime27", (dateTime9.compareTo(dateTime27) == 0) == dateTime9.equals(dateTime27));
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test157");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getDayOfWeek();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.withDayOfYear(100);
        int int11 = localDate8.size();
        org.joda.time.LocalDate localDate13 = localDate8.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.LocalDate.Property property23 = localDate13.property(dateTimeFieldType21);
        boolean boolean24 = dateTime2.equals((java.lang.Object) property23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.plus(readablePeriod28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime33 = dateTime29.withYearOfCentury(1);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDate localDate37 = localDate34.withPeriodAdded(readablePeriod35, (int) (byte) 0);
        org.joda.time.LocalDate.Property property38 = localDate34.year();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 4, dateTimeZone42);
        org.joda.time.DateTime dateTime44 = localDate34.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        java.lang.Object obj45 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long52 = dateTimeZone48.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(obj45, dateTimeZone48);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        org.joda.time.MutableDateTime mutableDateTime55 = dateTime43.toMutableDateTime(dateTimeZone48);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((java.lang.Object) dateTime29, dateTimeZone48);
        int int57 = dateTime29.getYear();
        boolean boolean58 = dateTime2.isBefore((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Instant instant59 = dateTime29.toInstant();
        org.joda.time.DateTime.Property property60 = dateTime29.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant59", (dateTime2.compareTo(instant59) == 0) == dateTime2.equals(instant59));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test158");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime dateTime12 = dateTime9.plusMonths((int) 'x');
        int int13 = dateTime9.getMonthOfYear();
        org.joda.time.Instant instant14 = dateTime9.toInstant();
        org.joda.time.DateTime dateTime16 = dateTime9.withYear(60);
        org.joda.time.DateTime dateTime18 = dateTime16.withWeekyear(365);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and instant14", (dateTime9.compareTo(instant14) == 0) == dateTime9.equals(instant14));
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test159");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime4.withYearOfCentury(1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) dateTime4, dateTimeZone9);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(100);
        org.joda.time.Interval interval16 = localDate15.toInterval();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        java.lang.String str18 = durationFieldType17.getName();
        org.joda.time.LocalDate localDate20 = localDate15.withFieldAdded(durationFieldType17, 32770);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDate localDate22 = localDate15.plus(readablePeriod21);
        org.joda.time.LocalDate localDate24 = localDate15.withYearOfEra(32769);
        org.joda.time.LocalDate localDate26 = localDate15.minusDays((int) (byte) -1);
        org.joda.time.DateTime dateTime27 = localDate26.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime29 = dateTime27.plusWeeks(100);
        org.joda.time.DateTime.Property property30 = dateTime27.secondOfDay();
        java.lang.String str31 = property30.getAsText();
        java.lang.String str32 = property30.getName();
        org.joda.time.DateTime dateTime34 = property30.addWrapFieldToCopy(0);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = localDate37.withDayOfYear(100);
        org.joda.time.LocalDate.Property property40 = localDate37.dayOfMonth();
        org.joda.time.LocalDate localDate41 = property40.getLocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.plusWeeks(14);
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate46 = localDate44.withYearOfEra(52);
        org.joda.time.LocalDate.Property property47 = localDate46.weekOfWeekyear();
        org.joda.time.LocalDate.Property property48 = localDate46.centuryOfEra();
        int int49 = localDate41.compareTo((org.joda.time.ReadablePartial) localDate46);
        org.joda.time.Chronology chronology50 = localDate41.getChronology();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((java.lang.Object) dateTime34, chronology50);
        org.joda.time.DateTime dateTime52 = dateTime4.withChronology(chronology50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime51", (dateTime27.compareTo(dateTime51) == 0) == dateTime27.equals(dateTime51));
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test160");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay(0L);
        java.lang.String str10 = monthDay9.toString();
        org.joda.time.Chronology chronology11 = monthDay9.getChronology();
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.withPeriodAdded(readablePeriod13, 54);
        org.joda.time.DateTime dateTime17 = dateTime12.withWeekyear(92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime12", (dateTime2.compareTo(dateTime12) == 0) == dateTime2.equals(dateTime12));
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test161");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTime14);
        int int16 = dateTime15.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) '#');
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime19.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = dateTime19.plusWeeks(5);
        org.joda.time.Chronology chronology32 = dateTime19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime19.minus(readablePeriod33);
        int int35 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime15.withHourOfDay(11);
        int int38 = dateTime37.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays((int) '#');
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(dateTimeZone45);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = localDate46.toDateTimeAtStartOfDay(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime41.toDateTime(dateTimeZone48);
        org.joda.time.DateTime dateTime53 = dateTime41.plusWeeks(5);
        org.joda.time.Chronology chronology54 = dateTime41.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.eras();
        org.joda.time.DateTime dateTime56 = dateTime37.withChronology(chronology54);
        org.joda.time.DateTimeField dateTimeField57 = chronology54.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology54.weekOfWeekyear();
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(dateTimeZone60);
        org.joda.time.LocalDate localDate63 = localDate61.withDayOfYear(100);
        int int64 = localDate61.size();
        org.joda.time.LocalDate localDate66 = localDate61.plusMonths(6);
        int int68 = localDate66.getValue(0);
        java.lang.String str69 = localDate66.toString();
        org.joda.time.LocalDate localDate71 = localDate66.withWeekyear(1);
        org.joda.time.LocalDate localDate73 = localDate66.withDayOfYear((int) (byte) 1);
        org.joda.time.LocalDate localDate75 = localDate73.withYear((int) (byte) 100);
        int int76 = dateTimeField58.getMaximumValue((org.joda.time.ReadablePartial) localDate75);
        org.joda.time.DurationField durationField77 = dateTimeField58.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField55, durationField77, and durationField55", !(durationField55.compareTo(durationField77) == 0) || (Math.signum(durationField55.compareTo(durationField55)) == Math.signum(durationField77.compareTo(durationField55))));
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test162");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        org.joda.time.DateTime.Property property10 = dateTime4.secondOfMinute();
        org.joda.time.DateTime dateTime11 = property10.withMinimumValue();
        org.joda.time.DateTime dateTime12 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = dateTime17.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime24.hourOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime17.toMutableDateTime(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.dayOfWeek();
        org.joda.time.DurationField durationField31 = chronology28.halfdays();
        org.joda.time.Chronology chronology32 = chronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.millisOfDay();
        org.joda.time.DateTime dateTime34 = dateTime11.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime34", (dateTime7.compareTo(dateTime34) == 0) == dateTime7.equals(dateTime34));
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test163");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime4.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime4.withYearOfCentury(5);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes(14400);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test164");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        java.util.TimeZone timeZone8 = dateTimeZone6.toTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        long long16 = dateTimeZone11.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale19);
        java.lang.String str21 = locale19.getCountry();
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str23 = locale19.getDisplayVariant(locale22);
        java.lang.String str24 = dateTimeZone11.getShortName((long) 20, locale19);
        java.lang.String str25 = locale19.getDisplayScript();
        java.lang.String str26 = locale19.getDisplayName();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone8, locale19);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property33 = dateTime32.hourOfDay();
        org.joda.time.DateTime dateTime35 = dateTime32.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property36 = dateTime32.yearOfCentury();
        org.joda.time.DateTime dateTime38 = dateTime32.plusWeeks(0);
        int int39 = dateTime32.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property45 = dateTime44.hourOfDay();
        org.joda.time.DateTime dateTime47 = dateTime44.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology48 = dateTime47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology52 = chronology48.withZone(dateTimeZone51);
        java.lang.String str53 = chronology48.toString();
        boolean boolean54 = dateTime32.equals((java.lang.Object) str53);
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar56 = dateTime32.toCalendar(locale55);
        java.lang.String str57 = locale55.getLanguage();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone8, locale55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar20 and calendar27", (calendar20.compareTo(calendar27) == 0) == calendar20.equals(calendar27));
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test165");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime9.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone12.isStandardOffset(10L);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMillis((-1));
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime15", (dateTime9.compareTo(dateTime15) == 0) == dateTime9.equals(dateTime15));
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test166");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder3.setTimeOfDay((int) 'x', (int) ' ', 0);
        java.util.Calendar.Builder builder11 = builder3.setDate(28, 29, 815);
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        calendar13.setLenient(true);
        calendar13.setMinimalDaysInFirstWeek(1970);
        int int19 = calendar13.getGreatestMinimum(10);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.fromCalendarFields(calendar13);
        int[] intArray21 = monthDay20.getValues();
        java.util.Calendar.Builder builder22 = builder3.setFields(intArray21);
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(locale23);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField29 = monthDay27.getField((int) (byte) 0);
        java.util.Locale locale33 = new java.util.Locale("", "", "hi!");
        int int34 = dateTimeField29.getMaximumTextLength(locale33);
        long long37 = dateTimeField29.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay38 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay40 = monthDay38.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay38.minus(readablePeriod41);
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay45 = monthDay43.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField47 = monthDay45.getField((int) (byte) 0);
        java.util.Locale locale51 = new java.util.Locale("", "", "hi!");
        int int52 = dateTimeField47.getMaximumTextLength(locale51);
        java.lang.String str53 = dateTimeField29.getAsShortText((org.joda.time.ReadablePartial) monthDay38, locale51);
        int[] intArray54 = monthDay38.getValues();
        boolean boolean55 = calendar24.before((java.lang.Object) intArray54);
        int int57 = calendar24.getGreatestMinimum(3);
        java.util.TimeZone timeZone58 = calendar24.getTimeZone();
        java.util.Calendar.Builder builder59 = builder22.setTimeZone(timeZone58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar24", (calendar13.compareTo(calendar24) == 0) == calendar13.equals(calendar24));
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test167");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean3 = dateTimeZone1.isStandardOffset(10L);
        java.lang.Object obj4 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long11 = dateTimeZone7.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj4, dateTimeZone7);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        int int14 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime12);
        long long18 = dateTimeZone1.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(dateTimeZone1);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        long long25 = dateTimeZone21.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime26 = localDate19.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone21);
        java.lang.Object obj28 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long35 = dateTimeZone31.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(obj28, dateTimeZone31);
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime36.getZone();
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        long long42 = dateTimeZone21.getMillisKeepLocal(dateTimeZone40, 1814400006L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime36", (dateTime27.compareTo(dateTime36) == 0) == dateTime27.equals(dateTime36));
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test168");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(0);
        int int11 = dateTime4.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology24 = chronology20.withZone(dateTimeZone23);
        java.lang.String str25 = chronology20.toString();
        boolean boolean26 = dateTime4.equals((java.lang.Object) str25);
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar28 = dateTime4.toCalendar(locale27);
        int int29 = dateTime4.getMonthOfYear();
        org.joda.time.DateTime.Property property30 = dateTime4.hourOfDay();
        org.joda.time.Instant instant31 = dateTime4.toInstant();
        org.joda.time.ReadablePartial readablePartial32 = null;
        org.joda.time.DateTime dateTime33 = dateTime4.withFields(readablePartial32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime33 and instant31", (dateTime33.compareTo(instant31) == 0) == dateTime33.equals(instant31));
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test169");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(0L);
        java.lang.String str11 = monthDay10.toString();
        org.joda.time.Chronology chronology12 = monthDay10.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime8.withChronology(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfMonth(17);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((long) 17);
        org.joda.time.DateTime dateTime19 = dateTime13.minusWeeks(187200000);
        org.joda.time.DateMidnight dateMidnight20 = dateTime19.toDateMidnight();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime13", (dateTime8.compareTo(dateTime13) == 0) == dateTime8.equals(dateTime13));
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test170");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(0L);
        java.lang.String str11 = monthDay10.toString();
        org.joda.time.Chronology chronology12 = monthDay10.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime8.withChronology(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfMonth(17);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((long) 17);
        org.joda.time.LocalTime localTime18 = dateTime17.toLocalTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime13", (dateTime8.compareTo(dateTime13) == 0) == dateTime8.equals(dateTime13));
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test171");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.minusMinutes(52);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        long long20 = dateTimeZone16.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime21 = dateTime2.withZone(dateTimeZone16);
        org.joda.time.Instant instant22 = dateTime2.toInstant();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime2.plus(readableDuration23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and instant22", (dateTime24.compareTo(instant22) == 0) == dateTime24.equals(instant22));
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test172");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.dayOfMonth();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(100);
        int int22 = localDate19.size();
        org.joda.time.LocalDate localDate24 = localDate19.plusMonths(6);
        int int26 = localDate24.getValue(0);
        java.lang.String str27 = localDate24.toString();
        org.joda.time.LocalDate localDate29 = localDate24.withWeekyear(1);
        org.joda.time.LocalDate localDate31 = localDate24.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = localDate31.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes(100);
        org.joda.time.DateTime dateTime40 = dateTime36.withYearOfEra(26);
        org.joda.time.DateTime dateTime42 = dateTime36.withMinuteOfHour(3);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean47 = dateTimeZone45.isStandardOffset(10L);
        long long50 = dateTimeZone45.adjustOffset((-58474832460001L), false);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(dateTimeZone45);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 187200000, dateTimeZone45);
        org.joda.time.DateTime dateTime53 = dateTime36.withZone(dateTimeZone45);
        org.joda.time.Chronology chronology54 = chronology8.withZone(dateTimeZone45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and dateTime53", (dateTime36.compareTo(dateTime53) == 0) == dateTime36.equals(dateTime53));
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test173");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(0);
        int int11 = dateTime4.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology24 = chronology20.withZone(dateTimeZone23);
        java.lang.String str25 = chronology20.toString();
        boolean boolean26 = dateTime4.equals((java.lang.Object) str25);
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar28 = dateTime4.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime4.plusSeconds(3);
        org.joda.time.format.DateTimePrinter dateTimePrinter31 = null;
        org.joda.time.format.DateTimeParser dateTimeParser32 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter31, dateTimeParser32);
        org.joda.time.format.DateTimePrinter dateTimePrinter34 = dateTimeFormatter33.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays((int) '#');
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(dateTimeZone41);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtStartOfDay(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime37.toDateTime(dateTimeZone44);
        org.joda.time.DateTime dateTime49 = dateTime37.plusWeeks(5);
        org.joda.time.Chronology chronology50 = dateTime37.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter33.withChronology(chronology50);
        org.joda.time.DateTime dateTime52 = dateTime30.toDateTime(chronology50);
        org.joda.time.DurationField durationField53 = chronology50.eras();
        org.joda.time.DurationField durationField54 = chronology50.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField53, durationField54, and durationField53", !(durationField53.compareTo(durationField54) == 0) || (Math.signum(durationField53.compareTo(durationField53)) == Math.signum(durationField54.compareTo(durationField53))));
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test174");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays((int) '#');
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(dateTimeZone8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = localDate9.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime4.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime4.plusWeeks(5);
        int int17 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime23.hourOfDay();
        org.joda.time.DateTime dateTime26 = dateTime23.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology31 = chronology27.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = chronology27.weekyearOfCentury();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(83968099800000L, chronology27);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime37 = localDate33.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays((int) '#');
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(dateTimeZone44);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = localDate45.toDateTimeAtStartOfDay(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime40.toDateTime(dateTimeZone47);
        org.joda.time.DateTime dateTime52 = dateTime40.plusWeeks(5);
        int int53 = dateTimeZone36.getOffset((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime4.toMutableDateTime(dateTimeZone36);
        long long56 = dateTimeZone1.getMillisKeepLocal(dateTimeZone36, (long) 365);
        java.lang.String str58 = dateTimeZone1.getNameKey(83652552000000L);
        org.joda.time.LocalDate localDate59 = org.joda.time.LocalDate.now(dateTimeZone1);
        java.util.TimeZone timeZone60 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(timeZone60);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.fromCalendarFields(calendar61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime54", (dateTime4.compareTo(mutableDateTime54) == 0) == dateTime4.equals(mutableDateTime54));
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test175");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        java.lang.Object obj13 = null;
        boolean boolean14 = dateTimeZone9.equals(obj13);
        long long16 = dateTimeZone9.nextTransition(364L);
        java.lang.String str17 = dateTimeZone9.getID();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays((int) '#');
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime22.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = dateTime22.plusWeeks(5);
        int int35 = dateTime22.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property42 = dateTime41.hourOfDay();
        org.joda.time.DateTime dateTime44 = dateTime41.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology45 = dateTime44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology49 = chronology45.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = chronology45.weekyearOfCentury();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(83968099800000L, chronology45);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime55 = localDate51.toDateTimeAtStartOfDay(dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusDays((int) '#');
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(dateTimeZone62);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = localDate63.toDateTimeAtStartOfDay(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime58.toDateTime(dateTimeZone65);
        org.joda.time.DateTime dateTime70 = dateTime58.plusWeeks(5);
        int int71 = dateTimeZone54.getOffset((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime22.toMutableDateTime(dateTimeZone54);
        long long74 = dateTimeZone19.getMillisKeepLocal(dateTimeZone54, (long) 365);
        java.lang.String str76 = dateTimeZone19.getNameKey(83652552000000L);
        org.joda.time.LocalDate localDate77 = org.joda.time.LocalDate.now(dateTimeZone19);
        java.lang.String str78 = dateTimeZone19.getID();
        long long80 = dateTimeZone9.getMillisKeepLocal(dateTimeZone19, (long) 999);
        java.lang.String str81 = dateTimeZone9.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and mutableDateTime72", (dateTime2.compareTo(mutableDateTime72) == 0) == dateTime2.equals(mutableDateTime72));
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test176");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType0.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays((int) '#');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate10.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime5.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = dateTime5.plusWeeks(5);
        org.joda.time.Chronology chronology18 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekyear();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology18);
        boolean boolean21 = durationFieldType2.isSupported(chronology18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays((int) '#');
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone28);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtStartOfDay(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime24.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime24.plusWeeks(5);
        org.joda.time.Chronology chronology37 = dateTime24.getChronology();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology37);
        org.joda.time.DurationField durationField39 = chronology37.minutes();
        org.joda.time.DurationField durationField40 = durationFieldType2.getField(chronology37);
        org.joda.time.DateTimeField dateTimeField41 = chronology37.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField39 and durationField40", Math.signum(durationField39.compareTo(durationField40)) == -Math.signum(durationField40.compareTo(durationField39)));
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test177");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.Chronology chronology15 = dateTime2.getChronology();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime2.minus(readablePeriod16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean19 = dateTime2.isSupported(dateTimeFieldType18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(100);
        int int25 = localDate22.size();
        org.joda.time.LocalDate localDate27 = localDate22.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays((int) '#');
        int int33 = dateTime30.getWeekyear();
        org.joda.time.DateMidnight dateMidnight34 = dateTime30.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property36 = dateTime30.property(dateTimeFieldType35);
        org.joda.time.LocalDate.Property property37 = localDate27.property(dateTimeFieldType35);
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType35.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property44 = dateTime43.hourOfDay();
        org.joda.time.DateTime dateTime46 = dateTime43.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology47 = dateTime46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology51 = chronology47.withZone(dateTimeZone50);
        java.lang.String str52 = chronology47.toString();
        org.joda.time.DurationField durationField53 = chronology47.seconds();
        org.joda.time.DateTimeField dateTimeField54 = chronology47.yearOfCentury();
        boolean boolean55 = dateTimeFieldType35.isSupported(chronology47);
        boolean boolean56 = dateTimeFieldType18.isSupported(chronology47);
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType18.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property64 = dateTime63.hourOfDay();
        org.joda.time.DateTime dateTime66 = dateTime63.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology67 = dateTime66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology71 = chronology67.withZone(dateTimeZone70);
        java.lang.String str72 = chronology67.toString();
        org.joda.time.DurationField durationField73 = chronology67.seconds();
        org.joda.time.DateTimeField dateTimeField74 = chronology67.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField75 = chronology67.weekyearOfCentury();
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) '4', chronology67);
        org.joda.time.DateTimeField dateTimeField77 = chronology67.weekOfWeekyear();
        org.joda.time.DurationField durationField78 = durationFieldType57.getField(chronology67);
        org.joda.time.DateTimeField dateTimeField79 = chronology67.weekOfWeekyear();
        org.joda.time.DurationField durationField80 = chronology67.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField80, durationField53, and durationField78", !(durationField80.compareTo(durationField53) == 0) || (Math.signum(durationField80.compareTo(durationField78)) == Math.signum(durationField53.compareTo(durationField78))));
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test178");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime4.toMutableDateTime(chronology15);
        org.joda.time.Instant instant17 = dateTime4.toInstant();
        boolean boolean19 = dateTime4.equals((java.lang.Object) "2022-02-13T13:36:53.334+52:00");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant17", (dateTime11.compareTo(instant17) == 0) == dateTime11.equals(instant17));
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test179");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        calendar1.setLenient(false);
        java.util.TimeZone timeZone11 = calendar1.getTimeZone();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone11, locale12);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone11);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar15", (calendar1.compareTo(calendar15) == 0) == calendar1.equals(calendar15));
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test180");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withDurationAdded(1L, 52);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear(52);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTime11, dateTimeZone14);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now(dateTimeZone14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime15", (dateTime11.compareTo(dateTime15) == 0) == dateTime11.equals(dateTime15));
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test181");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.Chronology chronology15 = dateTime2.getChronology();
        org.joda.time.Chronology chronology16 = dateTime2.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime2.plusHours((int) (short) -1);
        org.joda.time.DateTime dateTime20 = dateTime2.withYearOfEra(19);
        org.joda.time.Instant instant21 = dateTime2.toInstant();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate24.withDayOfYear(100);
        org.joda.time.Interval interval27 = localDate26.toInterval();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = localDate26.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.era();
        int int33 = localDate26.get(dateTimeFieldType32);
        org.joda.time.DateTime.Property property34 = dateTime2.property(dateTimeFieldType32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant21", (dateTime2.compareTo(instant21) == 0) == dateTime2.equals(instant21));
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test182");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.MonthDay monthDay7 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay9 = monthDay7.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField11 = monthDay9.getField((int) (byte) 0);
        java.util.Locale locale15 = new java.util.Locale("", "", "hi!");
        int int16 = dateTimeField11.getMaximumTextLength(locale15);
        long long19 = dateTimeField11.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay22 = monthDay20.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay20.minus(readablePeriod23);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField29 = monthDay27.getField((int) (byte) 0);
        java.util.Locale locale33 = new java.util.Locale("", "", "hi!");
        int int34 = dateTimeField29.getMaximumTextLength(locale33);
        java.lang.String str35 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) monthDay20, locale33);
        int int36 = property5.getMaximumTextLength(locale33);
        org.joda.time.DateTimeField dateTimeField37 = property5.getField();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale38);
        int int40 = property5.getMaximumTextLength(locale38);
        int int41 = property5.getLeapAmount();
        int int42 = property5.get();
        org.joda.time.DateTime dateTime44 = property5.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMonths(29);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime49 = dateTime46.withDurationAdded(readableDuration47, (int) (byte) -1);
        java.lang.Object obj50 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long57 = dateTimeZone53.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(obj50, dateTimeZone53);
        org.joda.time.DateTime dateTime59 = dateTime58.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime58.getZone();
        java.util.TimeZone timeZone61 = dateTimeZone60.toTimeZone();
        org.joda.time.DateTime dateTime62 = dateTime49.toDateTime(dateTimeZone60);
        boolean boolean64 = dateTimeZone60.isStandardOffset((long) 'a');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime46 and dateTime62", (dateTime46.compareTo(dateTime62) == 0) == dateTime46.equals(dateTime62));
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test183");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfCentury((int) '#');
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(32769);
        org.joda.time.LocalDate localDate8 = localDate2.withYearOfEra((int) (short) 1);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays((int) '#');
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDate18.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime13.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = dateTime13.plusWeeks(5);
        int int26 = dateTime13.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property33 = dateTime32.hourOfDay();
        org.joda.time.DateTime dateTime35 = dateTime32.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology40 = chronology36.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology36.weekyearOfCentury();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(83968099800000L, chronology36);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtStartOfDay(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusDays((int) '#');
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(dateTimeZone53);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = localDate54.toDateTimeAtStartOfDay(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime49.toDateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime61 = dateTime49.plusWeeks(5);
        int int62 = dateTimeZone45.getOffset((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime13.toMutableDateTime(dateTimeZone45);
        long long65 = dateTimeZone10.getMillisKeepLocal(dateTimeZone45, (long) 365);
        java.lang.String str67 = dateTimeZone10.getNameKey(83652552000000L);
        boolean boolean68 = dateTimeZone10.isFixed();
        org.joda.time.DateTime dateTime69 = localDate8.toDateTimeAtCurrentTime(dateTimeZone10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and mutableDateTime63", (dateTime13.compareTo(mutableDateTime63) == 0) == dateTime13.equals(mutableDateTime63));
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test184");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 4, dateTimeZone3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readablePeriod5);
        int int7 = dateTime6.getMillisOfDay();
        org.joda.time.Instant instant8 = dateTime6.toInstant();
        int int9 = dateTime6.getSecondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant8", (dateTime6.compareTo(instant8) == 0) == dateTime6.equals(instant8));
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test185");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusMillis(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        java.lang.String str8 = durationFieldType7.getName();
        org.joda.time.DateTime dateTime10 = dateTime6.withFieldAdded(durationFieldType7, 1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone12.isStandardOffset(10L);
        java.lang.Object obj15 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long22 = dateTimeZone18.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(obj15, dateTimeZone18);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTime();
        int int25 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime23);
        long long29 = dateTimeZone12.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime10.toMutableDateTime(dateTimeZone12);
        int int32 = dateTimeZone12.getStandardOffset(1644572294922L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and mutableDateTime30", (dateTime10.compareTo(mutableDateTime30) == 0) == dateTime10.equals(mutableDateTime30));
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test186");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.DateTime.Property property23 = dateTime16.centuryOfEra();
        org.joda.time.DateTime dateTime25 = dateTime16.withCenturyOfEra(20);
        int int26 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime27 = dateTime9.toDateTime(dateTimeZone12);
        boolean boolean29 = dateTimeZone12.isStandardOffset((long) 34608860);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime27", (dateTime9.compareTo(dateTime27) == 0) == dateTime9.equals(dateTime27));
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test187");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.DateTime.Property property23 = dateTime16.centuryOfEra();
        org.joda.time.DateTime dateTime25 = dateTime16.withCenturyOfEra(20);
        int int26 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime27 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.plus(readablePeriod32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMonths((int) (byte) 10);
        int int36 = property28.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime27", (dateTime9.compareTo(dateTime27) == 0) == dateTime9.equals(dateTime27));
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test188");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology4.eras();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.halfdayOfDay();
        org.joda.time.DurationField durationField8 = chronology4.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField6, durationField8, and durationField6", !(durationField6.compareTo(durationField8) == 0) || (Math.signum(durationField6.compareTo(durationField6)) == Math.signum(durationField8.compareTo(durationField6))));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test189");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        java.lang.Object obj13 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long20 = dateTimeZone16.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(obj13, dateTimeZone16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        java.lang.String str24 = dateTimeZone16.getShortName((long) 12);
        org.joda.time.DateTime dateTime25 = dateTime4.toDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property31 = dateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = dateTime30.toLocalDateTime();
        boolean boolean33 = dateTimeZone16.isLocalDateTimeGap(localDateTime32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test190");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime4.getYearOfCentury();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime4.withDurationAdded(readableDuration11, (int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology26 = chronology22.withZone(dateTimeZone25);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now(chronology26);
        org.joda.time.DateTime dateTime28 = dateTime13.withChronology(chronology26);
        boolean boolean30 = dateTime13.isBefore(83968449000000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime28", (dateTime13.compareTo(dateTime28) == 0) == dateTime13.equals(dateTime28));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test191");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder3.setTimeOfDay((int) 'x', (int) ' ', 0);
        java.util.Calendar.Builder builder11 = builder3.setTimeOfDay((int) (short) -1, 0, 2730);
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        calendar13.setLenient(true);
        calendar13.setMinimalDaysInFirstWeek((int) (short) 1);
        calendar13.setMinimalDaysInFirstWeek(2730);
        calendar13.clear();
        int int21 = calendar13.getFirstDayOfWeek();
        java.lang.Object obj22 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long29 = dateTimeZone25.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(obj22, dateTimeZone25);
        org.joda.time.DateTime dateTime31 = dateTime30.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime30.getZone();
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        calendar13.setTimeZone(timeZone33);
        java.util.Calendar.Builder builder36 = builder11.setTimeZone(timeZone33);
        java.util.Locale locale40 = new java.util.Locale("Property[dayOfMonth]", "fr", "10");
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        java.lang.String str43 = locale42.getLanguage();
        java.lang.String str44 = locale41.getDisplayScript(locale42);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(locale42);
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(locale42);
        java.lang.String str47 = locale40.getDisplayCountry(locale42);
        java.lang.String str48 = locale42.getVariant();
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone33, locale42);
        java.lang.String str50 = locale42.getScript();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar45 and calendar49", (calendar45.compareTo(calendar49) == 0) == calendar45.equals(calendar49));
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test192");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        calendar1.setTimeInMillis(1L);
        int int12 = calendar1.getGreatestMinimum(8);
        int int13 = calendar1.getWeeksInWeekYear();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime19.hourOfDay();
        org.joda.time.DateTime dateTime22 = dateTime19.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology27 = chronology23.withZone(dateTimeZone26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.days();
        java.lang.String str35 = durationFieldType34.getName();
        org.joda.time.DateTime dateTime37 = dateTime33.withFieldAdded(durationFieldType34, (int) 'u');
        int int38 = dateTimeZone26.getOffset((org.joda.time.ReadableInstant) dateTime33);
        java.util.TimeZone timeZone39 = dateTimeZone26.toTimeZone();
        calendar1.setTimeZone(timeZone39);
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(locale41);
        calendar42.setLenient(true);
        calendar42.setMinimalDaysInFirstWeek(1970);
        int int48 = calendar42.getGreatestMinimum(10);
        java.time.Instant instant49 = calendar42.toInstant();
        int int50 = calendar42.getWeekYear();
        calendar42.setMinimalDaysInFirstWeek(8);
        java.lang.Object obj53 = null;
        boolean boolean54 = calendar42.before(obj53);
        java.util.TimeZone timeZone55 = calendar42.getTimeZone();
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone55);
        calendar1.setTimeZone(timeZone55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar42 and calendar56", (calendar42.compareTo(calendar56) == 0) == calendar42.equals(calendar56));
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test193");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.millisOfDay();
        org.joda.time.DurationField durationField14 = chronology10.days();
        org.joda.time.DurationField durationField15 = chronology10.eras();
        long long19 = chronology10.add(1644791716406L, 22896901142399000L, 99);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField14 and durationField15", Math.signum(durationField14.compareTo(durationField15)) == -Math.signum(durationField15.compareTo(durationField14)));
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test194");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withPivotYear(52);
        org.joda.time.Chronology chronology13 = dateTimeFormatter12.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = dateTime19.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property27 = dateTime26.hourOfDay();
        org.joda.time.DateTime dateTime29 = dateTime26.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime19.toMutableDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekOfWeekyear();
        org.joda.time.DurationField durationField34 = chronology30.eras();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter12.withChronology(chronology30);
        org.joda.time.DurationField durationField36 = chronology30.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField34, durationField36, and durationField34", !(durationField34.compareTo(durationField36) == 0) || (Math.signum(durationField34.compareTo(durationField34)) == Math.signum(durationField36.compareTo(durationField34))));
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test195");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str4 = dateTimeZone1.getNameKey((long) 41);
        java.lang.String str6 = dateTimeZone1.getName(48999000L);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((-349259959L), dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean11 = dateTimeZone9.isStandardOffset(10L);
        java.lang.Object obj12 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long19 = dateTimeZone15.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(obj12, dateTimeZone15);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTime();
        int int22 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) dateTime20);
        long long26 = dateTimeZone9.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now(dateTimeZone9);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale29);
        java.lang.String str31 = locale29.getDisplayVariant();
        java.lang.String str32 = dateTimeZone9.getName((long) 2175, locale29);
        int int34 = dateTimeZone9.getStandardOffset((-349259996L));
        java.lang.String str35 = dateTimeZone9.toString();
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight37 = localDate7.toDateMidnight(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withMinuteOfHour(31);
        org.joda.time.DateTime.Property property43 = dateTime40.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property49 = dateTime48.hourOfDay();
        org.joda.time.DateTime dateTime51 = dateTime48.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology52 = dateTime51.getChronology();
        org.joda.time.DateTime dateTime54 = dateTime51.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime56 = dateTime51.plusSeconds(13);
        org.joda.time.DateTime dateTime57 = dateTime51.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime59 = dateTime51.withMillis(26L);
        org.joda.time.DateTime dateTime61 = dateTime59.plusWeeks((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTime dateTime63 = dateTime59.plus(readableDuration62);
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime59.toMutableDateTimeISO();
        boolean boolean65 = dateTime40.equals((java.lang.Object) dateTime59);
        java.lang.Object obj66 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long73 = dateTimeZone69.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(obj66, dateTimeZone69);
        org.joda.time.DateTime dateTime75 = dateTime74.toDateTime();
        org.joda.time.DateTime dateTime77 = dateTime75.withWeekyear(365);
        java.util.TimeZone timeZone78 = null;
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone78);
        org.joda.time.MonthDay monthDay80 = org.joda.time.MonthDay.now(dateTimeZone79);
        boolean boolean82 = dateTimeZone79.isStandardOffset(31525804800035L);
        org.joda.time.DateTime dateTime83 = dateTime75.toDateTime(dateTimeZone79);
        org.joda.time.DateTime dateTime84 = dateTime59.withZoneRetainFields(dateTimeZone79);
        org.joda.time.DateTime dateTime85 = localDate7.toDateTimeAtStartOfDay(dateTimeZone79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime83", (dateTime20.compareTo(dateTime83) == 0) == dateTime20.equals(dateTime83));
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test196");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withDurationAdded(1L, 52);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear(52);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded(readableDuration12, (int) 'a');
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime14.toMutableDateTime(chronology16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant15", (dateTime14.compareTo(instant15) == 0) == dateTime14.equals(instant15));
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test197");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        int int20 = dateTime17.getWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime17.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime17.plus(readablePeriod23);
        int int25 = property13.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = property13.addToCopy((long) 11);
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("fr");
        java.lang.String str30 = property13.getAsShortText(locale29);
        org.joda.time.DateTime dateTime31 = property13.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(21);
        org.joda.time.DateTime dateTime34 = dateTime31.withZone(dateTimeZone33);
        boolean boolean36 = dateTimeZone33.isStandardOffset(9223372036667575807L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime34", (dateTime31.compareTo(dateTime34) == 0) == dateTime31.equals(dateTime34));
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test198");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime dateTime12 = dateTime9.plusMonths((int) 'x');
        int int13 = dateTime9.getMonthOfYear();
        org.joda.time.Instant instant14 = dateTime9.toInstant();
        org.joda.time.DateTime dateTime16 = dateTime9.withYear(60);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(100);
        org.joda.time.LocalDate.Property property22 = localDate19.dayOfMonth();
        org.joda.time.LocalDate localDate23 = property22.getLocalDate();
        org.joda.time.LocalDate localDate25 = property22.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate25.minusDays(51);
        org.joda.time.DateTime dateTime28 = localDate27.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight29 = localDate27.toDateMidnight();
        int int30 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight29);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone32);
        org.joda.time.LocalDate localDate35 = localDate33.withDayOfYear(100);
        org.joda.time.LocalDate localDate37 = localDate35.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra(9);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.days();
        java.lang.String str46 = durationFieldType45.getName();
        org.joda.time.DateTime dateTime48 = dateTime44.withFieldAdded(durationFieldType45, (int) 'u');
        org.joda.time.DateTime dateTime49 = dateTime44.toDateTimeISO();
        org.joda.time.DateTime dateTime50 = localDate39.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime.Property property51 = dateTime50.dayOfMonth();
        boolean boolean52 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime54 = dateTime50.withWeekyear(1969);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and instant14", (dateTime9.compareTo(instant14) == 0) == dateTime9.equals(instant14));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test199");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        java.lang.Object obj13 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long20 = dateTimeZone16.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(obj13, dateTimeZone16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        java.lang.String str24 = dateTimeZone16.getShortName((long) 12);
        org.joda.time.DateTime dateTime25 = dateTime4.toDateTime(dateTimeZone16);
        int int27 = dateTimeZone16.getOffset((long) 23628);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test200");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        java.lang.String str6 = durationFieldType5.getName();
        org.joda.time.DateTime dateTime8 = dateTime4.withFieldAdded(durationFieldType5, (int) 'u');
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate12 = localDate9.withPeriodAdded(readablePeriod10, (int) (byte) 0);
        int int13 = localDate12.getYearOfCentury();
        boolean boolean15 = localDate12.equals((java.lang.Object) 32762L);
        org.joda.time.Chronology chronology16 = localDate12.getChronology();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime8.toMutableDateTime(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime17", (dateTime8.compareTo(mutableDateTime17) == 0) == dateTime8.equals(mutableDateTime17));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test201");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear(100);
        int int14 = localDate11.size();
        org.joda.time.LocalDate localDate16 = localDate11.plusMonths(6);
        int int18 = localDate16.getValue(0);
        java.lang.String str19 = localDate16.toString();
        org.joda.time.LocalDate localDate21 = localDate16.withWeekyear(1);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = localDate21.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTime dateTime30 = dateTime7.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = dateTime7.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime36.hourOfDay();
        org.joda.time.DateTime dateTime39 = dateTime36.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology44 = chronology40.withZone(dateTimeZone43);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(dateTimeZone48);
        long long53 = dateTimeZone48.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 'a', dateTimeZone48);
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(locale56);
        java.lang.String str58 = locale56.getCountry();
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str60 = locale56.getDisplayVariant(locale59);
        java.lang.String str61 = dateTimeZone48.getShortName((long) 20, locale56);
        java.lang.String str62 = locale56.getDisplayScript();
        java.lang.String str63 = locale56.getDisplayName();
        java.lang.String str64 = dateTimeZone43.getShortName((long) 9, locale56);
        org.joda.time.DateTime dateTime65 = dateTime31.toDateTime(dateTimeZone43);
        org.joda.time.DateTime dateTime67 = dateTime31.plusDays(3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime65", (dateTime31.compareTo(dateTime65) == 0) == dateTime31.equals(dateTime65));
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test202");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 10);
        java.lang.Integer int7 = dateTimeFormatter6.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((int) (short) 1);
        java.lang.Integer int10 = dateTimeFormatter6.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime17.hourOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.MonthDay monthDay22 = monthDay12.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.millisOfDay();
        org.joda.time.DurationField durationField25 = chronology21.days();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField27 = chronology21.dayOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter6.withChronology(chronology21);
        org.joda.time.DurationField durationField29 = chronology21.eras();
        org.joda.time.DurationField durationField30 = chronology21.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField25 and durationField29", Math.signum(durationField25.compareTo(durationField29)) == -Math.signum(durationField29.compareTo(durationField25)));
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test203");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime9.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone12.isStandardOffset(10L);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = dateTime9.plusHours(36);
        java.util.Locale.Category category18 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str22 = locale19.getExtension('a');
        java.util.Locale.setDefault(category18, locale19);
        java.util.Calendar calendar24 = dateTime17.toCalendar(locale19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime15", (dateTime9.compareTo(dateTime15) == 0) == dateTime9.equals(dateTime15));
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test204");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.millisOfDay();
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property10 = monthDay9.monthOfYear();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale11.getDisplayScript(locale12);
        int int15 = property10.getMaximumTextLength(locale11);
        java.lang.String str16 = property10.getAsString();
        java.lang.String str17 = property10.getAsShortText();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        int int19 = property10.getMaximumTextLength(locale18);
        java.lang.String str20 = dateTimeField6.getAsShortText(2, locale18);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property26 = dateTime25.hourOfDay();
        org.joda.time.DateTime dateTime28 = dateTime25.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.hours();
        org.joda.time.DurationField durationField31 = chronology29.hours();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.halfdayOfDay();
        boolean boolean35 = dateTimeField34.isLenient();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.MonthDay monthDay37 = new org.joda.time.MonthDay(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property43 = dateTime42.hourOfDay();
        org.joda.time.DateTime dateTime45 = dateTime42.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology46 = dateTime45.getChronology();
        org.joda.time.MonthDay monthDay47 = monthDay37.withChronologyRetainFields(chronology46);
        org.joda.time.DurationField durationField48 = chronology46.days();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField50 = chronology46.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 4, dateTimeZone55);
        java.util.Locale locale58 = java.util.Locale.ITALIAN;
        java.lang.String str59 = dateTimeZone55.getShortName((long) 0, locale58);
        org.joda.time.MonthDay monthDay61 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property62 = monthDay61.monthOfYear();
        java.util.Locale locale63 = java.util.Locale.ITALY;
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        java.lang.String str65 = locale64.getLanguage();
        java.lang.String str66 = locale63.getDisplayScript(locale64);
        int int67 = property62.getMaximumTextLength(locale63);
        org.joda.time.DurationField durationField68 = property62.getDurationField();
        int int69 = property62.getMinimumValue();
        java.util.Locale locale70 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale70);
        java.lang.String str72 = locale70.getDisplayVariant();
        boolean boolean73 = property62.equals((java.lang.Object) str72);
        java.util.Locale.Category category74 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale75 = java.util.Locale.getDefault(category74);
        java.util.Locale.setDefault(locale75);
        java.util.Locale locale77 = locale75.stripExtensions();
        int int78 = property62.getMaximumTextLength(locale75);
        java.lang.String str79 = locale58.getDisplayCountry(locale75);
        java.lang.String str80 = dateTimeField50.getAsShortText(0L, locale75);
        java.util.Locale.Category category81 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale82 = java.util.Locale.getDefault(category81);
        java.util.Locale.setDefault(locale82);
        java.util.Locale locale84 = locale82.stripExtensions();
        java.lang.String str85 = locale75.getDisplayScript(locale84);
        int int86 = dateTimeField34.getMaximumTextLength(locale84);
        java.lang.String str87 = locale18.getDisplayVariant(locale84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField5 and durationField48", (durationField5.compareTo(durationField48) == 0) == durationField5.equals(durationField48));
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test205");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime4.minusSeconds((int) (short) -1);
        org.joda.time.DateTime.Property property16 = dateTime4.centuryOfEra();
        org.joda.time.DateTime.Property property17 = dateTime4.centuryOfEra();
        org.joda.time.DateTime.Property property18 = dateTime4.weekyear();
        org.joda.time.DurationField durationField19 = property18.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test206");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.DateTime.Property property23 = dateTime16.centuryOfEra();
        org.joda.time.DateTime dateTime25 = dateTime16.withCenturyOfEra(20);
        int int26 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime27 = dateTime9.toDateTime(dateTimeZone12);
        int int28 = dateTime27.getMillisOfSecond();
        org.joda.time.DateTime dateTime31 = dateTime27.withDurationAdded(392358211200000L, 14340);
        int int32 = dateTime31.getSecondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime27", (dateTime9.compareTo(dateTime27) == 0) == dateTime9.equals(dateTime27));
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test207");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays((int) '#');
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = localDate8.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime3.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = dateTime3.plusWeeks(5);
        org.joda.time.Chronology chronology16 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekyear();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology16);
        org.joda.time.DurationField durationField19 = chronology16.months();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 364, chronology16);
        org.joda.time.DurationField durationField21 = chronology16.eras();
        org.joda.time.DurationField durationField22 = chronology16.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField21", Math.signum(durationField22.compareTo(durationField21)) == -Math.signum(durationField21.compareTo(durationField22)));
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test208");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.plus(readablePeriod21);
        int int23 = property17.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDate localDate24 = property17.withMaximumValue();
        int int25 = property17.getMaximumValue();
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale26);
        calendar27.setLenient(true);
        calendar27.setMinimalDaysInFirstWeek(1970);
        int int33 = calendar27.getGreatestMinimum(10);
        java.time.Instant instant34 = calendar27.toInstant();
        calendar27.setLenient(false);
        java.util.TimeZone timeZone37 = calendar27.getTimeZone();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale38);
        java.lang.String str40 = locale38.getDisplayCountry();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone37, locale38);
        java.lang.String str42 = property17.getAsShortText(locale38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar27 and calendar41", (calendar27.compareTo(calendar41) == 0) == calendar27.equals(calendar41));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test209");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime4.getYearOfCentury();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime4.withDurationAdded(readableDuration11, (int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology26 = chronology22.withZone(dateTimeZone25);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now(chronology26);
        org.joda.time.DateTime dateTime28 = dateTime13.withChronology(chronology26);
        org.joda.time.DateTime dateTime30 = dateTime13.minusMinutes(10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime28", (dateTime13.compareTo(dateTime28) == 0) == dateTime13.equals(dateTime28));
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test210");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1969-12-31T23:59:59.999Z");
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears(17);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getDurationType();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate10.toDateTimeAtStartOfDay(dateTimeZone12);
        java.util.Date date15 = dateTime14.toDate();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays((int) '#');
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime18.toDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime30 = dateTime18.minusMinutes(52);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone32);
        long long36 = dateTimeZone32.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime37 = dateTime18.withZone(dateTimeZone32);
        int int38 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology39 = dateTime18.getChronology();
        org.joda.time.DurationField durationField40 = durationFieldType7.getField(chronology39);
        org.joda.time.DateTime dateTime41 = dateTime3.withChronology(chronology39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime18", (dateTime1.compareTo(dateTime18) == 0) == dateTime1.equals(dateTime18));
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test211");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays((int) '#');
        int int15 = dateTime12.getWeekyear();
        org.joda.time.DateMidnight dateMidnight16 = dateTime12.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property18 = dateTime12.property(dateTimeFieldType17);
        boolean boolean19 = localDate4.isSupported(dateTimeFieldType17);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(100);
        org.joda.time.LocalDate.Property property25 = localDate22.dayOfMonth();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.LocalDate localDate28 = property25.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate29 = property25.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property25.getFieldType();
        boolean boolean31 = localDate4.equals((java.lang.Object) property25);
        org.joda.time.LocalDate localDate33 = localDate4.withCenturyOfEra(816);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(dateTimeZone35);
        org.joda.time.LocalDate localDate38 = localDate36.withDayOfYear(100);
        int int39 = localDate36.size();
        org.joda.time.LocalDate localDate41 = localDate36.plusMonths(6);
        int int42 = localDate4.compareTo((org.joda.time.ReadablePartial) localDate41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.plus(readablePeriod46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property50 = dateTime49.dayOfWeek();
        org.joda.time.DateTime dateTime51 = property50.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate52 = dateTime51.toLocalDate();
        org.joda.time.DateTime dateTime53 = dateTime51.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime55 = dateTime53.toMutableDateTime(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = localDate4.toDateTimeAtCurrentTime(dateTimeZone54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime51 and mutableDateTime55", (dateTime51.compareTo(mutableDateTime55) == 0) == dateTime51.equals(mutableDateTime55));
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test212");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder0.setDate(59, (int) (byte) 1, 2022);
        java.util.Calendar.Builder builder11 = builder0.setDate(14399, 52, 4);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay(0, 14, (int) 'u');
        java.util.Calendar.Builder builder20 = builder15.setTimeOfDay(5, 11, 1439, (int) '#');
        java.util.Calendar.Builder builder24 = builder20.setTimeOfDay((int) (short) 1, 5, (int) 'x');
        java.util.Calendar.Builder builder28 = builder24.setDate(3659999, 26, 227);
        java.util.Calendar.Builder builder32 = builder28.setWeekDate(19005, (int) (short) -1, 41);
        java.util.Calendar.Builder builder33 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder36 = builder33.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder40 = builder36.setTimeOfDay((int) 'x', (int) ' ', 0);
        java.util.Calendar.Builder builder44 = builder36.setTimeOfDay((int) (short) -1, 0, 2730);
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(locale45);
        calendar46.setLenient(true);
        calendar46.setMinimalDaysInFirstWeek((int) (short) 1);
        calendar46.setMinimalDaysInFirstWeek(2730);
        calendar46.clear();
        int int54 = calendar46.getFirstDayOfWeek();
        java.lang.Object obj55 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long62 = dateTimeZone58.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(obj55, dateTimeZone58);
        org.joda.time.DateTime dateTime64 = dateTime63.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone65 = dateTime63.getZone();
        java.util.TimeZone timeZone66 = dateTimeZone65.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        calendar46.setTimeZone(timeZone66);
        java.util.Calendar.Builder builder69 = builder44.setTimeZone(timeZone66);
        java.util.Locale locale73 = new java.util.Locale("Property[dayOfMonth]", "fr", "10");
        java.util.Locale locale74 = java.util.Locale.ITALY;
        java.util.Locale locale75 = java.util.Locale.ITALIAN;
        java.lang.String str76 = locale75.getLanguage();
        java.lang.String str77 = locale74.getDisplayScript(locale75);
        java.util.Calendar calendar78 = java.util.Calendar.getInstance(locale75);
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(locale75);
        java.lang.String str80 = locale73.getDisplayCountry(locale75);
        java.lang.String str81 = locale75.getVariant();
        java.util.Calendar calendar82 = java.util.Calendar.getInstance(timeZone66, locale75);
        java.util.Calendar.Builder builder83 = builder28.setTimeZone(timeZone66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar79 and calendar82", (calendar79.compareTo(calendar82) == 0) == calendar79.equals(calendar82));
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test213");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusMillis(2022);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) dateTime6);
        org.joda.time.DateTime dateTime9 = dateTime6.plusYears(2);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded(readablePeriod10, 2021);
        org.joda.time.DateTime dateTime14 = dateTime12.plus((long) 5);
        org.joda.time.Instant instant15 = dateTime12.toInstant();
        int int16 = dateTime12.getHourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant15", (dateTime12.compareTo(instant15) == 0) == dateTime12.equals(instant15));
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test214");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime4.getYearOfCentury();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime4.withDurationAdded(readableDuration11, (int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology26 = chronology22.withZone(dateTimeZone25);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now(chronology26);
        org.joda.time.DateTime dateTime28 = dateTime13.withChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime28", (dateTime4.compareTo(dateTime28) == 0) == dateTime4.equals(dateTime28));
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test215");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField5 = monthDay3.getField((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.era();
        int int7 = monthDay3.indexOf(dateTimeFieldType6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        boolean boolean17 = monthDay3.isSupported(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType15.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property26 = dateTime25.hourOfDay();
        org.joda.time.DateTime dateTime28 = dateTime25.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.MonthDay monthDay30 = monthDay20.withChronologyRetainFields(chronology29);
        org.joda.time.DurationField durationField31 = chronology29.days();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.monthOfYear();
        org.joda.time.DurationField durationField34 = durationFieldType18.getField(chronology29);
        org.joda.time.MonthDay monthDay35 = new org.joda.time.MonthDay((-30516339837270L), chronology29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField31 and durationField34", Math.signum(durationField31.compareTo(durationField34)) == -Math.signum(durationField34.compareTo(durationField31)));
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test216");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1969-12-31T23:59:59.999Z");
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears(17);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MonthDay monthDay5 = new org.joda.time.MonthDay(dateTimeZone4);
        org.joda.time.MonthDay monthDay7 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay9 = monthDay7.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay7.minus(readablePeriod10);
        org.joda.time.MonthDay.Property property12 = monthDay7.dayOfMonth();
        java.lang.String str13 = property12.toString();
        java.util.Locale locale14 = null;
        int int15 = property12.getMaximumShortTextLength(locale14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property21 = dateTime20.hourOfDay();
        java.lang.String str22 = property21.getAsShortText();
        org.joda.time.MonthDay monthDay23 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay25 = monthDay23.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField27 = monthDay25.getField((int) (byte) 0);
        java.util.Locale locale31 = new java.util.Locale("", "", "hi!");
        int int32 = dateTimeField27.getMaximumTextLength(locale31);
        long long35 = dateTimeField27.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay38 = monthDay36.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay36.minus(readablePeriod39);
        org.joda.time.MonthDay monthDay41 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay43 = monthDay41.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField45 = monthDay43.getField((int) (byte) 0);
        java.util.Locale locale49 = new java.util.Locale("", "", "hi!");
        int int50 = dateTimeField45.getMaximumTextLength(locale49);
        java.lang.String str51 = dateTimeField27.getAsShortText((org.joda.time.ReadablePartial) monthDay36, locale49);
        int int52 = property21.getMaximumTextLength(locale49);
        org.joda.time.DateTimeField dateTimeField53 = property21.getField();
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(locale54);
        int int56 = property21.getMaximumTextLength(locale54);
        boolean boolean57 = locale54.hasExtensions();
        java.lang.String str58 = locale54.getDisplayCountry();
        boolean boolean59 = locale54.hasExtensions();
        int int60 = property12.getMaximumShortTextLength(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property12.getFieldType();
        boolean boolean62 = monthDay5.isSupported(dateTimeFieldType61);
        int int63 = dateTime1.get(dateTimeFieldType61);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.DateTime dateTime65 = dateTime1.minus(readablePeriod64);
        int int66 = dateTime1.getMillisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime1", (dateTime18.compareTo(dateTime1) == 0) == dateTime18.equals(dateTime1));
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test217");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime9.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone12.isStandardOffset(10L);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = dateTime9.minusYears(0);
        java.util.Calendar.Builder builder19 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder22 = builder19.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder26 = builder19.setDate(59, (int) (byte) 1, 2022);
        java.util.Calendar.Builder builder30 = builder19.setDate(14399, 52, 4);
        java.util.Calendar.Builder builder34 = builder19.setTimeOfDay(0, 14, (int) 'u');
        java.util.Calendar.Builder builder38 = builder34.setTimeOfDay(0, 0, 6);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property44 = dateTime43.hourOfDay();
        java.lang.String str45 = property44.getAsShortText();
        org.joda.time.MonthDay monthDay46 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay48 = monthDay46.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField50 = monthDay48.getField((int) (byte) 0);
        java.util.Locale locale54 = new java.util.Locale("", "", "hi!");
        int int55 = dateTimeField50.getMaximumTextLength(locale54);
        long long58 = dateTimeField50.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay59 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay61 = monthDay59.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay59.minus(readablePeriod62);
        org.joda.time.MonthDay monthDay64 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay66 = monthDay64.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField68 = monthDay66.getField((int) (byte) 0);
        java.util.Locale locale72 = new java.util.Locale("", "", "hi!");
        int int73 = dateTimeField68.getMaximumTextLength(locale72);
        java.lang.String str74 = dateTimeField50.getAsShortText((org.joda.time.ReadablePartial) monthDay59, locale72);
        int int75 = property44.getMaximumTextLength(locale72);
        org.joda.time.DateTimeField dateTimeField76 = property44.getField();
        java.util.Locale locale77 = java.util.Locale.FRENCH;
        java.util.Calendar calendar78 = java.util.Calendar.getInstance(locale77);
        int int79 = property44.getMaximumTextLength(locale77);
        java.lang.String str80 = locale77.getDisplayVariant();
        java.util.Locale locale81 = java.util.Locale.US;
        java.lang.String str82 = locale81.toLanguageTag();
        java.lang.String str83 = locale77.getDisplayName(locale81);
        java.util.Calendar.Builder builder84 = builder38.setLocale(locale77);
        java.lang.String str85 = locale77.getLanguage();
        java.lang.String str86 = dateTime9.toString("--01-21", locale77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime9", (dateTime15.compareTo(dateTime9) == 0) == dateTime15.equals(dateTime9));
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test218");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays((int) '#');
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = localDate8.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime3.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = dateTime3.plusWeeks(5);
        org.joda.time.Chronology chronology16 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekyear();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology16);
        org.joda.time.DurationField durationField19 = chronology16.months();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 364, chronology16);
        org.joda.time.DurationField durationField21 = chronology16.eras();
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now(chronology16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField19 and durationField21", Math.signum(durationField19.compareTo(durationField21)) == -Math.signum(durationField21.compareTo(durationField19)));
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test219");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology14 = chronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.weekyearOfCentury();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(83968099800000L, chronology10);
        org.joda.time.DurationField durationField17 = durationFieldType0.getField(chronology10);
        org.joda.time.DurationField durationField18 = chronology10.eras();
        org.joda.time.DateTimeField dateTimeField19 = chronology10.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField17 and durationField18", Math.signum(durationField17.compareTo(durationField18)) == -Math.signum(durationField18.compareTo(durationField17)));
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test220");
        java.util.Date date5 = new java.util.Date(7, 11, (int) (byte) -1, 0, 2022);
        java.lang.String str6 = date5.toLocaleString();
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.fromDateFields(date5);
        org.joda.time.MonthDay.Property property8 = monthDay7.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime16 = dateTime13.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology21 = chronology17.withZone(dateTimeZone20);
        java.lang.String str22 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.halfdayOfDay();
        org.joda.time.DurationField durationField26 = chronology17.halfdays();
        org.joda.time.MonthDay monthDay27 = monthDay7.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeField dateTimeField28 = chronology17.millisOfSecond();
        java.util.Calendar.Builder builder30 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder33 = builder30.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder37 = builder33.setTimeOfDay((int) 'x', (int) ' ', 0);
        java.util.Calendar.Builder builder41 = builder33.setTimeOfDay((int) (short) -1, 0, 2730);
        java.util.Locale locale42 = java.util.Locale.FRENCH;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(locale42);
        calendar43.setLenient(true);
        calendar43.setMinimalDaysInFirstWeek((int) (short) 1);
        calendar43.setMinimalDaysInFirstWeek(2730);
        calendar43.clear();
        int int51 = calendar43.getFirstDayOfWeek();
        java.lang.Object obj52 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long59 = dateTimeZone55.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(obj52, dateTimeZone55);
        org.joda.time.DateTime dateTime61 = dateTime60.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime60.getZone();
        java.util.TimeZone timeZone63 = dateTimeZone62.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        calendar43.setTimeZone(timeZone63);
        java.util.Calendar.Builder builder66 = builder41.setTimeZone(timeZone63);
        java.util.Locale locale70 = new java.util.Locale("Property[dayOfMonth]", "fr", "10");
        java.util.Locale locale71 = java.util.Locale.ITALY;
        java.util.Locale locale72 = java.util.Locale.ITALIAN;
        java.lang.String str73 = locale72.getLanguage();
        java.lang.String str74 = locale71.getDisplayScript(locale72);
        java.util.Calendar calendar75 = java.util.Calendar.getInstance(locale72);
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(locale72);
        java.lang.String str77 = locale70.getDisplayCountry(locale72);
        java.lang.String str78 = locale72.getVariant();
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(timeZone63, locale72);
        java.lang.String str80 = dateTimeField28.getAsText((long) 41, locale72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar75 and calendar79", (calendar75.compareTo(calendar79) == 0) == calendar75.equals(calendar79));
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test221");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime4.minusSeconds((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        java.lang.String str17 = dateTimeFieldType16.getName();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType16.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays((int) '#');
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone25);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtStartOfDay(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime21.toDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime33 = dateTime21.plusWeeks(5);
        org.joda.time.Chronology chronology34 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.weekyear();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology34);
        boolean boolean37 = durationFieldType18.isSupported(chronology34);
        org.joda.time.DateTime dateTime38 = dateTime4.toDateTime(chronology34);
        org.joda.time.DateTime dateTime40 = dateTime4.plus(62135971200000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime4", (instant12.compareTo(dateTime4) == 0) == instant12.equals(dateTime4));
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test222");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        java.lang.String str11 = property10.getAsText();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.plus(readablePeriod16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis(2022);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays((int) '#');
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = localDate28.toDateTimeAtStartOfDay(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime23.toDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime35 = dateTime23.plusWeeks(5);
        org.joda.time.Chronology chronology36 = dateTime23.getChronology();
        org.joda.time.Chronology chronology37 = dateTime23.getChronology();
        org.joda.time.DateTime dateTime38 = dateTime20.withChronology(chronology37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(5907399684280970662L, chronology37);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology37);
        int int41 = dateTime40.getYearOfCentury();
        long long42 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateMidnight dateMidnight43 = dateTime40.toDateMidnight();
        org.joda.time.DateTime dateTime45 = dateTime40.plusMonths(11);
        org.joda.time.DateTime dateTime47 = dateTime45.minusYears((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property54 = dateTime53.hourOfDay();
        org.joda.time.DateTime dateTime56 = dateTime53.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology57 = dateTime56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology61 = chronology57.withZone(dateTimeZone60);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) (byte) 1, dateTimeZone60);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(dateTimeZone60);
        java.util.Locale.Builder builder65 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder68 = builder65.setExtension('u', "en-US");
        java.util.Locale locale69 = builder68.build();
        java.lang.String str70 = dateTimeZone60.getName((long) (short) 0, locale69);
        org.joda.time.DateTime dateTime71 = dateTime47.withZone(dateTimeZone60);
        long long75 = dateTimeZone60.convertLocalToUTC(1548598507275653000L, true, 187200048L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime47 and dateTime71", (dateTime47.compareTo(dateTime71) == 0) == dateTime47.equals(dateTime71));
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test223");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        calendar1.setLenient(false);
        java.util.TimeZone timeZone11 = calendar1.getTimeZone();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone11, locale12);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone11);
        java.time.Instant instant17 = calendar16.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar15", (calendar1.compareTo(calendar15) == 0) == calendar1.equals(calendar15));
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test224");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        org.joda.time.LocalDate localDate13 = localDate4.withYearOfEra(32769);
        int int14 = localDate4.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) localDate4);
        org.joda.time.LocalDate localDate17 = localDate15.plusMonths((-1970));
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property26 = dateTime22.yearOfCentury();
        org.joda.time.DateTime dateTime28 = dateTime22.plusYears((int) '4');
        org.joda.time.LocalTime localTime29 = dateTime28.toLocalTime();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(dateTimeZone31);
        org.joda.time.LocalDate localDate34 = localDate32.withDayOfYear(100);
        org.joda.time.LocalDate.Property property35 = localDate32.dayOfMonth();
        org.joda.time.LocalDate localDate36 = property35.getLocalDate();
        org.joda.time.LocalDate localDate38 = property35.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate39 = property35.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property35.getFieldType();
        org.joda.time.LocalDate localDate41 = property35.getLocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.withYear((int) ' ');
        org.joda.time.LocalDate localDate45 = localDate43.withYear((int) (byte) 100);
        org.joda.time.DateTime dateTime46 = localDate45.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime46.toMutableDateTime(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = localDate17.toDateTime(localTime29, dateTimeZone48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime46 and mutableDateTime49", (dateTime46.compareTo(mutableDateTime49) == 0) == dateTime46.equals(mutableDateTime49));
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test225");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withMinuteOfHour(8);
        boolean boolean11 = dateTime10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays((int) '#');
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime14.toDateTime(dateTimeZone21);
        java.lang.Object obj25 = null;
        boolean boolean26 = dateTimeZone21.equals(obj25);
        int int28 = dateTimeZone21.getStandardOffset((long) 0);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate32 = localDate29.withPeriodAdded(readablePeriod30, (int) (byte) 0);
        org.joda.time.LocalDate.Property property33 = localDate29.year();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 4, dateTimeZone37);
        org.joda.time.DateTime dateTime39 = localDate29.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        java.lang.Object obj40 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long47 = dateTimeZone43.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(obj40, dateTimeZone43);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime38.toMutableDateTime(dateTimeZone43);
        int int51 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime10.toMutableDateTime(dateTimeZone21);
        int int53 = dateTime10.getCenturyOfEra();
        org.joda.time.DateTime dateTime55 = dateTime10.withWeekyear(14);
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.parse("1969-12-31T23:59:59.999Z");
        org.joda.time.DateTime dateTime59 = dateTime57.plusYears(17);
        int int60 = dateTime59.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime59.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.lang.String str63 = dateTimeFieldType62.toString();
        boolean boolean64 = mutableDateTime61.isSupported(dateTimeFieldType62);
        int int65 = dateTime10.get(dateTimeFieldType62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime57", (dateTime2.compareTo(dateTime57) == 0) == dateTime2.equals(dateTime57));
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test226");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay(0L);
        java.lang.String str10 = monthDay9.toString();
        org.joda.time.Chronology chronology11 = monthDay9.getChronology();
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.minus((long) 19);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        org.joda.time.LocalDate localDate19 = localDate17.withDayOfYear(100);
        org.joda.time.LocalDate.Property property20 = localDate17.dayOfMonth();
        org.joda.time.DateTime dateTime21 = localDate17.toDateTimeAtStartOfDay();
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTime dateTime23 = localDate17.toDateTime(localTime22);
        org.joda.time.DateTime.Property property24 = dateTime23.secondOfMinute();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.LocalDate localDate29 = localDate27.withDayOfYear(100);
        org.joda.time.Interval interval30 = localDate29.toInterval();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.days();
        java.lang.String str32 = durationFieldType31.getName();
        org.joda.time.LocalDate localDate34 = localDate29.withFieldAdded(durationFieldType31, 32770);
        org.joda.time.LocalDate.Property property35 = localDate34.yearOfCentury();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDate34.toDateTime(readableInstant36);
        int int38 = localDate34.getEra();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone40);
        org.joda.time.LocalDate localDate43 = localDate41.withDayOfYear(100);
        int int44 = localDate41.size();
        org.joda.time.LocalDate localDate46 = localDate41.plusMonths(3);
        org.joda.time.LocalDate localDate47 = localDate34.withFields((org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean49 = localDate34.isSupported(dateTimeFieldType48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = localDate34.getFieldTypes();
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(dateTimeZone52);
        boolean boolean55 = dateTimeZone52.isStandardOffset((long) '4');
        org.joda.time.DateTime dateTime56 = localDate34.toDateTimeAtMidnight(dateTimeZone52);
        org.joda.time.Chronology chronology57 = localDate34.getChronology();
        org.joda.time.DateTime dateTime58 = dateTime23.withFields((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.DateTime dateTime60 = dateTime23.plusSeconds(2023);
        boolean boolean61 = dateTime14.isBefore((org.joda.time.ReadableInstant) dateTime23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime12", (dateTime2.compareTo(dateTime12) == 0) == dateTime2.equals(dateTime12));
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test227");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime9.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone12.isStandardOffset(10L);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = dateTime9.minusYears(0);
        org.joda.time.DateTime dateTime18 = dateTime9.withTimeAtStartOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime9", (dateTime15.compareTo(dateTime9) == 0) == dateTime15.equals(dateTime9));
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test228");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        int int20 = dateTime19.getWeekyear();
        org.joda.time.DateTime.Property property21 = dateTime19.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property21.getFieldType();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType22.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property30 = dateTime29.hourOfDay();
        org.joda.time.DateTime dateTime32 = dateTime29.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology37 = chronology33.withZone(dateTimeZone36);
        org.joda.time.LocalDate localDate38 = org.joda.time.LocalDate.now(chronology37);
        org.joda.time.DurationField durationField39 = chronology37.seconds();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfWeek();
        org.joda.time.DurationField durationField41 = chronology37.eras();
        boolean boolean42 = dateTimeFieldType22.isSupported(chronology37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField39 and durationField41", Math.signum(durationField39.compareTo(durationField41)) == -Math.signum(durationField41.compareTo(durationField39)));
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test229");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.roundHalfCeilingCopy();
        int int7 = property5.get();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime20.minus((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property29 = dateTime28.hourOfDay();
        org.joda.time.DateTime dateTime31 = dateTime28.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology36 = chronology32.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = chronology32.weekyearOfCentury();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(83968099800000L, chronology32);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = localDate38.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime45 = dateTime43.minusYears((int) (short) 10);
        int int46 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean48 = dateTime45.isAfter(89L);
        org.joda.time.DateTime.Property property49 = dateTime45.year();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.DateTime dateTime51 = dateTime45.plus(readablePeriod50);
        org.joda.time.DateTime dateTime53 = dateTime45.plusWeeks(3659999);
        int int54 = property5.getDifference((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime56 = dateTime53.minusMonths(0);
        org.joda.time.DateTime dateTime58 = dateTime53.plusWeeks(0);
        java.lang.Object obj59 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long66 = dateTimeZone62.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(obj59, dateTimeZone62);
        org.joda.time.DateTime dateTime68 = dateTime67.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone69 = dateTime67.getZone();
        java.util.TimeZone timeZone70 = dateTimeZone69.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        java.util.Locale locale73 = java.util.Locale.FRANCE;
        java.lang.String str74 = locale73.getCountry();
        java.lang.String str75 = dateTimeZone71.getName((-123075459313645000L), locale73);
        org.joda.time.DateTime dateTime76 = dateTime58.withZone(dateTimeZone71);
        boolean boolean77 = dateTimeZone71.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime53 and dateTime76", (dateTime53.compareTo(dateTime76) == 0) == dateTime53.equals(dateTime76));
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test230");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis(2022);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) '#');
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime11.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime11.plusWeeks(5);
        org.joda.time.Chronology chronology24 = dateTime11.getChronology();
        org.joda.time.Chronology chronology25 = dateTime11.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime8.withChronology(chronology25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(5907399684280970662L, chronology25);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology25);
        boolean boolean30 = dateTime28.isEqual((-14L));
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime36.hourOfDay();
        org.joda.time.DateTime dateTime39 = dateTime36.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology44 = chronology40.withZone(dateTimeZone43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (byte) 1, dateTimeZone43);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(dateTimeZone43);
        java.util.Locale.Builder builder48 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder48.setExtension('u', "en-US");
        java.util.Locale locale52 = builder51.build();
        java.lang.String str53 = dateTimeZone43.getName((long) (short) 0, locale52);
        boolean boolean54 = dateTimeZone43.isFixed();
        org.joda.time.DateTime dateTime55 = dateTime28.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime58 = dateTime57.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property64 = dateTime63.hourOfDay();
        org.joda.time.DateTime dateTime66 = dateTime63.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology67 = dateTime66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology71 = chronology67.withZone(dateTimeZone70);
        org.joda.time.DurationField durationField72 = chronology67.weeks();
        org.joda.time.DateTimeField dateTimeField73 = chronology67.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField74 = chronology67.dayOfYear();
        org.joda.time.DurationField durationField75 = chronology67.seconds();
        org.joda.time.DurationField durationField76 = chronology67.minutes();
        org.joda.time.DateTime dateTime77 = dateTime57.withChronology(chronology67);
        org.joda.time.DateTime dateTime79 = dateTime57.plusWeeks((int) ' ');
        long long80 = dateTime57.getMillis();
        int int81 = dateTimeZone43.getOffset((org.joda.time.ReadableInstant) dateTime57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and dateTime55", (dateTime28.compareTo(dateTime55) == 0) == dateTime28.equals(dateTime55));
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test231");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.DateTime dateTime11 = localDate2.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(71);
        org.joda.time.DateTime dateTime14 = dateTime11.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(100);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = dateTime21.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime26 = dateTime21.minusDays((int) 'u');
        int int27 = dateTime21.getYearOfEra();
        org.joda.time.DateTime dateTime29 = dateTime21.plusMillis(4);
        org.joda.time.DateTime.Property property30 = dateTime21.yearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = dateTime21.toLocalDateTime();
        boolean boolean32 = dateTimeZone16.isLocalDateTimeGap(localDateTime31);
        boolean boolean33 = dateTimeZone13.isLocalDateTimeGap(localDateTime31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime14", (dateTime11.compareTo(dateTime14) == 0) == dateTime11.equals(dateTime14));
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test232");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.DateTime dateTime11 = localDate2.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(71);
        org.joda.time.DateTime dateTime14 = dateTime11.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime11.withCenturyOfEra(22);
        org.joda.time.DateTime.Property property17 = dateTime16.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime14", (dateTime11.compareTo(dateTime14) == 0) == dateTime11.equals(dateTime14));
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test233");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate11 = property5.addWrapFieldToCopy(3);
        org.joda.time.LocalDate localDate12 = property5.roundCeilingCopy();
        int int13 = localDate12.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateTime18.toDateMidnight();
        long long21 = dateTime18.getMillis();
        org.joda.time.DateTime.Property property22 = dateTime18.secondOfMinute();
        org.joda.time.DateTime dateTime24 = dateTime18.plusMonths(3659999);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property30 = dateTime29.hourOfDay();
        org.joda.time.DateTime dateTime32 = dateTime29.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology37 = chronology33.withZone(dateTimeZone36);
        long long40 = dateTimeZone36.adjustOffset((-62180539199983L), true);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone36);
        java.lang.String str43 = dateTimeZone36.getName((-187199990L));
        org.joda.time.DateTime dateTime44 = dateTime18.toDateTime(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight45 = localDate12.toDateMidnight(dateTimeZone36);
        org.joda.time.LocalTime localTime46 = null;
        org.joda.time.DateTime dateTime47 = localDate12.toDateTime(localTime46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime44", (dateTime18.compareTo(dateTime44) == 0) == dateTime18.equals(dateTime44));
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test234");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate11 = property5.addWrapFieldToCopy(3);
        org.joda.time.LocalDate localDate12 = property5.roundCeilingCopy();
        int int13 = localDate12.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateTime18.toDateMidnight();
        long long21 = dateTime18.getMillis();
        org.joda.time.DateTime.Property property22 = dateTime18.secondOfMinute();
        org.joda.time.DateTime dateTime24 = dateTime18.plusMonths(3659999);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property30 = dateTime29.hourOfDay();
        org.joda.time.DateTime dateTime32 = dateTime29.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology37 = chronology33.withZone(dateTimeZone36);
        long long40 = dateTimeZone36.adjustOffset((-62180539199983L), true);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone36);
        java.lang.String str43 = dateTimeZone36.getName((-187199990L));
        org.joda.time.DateTime dateTime44 = dateTime18.toDateTime(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight45 = localDate12.toDateMidnight(dateTimeZone36);
        org.joda.time.LocalDate localDate47 = localDate12.minusWeeks(51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime44", (dateTime18.compareTo(dateTime44) == 0) == dateTime18.equals(dateTime44));
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test235");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1969-12-31T23:59:59.999Z");
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears(17);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MonthDay monthDay5 = new org.joda.time.MonthDay(dateTimeZone4);
        org.joda.time.MonthDay monthDay7 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay9 = monthDay7.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay7.minus(readablePeriod10);
        org.joda.time.MonthDay.Property property12 = monthDay7.dayOfMonth();
        java.lang.String str13 = property12.toString();
        java.util.Locale locale14 = null;
        int int15 = property12.getMaximumShortTextLength(locale14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property21 = dateTime20.hourOfDay();
        java.lang.String str22 = property21.getAsShortText();
        org.joda.time.MonthDay monthDay23 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay25 = monthDay23.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField27 = monthDay25.getField((int) (byte) 0);
        java.util.Locale locale31 = new java.util.Locale("", "", "hi!");
        int int32 = dateTimeField27.getMaximumTextLength(locale31);
        long long35 = dateTimeField27.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay38 = monthDay36.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay36.minus(readablePeriod39);
        org.joda.time.MonthDay monthDay41 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay43 = monthDay41.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField45 = monthDay43.getField((int) (byte) 0);
        java.util.Locale locale49 = new java.util.Locale("", "", "hi!");
        int int50 = dateTimeField45.getMaximumTextLength(locale49);
        java.lang.String str51 = dateTimeField27.getAsShortText((org.joda.time.ReadablePartial) monthDay36, locale49);
        int int52 = property21.getMaximumTextLength(locale49);
        org.joda.time.DateTimeField dateTimeField53 = property21.getField();
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(locale54);
        int int56 = property21.getMaximumTextLength(locale54);
        boolean boolean57 = locale54.hasExtensions();
        java.lang.String str58 = locale54.getDisplayCountry();
        boolean boolean59 = locale54.hasExtensions();
        int int60 = property12.getMaximumShortTextLength(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property12.getFieldType();
        boolean boolean62 = monthDay5.isSupported(dateTimeFieldType61);
        int int63 = dateTime1.get(dateTimeFieldType61);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.DateTime dateTime65 = dateTime1.minus(readablePeriod64);
        int int66 = dateTime65.getMillisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime65 and dateTime18", (dateTime65.compareTo(dateTime18) == 0) == dateTime65.equals(dateTime18));
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test236");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withDurationAdded(1L, 52);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear(52);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded(readableDuration12, (int) 'a');
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.plus(readablePeriod16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant15", (dateTime17.compareTo(instant15) == 0) == dateTime17.equals(instant15));
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test237");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateMidnight dateMidnight6 = dateTime4.toDateMidnight();
        long long7 = dateTime4.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime4.minusMonths(1439);
        org.joda.time.DateTime dateTime11 = dateTime9.withYear((int) (short) 1);
        int int12 = dateTime9.getHourOfDay();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        org.joda.time.Interval interval18 = localDate17.toInterval();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        java.lang.String str20 = durationFieldType19.getName();
        org.joda.time.LocalDate localDate22 = localDate17.withFieldAdded(durationFieldType19, 32770);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate24 = localDate17.plus(readablePeriod23);
        org.joda.time.LocalDate localDate26 = localDate17.withYearOfEra(32769);
        org.joda.time.LocalDate localDate28 = localDate17.minusDays((int) (byte) -1);
        org.joda.time.DateTime dateTime29 = localDate28.toDateTimeAtMidnight();
        int int30 = localDate28.getDayOfMonth();
        org.joda.time.Chronology chronology31 = localDate28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime9.toMutableDateTime(chronology31);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now(chronology31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and mutableDateTime32", (dateTime9.compareTo(mutableDateTime32) == 0) == dateTime9.equals(mutableDateTime32));
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test238");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime12 = dateTime7.withCenturyOfEra(0);
        org.joda.time.DateTime dateTime14 = dateTime12.withCenturyOfEra((int) 'a');
        org.joda.time.DateTime dateTime16 = dateTime12.withWeekyear(2022);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MonthDay monthDay19 = new org.joda.time.MonthDay(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime24.hourOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.MonthDay monthDay29 = monthDay19.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.clockhourOfDay();
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay(0L, chronology28);
        org.joda.time.DateTime dateTime32 = dateTime16.toDateTime(chronology28);
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(225);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay(0L);
        java.lang.String str37 = monthDay36.toString();
        org.joda.time.Chronology chronology38 = monthDay36.getChronology();
        org.joda.time.Chronology chronology39 = monthDay36.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.millisOfDay();
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay(0L);
        java.lang.String str44 = monthDay43.toString();
        org.joda.time.Chronology chronology45 = monthDay43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = monthDay43.getField((int) (byte) 1);
        int[] intArray49 = chronology39.get((org.joda.time.ReadablePartial) monthDay43, (long) 349260000);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime32.toMutableDateTime(chronology39);
        org.joda.time.DateTimeField dateTimeField51 = chronology39.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and mutableDateTime50", (dateTime16.compareTo(mutableDateTime50) == 0) == dateTime16.equals(mutableDateTime50));
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test239");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.minusMinutes(52);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        long long20 = dateTimeZone16.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime21 = dateTime2.withZone(dateTimeZone16);
        org.joda.time.DateTime.Property property22 = dateTime2.minuteOfHour();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = dateTimeFormatter25.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays((int) '#');
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone33);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = localDate34.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime29.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = dateTime29.plusWeeks(5);
        org.joda.time.Chronology chronology42 = dateTime29.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter25.withChronology(chronology42);
        org.joda.time.DateTime dateTime44 = dateTime2.withChronology(chronology42);
        org.joda.time.DurationField durationField45 = chronology42.eras();
        org.joda.time.DurationField durationField46 = chronology42.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField45, durationField46, and durationField45", !(durationField45.compareTo(durationField46) == 0) || (Math.signum(durationField45.compareTo(durationField45)) == Math.signum(durationField46.compareTo(durationField45))));
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test240");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        org.joda.time.LocalDate localDate11 = property5.getLocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.withYear((int) ' ');
        org.joda.time.LocalDate localDate15 = localDate13.withYear((int) (byte) 100);
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime16.toMutableDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and mutableDateTime19", (dateTime16.compareTo(mutableDateTime19) == 0) == dateTime16.equals(mutableDateTime19));
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test241");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.roll((int) (short) 100, 0);
        int int8 = calendar1.getGreatestMinimum(0);
        calendar1.clear();
        calendar1.clear(0);
        calendar1.set(8, 0, (int) 'a', 2021, 3);
        java.util.TimeZone timeZone18 = calendar1.getTimeZone();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone18);
        org.joda.time.MonthDay monthDay21 = new org.joda.time.MonthDay(0L);
        java.lang.String str22 = monthDay21.toString();
        org.joda.time.Chronology chronology23 = monthDay21.getChronology();
        org.joda.time.Chronology chronology24 = monthDay21.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial26 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property33 = dateTime32.hourOfDay();
        org.joda.time.DateTime dateTime35 = dateTime32.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology40 = chronology36.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology36.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology36.weekOfWeekyear();
        org.joda.time.MonthDay monthDay44 = new org.joda.time.MonthDay(0L);
        java.lang.String str45 = monthDay44.toString();
        org.joda.time.Chronology chronology46 = monthDay44.getChronology();
        org.joda.time.Chronology chronology47 = monthDay44.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.days();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.millisOfDay();
        org.joda.time.MonthDay monthDay52 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property53 = monthDay52.monthOfYear();
        java.util.Locale locale54 = java.util.Locale.ITALY;
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        java.lang.String str56 = locale55.getLanguage();
        java.lang.String str57 = locale54.getDisplayScript(locale55);
        int int58 = property53.getMaximumTextLength(locale54);
        java.lang.String str59 = property53.getAsString();
        java.lang.String str60 = property53.getAsShortText();
        java.util.Locale locale61 = java.util.Locale.ROOT;
        int int62 = property53.getMaximumTextLength(locale61);
        java.lang.String str63 = dateTimeField49.getAsShortText(2, locale61);
        int int64 = dateTimeField42.getMaximumShortTextLength(locale61);
        java.lang.String str65 = dateTimeField25.getAsText(readablePartial26, 364, locale61);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone18, locale61);
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(timeZone18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar66", (calendar19.compareTo(calendar66) == 0) == calendar19.equals(calendar66));
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test242");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime9.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone12.isStandardOffset(10L);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.DateTime.Property property16 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime18 = dateTime9.plusSeconds(0);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime15", (dateTime18.compareTo(dateTime15) == 0) == dateTime18.equals(dateTime15));
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test243");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime9.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone12.isStandardOffset(10L);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = dateTime9.minusYears(0);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime15", (dateTime17.compareTo(dateTime15) == 0) == dateTime17.equals(dateTime15));
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test244");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getDayOfWeek();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.withDayOfYear(100);
        int int11 = localDate8.size();
        org.joda.time.LocalDate localDate13 = localDate8.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.LocalDate.Property property23 = localDate13.property(dateTimeFieldType21);
        boolean boolean24 = dateTime2.equals((java.lang.Object) property23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.plus(readablePeriod28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime33 = dateTime29.withYearOfCentury(1);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDate localDate37 = localDate34.withPeriodAdded(readablePeriod35, (int) (byte) 0);
        org.joda.time.LocalDate.Property property38 = localDate34.year();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 4, dateTimeZone42);
        org.joda.time.DateTime dateTime44 = localDate34.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        java.lang.Object obj45 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long52 = dateTimeZone48.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(obj45, dateTimeZone48);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        org.joda.time.MutableDateTime mutableDateTime55 = dateTime43.toMutableDateTime(dateTimeZone48);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((java.lang.Object) dateTime29, dateTimeZone48);
        int int57 = dateTime29.getYear();
        boolean boolean58 = dateTime2.isBefore((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Instant instant59 = dateTime29.toInstant();
        long long60 = dateTime29.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant59", (dateTime2.compareTo(instant59) == 0) == dateTime2.equals(instant59));
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test245");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        org.joda.time.Instant instant16 = instant15.toInstant();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime21.hourOfDay();
        java.lang.String str23 = property22.getAsShortText();
        org.joda.time.DurationField durationField24 = property22.getDurationField();
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = property22.getAsShortText(locale25);
        org.joda.time.DateTimeField dateTimeField27 = property22.getField();
        int int28 = instant16.get(dateTimeField27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant16", (dateTime14.compareTo(instant16) == 0) == dateTime14.equals(instant16));
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test246");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime4.withMillisOfDay(51);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime4.minus(readableDuration16);
        int int18 = dateTime17.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant12", (dateTime17.compareTo(instant12) == 0) == dateTime17.equals(instant12));
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test247");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.year();
        org.joda.time.DurationField durationField7 = chronology4.eras();
        org.joda.time.DurationField durationField8 = chronology4.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField7, durationField8, and durationField7", !(durationField7.compareTo(durationField8) == 0) || (Math.signum(durationField7.compareTo(durationField7)) == Math.signum(durationField8.compareTo(durationField7))));
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test248");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withDurationAdded(1L, 52);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear(52);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTime11, dateTimeZone14);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.now(dateTimeZone14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime15", (dateTime11.compareTo(dateTime15) == 0) == dateTime11.equals(dateTime15));
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test249");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder5 = builder0.removeUnicodeLocaleAttribute("Taiwan");
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        calendar8.setLenient(true);
        calendar8.roll((int) (short) 100, 0);
        int int15 = calendar8.getGreatestMinimum(0);
        calendar8.clear();
        calendar8.clear(0);
        calendar8.set(8, 0, (int) 'a', 2021, 3);
        java.util.TimeZone timeZone25 = calendar8.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone25);
        org.joda.time.MonthDay monthDay28 = new org.joda.time.MonthDay(0L);
        java.lang.String str29 = monthDay28.toString();
        org.joda.time.Chronology chronology30 = monthDay28.getChronology();
        org.joda.time.Chronology chronology31 = monthDay28.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial33 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property40 = dateTime39.hourOfDay();
        org.joda.time.DateTime dateTime42 = dateTime39.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology47 = chronology43.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = chronology43.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField49 = chronology43.weekOfWeekyear();
        org.joda.time.MonthDay monthDay51 = new org.joda.time.MonthDay(0L);
        java.lang.String str52 = monthDay51.toString();
        org.joda.time.Chronology chronology53 = monthDay51.getChronology();
        org.joda.time.Chronology chronology54 = monthDay51.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.days();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.millisOfDay();
        org.joda.time.MonthDay monthDay59 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property60 = monthDay59.monthOfYear();
        java.util.Locale locale61 = java.util.Locale.ITALY;
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.lang.String str63 = locale62.getLanguage();
        java.lang.String str64 = locale61.getDisplayScript(locale62);
        int int65 = property60.getMaximumTextLength(locale61);
        java.lang.String str66 = property60.getAsString();
        java.lang.String str67 = property60.getAsShortText();
        java.util.Locale locale68 = java.util.Locale.ROOT;
        int int69 = property60.getMaximumTextLength(locale68);
        java.lang.String str70 = dateTimeField56.getAsShortText(2, locale68);
        int int71 = dateTimeField49.getMaximumShortTextLength(locale68);
        java.lang.String str72 = dateTimeField32.getAsText(readablePartial33, 364, locale68);
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone25, locale68);
        java.util.Locale.Builder builder74 = builder0.setLocale(locale68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar73", (calendar26.compareTo(calendar73) == 0) == calendar26.equals(calendar73));
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test250");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        int int20 = dateTime17.getWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime17.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime17.plus(readablePeriod23);
        int int25 = property13.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.minus(readableDuration26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(4);
        org.joda.time.Instant instant30 = dateTime27.toInstant();
        java.util.Date date31 = instant30.toDate();
        date31.setSeconds(35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant30", (dateTime2.compareTo(instant30) == 0) == dateTime2.equals(instant30));
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test251");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(0);
        int int11 = dateTime4.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology24 = chronology20.withZone(dateTimeZone23);
        java.lang.String str25 = chronology20.toString();
        boolean boolean26 = dateTime4.equals((java.lang.Object) str25);
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar28 = dateTime4.toCalendar(locale27);
        org.joda.time.DateTime.Property property29 = dateTime4.minuteOfHour();
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField34 = monthDay32.getField((int) (byte) 0);
        java.util.Locale locale38 = new java.util.Locale("", "", "hi!");
        int int39 = dateTimeField34.getMaximumTextLength(locale38);
        long long42 = dateTimeField34.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay45 = monthDay43.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay43.minus(readablePeriod46);
        org.joda.time.MonthDay monthDay48 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay50 = monthDay48.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField52 = monthDay50.getField((int) (byte) 0);
        java.util.Locale locale56 = new java.util.Locale("", "", "hi!");
        int int57 = dateTimeField52.getMaximumTextLength(locale56);
        java.lang.String str58 = dateTimeField34.getAsShortText((org.joda.time.ReadablePartial) monthDay43, locale56);
        int[] intArray59 = monthDay43.getValues();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.MonthDay monthDay62 = monthDay43.withPeriodAdded(readablePeriod60, 59);
        org.joda.time.MonthDay monthDay64 = monthDay43.minusDays(59);
        java.util.Date date70 = new java.util.Date(0, 32770, 5, 0, (int) (short) 10);
        long long71 = date70.getTime();
        long long72 = date70.getTime();
        boolean boolean73 = monthDay43.equals((java.lang.Object) date70);
        org.joda.time.Chronology chronology74 = monthDay43.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime77 = dateTime4.toMutableDateTime(chronology74);
        org.joda.time.DateTime dateTime79 = dateTime4.plusHours((-700535));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime77", (dateTime4.compareTo(mutableDateTime77) == 0) == dateTime4.equals(mutableDateTime77));
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test252");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(0L);
        java.lang.String str11 = monthDay10.toString();
        org.joda.time.Chronology chronology12 = monthDay10.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime8.withChronology(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfMonth(17);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((long) 17);
        java.util.Date date18 = dateTime13.toDate();
        org.joda.time.DateTime dateTime20 = dateTime13.minusYears(49088531);
        org.joda.time.DateTime.Property property21 = dateTime20.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime13", (dateTime8.compareTo(dateTime13) == 0) == dateTime8.equals(dateTime13));
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test253");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        calendar1.setLenient(false);
        java.util.TimeZone timeZone11 = calendar1.getTimeZone();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone11, locale12);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone11);
        calendar16.clear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar15", (calendar1.compareTo(calendar15) == 0) == calendar1.equals(calendar15));
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test254");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.MonthDay monthDay12 = monthDay2.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfDay();
        boolean boolean15 = durationFieldType0.isSupported(chronology11);
        org.joda.time.DurationField durationField16 = chronology11.millis();
        java.lang.Object obj17 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long24 = dateTimeZone20.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(obj17, dateTimeZone20);
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime25.getZone();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.Chronology chronology29 = chronology11.withZone(dateTimeZone27);
        org.joda.time.DurationField durationField30 = chronology29.eras();
        org.joda.time.DurationField durationField31 = chronology29.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField30", Math.signum(durationField16.compareTo(durationField30)) == -Math.signum(durationField30.compareTo(durationField16)));
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test255");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays((int) 'u');
        int int10 = dateTime4.getYearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime4.plusMillis(4);
        org.joda.time.DateTime.Property property13 = dateTime4.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime16.toMutableDateTime(dateTimeZone20);
        org.joda.time.MonthDay monthDay23 = new org.joda.time.MonthDay(0L);
        java.lang.String str24 = monthDay23.toString();
        org.joda.time.Chronology chronology25 = monthDay23.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime16.toDateTime(chronology25);
        org.joda.time.DateTime dateTime27 = dateTime4.withChronology(chronology25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime26", (dateTime2.compareTo(dateTime26) == 0) == dateTime2.equals(dateTime26));
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test256");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime9.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone12.isStandardOffset(10L);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMillis((-1));
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra(999);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime15", (dateTime9.compareTo(dateTime15) == 0) == dateTime9.equals(dateTime15));
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test257");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.minusMinutes(52);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        long long20 = dateTimeZone16.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime21 = dateTime2.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime2.getZone();
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property29 = dateTime28.hourOfDay();
        org.joda.time.DateTime dateTime31 = dateTime28.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime33 = dateTime28.withMillisOfDay(8);
        boolean boolean35 = dateTime28.isAfter((long) 17);
        org.joda.time.Instant instant36 = dateTime28.toInstant();
        org.joda.time.DateTime.Property property37 = dateTime28.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean39 = dateTime28.isSupported(dateTimeFieldType38);
        org.joda.time.LocalDateTime localDateTime40 = dateTime28.toLocalDateTime();
        boolean boolean41 = dateTimeZone22.isLocalDateTimeGap(localDateTime40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and instant36", (dateTime28.compareTo(instant36) == 0) == dateTime28.equals(instant36));
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test258");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay(dateTimeZone4);
        java.util.Date date7 = dateTime6.toDate();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime10.minusMinutes(52);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        long long28 = dateTimeZone24.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime29 = dateTime10.withZone(dateTimeZone24);
        int int30 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime32 = dateTime10.withYear(365);
        java.lang.String str33 = dateTime10.toString();
        org.joda.time.Instant instant34 = dateTime10.toInstant();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = localDate37.withDayOfYear(100);
        int int40 = localDate37.size();
        org.joda.time.LocalDate localDate42 = localDate37.plusMonths(6);
        int int44 = localDate42.getValue(0);
        java.lang.String str45 = localDate42.toString();
        org.joda.time.LocalDate localDate47 = localDate42.withWeekyear(1);
        org.joda.time.LocalDate localDate49 = localDate42.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate53 = org.joda.time.LocalDate.now(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = localDate49.toDateTimeAtStartOfDay(dateTimeZone52);
        int int55 = dateTime54.getWeekyear();
        org.joda.time.DateTime.Property property56 = dateTime54.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property56.getFieldType();
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType57.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType59 = dateTimeFieldType57.getRangeDurationType();
        org.joda.time.DateTime dateTime61 = dateTime10.withFieldAdded(durationFieldType59, 51860);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant34", (dateTime10.compareTo(instant34) == 0) == dateTime10.equals(instant34));
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test259");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay(0L);
        java.lang.String str10 = monthDay9.toString();
        org.joda.time.Chronology chronology11 = monthDay9.getChronology();
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.withPeriodAdded(readablePeriod13, 54);
        boolean boolean17 = dateTime15.isEqual(7100352000000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime15", (dateTime2.compareTo(dateTime15) == 0) == dateTime2.equals(dateTime15));
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test260");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays((int) 'u');
        int int10 = dateTime4.getYearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime4.plusMillis(4);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        org.joda.time.LocalDate.Property property18 = localDate15.dayOfMonth();
        org.joda.time.LocalDate localDate19 = property18.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime20 = dateTime12.withFields((org.joda.time.ReadablePartial) localDate19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(100);
        org.joda.time.Interval interval26 = localDate25.toInterval();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.days();
        java.lang.String str28 = durationFieldType27.getName();
        org.joda.time.LocalDate localDate30 = localDate25.withFieldAdded(durationFieldType27, 32770);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate32 = localDate25.plus(readablePeriod31);
        int int33 = localDate19.compareTo((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.days();
        boolean boolean35 = localDate25.isSupported(durationFieldType34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property41 = dateTime40.hourOfDay();
        org.joda.time.DateTime dateTime43 = dateTime40.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology44 = dateTime43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology48 = chronology44.withZone(dateTimeZone47);
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.now(chronology48);
        org.joda.time.DurationField durationField50 = chronology48.seconds();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.dayOfWeek();
        org.joda.time.DurationField durationField52 = chronology48.eras();
        boolean boolean53 = durationFieldType34.isSupported(chronology48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField50 and durationField52", Math.signum(durationField50.compareTo(durationField52)) == -Math.signum(durationField52.compareTo(durationField50)));
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test261");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime4.withMillisOfDay(51);
        org.joda.time.DateMidnight dateMidnight16 = dateTime15.toDateMidnight();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test262");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.roll(14, true);
        boolean boolean7 = calendar1.isWeekDateSupported();
        calendar1.clear();
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale9);
        calendar10.setLenient(true);
        calendar10.setMinimalDaysInFirstWeek(1970);
        int int16 = calendar10.getGreatestMinimum(10);
        java.time.Instant instant17 = calendar10.toInstant();
        calendar10.setLenient(false);
        java.util.TimeZone timeZone20 = calendar10.getTimeZone();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone20);
        calendar1.setTimeZone(timeZone20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar21", (calendar10.compareTo(calendar21) == 0) == calendar10.equals(calendar21));
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test263");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime4.getYearOfCentury();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime4.withDurationAdded(readableDuration11, (int) (byte) -1);
        int int14 = dateTime13.getHourOfDay();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime13.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(21);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) 14402);
        org.joda.time.DateTime dateTime20 = dateTime13.withZone(dateTimeZone17);
        int int22 = dateTimeZone17.getStandardOffset((long) 36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime20", (dateTime4.compareTo(dateTime20) == 0) == dateTime4.equals(dateTime20));
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test264");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.weekyearOfCentury();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(83968099800000L, chronology9);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate15.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime22 = dateTime20.minusYears((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime22.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean27 = dateTimeZone25.isStandardOffset(10L);
        java.lang.Object obj28 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long35 = dateTimeZone31.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(obj28, dateTimeZone31);
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTime();
        int int38 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) dateTime36);
        long long42 = dateTimeZone25.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime22.toMutableDateTime(dateTimeZone25);
        int int44 = dateTime22.getSecondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and mutableDateTime43", (dateTime22.compareTo(mutableDateTime43) == 0) == dateTime22.equals(mutableDateTime43));
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test265");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime4.minusSeconds((int) (short) -1);
        int int16 = dateTime15.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test266");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime23 = dateTime18.withYearOfEra((int) ' ');
        int int24 = dateTime23.getDayOfWeek();
        org.joda.time.DateTime.Property property25 = dateTime23.secondOfDay();
        org.joda.time.DateTime dateTime26 = property25.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTime dateTime28 = property27.roundHalfEvenCopy();
        org.joda.time.MonthDay monthDay29 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay31 = monthDay29.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField33 = monthDay31.getField((int) (byte) 0);
        java.util.Locale locale37 = new java.util.Locale("", "", "hi!");
        int int38 = dateTimeField33.getMaximumTextLength(locale37);
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale40);
        java.lang.String str42 = dateTimeField33.getAsShortText((long) 10, locale40);
        java.lang.String str43 = locale40.getDisplayLanguage();
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property46 = monthDay45.monthOfYear();
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.util.Locale locale48 = java.util.Locale.ITALIAN;
        java.lang.String str49 = locale48.getLanguage();
        java.lang.String str50 = locale47.getDisplayScript(locale48);
        int int51 = property46.getMaximumTextLength(locale47);
        java.lang.String str52 = property46.getAsString();
        java.lang.String str53 = property46.getAsShortText();
        java.util.Locale locale54 = java.util.Locale.ROOT;
        int int55 = property46.getMaximumTextLength(locale54);
        java.lang.String str56 = locale40.getDisplayLanguage(locale54);
        java.lang.String str57 = property27.getAsShortText(locale40);
        java.lang.String str58 = property13.getAsShortText(locale40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test267");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.roll((int) (short) 100, 0);
        int int8 = calendar1.getGreatestMinimum(0);
        calendar1.clear();
        calendar1.clear(0);
        calendar1.set(8, 0, (int) 'a', 2021, 3);
        int int19 = calendar1.getGreatestMinimum(3);
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale20);
        calendar21.setLenient(true);
        calendar21.setMinimalDaysInFirstWeek(1970);
        int int27 = calendar21.getGreatestMinimum(10);
        java.time.Instant instant28 = calendar21.toInstant();
        calendar21.setTimeInMillis(1L);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYearOfEra((int) '4');
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime33.toMutableDateTime(dateTimeZone37);
        java.util.TimeZone timeZone39 = dateTimeZone37.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        calendar21.setTimeZone(timeZone39);
        calendar1.setTimeZone(timeZone39);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone39);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 4, dateTimeZone47);
        java.util.Locale locale50 = java.util.Locale.ITALIAN;
        java.lang.String str51 = dateTimeZone47.getShortName((long) 0, locale50);
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleKeys();
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone39, locale50);
        java.lang.String str54 = locale50.toLanguageTag();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar43 and calendar53", (calendar43.compareTo(calendar53) == 0) == calendar43.equals(calendar53));
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test268");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime9.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone12.isStandardOffset(10L);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = dateTime9.plusHours(36);
        org.joda.time.DateTime dateTime19 = dateTime17.withMillisOfSecond(675);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime15", (dateTime9.compareTo(dateTime15) == 0) == dateTime9.equals(dateTime15));
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test269");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int11 = dateTime4.get(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = dateTime4.withHourOfDay(8);
        org.joda.time.DateTime dateTime15 = dateTime4.minusHours(26);
        org.joda.time.DateTime dateTime17 = dateTime4.withYearOfEra(24);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.plus(readablePeriod21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property25 = dateTime22.secondOfDay();
        org.joda.time.DateTime dateTime26 = property25.roundCeilingCopy();
        boolean boolean27 = dateTime17.isBefore((org.joda.time.ReadableInstant) dateTime26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.withDayOfYear(100);
        int int33 = localDate30.size();
        org.joda.time.LocalDate localDate35 = localDate30.plusMonths(6);
        int int37 = localDate35.getValue(0);
        java.lang.String str38 = localDate35.toString();
        org.joda.time.LocalDate localDate40 = localDate35.withWeekyear(1);
        org.joda.time.LocalDate localDate42 = localDate35.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate46 = org.joda.time.LocalDate.now(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = localDate42.toDateTimeAtStartOfDay(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime17.toDateTime(dateTimeZone45);
        int int50 = dateTimeZone45.getStandardOffset((long) 11279);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime48", (dateTime17.compareTo(dateTime48) == 0) == dateTime17.equals(dateTime48));
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test270");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.LocalTime localTime7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTime(localTime7);
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfMinute();
        int int10 = dateTime8.getMonthOfYear();
        org.joda.time.Instant instant11 = dateTime8.toInstant();
        int int12 = dateTime8.getYear();
        org.joda.time.DateTime dateTime14 = dateTime8.plusMinutes(14432);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfSecond(26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and instant11", (dateTime8.compareTo(instant11) == 0) == dateTime8.equals(instant11));
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test271");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime16 = dateTime2.withMillisOfDay(0);
        org.joda.time.Instant instant17 = dateTime2.toInstant();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology30 = chronology26.withZone(dateTimeZone29);
        org.joda.time.DurationField durationField31 = chronology26.weeks();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.dayOfYear();
        org.joda.time.DateTimeField dateTimeField34 = chronology26.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = chronology26.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime2.toMutableDateTime(chronology26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant17", (dateTime2.compareTo(instant17) == 0) == dateTime2.equals(instant17));
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test272");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime.Property property7 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime();
        boolean boolean9 = dateTime8.isAfterNow();
        org.joda.time.Instant instant10 = dateTime8.toInstant();
        org.joda.time.Instant instant11 = instant10.toInstant();
        java.lang.String str12 = instant11.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant11", (dateTime4.compareTo(instant11) == 0) == dateTime4.equals(instant11));
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test273");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime8.getZone();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.getDefault(category13);
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        java.lang.String str17 = locale15.getCountry();
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str19 = locale15.getDisplayVariant(locale18);
        java.util.Locale.setDefault(category13, locale18);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone11, locale18);
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("13 f\351vr. 2022 00:00:00");
        java.lang.String str24 = locale18.getDisplayVariant(locale23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar16 and calendar21", (calendar16.compareTo(calendar21) == 0) == calendar16.equals(calendar21));
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test274");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder3.setTimeOfDay((int) 'x', (int) ' ', 0);
        java.util.Calendar.Builder builder11 = builder3.setDate(28, 29, 815);
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        calendar13.setLenient(true);
        calendar13.setMinimalDaysInFirstWeek(1970);
        int int19 = calendar13.getGreatestMinimum(10);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.fromCalendarFields(calendar13);
        int[] intArray21 = monthDay20.getValues();
        java.util.Calendar.Builder builder22 = builder3.setFields(intArray21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) '4');
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime25.toMutableDateTime(dateTimeZone29);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.now(dateTimeZone29);
        int int33 = dateTimeZone29.getOffsetFromLocal((-60494601600001L));
        int int35 = dateTimeZone29.getOffsetFromLocal((long) 364);
        java.util.TimeZone timeZone36 = dateTimeZone29.toTimeZone();
        java.util.Calendar.Builder builder37 = builder3.setTimeZone(timeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean41 = dateTimeZone39.isStandardOffset(10L);
        java.lang.Object obj42 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long49 = dateTimeZone45.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(obj42, dateTimeZone45);
        org.joda.time.DateTime dateTime51 = dateTime50.toDateTime();
        int int52 = dateTimeZone39.getOffset((org.joda.time.ReadableInstant) dateTime50);
        java.lang.String str54 = dateTimeZone39.getShortName((long) (byte) 100);
        org.joda.time.MonthDay monthDay55 = new org.joda.time.MonthDay(dateTimeZone39);
        java.util.TimeZone timeZone56 = dateTimeZone39.toTimeZone();
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone56);
        java.util.Calendar.Builder builder58 = builder3.setTimeZone(timeZone56);
        java.util.Calendar.Builder builder62 = builder3.setTimeOfDay(49034491, 805, (-21880993));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar57", (calendar13.compareTo(calendar57) == 0) == calendar13.equals(calendar57));
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test275");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(0L);
        java.lang.String str11 = monthDay10.toString();
        org.joda.time.Chronology chronology12 = monthDay10.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime8.withChronology(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfMonth(17);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((long) 17);
        org.joda.time.DateTime dateTime19 = dateTime13.minusWeeks(187200000);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime13.getZone();
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now(dateTimeZone20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime13", (dateTime8.compareTo(dateTime13) == 0) == dateTime8.equals(dateTime13));
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test276");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        int int20 = dateTime17.getWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime17.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime17.plus(readablePeriod23);
        int int25 = property13.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.minus(readableDuration26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(4);
        org.joda.time.Instant instant30 = dateTime27.toInstant();
        java.util.Date date31 = instant30.toDate();
        int int32 = date31.getMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant30", (dateTime2.compareTo(instant30) == 0) == dateTime2.equals(instant30));
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test277");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.MonthDay monthDay7 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay9 = monthDay7.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField11 = monthDay9.getField((int) (byte) 0);
        java.util.Locale locale15 = new java.util.Locale("", "", "hi!");
        int int16 = dateTimeField11.getMaximumTextLength(locale15);
        long long19 = dateTimeField11.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay22 = monthDay20.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay20.minus(readablePeriod23);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField29 = monthDay27.getField((int) (byte) 0);
        java.util.Locale locale33 = new java.util.Locale("", "", "hi!");
        int int34 = dateTimeField29.getMaximumTextLength(locale33);
        java.lang.String str35 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) monthDay20, locale33);
        int int36 = property5.getMaximumTextLength(locale33);
        org.joda.time.DateTimeField dateTimeField37 = property5.getField();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale38);
        int int40 = property5.getMaximumTextLength(locale38);
        java.lang.String str41 = locale38.getDisplayVariant();
        java.util.Locale locale42 = java.util.Locale.US;
        java.lang.String str43 = locale42.toLanguageTag();
        java.lang.String str44 = locale38.getDisplayName(locale42);
        java.lang.String str45 = locale42.getLanguage();
        java.util.Set<java.lang.Character> charSet46 = locale42.getExtensionKeys();
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(locale42);
        org.joda.time.MonthDay monthDay49 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property50 = monthDay49.monthOfYear();
        org.joda.time.MonthDay monthDay52 = property50.addToCopy((int) ' ');
        int int53 = property50.get();
        java.lang.String str54 = property50.toString();
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(locale55);
        calendar56.setLenient(true);
        calendar56.setMinimalDaysInFirstWeek(1970);
        int int62 = calendar56.getGreatestMinimum(10);
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.fromCalendarFields(calendar56);
        int int65 = calendar56.getGreatestMinimum(3);
        calendar56.set(187200000, (int) 'u', 1439, 1439, 70, 1970);
        long long73 = calendar56.getTimeInMillis();
        int int74 = calendar56.getWeeksInWeekYear();
        boolean boolean75 = property50.equals((java.lang.Object) calendar56);
        java.util.Date date79 = new java.util.Date(0, 0, (int) '4');
        date79.setDate(12);
        date79.setHours(2922789);
        date79.setTime(9L);
        java.util.Date date89 = new java.util.Date(0, 0, (int) '4');
        int int90 = date89.getHours();
        int int91 = date89.getDate();
        boolean boolean92 = date79.after(date89);
        int int93 = date89.getDay();
        java.time.Instant instant94 = date89.toInstant();
        calendar56.setTime(date89);
        calendar47.setTime(date89);
        java.time.Instant instant97 = date89.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar47 and calendar56", (calendar47.compareTo(calendar56) == 0) == calendar47.equals(calendar56));
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test278");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        int int7 = localDate2.getValue((int) (short) 0);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra(52);
        org.joda.time.LocalDate.Property property11 = localDate10.weekOfWeekyear();
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str16 = locale13.getExtension('a');
        org.joda.time.LocalDate localDate17 = property11.setCopy("3", locale13);
        int int18 = localDate17.getDayOfMonth();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone20);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = localDate21.toDateTimeAtStartOfDay(dateTimeZone23);
        int int26 = dateTime25.getEra();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone28);
        org.joda.time.LocalDate localDate31 = localDate29.withDayOfYear(100);
        org.joda.time.Interval interval32 = localDate31.toInterval();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.days();
        java.lang.String str34 = durationFieldType33.getName();
        org.joda.time.LocalDate localDate36 = localDate31.withFieldAdded(durationFieldType33, 32770);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(dateTimeZone38);
        org.joda.time.LocalDate localDate41 = localDate39.withDayOfYear(100);
        org.joda.time.Interval interval42 = localDate41.toInterval();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.days();
        java.lang.String str44 = durationFieldType43.getName();
        org.joda.time.LocalDate localDate46 = localDate41.withFieldAdded(durationFieldType43, 32770);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusDays((int) '#');
        int int52 = dateTime49.getWeekyear();
        org.joda.time.DateMidnight dateMidnight53 = dateTime49.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property55 = dateTime49.property(dateTimeFieldType54);
        boolean boolean56 = localDate41.isSupported(dateTimeFieldType54);
        boolean boolean57 = localDate31.isSupported(dateTimeFieldType54);
        boolean boolean58 = dateTime25.isSupported(dateTimeFieldType54);
        int int59 = localDate17.indexOf(dateTimeFieldType54);
        org.joda.time.LocalDate.Property property60 = localDate2.property(dateTimeFieldType54);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.minusDays((int) '#');
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate(dateTimeZone67);
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate(dateTimeZone70);
        org.joda.time.DateTime dateTime72 = localDate68.toDateTimeAtStartOfDay(dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime63.toDateTime(dateTimeZone70);
        org.joda.time.DateTime dateTime75 = dateTime63.plusWeeks(5);
        org.joda.time.Chronology chronology76 = dateTime63.getChronology();
        org.joda.time.Chronology chronology77 = dateTime63.getChronology();
        org.joda.time.DateTime dateTime79 = dateTime63.plusHours((int) (short) -1);
        org.joda.time.DateTime dateTime81 = dateTime63.withYearOfEra(19);
        org.joda.time.Instant instant82 = dateTime63.toInstant();
        boolean boolean83 = localDate2.equals((java.lang.Object) dateTime63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime49 and instant82", (dateTime49.compareTo(instant82) == 0) == dateTime49.equals(instant82));
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test279");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime4.minusSeconds((int) (short) -1);
        org.joda.time.DateTime.Property property16 = dateTime15.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test280");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(0L);
        java.lang.String str11 = monthDay10.toString();
        org.joda.time.Chronology chronology12 = monthDay10.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime8.withChronology(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfMonth(17);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((long) 17);
        org.joda.time.DateTime dateTime19 = dateTime13.minusWeeks(187200000);
        java.util.GregorianCalendar gregorianCalendar20 = dateTime19.toGregorianCalendar();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime13", (dateTime8.compareTo(dateTime13) == 0) == dateTime8.equals(dateTime13));
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test281");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withPivotYear(52);
        org.joda.time.Chronology chronology13 = dateTimeFormatter12.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = dateTime19.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property27 = dateTime26.hourOfDay();
        org.joda.time.DateTime dateTime29 = dateTime26.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime19.toMutableDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekOfWeekyear();
        org.joda.time.DurationField durationField34 = chronology30.eras();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter12.withChronology(chronology30);
        boolean boolean36 = dateTimeFormatter12.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property42 = dateTime41.hourOfDay();
        org.joda.time.DateTime dateTime44 = dateTime41.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology45 = dateTime44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology49 = chronology45.withZone(dateTimeZone48);
        org.joda.time.DurationField durationField50 = chronology45.weeks();
        org.joda.time.DateTimeField dateTimeField51 = chronology45.clockhourOfDay();
        long long56 = chronology45.getDateTimeMillis((-1), 8, 2, 17);
        org.joda.time.DurationField durationField57 = chronology45.millis();
        org.joda.time.DateTimeField dateTimeField58 = chronology45.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter12.withChronology(chronology45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField34 and durationField50", Math.signum(durationField34.compareTo(durationField50)) == -Math.signum(durationField50.compareTo(durationField34)));
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test282");
        java.util.Date date3 = new java.util.Date(0, 0, (int) '4');
        date3.setDate(2730);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date3);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear(100);
        org.joda.time.Interval interval14 = localDate13.toInterval();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.days();
        java.lang.String str16 = durationFieldType15.getName();
        org.joda.time.LocalDate localDate18 = localDate13.withFieldAdded(durationFieldType15, 32770);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime23.hourOfDay();
        org.joda.time.DateTime dateTime26 = dateTime23.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology31 = chronology27.withZone(dateTimeZone30);
        java.lang.String str32 = chronology27.toString();
        org.joda.time.DurationField durationField33 = chronology27.seconds();
        boolean boolean34 = durationFieldType15.isSupported(chronology27);
        org.joda.time.LocalDate localDate36 = localDate6.withFieldAdded(durationFieldType15, 22);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(dateTimeZone38);
        org.joda.time.LocalDate localDate41 = localDate39.withDayOfYear(100);
        org.joda.time.LocalDate.Property property42 = localDate39.dayOfMonth();
        org.joda.time.LocalDate.Property property43 = localDate39.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property43.getFieldType();
        org.joda.time.LocalDate localDate45 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra(52);
        org.joda.time.LocalDate.Property property48 = localDate47.weekOfWeekyear();
        org.joda.time.LocalDate.Property property49 = localDate47.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property55 = dateTime54.hourOfDay();
        org.joda.time.DateTime dateTime57 = dateTime54.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime59 = dateTime54.withYearOfEra((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int61 = dateTime54.get(dateTimeFieldType60);
        org.joda.time.LocalDate.Property property62 = localDate47.property(dateTimeFieldType60);
        org.joda.time.LocalDate localDate64 = localDate47.withWeekyear(365);
        org.joda.time.Chronology chronology65 = localDate64.getChronology();
        boolean boolean66 = dateTimeFieldType44.isSupported(chronology65);
        boolean boolean67 = localDate6.isSupported(dateTimeFieldType44);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone71);
        org.joda.time.DateTime dateTime74 = dateTime72.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property75 = dateTime74.hourOfDay();
        org.joda.time.DateTime dateTime77 = dateTime74.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology78 = dateTime77.getChronology();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology82 = chronology78.withZone(dateTimeZone81);
        org.joda.time.DateTimeField dateTimeField83 = chronology78.weekyearOfCentury();
        org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate(83968099800000L, chronology78);
        org.joda.time.DateTimeField dateTimeField85 = chronology78.dayOfYear();
        org.joda.time.DurationField durationField86 = chronology78.eras();
        org.joda.time.LocalDate localDate87 = new org.joda.time.LocalDate((long) 227, chronology78);
        boolean boolean88 = dateTimeFieldType44.isSupported(chronology78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField33 and durationField86", Math.signum(durationField33.compareTo(durationField86)) == -Math.signum(durationField86.compareTo(durationField33)));
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test283");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime2.toMutableDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime2.toYearMonthDay();
        org.joda.time.DateTime dateTime9 = dateTime2.withDurationAdded((long) '4', (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        boolean boolean15 = dateTime2.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays((int) '#');
        int int21 = dateTime18.getWeekyear();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMillis((int) (short) 0);
        org.joda.time.Chronology chronology24 = dateTime18.getChronology();
        org.joda.time.DateTime dateTime25 = dateTime14.withChronology(chronology24);
        org.joda.time.Chronology chronology26 = dateTime14.getChronology();
        org.joda.time.DateTime.Property property27 = dateTime14.dayOfWeek();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.withDayOfYear(100);
        int int33 = localDate30.size();
        org.joda.time.LocalDate localDate35 = localDate30.plusMonths(6);
        int int37 = localDate35.getValue(0);
        java.lang.String str38 = localDate35.toString();
        org.joda.time.LocalDate localDate40 = localDate35.withWeekyear(1);
        org.joda.time.LocalDate localDate42 = localDate35.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate46 = org.joda.time.LocalDate.now(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = localDate42.toDateTimeAtStartOfDay(dateTimeZone45);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes(100);
        org.joda.time.DateTime.Property property50 = dateTime49.weekyear();
        int int51 = property27.getDifference((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property57 = dateTime56.hourOfDay();
        org.joda.time.DateTime dateTime59 = dateTime56.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology64 = chronology60.withZone(dateTimeZone63);
        org.joda.time.DurationField durationField65 = chronology60.weeks();
        org.joda.time.DateTimeField dateTimeField66 = chronology60.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField67 = chronology60.dayOfYear();
        org.joda.time.DateTimeField dateTimeField68 = chronology60.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField69 = chronology60.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField70 = chronology60.hourOfDay();
        org.joda.time.DateTimeField dateTimeField71 = chronology60.millisOfSecond();
        org.joda.time.DateTime dateTime72 = dateTime49.withChronology(chronology60);
        org.joda.time.DateTimeField dateTimeField73 = chronology60.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime49 and dateTime72", (dateTime49.compareTo(dateTime72) == 0) == dateTime49.equals(dateTime72));
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test284");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateMidnight dateMidnight6 = dateTime4.toDateMidnight();
        long long7 = dateTime4.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime4.minusMonths(1439);
        org.joda.time.DateTime dateTime11 = dateTime9.withYear((int) (short) 1);
        int int12 = dateTime9.getHourOfDay();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        org.joda.time.Interval interval18 = localDate17.toInterval();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        java.lang.String str20 = durationFieldType19.getName();
        org.joda.time.LocalDate localDate22 = localDate17.withFieldAdded(durationFieldType19, 32770);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate24 = localDate17.plus(readablePeriod23);
        org.joda.time.LocalDate localDate26 = localDate17.withYearOfEra(32769);
        org.joda.time.LocalDate localDate28 = localDate17.minusDays((int) (byte) -1);
        org.joda.time.DateTime dateTime29 = localDate28.toDateTimeAtMidnight();
        int int30 = localDate28.getDayOfMonth();
        org.joda.time.Chronology chronology31 = localDate28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime9.toMutableDateTime(chronology31);
        org.joda.time.MonthDay monthDay34 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property35 = monthDay34.monthOfYear();
        java.util.Locale locale36 = java.util.Locale.ITALY;
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = locale36.getDisplayScript(locale37);
        int int40 = property35.getMaximumTextLength(locale36);
        java.lang.String str41 = property35.getAsString();
        java.lang.String str42 = property35.getAsShortText();
        org.joda.time.MonthDay monthDay44 = property35.addToCopy(2);
        org.joda.time.MonthDay monthDay46 = monthDay44.minusDays((int) (short) 100);
        int int47 = monthDay46.size();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay46.plus(readablePeriod48);
        org.joda.time.MonthDay monthDay51 = new org.joda.time.MonthDay(0L);
        java.lang.String str52 = monthDay51.toString();
        org.joda.time.Chronology chronology53 = monthDay51.getChronology();
        org.joda.time.Chronology chronology54 = monthDay51.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.millisOfDay();
        org.joda.time.MonthDay monthDay58 = new org.joda.time.MonthDay(0L);
        java.lang.String str59 = monthDay58.toString();
        org.joda.time.Chronology chronology60 = monthDay58.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = monthDay58.getField((int) (byte) 1);
        int[] intArray64 = chronology54.get((org.joda.time.ReadablePartial) monthDay58, (long) 349260000);
        chronology31.validate((org.joda.time.ReadablePartial) monthDay49, intArray64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and mutableDateTime32", (dateTime9.compareTo(mutableDateTime32) == 0) == dateTime9.equals(mutableDateTime32));
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test285");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        int int15 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = dateTime21.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology29 = chronology25.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.weekyearOfCentury();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(83968099800000L, chronology25);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime35 = localDate31.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusDays((int) '#');
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(dateTimeZone42);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtStartOfDay(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime38.toDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = dateTime38.plusWeeks(5);
        int int51 = dateTimeZone34.getOffset((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime2.toMutableDateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime54 = dateTime2.withDayOfYear((int) (short) 100);
        org.joda.time.DateTime dateTime56 = dateTime54.minusDays(29);
        java.lang.String str57 = dateTime54.toString();
        org.joda.time.DateTime.Property property58 = dateTime54.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and mutableDateTime52", (dateTime2.compareTo(mutableDateTime52) == 0) == dateTime2.equals(mutableDateTime52));
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test286");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder3.setTimeOfDay((int) 'x', (int) ' ', 0);
        java.util.Calendar.Builder builder10 = builder7.set(12, 2022);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(39659999, 365, (int) (short) 1);
        java.util.Calendar.Builder builder16 = builder10.setLenient(false);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        calendar18.roll(9, false);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.parse("fr");
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.lang.String[] strArray34 = new java.lang.String[] { "fr", "", "--01-01", "hi!", "23", "", "23" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strList35);
        java.lang.String str38 = java.util.Locale.lookupTag(languageRangeList23, (java.util.Collection<java.lang.String>) strList35);
        boolean boolean39 = calendar18.before((java.lang.Object) strList35);
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale40);
        calendar41.setLenient(true);
        calendar41.roll((int) (short) 100, 0);
        int int48 = calendar41.getGreatestMinimum(0);
        calendar41.clear();
        calendar41.clear(0);
        calendar41.set(8, 0, (int) 'a', 2021, 3);
        java.util.TimeZone timeZone58 = calendar41.getTimeZone();
        calendar18.setTimeZone(timeZone58);
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone58);
        java.util.Calendar.Builder builder61 = builder10.setTimeZone(timeZone58);
        java.util.Calendar.Builder builder65 = builder10.setWeekDate(579, (-1848), 14399967);
        java.util.Calendar.Builder builder68 = builder65.set(13, 1200);
        java.util.Locale locale69 = java.util.Locale.FRENCH;
        java.util.Calendar calendar70 = java.util.Calendar.getInstance(locale69);
        calendar70.roll(9, false);
        calendar70.setFirstDayOfWeek((int) (byte) 1);
        int int76 = calendar70.getWeekYear();
        int int77 = calendar70.getFirstDayOfWeek();
        int int78 = calendar70.getWeeksInWeekYear();
        java.util.TimeZone timeZone79 = calendar70.getTimeZone();
        java.util.Calendar.Builder builder80 = builder65.setTimeZone(timeZone79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar70", (calendar18.compareTo(calendar70) == 0) == calendar18.equals(calendar70));
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test287");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime4.minusSeconds((int) (short) -1);
        org.joda.time.DateTime.Property property16 = dateTime4.centuryOfEra();
        org.joda.time.DateTime dateTime17 = property16.roundCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test288");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        org.joda.time.LocalDate.Property property10 = localDate2.weekyear();
        org.joda.time.LocalDate localDate11 = property10.roundCeilingCopy();
        java.lang.String str12 = localDate11.toString();
        int int13 = localDate11.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getDayOfWeek();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(100);
        int int25 = localDate22.size();
        org.joda.time.LocalDate localDate27 = localDate22.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays((int) '#');
        int int33 = dateTime30.getWeekyear();
        org.joda.time.DateMidnight dateMidnight34 = dateTime30.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property36 = dateTime30.property(dateTimeFieldType35);
        org.joda.time.LocalDate.Property property37 = localDate27.property(dateTimeFieldType35);
        boolean boolean38 = dateTime16.equals((java.lang.Object) property37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.plus(readablePeriod42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime47 = dateTime43.withYearOfCentury(1);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDate localDate51 = localDate48.withPeriodAdded(readablePeriod49, (int) (byte) 0);
        org.joda.time.LocalDate.Property property52 = localDate48.year();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 4, dateTimeZone56);
        org.joda.time.DateTime dateTime58 = localDate48.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        java.lang.Object obj59 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long66 = dateTimeZone62.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(obj59, dateTimeZone62);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone62);
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime57.toMutableDateTime(dateTimeZone62);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((java.lang.Object) dateTime43, dateTimeZone62);
        int int71 = dateTime43.getYear();
        boolean boolean72 = dateTime16.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeZone dateTimeZone73 = dateTime43.getZone();
        org.joda.time.DateTime dateTime74 = localDate11.toDateTimeAtMidnight(dateTimeZone73);
        java.lang.String str76 = dateTimeZone73.getShortName(29030400239L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime67", (dateTime9.compareTo(dateTime67) == 0) == dateTime9.equals(dateTime67));
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test289");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.plusWeeks(14);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = localDate8.getFieldType((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime15.hourOfDay();
        org.joda.time.DateTime dateTime18 = dateTime15.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology23 = chronology19.withZone(dateTimeZone22);
        java.lang.String str24 = chronology19.toString();
        org.joda.time.DurationField durationField25 = chronology19.seconds();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType10.getField(chronology19);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone28);
        org.joda.time.LocalDate localDate31 = localDate29.withDayOfYear(100);
        org.joda.time.LocalDate.Property property32 = localDate29.dayOfMonth();
        org.joda.time.LocalDate.Property property33 = localDate29.era();
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType10.getField(chronology34);
        org.joda.time.DurationField durationField37 = chronology34.years();
        org.joda.time.DurationField durationField38 = chronology34.weekyears();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField37 and durationField38", (durationField37.compareTo(durationField38) == 0) == durationField37.equals(durationField38));
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test290");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = dateTime19.isBefore(readableInstant22);
        org.joda.time.Instant instant24 = dateTime19.toInstant();
        long long25 = dateTime19.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and instant24", (dateTime19.compareTo(instant24) == 0) == dateTime19.equals(instant24));
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test291");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime2 = dateTime1.toDateTimeISO();
        org.joda.time.Instant instant3 = dateTime1.toInstant();
        org.joda.time.TimeOfDay timeOfDay4 = dateTime1.toTimeOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant3", (dateTime1.compareTo(instant3) == 0) == dateTime1.equals(instant3));
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test292");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateMidnight dateMidnight6 = dateTime4.toDateMidnight();
        long long7 = dateTime4.getMillis();
        org.joda.time.DateTime.Property property8 = dateTime4.secondOfMinute();
        org.joda.time.DateTime dateTime10 = dateTime4.plusMonths(3659999);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime15.hourOfDay();
        org.joda.time.DateTime dateTime18 = dateTime15.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology23 = chronology19.withZone(dateTimeZone22);
        long long26 = dateTimeZone22.adjustOffset((-62180539199983L), true);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone22);
        java.lang.String str29 = dateTimeZone22.getName((-187199990L));
        org.joda.time.DateTime dateTime30 = dateTime4.toDateTime(dateTimeZone22);
        long long33 = dateTimeZone22.adjustOffset(5907399684280970468L, true);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime30", (dateTime4.compareTo(dateTime30) == 0) == dateTime4.equals(dateTime30));
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test293");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology14 = chronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.weekyearOfCentury();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(83968099800000L, chronology10);
        org.joda.time.DurationField durationField17 = durationFieldType0.getField(chronology10);
        org.joda.time.DurationField durationField18 = chronology10.eras();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfCentury((int) '#');
        int int24 = localDate23.getDayOfMonth();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDate23.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays((int) '#');
        int int31 = dateTime28.getWeekyear();
        org.joda.time.DateMidnight dateMidnight32 = dateTime28.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property34 = dateTime28.property(dateTimeFieldType33);
        java.lang.String str35 = dateTimeFieldType33.getName();
        int int36 = localDate23.indexOf(dateTimeFieldType33);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateMidnight dateMidnight43 = localDate23.toDateMidnight(dateTimeZone38);
        org.joda.time.Chronology chronology44 = chronology10.withZone(dateTimeZone38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField17 and durationField18", Math.signum(durationField17.compareTo(durationField18)) == -Math.signum(durationField18.compareTo(durationField17)));
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test294");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        int int8 = dateTime7.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) '#');
        int int14 = dateTime11.getWeekyear();
        org.joda.time.DateTime dateTime16 = dateTime11.minusMillis((int) (short) 0);
        boolean boolean17 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime16.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime16.plusMinutes(100);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfCentury((int) '#');
        org.joda.time.LocalDate localDate27 = localDate23.minusYears(32769);
        org.joda.time.LocalDate.Property property28 = localDate27.dayOfWeek();
        org.joda.time.LocalDate localDate29 = property28.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean33 = dateTimeZone31.isStandardOffset(10L);
        java.lang.Object obj34 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long41 = dateTimeZone37.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(obj34, dateTimeZone37);
        org.joda.time.DateTime dateTime43 = dateTime42.toDateTime();
        int int44 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime42);
        long long48 = dateTimeZone31.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.now(dateTimeZone31);
        org.joda.time.Interval interval50 = localDate29.toInterval(dateTimeZone31);
        boolean boolean51 = dateTimeZone31.isFixed();
        org.joda.time.DateTime dateTime52 = dateTime20.withZone(dateTimeZone31);
        org.joda.time.DateTime.Property property53 = dateTime52.era();
        int int54 = property53.getLeapAmount();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime52", (dateTime20.compareTo(dateTime52) == 0) == dateTime20.equals(dateTime52));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test295");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTime14);
        int int16 = dateTime15.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) '#');
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime19.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = dateTime19.plusWeeks(5);
        org.joda.time.Chronology chronology32 = dateTime19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime19.minus(readablePeriod33);
        int int35 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime15.withHourOfDay(11);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.DateTime dateTime40 = dateTime37.minus((-28166399860L));
        org.joda.time.Instant instant41 = dateTime37.toInstant();
        boolean boolean42 = dateTime37.isBeforeNow();
        org.joda.time.DateTime dateTime44 = dateTime37.plus(364L);
        org.joda.time.DateTime dateTime45 = dateTime44.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime37 and instant41", (dateTime37.compareTo(instant41) == 0) == dateTime37.equals(instant41));
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test296");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis(2022);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) '#');
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime11.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime11.plusWeeks(5);
        org.joda.time.Chronology chronology24 = dateTime11.getChronology();
        org.joda.time.Chronology chronology25 = dateTime11.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime8.withChronology(chronology25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(5907399684280970662L, chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate27.withPeriodAdded(readablePeriod28, 52);
        org.joda.time.LocalDate localDate32 = localDate27.plusWeeks(0);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) ' ');
        org.joda.time.LocalDate localDate36 = localDate32.minusYears((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.plus(readablePeriod41);
        org.joda.time.DateTime dateTime44 = dateTime40.plusMillis(2022);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((java.lang.Object) dateTime44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays((int) '#');
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(dateTimeZone52);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = localDate53.toDateTimeAtStartOfDay(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime48.toDateTime(dateTimeZone55);
        org.joda.time.DateTime dateTime60 = dateTime48.plusWeeks(5);
        org.joda.time.Chronology chronology61 = dateTime48.getChronology();
        org.joda.time.Chronology chronology62 = dateTime48.getChronology();
        org.joda.time.DateTime dateTime63 = dateTime45.withChronology(chronology62);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(5907399684280970662L, chronology62);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(chronology62);
        boolean boolean67 = dateTime65.isEqual((-14L));
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property74 = dateTime73.hourOfDay();
        org.joda.time.DateTime dateTime76 = dateTime73.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology77 = dateTime76.getChronology();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology81 = chronology77.withZone(dateTimeZone80);
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate((long) (byte) 1, dateTimeZone80);
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate(dateTimeZone80);
        java.util.Locale.Builder builder85 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder88 = builder85.setExtension('u', "en-US");
        java.util.Locale locale89 = builder88.build();
        java.lang.String str90 = dateTimeZone80.getName((long) (short) 0, locale89);
        boolean boolean91 = dateTimeZone80.isFixed();
        org.joda.time.DateTime dateTime92 = dateTime65.withZone(dateTimeZone80);
        boolean boolean93 = localDate36.equals((java.lang.Object) dateTimeZone80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime65 and dateTime92", (dateTime65.compareTo(dateTime92) == 0) == dateTime65.equals(dateTime92));
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test297");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay(0L);
        java.lang.String str10 = monthDay9.toString();
        org.joda.time.Chronology chronology11 = monthDay9.getChronology();
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.withPeriodAdded(readablePeriod13, 54);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime15", (dateTime2.compareTo(dateTime15) == 0) == dateTime2.equals(dateTime15));
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test298");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        int int8 = dateTime7.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) '#');
        int int14 = dateTime11.getWeekyear();
        org.joda.time.DateTime dateTime16 = dateTime11.minusMillis((int) (short) 0);
        boolean boolean17 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime16.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime16.plusMinutes(100);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfCentury((int) '#');
        org.joda.time.LocalDate localDate27 = localDate23.minusYears(32769);
        org.joda.time.LocalDate.Property property28 = localDate27.dayOfWeek();
        org.joda.time.LocalDate localDate29 = property28.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean33 = dateTimeZone31.isStandardOffset(10L);
        java.lang.Object obj34 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long41 = dateTimeZone37.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(obj34, dateTimeZone37);
        org.joda.time.DateTime dateTime43 = dateTime42.toDateTime();
        int int44 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime42);
        long long48 = dateTimeZone31.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.now(dateTimeZone31);
        org.joda.time.Interval interval50 = localDate29.toInterval(dateTimeZone31);
        boolean boolean51 = dateTimeZone31.isFixed();
        org.joda.time.DateTime dateTime52 = dateTime20.withZone(dateTimeZone31);
        org.joda.time.DateTime.Property property53 = dateTime52.era();
        java.lang.String str54 = property53.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime52", (dateTime20.compareTo(dateTime52) == 0) == dateTime20.equals(dateTime52));
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test299");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.plus(readablePeriod11);
        boolean boolean13 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) dateTime2);
        org.joda.time.DateTime dateTime16 = dateTime2.withSecondOfMinute(59);
        int int17 = dateTime2.getDayOfYear();
        org.joda.time.Instant instant18 = dateTime2.toInstant();
        long long19 = dateTime2.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant18", (dateTime2.compareTo(instant18) == 0) == dateTime2.equals(instant18));
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test300");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        org.joda.time.LocalDate localDate13 = localDate4.withYearOfEra(32769);
        org.joda.time.LocalDate localDate15 = localDate4.minusDays((int) (byte) -1);
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime18 = dateTime16.plusWeeks(100);
        org.joda.time.DateTime.Property property19 = dateTime16.secondOfDay();
        java.lang.String str20 = property19.getAsText();
        java.lang.String str21 = property19.getName();
        org.joda.time.DateTime dateTime23 = property19.addWrapFieldToCopy(0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone25);
        org.joda.time.LocalDate localDate28 = localDate26.withDayOfYear(100);
        org.joda.time.LocalDate.Property property29 = localDate26.dayOfMonth();
        org.joda.time.LocalDate localDate30 = property29.getLocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.plusWeeks(14);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra(52);
        org.joda.time.LocalDate.Property property36 = localDate35.weekOfWeekyear();
        org.joda.time.LocalDate.Property property37 = localDate35.centuryOfEra();
        int int38 = localDate30.compareTo((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.Chronology chronology39 = localDate30.getChronology();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) dateTime23, chronology39);
        org.joda.time.DateTime.Property property41 = dateTime23.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and dateTime40", (dateTime23.compareTo(dateTime40) == 0) == dateTime23.equals(dateTime40));
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test301");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.roll((int) (short) 100, 0);
        int int8 = calendar1.getGreatestMinimum(0);
        calendar1.clear();
        calendar1.clear(0);
        calendar1.set(8, 0, (int) 'a', 2021, 3);
        int int19 = calendar1.getGreatestMinimum(3);
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale20);
        calendar21.setLenient(true);
        calendar21.setMinimalDaysInFirstWeek(1970);
        int int27 = calendar21.getGreatestMinimum(10);
        java.time.Instant instant28 = calendar21.toInstant();
        calendar21.setTimeInMillis(1L);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYearOfEra((int) '4');
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime33.toMutableDateTime(dateTimeZone37);
        java.util.TimeZone timeZone39 = dateTimeZone37.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        calendar21.setTimeZone(timeZone39);
        calendar1.setTimeZone(timeZone39);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone39, locale44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property56 = dateTime55.hourOfDay();
        org.joda.time.DateTime dateTime58 = dateTime55.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology59 = dateTime58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology63 = chronology59.withZone(dateTimeZone62);
        org.joda.time.MonthDay monthDay64 = new org.joda.time.MonthDay((java.lang.Object) dateTime50, chronology59);
        java.lang.String str66 = monthDay64.toString("35");
        org.joda.time.MonthDay.Property property67 = monthDay64.monthOfYear();
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        int int69 = property67.getMaximumTextLength(locale68);
        java.util.Calendar calendar70 = java.util.Calendar.getInstance(timeZone39, locale68);
        java.lang.String str71 = locale68.getDisplayVariant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar45 and calendar70", (calendar45.compareTo(calendar70) == 0) == calendar45.equals(calendar70));
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test302");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours(21);
        int int9 = dateTime6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays((int) '#');
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localDate17.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime12.toDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime24 = dateTime12.plusWeeks(5);
        int int25 = dateTime12.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property32 = dateTime31.hourOfDay();
        org.joda.time.DateTime dateTime34 = dateTime31.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology39 = chronology35.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = chronology35.weekyearOfCentury();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(83968099800000L, chronology35);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime45 = localDate41.toDateTimeAtStartOfDay(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays((int) '#');
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(dateTimeZone52);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = localDate53.toDateTimeAtStartOfDay(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime48.toDateTime(dateTimeZone55);
        org.joda.time.DateTime dateTime60 = dateTime48.plusWeeks(5);
        int int61 = dateTimeZone44.getOffset((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime12.toMutableDateTime(dateTimeZone44);
        boolean boolean63 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.minusDays((int) '#');
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate(dateTimeZone70);
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate(dateTimeZone73);
        org.joda.time.DateTime dateTime75 = localDate71.toDateTimeAtStartOfDay(dateTimeZone73);
        org.joda.time.DateTime dateTime76 = dateTime66.toDateTime(dateTimeZone73);
        org.joda.time.DateTime dateTime78 = dateTime66.plusWeeks(5);
        org.joda.time.Instant instant79 = dateTime78.toInstant();
        int int80 = dateTime78.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone82);
        org.joda.time.DateTime dateTime85 = dateTime83.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property86 = dateTime85.hourOfDay();
        org.joda.time.DateTime dateTime88 = dateTime85.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology89 = dateTime88.getChronology();
        org.joda.time.DateTimeZone dateTimeZone92 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology93 = chronology89.withZone(dateTimeZone92);
        org.joda.time.LocalDate localDate94 = org.joda.time.LocalDate.now(chronology93);
        org.joda.time.DateTimeField dateTimeField95 = chronology93.millisOfSecond();
        org.joda.time.DateTime dateTime96 = dateTime78.withChronology(chronology93);
        org.joda.time.DateTime dateTime97 = dateTime6.withChronology(chronology93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and instant79", (dateTime24.compareTo(instant79) == 0) == dateTime24.equals(instant79));
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test303");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime9.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone12.isStandardOffset(10L);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.DateTime.Property property16 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime18 = dateTime9.plusSeconds(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = dateTime9.toString(dateTimeFormatter19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime9", (dateTime15.compareTo(dateTime9) == 0) == dateTime15.equals(dateTime9));
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test304");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(11);
        long long11 = dateTimeZone7.convertLocalToUTC((-187167231L), true, (long) 70);
        org.joda.time.DateTime dateTime12 = dateTime3.toDateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(4480738911314L, dateTimeZone7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime12", (dateTime3.compareTo(dateTime12) == 0) == dateTime3.equals(dateTime12));
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test305");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar1.set(0, (int) (byte) 10, (int) (short) 10);
        int int12 = calendar1.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        int int18 = localDate15.size();
        org.joda.time.LocalDate localDate20 = localDate15.plusMonths(6);
        java.util.Date date21 = localDate20.toDate();
        calendar1.setTime(date21);
        java.util.TimeZone timeZone23 = calendar1.getTimeZone();
        java.util.Locale locale27 = new java.util.Locale("years", "italien", "Cina");
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone23, locale27);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone23);
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder30.setExtension('u', "en-US");
        java.util.Locale.Builder builder35 = builder33.setLanguageTag("de-DE");
        java.util.Locale.Builder builder36 = builder35.clear();
        java.util.Locale locale37 = builder35.build();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone23, locale37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar28 and calendar29", (calendar28.compareTo(calendar29) == 0) == calendar28.equals(calendar29));
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test306");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        java.util.TimeZone timeZone8 = dateTimeZone6.toTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        long long16 = dateTimeZone11.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale19);
        java.lang.String str21 = locale19.getCountry();
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str23 = locale19.getDisplayVariant(locale22);
        java.lang.String str24 = dateTimeZone11.getShortName((long) 20, locale19);
        java.lang.String str25 = locale19.getDisplayScript();
        java.lang.String str26 = locale19.getDisplayName();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone8, locale19);
        java.lang.String str28 = locale19.getDisplayVariant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar20 and calendar27", (calendar20.compareTo(calendar27) == 0) == calendar20.equals(calendar27));
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test307");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        java.lang.String str11 = property10.getAsText();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays((int) '#');
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime14.toDateTime(dateTimeZone21);
        org.joda.time.DateTime.Property property25 = dateTime14.centuryOfEra();
        java.lang.String str26 = dateTime14.toString();
        int int27 = dateTime14.getDayOfYear();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.withDayOfYear(100);
        org.joda.time.LocalDate.Property property33 = localDate30.dayOfMonth();
        org.joda.time.LocalDate localDate34 = property33.getLocalDate();
        org.joda.time.LocalDate localDate36 = property33.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate37 = property33.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property33.getFieldType();
        org.joda.time.LocalDate localDate39 = property33.getLocalDate();
        org.joda.time.LocalDate localDate40 = property33.roundFloorCopy();
        java.lang.String str41 = localDate40.toString();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(11);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtCurrentTime(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = dateTime14.withZoneRetainFields(dateTimeZone43);
        int int46 = property10.getDifference((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime48 = dateTime45.withYearOfEra(122);
        int int49 = dateTime45.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.plus(readablePeriod53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property57 = dateTime56.dayOfWeek();
        org.joda.time.DateTime dateTime58 = property57.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime60 = dateTime58.minusMonths(6);
        org.joda.time.YearMonthDay yearMonthDay61 = dateTime60.toYearMonthDay();
        org.joda.time.DateTime dateTime62 = dateTime60.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone63 = dateTime62.getZone();
        org.joda.time.DateTime dateTime64 = dateTime45.withZone(dateTimeZone63);
        org.joda.time.DateTime.Property property65 = dateTime45.secondOfMinute();
        java.lang.String str66 = property65.getAsShortText();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime45 and dateTime64", (dateTime45.compareTo(dateTime64) == 0) == dateTime45.equals(dateTime64));
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test308");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays((int) '#');
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = localDate8.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime3.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = dateTime3.plusWeeks(5);
        int int16 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology30 = chronology26.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = chronology26.weekyearOfCentury();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(83968099800000L, chronology26);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime36 = localDate32.toDateTimeAtStartOfDay(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays((int) '#');
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(dateTimeZone43);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = localDate44.toDateTimeAtStartOfDay(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime39.toDateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime51 = dateTime39.plusWeeks(5);
        int int52 = dateTimeZone35.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime3.toMutableDateTime(dateTimeZone35);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 1439, dateTimeZone35);
        int int56 = dateTimeZone35.getOffset((long) 50);
        org.joda.time.LocalDate localDate57 = org.joda.time.LocalDate.now(dateTimeZone35);
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(dateTimeZone59);
        org.joda.time.LocalDate localDate62 = localDate60.withDayOfYear(100);
        int int63 = localDate60.size();
        org.joda.time.LocalDate localDate65 = localDate60.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.minusDays((int) '#');
        int int71 = dateTime68.getWeekyear();
        org.joda.time.DateMidnight dateMidnight72 = dateTime68.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property74 = dateTime68.property(dateTimeFieldType73);
        org.joda.time.LocalDate.Property property75 = localDate65.property(dateTimeFieldType73);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone77);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.DateTime dateTime80 = dateTime78.plus(readablePeriod79);
        int int81 = property75.compareTo((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.LocalDate localDate82 = property75.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = property75.getFieldType();
        org.joda.time.LocalDate.Property property84 = localDate57.property(dateTimeFieldType83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and mutableDateTime53", (dateTime3.compareTo(mutableDateTime53) == 0) == dateTime3.equals(mutableDateTime53));
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test309");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(0L);
        java.lang.String str11 = monthDay10.toString();
        org.joda.time.Chronology chronology12 = monthDay10.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime8.withChronology(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfMonth(17);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((long) 17);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes(48967);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime13", (dateTime8.compareTo(dateTime13) == 0) == dateTime8.equals(dateTime13));
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test310");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder3.setTimeOfDay((int) 'x', (int) ' ', 0);
        java.util.Calendar.Builder builder10 = builder7.set(12, 2022);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(39659999, 365, (int) (short) 1);
        java.util.Calendar.Builder builder16 = builder10.setLenient(false);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        calendar18.roll(9, false);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.parse("fr");
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.lang.String[] strArray34 = new java.lang.String[] { "fr", "", "--01-01", "hi!", "23", "", "23" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strList35);
        java.lang.String str38 = java.util.Locale.lookupTag(languageRangeList23, (java.util.Collection<java.lang.String>) strList35);
        boolean boolean39 = calendar18.before((java.lang.Object) strList35);
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale40);
        calendar41.setLenient(true);
        calendar41.roll((int) (short) 100, 0);
        int int48 = calendar41.getGreatestMinimum(0);
        calendar41.clear();
        calendar41.clear(0);
        calendar41.set(8, 0, (int) 'a', 2021, 3);
        java.util.TimeZone timeZone58 = calendar41.getTimeZone();
        calendar18.setTimeZone(timeZone58);
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone58);
        java.util.Calendar.Builder builder61 = builder10.setTimeZone(timeZone58);
        java.util.Locale locale62 = java.util.Locale.FRENCH;
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(locale62);
        calendar63.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar63.set(0, (int) (byte) 10, (int) (short) 10);
        int int74 = calendar63.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate(dateTimeZone76);
        org.joda.time.LocalDate localDate79 = localDate77.withDayOfYear(100);
        int int80 = localDate77.size();
        org.joda.time.LocalDate localDate82 = localDate77.plusMonths(6);
        java.util.Date date83 = localDate82.toDate();
        calendar63.setTime(date83);
        java.util.TimeZone timeZone85 = calendar63.getTimeZone();
        java.util.Locale locale89 = new java.util.Locale("years", "italien", "Cina");
        java.util.Calendar calendar90 = java.util.Calendar.getInstance(timeZone85, locale89);
        org.joda.time.DateTimeZone dateTimeZone91 = org.joda.time.DateTimeZone.forTimeZone(timeZone85);
        java.util.Calendar calendar92 = java.util.Calendar.getInstance(timeZone85);
        java.util.Calendar.Builder builder93 = builder61.setTimeZone(timeZone85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar60 and calendar90", (calendar60.compareTo(calendar90) == 0) == calendar60.equals(calendar90));
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test311");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays((int) 'u');
        int int10 = dateTime4.getYearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime4.plusMillis(4);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        org.joda.time.LocalDate.Property property18 = localDate15.dayOfMonth();
        org.joda.time.LocalDate localDate19 = property18.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime20 = dateTime12.withFields((org.joda.time.ReadablePartial) localDate19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(100);
        org.joda.time.Interval interval26 = localDate25.toInterval();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.days();
        java.lang.String str28 = durationFieldType27.getName();
        org.joda.time.LocalDate localDate30 = localDate25.withFieldAdded(durationFieldType27, 32770);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate32 = localDate25.plus(readablePeriod31);
        int int33 = localDate19.compareTo((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate.Property property34 = localDate25.weekyear();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfCentury((int) '#');
        org.joda.time.LocalDate localDate41 = localDate37.minusYears(32769);
        org.joda.time.LocalDate.Property property42 = localDate37.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property42.getFieldType();
        org.joda.time.LocalDate localDate45 = localDate25.withField(dateTimeFieldType43, 364);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays((int) '#');
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(dateTimeZone52);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = localDate53.toDateTimeAtStartOfDay(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime48.toDateTime(dateTimeZone55);
        org.joda.time.DateTime.Property property59 = dateTime48.centuryOfEra();
        java.lang.String str60 = dateTime48.toString();
        int int61 = dateTime48.getDayOfYear();
        int int62 = dateTime48.getHourOfDay();
        org.joda.time.DateTime dateTime63 = localDate25.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime64 = dateTime63.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate65 = dateTime63.toLocalDate();
        org.joda.time.Instant instant66 = dateTime63.toInstant();
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(dateTimeZone68);
        org.joda.time.LocalDate localDate71 = localDate69.withDayOfYear(100);
        org.joda.time.Interval interval72 = localDate71.toInterval();
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.days();
        java.lang.String str74 = durationFieldType73.getName();
        org.joda.time.LocalDate localDate76 = localDate71.withFieldAdded(durationFieldType73, 32770);
        org.joda.time.LocalDate.Property property77 = localDate76.yearOfCentury();
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.DateTime dateTime79 = localDate76.toDateTime(readableInstant78);
        int int80 = localDate76.getEra();
        java.util.TimeZone timeZone81 = null;
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forTimeZone(timeZone81);
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate(dateTimeZone82);
        org.joda.time.LocalDate localDate85 = localDate83.withDayOfYear(100);
        int int86 = localDate83.size();
        org.joda.time.LocalDate localDate88 = localDate83.plusMonths(3);
        org.joda.time.LocalDate localDate89 = localDate76.withFields((org.joda.time.ReadablePartial) localDate88);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean91 = localDate76.isSupported(dateTimeFieldType90);
        java.lang.String str92 = dateTimeFieldType90.toString();
        boolean boolean93 = dateTime63.isSupported(dateTimeFieldType90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime63 and instant66", (dateTime63.compareTo(instant66) == 0) == dateTime63.equals(instant66));
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test312");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime12 = dateTime7.withCenturyOfEra(0);
        org.joda.time.DateTime dateTime14 = dateTime12.withCenturyOfEra((int) 'a');
        org.joda.time.DateTime dateTime16 = dateTime12.withWeekyear(2022);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MonthDay monthDay19 = new org.joda.time.MonthDay(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime24.hourOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.MonthDay monthDay29 = monthDay19.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.clockhourOfDay();
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay(0L, chronology28);
        org.joda.time.DateTime dateTime32 = dateTime16.toDateTime(chronology28);
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays(225);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay(0L);
        java.lang.String str37 = monthDay36.toString();
        org.joda.time.Chronology chronology38 = monthDay36.getChronology();
        org.joda.time.Chronology chronology39 = monthDay36.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.millisOfDay();
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay(0L);
        java.lang.String str44 = monthDay43.toString();
        org.joda.time.Chronology chronology45 = monthDay43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = monthDay43.getField((int) (byte) 1);
        int[] intArray49 = chronology39.get((org.joda.time.ReadablePartial) monthDay43, (long) 349260000);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime32.toMutableDateTime(chronology39);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime53 = dateTime32.withDurationAdded(readableDuration51, 2045);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime53 and mutableDateTime50", (dateTime53.compareTo(mutableDateTime50) == 0) == dateTime53.equals(mutableDateTime50));
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test313");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays((int) 'u');
        long long10 = dateTime4.getMillis();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(100);
        org.joda.time.Interval interval16 = localDate15.toInterval();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        java.lang.String str18 = durationFieldType17.getName();
        org.joda.time.LocalDate localDate20 = localDate15.withFieldAdded(durationFieldType17, 32770);
        org.joda.time.DateTime dateTime22 = dateTime4.withFieldAdded(durationFieldType17, 3);
        org.joda.time.DateTime dateTime24 = dateTime22.minus((long) 11279);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean29 = dateTimeZone27.isStandardOffset(10L);
        long long32 = dateTimeZone27.adjustOffset((-58474832460001L), false);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone27);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 187200000, dateTimeZone27);
        org.joda.time.DateTime dateTime35 = dateTime24.toDateTime(dateTimeZone27);
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale37);
        calendar38.setLenient(true);
        calendar38.roll((int) (short) 100, 0);
        int int45 = calendar38.getGreatestMinimum(0);
        calendar38.clear();
        calendar38.clear(0);
        calendar38.set(8, 0, (int) 'a', 2021, 3);
        int int56 = calendar38.getGreatestMinimum(3);
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(locale57);
        calendar58.setLenient(true);
        calendar58.setMinimalDaysInFirstWeek(1970);
        int int64 = calendar58.getGreatestMinimum(10);
        java.time.Instant instant65 = calendar58.toInstant();
        calendar58.setTimeInMillis(1L);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone69);
        org.joda.time.DateTime dateTime72 = dateTime70.withYearOfEra((int) '4');
        java.util.TimeZone timeZone73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        org.joda.time.MutableDateTime mutableDateTime75 = dateTime70.toMutableDateTime(dateTimeZone74);
        java.util.TimeZone timeZone76 = dateTimeZone74.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forTimeZone(timeZone76);
        calendar58.setTimeZone(timeZone76);
        calendar38.setTimeZone(timeZone76);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forTimeZone(timeZone76);
        java.util.Locale locale81 = java.util.Locale.FRANCE;
        java.util.Calendar calendar82 = java.util.Calendar.getInstance(timeZone76, locale81);
        java.lang.String str83 = dateTimeZone27.getShortName((-15501402168528000L), locale81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime35", (dateTime24.compareTo(dateTime35) == 0) == dateTime24.equals(dateTime35));
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test314");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        java.lang.String str11 = property10.getAsString();
        org.joda.time.LocalDate localDate12 = property10.getLocalDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = null;
        org.joda.time.format.DateTimeParser dateTimeParser14 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter13, dateTimeParser14);
        org.joda.time.Chronology chronology16 = dateTimeFormatter15.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser17 = dateTimeFormatter15.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter15.withPivotYear((java.lang.Integer) 10);
        int int20 = dateTimeFormatter19.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeFormatter19.getZone();
        boolean boolean22 = dateTimeFormatter19.isParser();
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeFormatter19.getZone();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays((int) '#');
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone32);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = localDate33.toDateTimeAtStartOfDay(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime28.toDateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime40 = dateTime28.plusWeeks(5);
        int int41 = dateTime28.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property48 = dateTime47.hourOfDay();
        org.joda.time.DateTime dateTime50 = dateTime47.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology51 = dateTime50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology55 = chronology51.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField56 = chronology51.weekyearOfCentury();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(83968099800000L, chronology51);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime61 = localDate57.toDateTimeAtStartOfDay(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime64.minusDays((int) '#');
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(dateTimeZone68);
        java.util.TimeZone timeZone70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate(dateTimeZone71);
        org.joda.time.DateTime dateTime73 = localDate69.toDateTimeAtStartOfDay(dateTimeZone71);
        org.joda.time.DateTime dateTime74 = dateTime64.toDateTime(dateTimeZone71);
        org.joda.time.DateTime dateTime76 = dateTime64.plusWeeks(5);
        int int77 = dateTimeZone60.getOffset((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.MutableDateTime mutableDateTime78 = dateTime28.toMutableDateTime(dateTimeZone60);
        long long80 = dateTimeZone25.getMillisKeepLocal(dateTimeZone60, (long) 365);
        java.lang.String str82 = dateTimeZone25.getNameKey(83652552000000L);
        org.joda.time.LocalDate localDate83 = org.joda.time.LocalDate.now(dateTimeZone25);
        java.lang.String str84 = dateTimeZone25.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = dateTimeFormatter19.withZone(dateTimeZone25);
        boolean boolean86 = property10.equals((java.lang.Object) dateTimeFormatter85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and mutableDateTime78", (dateTime28.compareTo(mutableDateTime78) == 0) == dateTime28.equals(mutableDateTime78));
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test315");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime10.hourOfDay();
        org.joda.time.DateMidnight dateMidnight12 = dateTime10.toDateMidnight();
        long long13 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime10.minusMonths(1439);
        org.joda.time.DateTime dateTime17 = dateTime15.withYear((int) (short) 1);
        int int18 = dateTime15.getHourOfDay();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.LocalDate localDate23 = localDate21.withDayOfYear(100);
        org.joda.time.Interval interval24 = localDate23.toInterval();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.days();
        java.lang.String str26 = durationFieldType25.getName();
        org.joda.time.LocalDate localDate28 = localDate23.withFieldAdded(durationFieldType25, 32770);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate30 = localDate23.plus(readablePeriod29);
        org.joda.time.LocalDate localDate32 = localDate23.withYearOfEra(32769);
        org.joda.time.LocalDate localDate34 = localDate23.minusDays((int) (byte) -1);
        org.joda.time.DateTime dateTime35 = localDate34.toDateTimeAtMidnight();
        int int36 = localDate34.getDayOfMonth();
        org.joda.time.Chronology chronology37 = localDate34.getChronology();
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime15.toMutableDateTime(chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter2.withChronology(chronology37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and mutableDateTime38", (dateTime15.compareTo(mutableDateTime38) == 0) == dateTime15.equals(mutableDateTime38));
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test316");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        int int7 = localDate2.getValue((int) (short) 0);
        org.joda.time.LocalDate localDate9 = localDate2.withWeekyear(10);
        org.joda.time.LocalDate localDate11 = localDate9.minusWeeks(0);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 23, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone13);
        java.util.TimeZone timeZone17 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTime dateTime18 = localDate11.toDateTimeAtMidnight(dateTimeZone13);
        java.lang.Object obj19 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long26 = dateTimeZone22.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(obj19, dateTimeZone22);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime27.getZone();
        org.joda.time.DateTime dateTime31 = dateTime27.minusHours(365);
        boolean boolean32 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = dateTime18.plusMinutes(640);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime27", (dateTime16.compareTo(dateTime27) == 0) == dateTime16.equals(dateTime27));
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test317");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology8.years();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology8.getZone();
        org.joda.time.DurationField durationField19 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField20 = chronology8.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfEra((int) '4');
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime23.toMutableDateTime(dateTimeZone27);
        java.util.TimeZone timeZone29 = dateTimeZone27.toTimeZone();
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property32 = monthDay31.monthOfYear();
        org.joda.time.MonthDay monthDay34 = property32.addToCopy((int) ' ');
        int int35 = property32.get();
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(locale36);
        java.lang.String str38 = locale36.getCountry();
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str40 = locale36.getDisplayVariant(locale39);
        java.lang.String str41 = property32.getAsShortText(locale36);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone29, locale36);
        int int43 = dateTimeField20.getMaximumShortTextLength(locale36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar37 and calendar42", (calendar37.compareTo(calendar42) == 0) == calendar37.equals(calendar42));
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test318");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(52);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(100);
        org.joda.time.LocalDate.Property property22 = localDate19.dayOfMonth();
        org.joda.time.LocalDate localDate23 = property22.getLocalDate();
        org.joda.time.LocalDate localDate25 = property22.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = localDate25.getFields();
        int int27 = localDate25.getDayOfWeek();
        org.joda.time.LocalDate localDate29 = localDate25.withWeekyear(1);
        org.joda.time.DateTime dateTime30 = dateTime14.withFields((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTime.Property property31 = dateTime30.yearOfEra();
        org.joda.time.Instant instant32 = dateTime30.toInstant();
        org.joda.time.DateTime dateTime34 = dateTime30.minusMillis(19);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(11);
        int int38 = dateTimeZone36.getOffsetFromLocal((long) 1970);
        long long40 = dateTimeZone36.convertUTCToLocal(62135766730335L);
        org.joda.time.DateTime dateTime41 = dateTime30.withZone(dateTimeZone36);
        long long43 = dateTimeZone36.convertUTCToLocal(162060000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and instant32", (dateTime30.compareTo(instant32) == 0) == dateTime30.equals(instant32));
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test319");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTime dateTime10 = property5.roundFloorCopy();
        org.joda.time.DateTime dateTime12 = property5.addToCopy((long) 2730);
        org.joda.time.Instant instant13 = dateTime12.toInstant();
        org.joda.time.DateTime.Property property14 = dateTime12.weekOfWeekyear();
        java.lang.String str15 = property14.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant13", (dateTime12.compareTo(instant13) == 0) == dateTime12.equals(instant13));
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test320");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        int int16 = dateTime14.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = dateTime21.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology29 = chronology25.withZone(dateTimeZone28);
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.now(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.millisOfSecond();
        org.joda.time.DateTime dateTime32 = dateTime14.withChronology(chronology29);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property38 = dateTime37.hourOfDay();
        org.joda.time.DateTime dateTime40 = property38.addToCopy(97L);
        java.lang.String str41 = property38.toString();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.plus(readablePeriod45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime50 = dateTime46.withYearOfCentury(1);
        int int51 = property38.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime53 = dateTime46.minusYears(29);
        long long54 = dateTime53.getMillis();
        int int55 = dateTime53.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusDays((int) '#');
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(dateTimeZone62);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = localDate63.toDateTimeAtStartOfDay(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime58.toDateTime(dateTimeZone65);
        java.lang.Object obj69 = null;
        boolean boolean70 = dateTimeZone65.equals(obj69);
        long long73 = dateTimeZone65.convertLocalToUTC((long) (-26569157), false);
        long long75 = dateTimeZone65.previousTransition((long) 14399995);
        org.joda.time.DateTime dateTime76 = dateTime53.withZoneRetainFields(dateTimeZone65);
        int int78 = dateTimeZone65.getOffset((long) 14399999);
        org.joda.time.DateTime dateTime79 = dateTime32.toDateTime(dateTimeZone65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant15", (dateTime14.compareTo(instant15) == 0) == dateTime14.equals(instant15));
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test321");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        int int7 = property2.getMaximumTextLength(locale3);
        java.lang.String str8 = property2.getAsString();
        java.lang.String str9 = property2.getAsShortText();
        int int10 = property2.getMaximumValueOverall();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay15 = monthDay13.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay13.minus(readablePeriod16);
        org.joda.time.MonthDay.Property property18 = monthDay13.dayOfMonth();
        java.lang.String str19 = property18.toString();
        java.util.Locale locale20 = null;
        int int21 = property18.getMaximumShortTextLength(locale20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property27 = dateTime26.hourOfDay();
        java.lang.String str28 = property27.getAsShortText();
        org.joda.time.MonthDay monthDay29 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay31 = monthDay29.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField33 = monthDay31.getField((int) (byte) 0);
        java.util.Locale locale37 = new java.util.Locale("", "", "hi!");
        int int38 = dateTimeField33.getMaximumTextLength(locale37);
        long long41 = dateTimeField33.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay42 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay44 = monthDay42.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay42.minus(readablePeriod45);
        org.joda.time.MonthDay monthDay47 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay49 = monthDay47.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField51 = monthDay49.getField((int) (byte) 0);
        java.util.Locale locale55 = new java.util.Locale("", "", "hi!");
        int int56 = dateTimeField51.getMaximumTextLength(locale55);
        java.lang.String str57 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) monthDay42, locale55);
        int int58 = property27.getMaximumTextLength(locale55);
        org.joda.time.DateTimeField dateTimeField59 = property27.getField();
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(locale60);
        int int62 = property27.getMaximumTextLength(locale60);
        boolean boolean63 = locale60.hasExtensions();
        java.lang.String str64 = locale60.getDisplayCountry();
        boolean boolean65 = locale60.hasExtensions();
        int int66 = property18.getMaximumShortTextLength(locale60);
        java.util.Locale.Builder builder67 = builder11.setLocale(locale60);
        java.util.Locale.Builder builder68 = builder11.clear();
        java.util.Locale.Builder builder69 = builder11.clear();
        java.util.Locale locale70 = builder69.build();
        java.lang.String str71 = property2.getAsShortText(locale70);
        org.joda.time.DateTimeField dateTimeField72 = property2.getField();
        java.util.Locale.Category category73 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale75 = java.util.Locale.forLanguageTag("");
        java.util.Locale.setDefault(category73, locale75);
        java.util.Locale locale77 = java.util.Locale.getDefault(category73);
        java.lang.String str78 = locale77.getLanguage();
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(locale77);
        java.lang.String str80 = property2.getAsShortText(locale77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar61 and calendar79", (calendar61.compareTo(calendar79) == 0) == calendar61.equals(calendar79));
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test322");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime10 = dateTime5.minusDays((int) 'u');
        long long11 = dateTime5.getMillis();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(100);
        org.joda.time.Interval interval17 = localDate16.toInterval();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.days();
        java.lang.String str19 = durationFieldType18.getName();
        org.joda.time.LocalDate localDate21 = localDate16.withFieldAdded(durationFieldType18, 32770);
        org.joda.time.DateTime dateTime23 = dateTime5.withFieldAdded(durationFieldType18, 3);
        org.joda.time.DateTime dateTime25 = dateTime23.minus((long) 11279);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean30 = dateTimeZone28.isStandardOffset(10L);
        long long33 = dateTimeZone28.adjustOffset((-58474832460001L), false);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone28);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 187200000, dateTimeZone28);
        org.joda.time.DateTime dateTime36 = dateTime25.toDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(2730L, dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime36", (dateTime25.compareTo(dateTime36) == 0) == dateTime25.equals(dateTime36));
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test323");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.DateTime.Property property23 = dateTime16.centuryOfEra();
        org.joda.time.DateTime dateTime25 = dateTime16.withCenturyOfEra(20);
        int int26 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime27 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime27", (dateTime9.compareTo(dateTime27) == 0) == dateTime9.equals(dateTime27));
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test324");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime8.getZone();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        java.lang.String str18 = property17.getAsShortText();
        org.joda.time.MonthDay monthDay19 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay21 = monthDay19.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField23 = monthDay21.getField((int) (byte) 0);
        java.util.Locale locale27 = new java.util.Locale("", "", "hi!");
        int int28 = dateTimeField23.getMaximumTextLength(locale27);
        long long31 = dateTimeField23.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay32 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay34 = monthDay32.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay32.minus(readablePeriod35);
        org.joda.time.MonthDay monthDay37 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay39 = monthDay37.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField41 = monthDay39.getField((int) (byte) 0);
        java.util.Locale locale45 = new java.util.Locale("", "", "hi!");
        int int46 = dateTimeField41.getMaximumTextLength(locale45);
        java.lang.String str47 = dateTimeField23.getAsShortText((org.joda.time.ReadablePartial) monthDay32, locale45);
        int int48 = property17.getMaximumTextLength(locale45);
        org.joda.time.DateTimeField dateTimeField49 = property17.getField();
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(locale50);
        int int52 = property17.getMaximumTextLength(locale50);
        java.lang.String str53 = locale50.getDisplayVariant();
        java.util.Locale locale54 = java.util.Locale.US;
        java.lang.String str55 = locale54.toLanguageTag();
        java.lang.String str56 = locale50.getDisplayName(locale54);
        java.lang.String str57 = locale54.getLanguage();
        java.util.Set<java.lang.Character> charSet58 = locale54.getExtensionKeys();
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(locale54);
        java.util.Locale locale60 = java.util.Locale.ITALY;
        java.lang.String str61 = locale60.getVariant();
        java.lang.String str62 = locale54.getDisplayVariant(locale60);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone11, locale54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar51 and calendar59", (calendar51.compareTo(calendar59) == 0) == calendar51.equals(calendar59));
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test325");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays((int) 'u');
        int int10 = dateTime4.getYearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime4.plusMillis(4);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        org.joda.time.LocalDate.Property property18 = localDate15.dayOfMonth();
        org.joda.time.LocalDate localDate19 = property18.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime20 = dateTime12.withFields((org.joda.time.ReadablePartial) localDate19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(100);
        org.joda.time.Interval interval26 = localDate25.toInterval();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.days();
        java.lang.String str28 = durationFieldType27.getName();
        org.joda.time.LocalDate localDate30 = localDate25.withFieldAdded(durationFieldType27, 32770);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate32 = localDate25.plus(readablePeriod31);
        int int33 = localDate19.compareTo((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate.Property property34 = localDate25.weekyear();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfCentury((int) '#');
        org.joda.time.LocalDate localDate41 = localDate37.minusYears(32769);
        org.joda.time.LocalDate.Property property42 = localDate37.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property42.getFieldType();
        org.joda.time.LocalDate localDate45 = localDate25.withField(dateTimeFieldType43, 364);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays((int) '#');
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(dateTimeZone52);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = localDate53.toDateTimeAtStartOfDay(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime48.toDateTime(dateTimeZone55);
        org.joda.time.DateTime.Property property59 = dateTime48.centuryOfEra();
        java.lang.String str60 = dateTime48.toString();
        int int61 = dateTime48.getDayOfYear();
        int int62 = dateTime48.getHourOfDay();
        org.joda.time.DateTime dateTime63 = localDate25.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime64 = dateTime63.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate65 = dateTime63.toLocalDate();
        org.joda.time.Instant instant66 = dateTime63.toInstant();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean71 = dateTimeZone69.isStandardOffset(10L);
        long long74 = dateTimeZone69.adjustOffset((-58474832460001L), false);
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate(dateTimeZone69);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) 187200000, dateTimeZone69);
        org.joda.time.DateTime.Property property77 = dateTime76.hourOfDay();
        org.joda.time.LocalDate localDate78 = dateTime76.toLocalDate();
        org.joda.time.DateTime dateTime79 = dateTime63.withFields((org.joda.time.ReadablePartial) localDate78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime63 and instant66", (dateTime63.compareTo(instant66) == 0) == dateTime63.equals(instant66));
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test326");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.MonthDay monthDay12 = monthDay2.withChronologyRetainFields(chronology11);
        org.joda.time.DurationField durationField13 = chronology11.eras();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-446400000L), chronology11);
        org.joda.time.DurationField durationField15 = chronology11.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField13, durationField15, and durationField13", !(durationField13.compareTo(durationField15) == 0) || (Math.signum(durationField13.compareTo(durationField13)) == Math.signum(durationField15.compareTo(durationField13))));
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test327");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime dateTime12 = dateTime4.withWeekOfWeekyear(9);
        org.joda.time.DateTime dateTime14 = dateTime4.plus(32762L);
        int int15 = dateTime14.getDayOfMonth();
        int int16 = dateTime14.getSecondOfDay();
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay(3428268451211279L);
        org.joda.time.Chronology chronology19 = monthDay18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime14.toDateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime14.minusDays(2112);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property28 = dateTime27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = dateTime27.toLocalDateTime();
        org.joda.time.DateTime.Property property30 = dateTime27.dayOfYear();
        int int31 = property30.getMinimumValue();
        org.joda.time.DateTime dateTime32 = property30.roundFloorCopy();
        org.joda.time.DateTime dateTime34 = dateTime32.withMillisOfSecond((int) '4');
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime32.getZone();
        org.joda.time.DateTime dateTime36 = dateTime22.toDateTime(dateTimeZone35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime20", (dateTime14.compareTo(dateTime20) == 0) == dateTime14.equals(dateTime20));
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test328");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime2 = dateTime1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology15 = chronology11.withZone(dateTimeZone14);
        org.joda.time.DurationField durationField16 = chronology11.weeks();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.dayOfYear();
        org.joda.time.DurationField durationField19 = chronology11.seconds();
        org.joda.time.DurationField durationField20 = chronology11.minutes();
        org.joda.time.DateTime dateTime21 = dateTime1.withChronology(chronology11);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime.Property property23 = dateTime22.millisOfDay();
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay(0L);
        java.lang.String str26 = monthDay25.toString();
        org.joda.time.Chronology chronology27 = monthDay25.getChronology();
        org.joda.time.Chronology chronology28 = monthDay25.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.year();
        org.joda.time.DurationField durationField31 = chronology28.eras();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.dayOfYear();
        org.joda.time.DateTime dateTime33 = dateTime22.toDateTime(chronology28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField31", Math.signum(durationField16.compareTo(durationField31)) == -Math.signum(durationField31.compareTo(durationField16)));
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test329");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.DateTime.Property property23 = dateTime16.centuryOfEra();
        org.joda.time.DateTime dateTime25 = dateTime16.withCenturyOfEra(20);
        int int26 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime27 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime30 = dateTime9.withDurationAdded((long) ' ', 14399999);
        org.joda.time.DateTime dateTime33 = dateTime9.withDurationAdded(32762L, 14);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime33.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime27", (dateTime9.compareTo(dateTime27) == 0) == dateTime9.equals(dateTime27));
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test330");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.DateTime.Property property23 = dateTime16.centuryOfEra();
        org.joda.time.DateTime dateTime25 = dateTime16.withCenturyOfEra(20);
        int int26 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime27 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime30 = dateTime9.withPeriodAdded(readablePeriod28, 18);
        org.joda.time.DateTime dateTime31 = dateTime30.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime27", (dateTime31.compareTo(dateTime27) == 0) == dateTime31.equals(dateTime27));
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test331");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        int int7 = property2.getMaximumTextLength(locale3);
        java.lang.String str8 = property2.getAsString();
        org.joda.time.MonthDay monthDay9 = property2.getMonthDay();
        org.joda.time.DateTimeField dateTimeField10 = property2.getField();
        java.lang.String str11 = property2.getAsString();
        java.util.Locale locale12 = null;
        int int13 = property2.getMaximumShortTextLength(locale12);
        int int14 = property2.get();
        int int15 = property2.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay17 = property2.addToCopy(49107584);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime27 = dateTime22.withMillisOfDay(8);
        boolean boolean29 = dateTime22.isAfter((long) 17);
        org.joda.time.Instant instant30 = dateTime22.toInstant();
        org.joda.time.DateTime.Property property31 = dateTime22.dayOfYear();
        org.joda.time.DateTime dateTime33 = dateTime22.minusSeconds((int) (short) -1);
        int int34 = property2.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and instant30", (dateTime22.compareTo(instant30) == 0) == dateTime22.equals(instant30));
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test332");
        java.util.Date date3 = new java.util.Date(0, 0, (int) '4');
        date3.setDate(12);
        date3.setHours(2922789);
        date3.setTime(9L);
        java.util.Date date13 = new java.util.Date(0, 0, (int) '4');
        int int14 = date13.getHours();
        int int15 = date13.getDate();
        boolean boolean16 = date3.after(date13);
        java.util.Date date20 = new java.util.Date(0, 0, (int) '4');
        date20.setDate(12);
        date20.setHours(2922789);
        date20.setTime(9L);
        java.util.Date date30 = new java.util.Date(0, 0, (int) '4');
        int int31 = date30.getHours();
        int int32 = date30.getDate();
        boolean boolean33 = date20.after(date30);
        boolean boolean34 = date3.before(date30);
        java.lang.String str35 = date30.toLocaleString();
        date30.setHours(251);
        date30.setTime((-28166399860L));
        int int40 = date30.getMinutes();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusDays((int) '#');
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(dateTimeZone47);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = localDate48.toDateTimeAtStartOfDay(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime43.toDateTime(dateTimeZone50);
        org.joda.time.DateTime dateTime55 = dateTime43.plusWeeks(5);
        org.joda.time.Instant instant56 = dateTime55.toInstant();
        java.util.Date date57 = instant56.toDate();
        boolean boolean58 = date30.after(date57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime55 and instant56", (dateTime55.compareTo(instant56) == 0) == dateTime55.equals(instant56));
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test333");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays((int) 'u');
        org.joda.time.Instant instant10 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime12 = dateTime4.withDayOfYear(229);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime4.withPeriodAdded(readablePeriod13, 96684);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = dateTime21.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology29 = chronology25.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.weekyearOfCentury();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(83968099800000L, chronology25);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime35 = localDate31.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusDays((int) '#');
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(dateTimeZone42);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtStartOfDay(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime38.toDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = dateTime38.plusWeeks(5);
        int int51 = dateTimeZone34.getOffset((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(dateTimeZone34);
        org.joda.time.LocalDate.Property property53 = localDate52.weekyear();
        org.joda.time.LocalDate localDate55 = localDate52.plusYears(23);
        int int56 = localDate55.getDayOfYear();
        org.joda.time.LocalDate localDate58 = localDate55.minusWeeks(339);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(dateTimeZone60);
        org.joda.time.LocalDate localDate63 = localDate61.withDayOfYear(100);
        int int64 = localDate61.size();
        org.joda.time.LocalDate localDate66 = localDate61.plusMonths(6);
        org.joda.time.LocalTime localTime67 = null;
        org.joda.time.DateTime dateTime68 = localDate61.toDateTime(localTime67);
        org.joda.time.LocalDate.Property property69 = localDate61.weekyear();
        org.joda.time.LocalDate localDate70 = property69.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property69.getFieldType();
        int int72 = localDate55.get(dateTimeFieldType71);
        boolean boolean73 = dateTime4.isSupported(dateTimeFieldType71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and dateTime4", (instant10.compareTo(dateTime4) == 0) == instant10.equals(dateTime4));
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test334");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        int int15 = localDate7.getYear();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        long long22 = dateTimeZone17.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.DateTime dateTime23 = localDate7.toDateTimeAtMidnight(dateTimeZone17);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isStandardOffset((long) '4');
        int int30 = dateTimeZone25.getStandardOffset((long) 292278994);
        org.joda.time.DateTime dateTime31 = localDate7.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.Instant instant32 = dateTime31.toInstant();
        org.joda.time.DateTime dateTime34 = dateTime31.plus(1672617600000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and instant32", (dateTime23.compareTo(instant32) == 0) == dateTime23.equals(instant32));
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test335");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(292278993);
        org.joda.time.DateTime dateTime14 = dateTime10.withCenturyOfEra(816);
        org.joda.time.DateTime dateTime16 = dateTime14.minusSeconds((-1848));
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays((int) '#');
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = localDate25.toDateTimeAtStartOfDay(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime20.toDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = dateTime20.plusWeeks(5);
        int int33 = dateTime20.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property40 = dateTime39.hourOfDay();
        org.joda.time.DateTime dateTime42 = dateTime39.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology47 = chronology43.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = chronology43.weekyearOfCentury();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(83968099800000L, chronology43);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime53 = localDate49.toDateTimeAtStartOfDay(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.minusDays((int) '#');
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(dateTimeZone60);
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(dateTimeZone63);
        org.joda.time.DateTime dateTime65 = localDate61.toDateTimeAtStartOfDay(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime56.toDateTime(dateTimeZone63);
        org.joda.time.DateTime dateTime68 = dateTime56.plusWeeks(5);
        int int69 = dateTimeZone52.getOffset((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.MutableDateTime mutableDateTime70 = dateTime20.toMutableDateTime(dateTimeZone52);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((long) 1439, dateTimeZone52);
        int int73 = dateTimeZone52.getOffset((long) 50);
        org.joda.time.LocalDate localDate74 = org.joda.time.LocalDate.now(dateTimeZone52);
        int int76 = dateTimeZone52.getOffset(236199000L);
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime78 = dateTime14.toDateTime(dateTimeZone52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and mutableDateTime70", (dateTime2.compareTo(mutableDateTime70) == 0) == dateTime2.equals(mutableDateTime70));
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test336");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime4.plusYears((int) '4');
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime13 = dateTime4.withFieldAdded(durationFieldType11, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean17 = dateTimeZone15.isStandardOffset(10L);
        java.lang.Object obj18 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long25 = dateTimeZone21.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(obj18, dateTimeZone21);
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTime();
        int int28 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime26);
        long long32 = dateTimeZone15.convertLocalToUTC((long) 32772, false, (long) 292278994);
        long long34 = dateTimeZone15.nextTransition((-62135596800000L));
        org.joda.time.DateTime dateTime35 = dateTime4.withZoneRetainFields(dateTimeZone15);
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = null;
        org.joda.time.format.DateTimeParser dateTimeParser38 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter37, dateTimeParser38);
        org.joda.time.Chronology chronology40 = dateTimeFormatter39.getChronology();
        boolean boolean41 = dateTimeFormatter39.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter39.withDefaultYear(0);
        org.joda.time.format.DateTimeParser dateTimeParser44 = dateTimeFormatter43.getParser();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusDays((int) '#');
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(dateTimeZone51);
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = localDate52.toDateTimeAtStartOfDay(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime47.toDateTime(dateTimeZone54);
        org.joda.time.DateTime dateTime59 = dateTime47.plusWeeks(5);
        org.joda.time.Chronology chronology60 = dateTime47.getChronology();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter43.withChronology(chronology60);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (-46800000), chronology60);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((java.lang.Object) dateTime35, chronology60);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(chronology60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and dateTime66", (dateTime35.compareTo(dateTime66) == 0) == dateTime35.equals(dateTime66));
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test337");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime dateTime12 = dateTime4.withWeekOfWeekyear(9);
        org.joda.time.DateTime dateTime14 = dateTime4.plus(32762L);
        int int15 = dateTime14.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime14.withPeriodAdded(readablePeriod16, 366);
        org.joda.time.Instant instant19 = dateTime18.toInstant();
        org.joda.time.DateTime dateTime22 = dateTime18.withDurationAdded(31186740000L, 2140);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and instant19", (dateTime18.compareTo(instant19) == 0) == dateTime18.equals(instant19));
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test338");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.DateTime.Property property23 = dateTime16.centuryOfEra();
        org.joda.time.DateTime dateTime25 = dateTime16.withCenturyOfEra(20);
        int int26 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime27 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfCentury();
        org.joda.time.DateTime.Property property29 = dateTime27.year();
        org.joda.time.Interval interval30 = property29.toInterval();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime27", (dateTime9.compareTo(dateTime27) == 0) == dateTime9.equals(dateTime27));
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test339");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime15.hourOfDay();
        org.joda.time.DateTime dateTime18 = dateTime15.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property19 = dateTime15.yearOfCentury();
        org.joda.time.DateTime dateTime21 = dateTime15.plusYears((int) '4');
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = dateTime21.toString("--02-01", locale23);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime21.getZone();
        org.joda.time.DateTime dateTime26 = dateTime10.withZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime.Property property27 = dateTime10.yearOfEra();
        org.joda.time.DateTime dateTime29 = property27.setCopy(86399);
        org.joda.time.DateTime dateTime31 = dateTime29.withCenturyOfEra(19034);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.plus(readablePeriod32);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(dateTimeZone35);
        org.joda.time.LocalDate localDate38 = localDate36.withDayOfYear(100);
        int int39 = localDate36.size();
        org.joda.time.LocalDate localDate41 = localDate36.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.minusDays((int) '#');
        int int47 = dateTime44.getWeekyear();
        org.joda.time.DateMidnight dateMidnight48 = dateTime44.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property50 = dateTime44.property(dateTimeFieldType49);
        org.joda.time.LocalDate.Property property51 = localDate41.property(dateTimeFieldType49);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.plus(readablePeriod55);
        int int57 = property51.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.LocalDate localDate58 = property51.withMaximumValue();
        org.joda.time.DateTime dateTime59 = localDate58.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology60 = localDate58.getChronology();
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime33.toMutableDateTime(chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and mutableDateTime61", (dateTime31.compareTo(mutableDateTime61) == 0) == dateTime31.equals(mutableDateTime61));
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test340");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear(100);
        int int14 = localDate11.size();
        org.joda.time.LocalDate localDate16 = localDate11.plusMonths(6);
        int int18 = localDate16.getValue(0);
        java.lang.String str19 = localDate16.toString();
        org.joda.time.LocalDate localDate21 = localDate16.withWeekyear(1);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = localDate21.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTime dateTime30 = dateTime7.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = dateTime7.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime36.hourOfDay();
        org.joda.time.DateTime dateTime39 = dateTime36.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology44 = chronology40.withZone(dateTimeZone43);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(dateTimeZone48);
        long long53 = dateTimeZone48.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 'a', dateTimeZone48);
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(locale56);
        java.lang.String str58 = locale56.getCountry();
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str60 = locale56.getDisplayVariant(locale59);
        java.lang.String str61 = dateTimeZone48.getShortName((long) 20, locale56);
        java.lang.String str62 = locale56.getDisplayScript();
        java.lang.String str63 = locale56.getDisplayName();
        java.lang.String str64 = dateTimeZone43.getShortName((long) 9, locale56);
        org.joda.time.DateTime dateTime65 = dateTime31.toDateTime(dateTimeZone43);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.DateTime dateTime67 = dateTime65.minus(readableDuration66);
        org.joda.time.MonthDay monthDay69 = new org.joda.time.MonthDay(1644572109112L);
        java.lang.String str70 = monthDay69.toString();
        org.joda.time.MonthDay monthDay72 = monthDay69.minusMonths(48998496);
        org.joda.time.MonthDay monthDay74 = monthDay69.minusMonths((-1970));
        org.joda.time.MonthDay monthDay76 = monthDay69.plusDays(0);
        org.joda.time.DateTime dateTime77 = dateTime67.withFields((org.joda.time.ReadablePartial) monthDay76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime67", (dateTime7.compareTo(dateTime67) == 0) == dateTime7.equals(dateTime67));
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test341");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.DateTime dateTime11 = localDate2.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(71);
        org.joda.time.DateTime dateTime14 = dateTime11.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime11.minus(1644572461292L);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime14", (dateTime11.compareTo(dateTime14) == 0) == dateTime11.equals(dateTime14));
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test342");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate11 = property5.addWrapFieldToCopy(3);
        org.joda.time.LocalDate localDate12 = property5.roundCeilingCopy();
        int int13 = localDate12.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateTime18.toDateMidnight();
        long long21 = dateTime18.getMillis();
        org.joda.time.DateTime.Property property22 = dateTime18.secondOfMinute();
        org.joda.time.DateTime dateTime24 = dateTime18.plusMonths(3659999);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property30 = dateTime29.hourOfDay();
        org.joda.time.DateTime dateTime32 = dateTime29.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology37 = chronology33.withZone(dateTimeZone36);
        long long40 = dateTimeZone36.adjustOffset((-62180539199983L), true);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone36);
        java.lang.String str43 = dateTimeZone36.getName((-187199990L));
        org.joda.time.DateTime dateTime44 = dateTime18.toDateTime(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight45 = localDate12.toDateMidnight(dateTimeZone36);
        int int47 = dateTimeZone36.getOffsetFromLocal((long) 1199);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime44", (dateTime18.compareTo(dateTime44) == 0) == dateTime18.equals(dateTime44));
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test343");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.roll((int) (short) 100, 0);
        int int8 = calendar1.getGreatestMinimum(0);
        calendar1.clear();
        calendar1.clear(0);
        calendar1.set(8, 0, (int) 'a', 2021, 3);
        int int19 = calendar1.getGreatestMinimum(3);
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale20);
        calendar21.setLenient(true);
        calendar21.setMinimalDaysInFirstWeek(1970);
        int int27 = calendar21.getGreatestMinimum(10);
        java.time.Instant instant28 = calendar21.toInstant();
        calendar21.setTimeInMillis(1L);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYearOfEra((int) '4');
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime33.toMutableDateTime(dateTimeZone37);
        java.util.TimeZone timeZone39 = dateTimeZone37.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        calendar21.setTimeZone(timeZone39);
        calendar1.setTimeZone(timeZone39);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone39, locale44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property56 = dateTime55.hourOfDay();
        org.joda.time.DateTime dateTime58 = dateTime55.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology59 = dateTime58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology63 = chronology59.withZone(dateTimeZone62);
        org.joda.time.MonthDay monthDay64 = new org.joda.time.MonthDay((java.lang.Object) dateTime50, chronology59);
        java.lang.String str66 = monthDay64.toString("35");
        org.joda.time.MonthDay.Property property67 = monthDay64.monthOfYear();
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        int int69 = property67.getMaximumTextLength(locale68);
        java.util.Calendar calendar70 = java.util.Calendar.getInstance(timeZone39, locale68);
        java.util.Locale.setDefault(locale68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar45 and calendar70", (calendar45.compareTo(calendar70) == 0) == calendar45.equals(calendar70));
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test344");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean3 = dateTimeZone1.isStandardOffset(10L);
        java.lang.Object obj4 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long11 = dateTimeZone7.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj4, dateTimeZone7);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        int int14 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime12);
        long long18 = dateTimeZone1.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone1);
        int int20 = dateTime19.getYear();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks(0);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = dateTime22.toString("14399999", locale24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime22", (dateTime12.compareTo(dateTime22) == 0) == dateTime12.equals(dateTime22));
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test345");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime2 = dateTime1.toDateTimeISO();
        org.joda.time.Instant instant3 = dateTime1.toInstant();
        org.joda.time.DateTime dateTime5 = dateTime1.plusSeconds(24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant3", (dateTime1.compareTo(instant3) == 0) == dateTime1.equals(instant3));
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test346");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMinuteOfHour(31);
        org.joda.time.DateTime.Property property5 = dateTime2.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime10.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime10.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime16 = dateTime13.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime18 = dateTime13.plusSeconds(13);
        org.joda.time.DateTime dateTime19 = dateTime13.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime21 = dateTime13.withMillis(26L);
        org.joda.time.DateTime dateTime23 = dateTime21.plusWeeks((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime21.plus(readableDuration24);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime21.toMutableDateTimeISO();
        boolean boolean27 = dateTime2.equals((java.lang.Object) dateTime21);
        java.lang.Object obj28 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long35 = dateTimeZone31.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(obj28, dateTimeZone31);
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTime();
        org.joda.time.DateTime dateTime39 = dateTime37.withWeekyear(365);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.now(dateTimeZone41);
        boolean boolean44 = dateTimeZone41.isStandardOffset(31525804800035L);
        org.joda.time.DateTime dateTime45 = dateTime37.toDateTime(dateTimeZone41);
        org.joda.time.DateTime dateTime46 = dateTime21.withZoneRetainFields(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property52 = dateTime51.hourOfDay();
        org.joda.time.DateTime dateTime54 = dateTime51.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime56 = dateTime51.withYearOfEra((int) ' ');
        int int57 = dateTime51.getYearOfCentury();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime60 = dateTime51.withDurationAdded(readableDuration58, (int) (byte) -1);
        org.joda.time.DateTime.Property property61 = dateTime60.hourOfDay();
        int int62 = property61.getMinimumValue();
        org.joda.time.DateTime dateTime63 = property61.roundFloorCopy();
        int int64 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and dateTime45", (dateTime36.compareTo(dateTime45) == 0) == dateTime36.equals(dateTime45));
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test347");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean3 = dateTimeZone1.isStandardOffset(10L);
        java.lang.Object obj4 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long11 = dateTimeZone7.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj4, dateTimeZone7);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        int int14 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime12);
        long long18 = dateTimeZone1.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(dateTimeZone1);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        long long25 = dateTimeZone21.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime26 = localDate19.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone21);
        long long29 = dateTimeZone21.convertUTCToLocal(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime27", (dateTime12.compareTo(dateTime27) == 0) == dateTime12.equals(dateTime27));
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test348");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.DateTime dateTime13 = dateTime4.minus((long) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.era();
        boolean boolean15 = dateTime13.equals((java.lang.Object) dateTimeFieldType14);
        org.joda.time.DateTime dateTime17 = dateTime13.withCenturyOfEra(24);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology30 = chronology26.withZone(dateTimeZone29);
        java.lang.String str31 = chronology26.toString();
        org.joda.time.DurationField durationField32 = chronology26.days();
        org.joda.time.DateTime dateTime33 = dateTime13.toDateTime(chronology26);
        org.joda.time.Instant instant34 = dateTime33.toInstant();
        boolean boolean35 = dateTime33.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime33 and instant34", (dateTime33.compareTo(instant34) == 0) == dateTime33.equals(instant34));
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test349");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(obj0, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate2.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays((int) '#');
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime9.toMutableDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime9.toYearMonthDay();
        org.joda.time.DateTime dateTime16 = dateTime9.withDurationAdded((long) '4', (int) (short) 10);
        org.joda.time.DateTime dateTime18 = dateTime9.plus(7092L);
        org.joda.time.DateTime dateTime19 = dateTime9.withEarlierOffsetAtOverlap();
        org.joda.time.Instant instant20 = dateTime9.toInstant();
        long long21 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime12 and instant20", (mutableDateTime12.compareTo(instant20) == 0) == mutableDateTime12.equals(instant20));
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test350");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusMillis(2022);
        org.joda.time.DateTime dateTime7 = dateTime2.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        org.joda.time.Instant instant9 = dateTime7.toInstant();
        org.joda.time.DateTime dateTime11 = dateTime7.minusSeconds(339);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and instant9", (dateTime7.compareTo(instant9) == 0) == dateTime7.equals(instant9));
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test351");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate11 = property5.addWrapFieldToCopy(3);
        org.joda.time.LocalDate localDate12 = property5.roundCeilingCopy();
        int int13 = localDate12.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateTime18.toDateMidnight();
        long long21 = dateTime18.getMillis();
        org.joda.time.DateTime.Property property22 = dateTime18.secondOfMinute();
        org.joda.time.DateTime dateTime24 = dateTime18.plusMonths(3659999);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property30 = dateTime29.hourOfDay();
        org.joda.time.DateTime dateTime32 = dateTime29.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology37 = chronology33.withZone(dateTimeZone36);
        long long40 = dateTimeZone36.adjustOffset((-62180539199983L), true);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone36);
        java.lang.String str43 = dateTimeZone36.getName((-187199990L));
        org.joda.time.DateTime dateTime44 = dateTime18.toDateTime(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight45 = localDate12.toDateMidnight(dateTimeZone36);
        int int46 = dateMidnight45.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime44", (dateTime18.compareTo(dateTime44) == 0) == dateTime18.equals(dateTime44));
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test352");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int11 = dateTime4.get(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = dateTime4.minusMonths((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.plus(readablePeriod14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusMonths((-1970));
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays((int) '#');
        boolean boolean23 = dateTime20.isBeforeNow();
        boolean boolean24 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Instant instant25 = dateTime17.toInstant();
        org.joda.time.DateTime dateTime27 = dateTime17.withDayOfYear(69);
        java.util.GregorianCalendar gregorianCalendar28 = dateTime17.toGregorianCalendar();
        long long29 = gregorianCalendar28.getTimeInMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant25", (dateTime17.compareTo(instant25) == 0) == dateTime17.equals(instant25));
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test353");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) '#');
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(10);
        long long15 = dateTimeZone11.convertLocalToUTC((long) 11279, false, (-58474832460001L));
        org.joda.time.DateTime dateTime16 = dateTime7.toDateTime(dateTimeZone11);
        java.lang.String str18 = dateTimeZone11.getName((-1918L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime16", (dateTime7.compareTo(dateTime16) == 0) == dateTime7.equals(dateTime16));
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test354");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        int int20 = dateTime17.getWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime17.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime17.plus(readablePeriod23);
        int int25 = property13.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = property13.addToCopy((long) 11);
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("fr");
        java.lang.String str30 = property13.getAsShortText(locale29);
        org.joda.time.DateTime dateTime31 = property13.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(21);
        org.joda.time.DateTime dateTime34 = dateTime31.withZone(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property40 = dateTime39.hourOfDay();
        org.joda.time.DateTime dateTime42 = dateTime39.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology47 = chronology43.withZone(dateTimeZone46);
        org.joda.time.DurationField durationField48 = chronology43.weeks();
        org.joda.time.DateTimeZone dateTimeZone49 = chronology43.getZone();
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime34.toMutableDateTime(dateTimeZone49);
        java.util.TimeZone timeZone51 = dateTimeZone49.toTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime34", (dateTime31.compareTo(dateTime34) == 0) == dateTime31.equals(dateTime34));
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test355");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.DateTime.Property property23 = dateTime16.centuryOfEra();
        org.joda.time.DateTime dateTime25 = dateTime16.withCenturyOfEra(20);
        int int26 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime27 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime27.toMutableDateTime();
        org.joda.time.DateTime dateTime31 = dateTime27.withMillis(365L);
        org.joda.time.DateTime.Property property32 = dateTime27.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and mutableDateTime29", (dateTime9.compareTo(mutableDateTime29) == 0) == dateTime9.equals(mutableDateTime29));
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test356");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.DateTime.Property property23 = dateTime16.centuryOfEra();
        org.joda.time.DateTime dateTime25 = dateTime16.withCenturyOfEra(20);
        int int26 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime27 = dateTime9.toDateTime(dateTimeZone12);
        boolean boolean28 = dateTime9.isEqualNow();
        org.joda.time.DateTime dateTime30 = dateTime9.withMillis((long) 143999);
        org.joda.time.DateTime.Property property31 = dateTime30.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime27", (dateTime9.compareTo(dateTime27) == 0) == dateTime9.equals(dateTime27));
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test357");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTime14);
        int int16 = dateTime15.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) '#');
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime19.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = dateTime19.plusWeeks(5);
        org.joda.time.Chronology chronology32 = dateTime19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime19.minus(readablePeriod33);
        int int35 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime15.minusWeeks(8);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.minus(readablePeriod38);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) dateTime39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property46 = dateTime45.hourOfDay();
        org.joda.time.DateTime dateTime48 = dateTime45.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime50 = dateTime45.minusDays((int) 'u');
        org.joda.time.Instant instant51 = dateTime45.toInstant();
        boolean boolean52 = dateTime39.isAfter((org.joda.time.ReadableInstant) instant51);
        java.util.GregorianCalendar gregorianCalendar53 = dateTime39.toGregorianCalendar();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime45 and instant51", (dateTime45.compareTo(instant51) == 0) == dateTime45.equals(instant51));
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test358");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays((int) 'u');
        org.joda.time.Instant instant10 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime12 = dateTime4.withDayOfYear(229);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime4.withPeriodAdded(readablePeriod13, 96684);
        org.joda.time.DateTime dateTime17 = dateTime15.withMillisOfDay(35008981);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and instant10", (dateTime15.compareTo(instant10) == 0) == dateTime15.equals(instant10));
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test359");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.clockhourOfDay();
        org.joda.time.DurationField durationField7 = chronology4.seconds();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.era();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra((int) '4');
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime13.toMutableDateTime(dateTimeZone17);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.now(dateTimeZone17);
        int int21 = dateTimeZone17.getOffsetFromLocal((-60494601600001L));
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.now(dateTimeZone17);
        long long25 = dateTimeZone17.convertLocalToUTC(32769L, false);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone17);
        long long29 = dateTimeZone17.convertUTCToLocal((long) 3);
        org.joda.time.Chronology chronology30 = chronology4.withZone(dateTimeZone17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime26", (dateTime10.compareTo(dateTime26) == 0) == dateTime10.equals(dateTime26));
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test360");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = dateTime19.isBefore(readableInstant22);
        org.joda.time.Instant instant24 = dateTime19.toInstant();
        org.joda.time.DateTime.Property property25 = dateTime19.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and instant24", (dateTime19.compareTo(instant24) == 0) == dateTime19.equals(instant24));
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test361");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTime14);
        int int16 = dateTime15.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) '#');
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime19.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = dateTime19.plusWeeks(5);
        org.joda.time.Chronology chronology32 = dateTime19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime19.minus(readablePeriod33);
        int int35 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime15.withHourOfDay(11);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.DateTime dateTime40 = dateTime37.minus((-28166399860L));
        org.joda.time.Instant instant41 = dateTime37.toInstant();
        org.joda.time.Chronology chronology42 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime37 and instant41", (dateTime37.compareTo(instant41) == 0) == dateTime37.equals(instant41));
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test362");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.dayOfYear();
        org.joda.time.DurationField durationField16 = chronology8.seconds();
        org.joda.time.DurationField durationField17 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology8.minuteOfHour();
        org.joda.time.DurationField durationField20 = chronology8.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField20, durationField13, and durationField16", !(durationField20.compareTo(durationField13) == 0) || (Math.signum(durationField20.compareTo(durationField16)) == Math.signum(durationField13.compareTo(durationField16))));
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test363");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays((int) 'u');
        int int10 = dateTime4.getYearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime4.plusMillis(4);
        java.util.Date date13 = dateTime4.toDate();
        boolean boolean14 = dateTime4.isBeforeNow();
        int int15 = dateTime4.getMillisOfDay();
        org.joda.time.DateTime dateTime17 = dateTime4.plusWeeks(1970);
        org.joda.time.DateTime dateTime19 = dateTime4.plusYears(211);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime24.hourOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property28 = dateTime24.yearOfCentury();
        org.joda.time.DateTime dateTime30 = dateTime24.plusWeeks(0);
        int int31 = dateTime24.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime36.hourOfDay();
        org.joda.time.DateTime dateTime39 = dateTime36.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology44 = chronology40.withZone(dateTimeZone43);
        java.lang.String str45 = chronology40.toString();
        boolean boolean46 = dateTime24.equals((java.lang.Object) str45);
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar48 = dateTime24.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime24.plusSeconds(3);
        org.joda.time.MonthDay monthDay52 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property53 = monthDay52.monthOfYear();
        org.joda.time.MonthDay monthDay55 = monthDay52.minusMonths(55);
        int int56 = monthDay55.size();
        org.joda.time.Chronology chronology57 = monthDay55.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime50.toMutableDateTime(chronology57);
        org.joda.time.DateTime dateTime60 = dateTime4.toDateTime(chronology57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime50 and mutableDateTime59", (dateTime50.compareTo(mutableDateTime59) == 0) == dateTime50.equals(mutableDateTime59));
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test364");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear(100);
        int int14 = localDate11.size();
        org.joda.time.LocalDate localDate16 = localDate11.plusMonths(6);
        int int18 = localDate16.getValue(0);
        java.lang.String str19 = localDate16.toString();
        org.joda.time.LocalDate localDate21 = localDate16.withWeekyear(1);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = localDate21.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTime dateTime30 = dateTime7.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = dateTime7.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime36.hourOfDay();
        org.joda.time.DateTime dateTime39 = dateTime36.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology44 = chronology40.withZone(dateTimeZone43);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(dateTimeZone48);
        long long53 = dateTimeZone48.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 'a', dateTimeZone48);
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(locale56);
        java.lang.String str58 = locale56.getCountry();
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str60 = locale56.getDisplayVariant(locale59);
        java.lang.String str61 = dateTimeZone48.getShortName((long) 20, locale56);
        java.lang.String str62 = locale56.getDisplayScript();
        java.lang.String str63 = locale56.getDisplayName();
        java.lang.String str64 = dateTimeZone43.getShortName((long) 9, locale56);
        org.joda.time.DateTime dateTime65 = dateTime31.toDateTime(dateTimeZone43);
        int int66 = dateTime31.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime65", (dateTime31.compareTo(dateTime65) == 0) == dateTime31.equals(dateTime65));
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test365");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean3 = dateTimeZone1.isStandardOffset(10L);
        java.lang.Object obj4 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long11 = dateTimeZone7.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj4, dateTimeZone7);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        int int14 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime12);
        long long18 = dateTimeZone1.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone1);
        int int20 = dateTime19.getYear();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks(0);
        org.joda.time.DateTime dateTime24 = dateTime19.plusHours(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime24", (dateTime12.compareTo(dateTime24) == 0) == dateTime12.equals(dateTime24));
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test366");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.MonthDay monthDay12 = monthDay2.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfDay();
        boolean boolean15 = durationFieldType0.isSupported(chronology11);
        org.joda.time.DurationField durationField16 = chronology11.millis();
        org.joda.time.DurationField durationField17 = chronology11.eras();
        org.joda.time.Chronology chronology18 = chronology11.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField17", Math.signum(durationField16.compareTo(durationField17)) == -Math.signum(durationField17.compareTo(durationField16)));
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test367");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        java.lang.String str6 = durationFieldType5.getName();
        org.joda.time.DateTime dateTime8 = dateTime4.withFieldAdded(durationFieldType5, (int) 'u');
        org.joda.time.DateTime.Property property9 = dateTime8.millisOfDay();
        int int10 = dateTime8.getWeekOfWeekyear();
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime8.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.plus(readablePeriod12);
        int int14 = dateTime13.getMillisOfSecond();
        org.joda.time.Instant instant15 = dateTime13.toInstant();
        long long16 = dateTime13.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and instant15", (dateTime13.compareTo(instant15) == 0) == dateTime13.equals(instant15));
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test368");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.MonthDay monthDay3 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay5 = monthDay3.minusDays(4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay8 = monthDay5.withPeriodAdded(readablePeriod6, 14);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property11 = monthDay10.monthOfYear();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale12.getDisplayScript(locale13);
        int int16 = property11.getMaximumTextLength(locale12);
        java.lang.String str17 = property11.getAsString();
        java.lang.String str18 = property11.getAsShortText();
        int int19 = property11.getMaximumValueOverall();
        java.lang.String str20 = property11.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property11.getFieldType();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getDurationType();
        org.joda.time.MonthDay monthDay24 = monthDay8.withFieldAdded(durationFieldType22, 48967);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property32 = dateTime31.hourOfDay();
        org.joda.time.DateTime dateTime34 = dateTime31.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology39 = chronology35.withZone(dateTimeZone38);
        org.joda.time.DurationField durationField40 = chronology35.weeks();
        org.joda.time.DateTimeField dateTimeField41 = chronology35.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology35.dayOfYear();
        org.joda.time.DurationField durationField43 = chronology35.halfdays();
        org.joda.time.DurationField durationField44 = chronology35.centuries();
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType25.getField(chronology35);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        long long49 = chronology35.add(readablePeriod46, (-172799899L), 11279);
        org.joda.time.DurationField durationField50 = chronology35.centuries();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        long long54 = chronology35.add(readablePeriod51, 2914599000L, (int) 'u');
        boolean boolean55 = durationFieldType22.isSupported(chronology35);
        org.joda.time.DurationField durationField56 = durationFieldType0.getField(chronology35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField56, durationField40, and durationField43", !(durationField56.compareTo(durationField40) == 0) || (Math.signum(durationField56.compareTo(durationField43)) == Math.signum(durationField40.compareTo(durationField43))));
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test369");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(5284740000L);
        org.joda.time.LocalDate.Property property2 = localDate1.monthOfYear();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear(100);
        int int8 = localDate5.size();
        org.joda.time.LocalDate localDate10 = localDate5.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.DateTime dateTime14 = localDate5.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(71);
        org.joda.time.DateTime dateTime17 = dateTime14.withZone(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = localDate1.toDateTimeAtStartOfDay(dateTimeZone16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime17", (dateTime14.compareTo(dateTime17) == 0) == dateTime14.equals(dateTime17));
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test370");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay4 = property2.addToCopy((int) ' ');
        int int5 = property2.get();
        java.lang.String str6 = property2.toString();
        java.util.Locale locale7 = java.util.Locale.PRC;
        int int8 = property2.getMaximumShortTextLength(locale7);
        org.joda.time.DurationField durationField9 = property2.getRangeDurationField();
        java.lang.String str10 = property2.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property2.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.hours();
        org.joda.time.DurationField durationField22 = chronology20.hours();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.secondOfMinute();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DurationField durationField25 = chronology20.eras();
        boolean boolean26 = dateTimeFieldType11.isSupported(chronology20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField9 and durationField25", Math.signum(durationField9.compareTo(durationField25)) == -Math.signum(durationField25.compareTo(durationField9)));
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test371");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfWeek();
        org.joda.time.DateTime dateTime9 = property8.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property20 = dateTime16.yearOfCentury();
        org.joda.time.DateTime dateTime22 = dateTime16.plusYears((int) '4');
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = dateTime22.toString("--02-01", locale24);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime22.getZone();
        org.joda.time.DateTime dateTime27 = dateTime11.withZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTime.Property property28 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime30 = property28.setCopy(86399);
        org.joda.time.DateTime dateTime32 = dateTime30.withCenturyOfEra(19034);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.plus(readablePeriod33);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = localDate37.withDayOfYear(100);
        int int40 = localDate37.size();
        org.joda.time.LocalDate localDate42 = localDate37.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.minusDays((int) '#');
        int int48 = dateTime45.getWeekyear();
        org.joda.time.DateMidnight dateMidnight49 = dateTime45.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property51 = dateTime45.property(dateTimeFieldType50);
        org.joda.time.LocalDate.Property property52 = localDate42.property(dateTimeFieldType50);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.plus(readablePeriod56);
        int int58 = property52.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.LocalDate localDate59 = property52.withMaximumValue();
        org.joda.time.DateTime dateTime60 = localDate59.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology61 = localDate59.getChronology();
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime34.toMutableDateTime(chronology61);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(86187096000274L, chronology61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and mutableDateTime62", (dateTime32.compareTo(mutableDateTime62) == 0) == dateTime32.equals(mutableDateTime62));
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test372");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = chronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = chronology8.halfdayOfDay();
        org.joda.time.DurationField durationField20 = chronology8.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField20, durationField13, and durationField18", !(durationField20.compareTo(durationField13) == 0) || (Math.signum(durationField20.compareTo(durationField18)) == Math.signum(durationField13.compareTo(durationField18))));
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test373");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        java.lang.Object obj13 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long20 = dateTimeZone16.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(obj13, dateTimeZone16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        java.lang.String str24 = dateTimeZone16.getShortName((long) 12);
        org.joda.time.DateTime dateTime25 = dateTime4.toDateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime26 = dateTime4.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime26", (instant12.compareTo(dateTime26) == 0) == instant12.equals(dateTime26));
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test374");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.withDayOfYear(100);
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfMonth();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.LocalDate localDate9 = property6.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate10 = property6.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property6.getFieldType();
        org.joda.time.LocalDate localDate12 = property6.getLocalDate();
        org.joda.time.LocalDate localDate13 = property6.roundFloorCopy();
        java.lang.String str14 = localDate13.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(11);
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTime dateTime28 = dateTime25.withMinuteOfHour(8);
        boolean boolean29 = dateTime28.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays((int) '#');
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone36);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtStartOfDay(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime32.toDateTime(dateTimeZone39);
        java.lang.Object obj43 = null;
        boolean boolean44 = dateTimeZone39.equals(obj43);
        int int46 = dateTimeZone39.getStandardOffset((long) 0);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate50 = localDate47.withPeriodAdded(readablePeriod48, (int) (byte) 0);
        org.joda.time.LocalDate.Property property51 = localDate47.year();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 4, dateTimeZone55);
        org.joda.time.DateTime dateTime57 = localDate47.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        java.lang.Object obj58 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long65 = dateTimeZone61.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(obj58, dateTimeZone61);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone61);
        org.joda.time.MutableDateTime mutableDateTime68 = dateTime56.toMutableDateTime(dateTimeZone61);
        int int69 = dateTimeZone39.getOffset((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.MutableDateTime mutableDateTime70 = dateTime28.toMutableDateTime(dateTimeZone39);
        int int71 = dateTime28.getCenturyOfEra();
        org.joda.time.DateTime dateTime73 = dateTime28.withWeekyear(14);
        org.joda.time.DateTime dateTime75 = dateTime28.withMillisOfDay(2922789);
        int int76 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate((long) 22, dateTimeZone16);
        java.lang.String str79 = dateTimeZone16.getShortName(14000L);
        org.joda.time.DateTime dateTime80 = org.joda.time.DateTime.now(dateTimeZone16);
        int int82 = dateTimeZone16.getOffsetFromLocal((long) 49367);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime66 and dateTime80", (dateTime66.compareTo(dateTime80) == 0) == dateTime66.equals(dateTime80));
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test375");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(0L);
        java.lang.String str11 = monthDay10.toString();
        org.joda.time.Chronology chronology12 = monthDay10.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime8.withChronology(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfMonth(17);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((long) 17);
        org.joda.time.DateTime dateTime19 = dateTime13.withYearOfEra(1199);
        boolean boolean21 = dateTime19.isEqual(5907399684280970928L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime13", (dateTime8.compareTo(dateTime13) == 0) == dateTime8.equals(dateTime13));
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test376");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        org.joda.time.LocalDate localDate13 = localDate4.withYearOfEra(32769);
        org.joda.time.LocalDate localDate15 = localDate4.minusDays((int) (byte) -1);
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime18 = dateTime16.plusWeeks(100);
        org.joda.time.DateTime.Property property19 = dateTime16.secondOfDay();
        java.lang.String str20 = property19.getAsText();
        java.lang.String str21 = property19.getName();
        org.joda.time.DateTime dateTime23 = property19.addWrapFieldToCopy(0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone25);
        org.joda.time.LocalDate localDate28 = localDate26.withDayOfYear(100);
        org.joda.time.LocalDate.Property property29 = localDate26.dayOfMonth();
        org.joda.time.LocalDate localDate30 = property29.getLocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.plusWeeks(14);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra(52);
        org.joda.time.LocalDate.Property property36 = localDate35.weekOfWeekyear();
        org.joda.time.LocalDate.Property property37 = localDate35.centuryOfEra();
        int int38 = localDate30.compareTo((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.Chronology chronology39 = localDate30.getChronology();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) dateTime23, chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.hourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime40", (dateTime16.compareTo(dateTime40) == 0) == dateTime16.equals(dateTime40));
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test377");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        int int20 = dateTime17.getWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime17.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime17.plus(readablePeriod23);
        int int25 = property13.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = property13.addToCopy((long) 11);
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("fr");
        java.lang.String str30 = property13.getAsShortText(locale29);
        org.joda.time.DateTime dateTime31 = property13.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(21);
        org.joda.time.DateTime dateTime34 = dateTime31.withZone(dateTimeZone33);
        long long36 = dateTimeZone33.previousTransition(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime34", (dateTime31.compareTo(dateTime34) == 0) == dateTime31.equals(dateTime34));
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test378");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 10);
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter6.getZone();
        boolean boolean9 = dateTimeFormatter6.isParser();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter6.getZone();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays((int) '#');
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime15.toDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime27 = dateTime15.plusWeeks(5);
        int int28 = dateTime15.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property35 = dateTime34.hourOfDay();
        org.joda.time.DateTime dateTime37 = dateTime34.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology38 = dateTime37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology42 = chronology38.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = chronology38.weekyearOfCentury();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(83968099800000L, chronology38);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime48 = localDate44.toDateTimeAtStartOfDay(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.minusDays((int) '#');
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(dateTimeZone55);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(dateTimeZone58);
        org.joda.time.DateTime dateTime60 = localDate56.toDateTimeAtStartOfDay(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime51.toDateTime(dateTimeZone58);
        org.joda.time.DateTime dateTime63 = dateTime51.plusWeeks(5);
        int int64 = dateTimeZone47.getOffset((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableDateTime mutableDateTime65 = dateTime15.toMutableDateTime(dateTimeZone47);
        long long67 = dateTimeZone12.getMillisKeepLocal(dateTimeZone47, (long) 365);
        java.lang.String str69 = dateTimeZone12.getNameKey(83652552000000L);
        org.joda.time.LocalDate localDate70 = org.joda.time.LocalDate.now(dateTimeZone12);
        java.lang.String str71 = dateTimeZone12.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter6.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter6.withZoneUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and mutableDateTime65", (dateTime15.compareTo(mutableDateTime65) == 0) == dateTime15.equals(mutableDateTime65));
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test379");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withDurationAdded(1L, 52);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear(52);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded(readableDuration12, (int) 'a');
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        java.util.Date date16 = dateTime14.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant15", (dateTime14.compareTo(instant15) == 0) == dateTime14.equals(instant15));
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test380");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder3.setTimeOfDay((int) 'x', (int) ' ', 0);
        java.util.Calendar.Builder builder11 = builder3.setDate(28, 29, 815);
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        calendar13.setLenient(true);
        calendar13.setMinimalDaysInFirstWeek(1970);
        int int19 = calendar13.getGreatestMinimum(10);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.fromCalendarFields(calendar13);
        int[] intArray21 = monthDay20.getValues();
        java.util.Calendar.Builder builder22 = builder3.setFields(intArray21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) '4');
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime25.toMutableDateTime(dateTimeZone29);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.now(dateTimeZone29);
        int int33 = dateTimeZone29.getOffsetFromLocal((-60494601600001L));
        int int35 = dateTimeZone29.getOffsetFromLocal((long) 364);
        java.util.TimeZone timeZone36 = dateTimeZone29.toTimeZone();
        java.util.Calendar.Builder builder37 = builder3.setTimeZone(timeZone36);
        java.util.Locale.Category category38 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale39 = java.util.Locale.getDefault(category38);
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale40);
        java.lang.String str42 = locale40.getCountry();
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str44 = locale40.getDisplayVariant(locale43);
        java.util.Locale.setDefault(category38, locale43);
        java.util.Locale locale46 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.util.Locale locale48 = java.util.Locale.ITALIAN;
        java.lang.String str49 = locale48.getLanguage();
        java.lang.String str50 = locale47.getDisplayScript(locale48);
        java.lang.String str51 = locale46.getDisplayCountry(locale47);
        java.lang.String str52 = locale47.getDisplayLanguage();
        java.util.Locale.setDefault(category38, locale47);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(locale47);
        long long55 = calendar54.getTimeInMillis();
        calendar54.setFirstDayOfWeek(0);
        int int58 = calendar54.getFirstDayOfWeek();
        calendar54.setMinimalDaysInFirstWeek(68);
        java.util.Locale locale61 = java.util.Locale.FRENCH;
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(locale61);
        calendar62.roll(9, false);
        calendar62.setFirstDayOfWeek((int) (byte) 1);
        int int68 = calendar62.getWeekYear();
        int int69 = calendar62.getFirstDayOfWeek();
        int int70 = calendar62.getWeeksInWeekYear();
        java.util.TimeZone timeZone71 = calendar62.getTimeZone();
        calendar62.setLenient(false);
        java.util.Date date74 = calendar62.getTime();
        java.time.Instant instant75 = calendar62.toInstant();
        calendar62.setLenient(true);
        java.util.TimeZone timeZone78 = calendar62.getTimeZone();
        calendar54.setTimeZone(timeZone78);
        java.util.Calendar.Builder builder80 = builder3.setTimeZone(timeZone78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar41", (calendar13.compareTo(calendar41) == 0) == calendar13.equals(calendar41));
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test381");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology4.eras();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.secondOfMinute();
        java.util.Locale locale9 = java.util.Locale.KOREA;
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField14 = monthDay12.getField((int) (byte) 0);
        java.util.Locale locale18 = new java.util.Locale("", "", "hi!");
        int int19 = dateTimeField14.getMaximumTextLength(locale18);
        long long22 = dateTimeField14.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay23 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay25 = monthDay23.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay23.minus(readablePeriod26);
        org.joda.time.MonthDay monthDay28 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay30 = monthDay28.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField32 = monthDay30.getField((int) (byte) 0);
        java.util.Locale locale36 = new java.util.Locale("", "", "hi!");
        int int37 = dateTimeField32.getMaximumTextLength(locale36);
        java.lang.String str38 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) monthDay23, locale36);
        java.lang.String str39 = locale9.getDisplayScript(locale36);
        java.lang.String str40 = locale36.getLanguage();
        boolean boolean41 = locale36.hasExtensions();
        int int42 = dateTimeField8.getMaximumTextLength(locale36);
        org.joda.time.DurationField durationField43 = dateTimeField8.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField6, durationField43, and durationField6", !(durationField6.compareTo(durationField43) == 0) || (Math.signum(durationField6.compareTo(durationField6)) == Math.signum(durationField43.compareTo(durationField6))));
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test382");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, (int) (byte) 0);
        int int5 = localDate4.getYearOfCentury();
        boolean boolean7 = localDate4.equals((java.lang.Object) 32762L);
        org.joda.time.Chronology chronology8 = localDate4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now(dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(239);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) localDate12, 392358211200000L);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.DurationField durationField18 = chronology8.centuries();
        org.joda.time.DurationField durationField19 = chronology8.eras();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(1660210645527L, chronology8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField18 and durationField19", Math.signum(durationField18.compareTo(durationField19)) == -Math.signum(durationField19.compareTo(durationField18)));
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test383");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withMinuteOfHour(8);
        boolean boolean11 = dateTime10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays((int) '#');
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime14.toDateTime(dateTimeZone21);
        java.lang.Object obj25 = null;
        boolean boolean26 = dateTimeZone21.equals(obj25);
        int int28 = dateTimeZone21.getStandardOffset((long) 0);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate32 = localDate29.withPeriodAdded(readablePeriod30, (int) (byte) 0);
        org.joda.time.LocalDate.Property property33 = localDate29.year();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 4, dateTimeZone37);
        org.joda.time.DateTime dateTime39 = localDate29.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        java.lang.Object obj40 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long47 = dateTimeZone43.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(obj40, dateTimeZone43);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime38.toMutableDateTime(dateTimeZone43);
        int int51 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime10.toMutableDateTime(dateTimeZone21);
        int int53 = dateTime10.getCenturyOfEra();
        org.joda.time.DateTime dateTime55 = dateTime10.withWeekyear(14);
        org.joda.time.DateTime dateTime57 = dateTime10.withMillisOfDay(2922789);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property64 = dateTime63.hourOfDay();
        org.joda.time.DateTime dateTime66 = dateTime63.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology67 = dateTime66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology71 = chronology67.withZone(dateTimeZone70);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate((long) (byte) 1, dateTimeZone70);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate(dateTimeZone70);
        java.util.Locale.Builder builder75 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder78 = builder75.setExtension('u', "en-US");
        java.util.Locale locale79 = builder78.build();
        java.lang.String str80 = dateTimeZone70.getName((long) (short) 0, locale79);
        boolean boolean81 = dateTimeZone70.isFixed();
        org.joda.time.DateTime dateTime82 = dateTime57.toDateTime(dateTimeZone70);
        org.joda.time.DateTime dateTime83 = org.joda.time.DateTime.now(dateTimeZone70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime57 and dateTime82", (dateTime57.compareTo(dateTime82) == 0) == dateTime57.equals(dateTime82));
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test384");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays((int) 'u');
        int int10 = dateTime4.getYearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime4.plusMillis(4);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        org.joda.time.LocalDate.Property property18 = localDate15.dayOfMonth();
        org.joda.time.LocalDate localDate19 = property18.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime20 = dateTime12.withFields((org.joda.time.ReadablePartial) localDate19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(100);
        org.joda.time.Interval interval26 = localDate25.toInterval();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.days();
        java.lang.String str28 = durationFieldType27.getName();
        org.joda.time.LocalDate localDate30 = localDate25.withFieldAdded(durationFieldType27, 32770);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate32 = localDate25.plus(readablePeriod31);
        int int33 = localDate19.compareTo((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate.Property property34 = localDate25.weekyear();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfCentury((int) '#');
        org.joda.time.LocalDate localDate41 = localDate37.minusYears(32769);
        org.joda.time.LocalDate.Property property42 = localDate37.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property42.getFieldType();
        org.joda.time.LocalDate localDate45 = localDate25.withField(dateTimeFieldType43, 364);
        int int46 = localDate45.getDayOfWeek();
        int int47 = localDate45.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property53 = dateTime52.hourOfDay();
        org.joda.time.DateTime dateTime55 = dateTime52.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime57 = dateTime52.withMillisOfDay(8);
        boolean boolean59 = dateTime52.isAfter((long) 17);
        org.joda.time.Instant instant60 = dateTime52.toInstant();
        org.joda.time.DateTime.Property property61 = dateTime52.dayOfYear();
        org.joda.time.DateTime dateTime63 = dateTime52.minusSeconds((int) (short) -1);
        org.joda.time.DateTime.Property property64 = dateTime52.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight65 = dateTime52.toDateMidnight();
        org.joda.time.DateTime dateTime66 = localDate45.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant60", (dateTime4.compareTo(instant60) == 0) == dateTime4.equals(instant60));
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test385");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusMillis(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        java.lang.String str8 = durationFieldType7.getName();
        org.joda.time.DateTime dateTime10 = dateTime6.withFieldAdded(durationFieldType7, 1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone12.isStandardOffset(10L);
        java.lang.Object obj15 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long22 = dateTimeZone18.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(obj15, dateTimeZone18);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTime();
        int int25 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime23);
        long long29 = dateTimeZone12.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime10.toMutableDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime32 = dateTime10.withDayOfMonth((int) (short) 1);
        org.joda.time.DateTime dateTime34 = dateTime32.withWeekOfWeekyear(21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and mutableDateTime30", (dateTime10.compareTo(mutableDateTime30) == 0) == dateTime10.equals(mutableDateTime30));
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test386");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        java.lang.String str17 = dateTimeZone12.getName((long) 366);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime20 = dateTime18.minusHours(15);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(100);
        org.joda.time.Interval interval26 = localDate25.toInterval();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = localDate25.toDateTimeAtCurrentTime(dateTimeZone28);
        int int32 = dateTimeZone28.getOffset(0L);
        java.lang.String str34 = dateTimeZone28.getName(97L);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property40 = dateTime39.hourOfDay();
        org.joda.time.DateTime dateTime42 = dateTime39.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.DateTime dateTime45 = dateTime42.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime47 = dateTime42.withCenturyOfEra(0);
        org.joda.time.DateTime.Property property48 = dateTime47.dayOfWeek();
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.util.Locale locale50 = java.util.Locale.ITALIAN;
        java.lang.String str51 = locale50.getLanguage();
        java.lang.String str52 = locale49.getDisplayScript(locale50);
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(locale50);
        java.lang.String str54 = locale50.getISO3Language();
        int int55 = property48.getMaximumTextLength(locale50);
        boolean boolean56 = dateTimeZone28.equals((java.lang.Object) int55);
        java.lang.String str58 = dateTimeZone28.getShortName(26L);
        org.joda.time.DateTime dateTime59 = dateTime20.withZoneRetainFields(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime37", (dateTime3.compareTo(dateTime37) == 0) == dateTime3.equals(dateTime37));
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test387");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTime14);
        int int16 = dateTime15.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) '#');
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime19.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = dateTime19.plusWeeks(5);
        org.joda.time.Chronology chronology32 = dateTime19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime19.minus(readablePeriod33);
        int int35 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime15.withHourOfDay(11);
        int int38 = dateTime37.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays((int) '#');
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(dateTimeZone45);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = localDate46.toDateTimeAtStartOfDay(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime41.toDateTime(dateTimeZone48);
        org.joda.time.DateTime dateTime53 = dateTime41.plusWeeks(5);
        org.joda.time.Chronology chronology54 = dateTime41.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.eras();
        org.joda.time.DateTime dateTime56 = dateTime37.withChronology(chronology54);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.DateTime dateTime62 = dateTime60.plus(readablePeriod61);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMillis(2022);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((java.lang.Object) dateTime64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.minusDays((int) '#');
        java.util.TimeZone timeZone71 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate(dateTimeZone72);
        java.util.TimeZone timeZone74 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate(dateTimeZone75);
        org.joda.time.DateTime dateTime77 = localDate73.toDateTimeAtStartOfDay(dateTimeZone75);
        org.joda.time.DateTime dateTime78 = dateTime68.toDateTime(dateTimeZone75);
        org.joda.time.DateTime dateTime80 = dateTime68.plusWeeks(5);
        org.joda.time.Chronology chronology81 = dateTime68.getChronology();
        org.joda.time.Chronology chronology82 = dateTime68.getChronology();
        org.joda.time.DateTime dateTime83 = dateTime65.withChronology(chronology82);
        org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate(5907399684280970662L, chronology82);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime(chronology82);
        org.joda.time.DurationField durationField86 = chronology82.weeks();
        org.joda.time.DateTime dateTime87 = org.joda.time.DateTime.now(chronology82);
        org.joda.time.DateTime dateTime88 = dateTime56.toDateTime(chronology82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField55 and durationField86", Math.signum(durationField55.compareTo(durationField86)) == -Math.signum(durationField86.compareTo(durationField55)));
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test388");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(0L);
        java.lang.String str11 = monthDay10.toString();
        org.joda.time.Chronology chronology12 = monthDay10.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime8.withChronology(chronology12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateTime dateTime21 = dateTime16.minusMillis((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays((int) '#');
        boolean boolean27 = dateTime24.isBeforeNow();
        boolean boolean28 = dateTime16.isBefore((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean29 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime30 = dateTime13.toDateTimeISO();
        org.joda.time.DateTime dateTime32 = dateTime13.plusMillis(49440);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime30", (dateTime8.compareTo(dateTime30) == 0) == dateTime8.equals(dateTime30));
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test389");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime dateTime12 = dateTime4.withWeekOfWeekyear(9);
        org.joda.time.DateTime dateTime14 = dateTime4.plus(32762L);
        int int15 = dateTime14.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime14.withPeriodAdded(readablePeriod16, 366);
        org.joda.time.Instant instant19 = dateTime18.toInstant();
        int int20 = dateTime18.getMillisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and instant19", (dateTime18.compareTo(instant19) == 0) == dateTime18.equals(instant19));
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test390");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType0.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology15 = chronology11.withZone(dateTimeZone14);
        org.joda.time.DurationField durationField16 = chronology11.weeks();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType0.getField(chronology11);
        org.joda.time.DurationField durationField20 = dateTimeField19.getDurationField();
        org.joda.time.DurationField durationField21 = dateTimeField19.getLeapDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField20", Math.signum(durationField16.compareTo(durationField20)) == -Math.signum(durationField20.compareTo(durationField16)));
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test391");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.LocalTime localTime7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTime(localTime7);
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfMinute();
        int int10 = dateTime8.getMonthOfYear();
        org.joda.time.Instant instant11 = dateTime8.toInstant();
        int int12 = dateTime8.getYear();
        org.joda.time.DateTime dateTime14 = dateTime8.minusHours((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(229);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and instant11", (dateTime8.compareTo(instant11) == 0) == dateTime8.equals(instant11));
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test392");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.now(chronology9);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField16 = chronology9.millis();
        org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay(obj0, chronology9);
        org.joda.time.DurationField durationField18 = chronology9.eras();
        org.joda.time.DateTimeField dateTimeField19 = chronology9.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField18", Math.signum(durationField16.compareTo(durationField18)) == -Math.signum(durationField18.compareTo(durationField16)));
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test393");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar1.set(0, (int) (byte) 10, (int) (short) 10);
        int int12 = calendar1.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        int int18 = localDate15.size();
        org.joda.time.LocalDate localDate20 = localDate15.plusMonths(6);
        java.util.Date date21 = localDate20.toDate();
        calendar1.setTime(date21);
        java.util.TimeZone timeZone23 = calendar1.getTimeZone();
        java.util.Locale locale27 = new java.util.Locale("years", "italien", "Cina");
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone23, locale27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int31 = dateTimeZone29.getOffset(1439L);
        long long35 = dateTimeZone29.convertLocalToUTC((long) 314, true, (-349259959L));
        int int37 = dateTimeZone29.getOffset((long) 29);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property43 = dateTime42.hourOfDay();
        org.joda.time.DateTime dateTime45 = dateTime42.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime47 = dateTime42.withMillisOfDay(8);
        boolean boolean49 = dateTime42.isAfter((long) 17);
        org.joda.time.Instant instant50 = dateTime42.toInstant();
        org.joda.time.DateTime.Property property51 = dateTime42.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean53 = dateTime42.isSupported(dateTimeFieldType52);
        org.joda.time.LocalDateTime localDateTime54 = dateTime42.toLocalDateTime();
        boolean boolean55 = dateTimeZone29.isLocalDateTimeGap(localDateTime54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime42 and instant50", (dateTime42.compareTo(instant50) == 0) == dateTime42.equals(instant50));
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test394");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        org.joda.time.LocalDate localDate11 = property5.getLocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.withYear((int) ' ');
        org.joda.time.LocalDate localDate15 = localDate13.withYear((int) (byte) 100);
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime16.toMutableDateTime(dateTimeZone18);
        java.util.Locale locale23 = new java.util.Locale("Property[dayOfMonth]", "fr", "10");
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = locale24.getDisplayScript(locale25);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale25);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale25);
        java.lang.String str30 = locale23.getDisplayCountry(locale25);
        java.lang.String str31 = locale25.getVariant();
        java.lang.String str32 = locale25.getDisplayCountry();
        java.util.Calendar calendar33 = dateTime16.toCalendar(locale25);
        org.joda.time.DateTime dateTime34 = dateTime16.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime35 = dateTime16.withLaterOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime19 and dateTime35", (mutableDateTime19.compareTo(dateTime35) == 0) == mutableDateTime19.equals(dateTime35));
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test395");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        long long19 = chronology8.getDateTimeMillis((-1), 8, 2, 17);
        org.joda.time.DurationField durationField20 = chronology8.millis();
        org.joda.time.DateTimeField dateTimeField21 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays((int) '#');
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = localDate30.toDateTimeAtStartOfDay(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime25.toDateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime37 = dateTime25.plusWeeks(5);
        int int38 = dateTime25.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property45 = dateTime44.hourOfDay();
        org.joda.time.DateTime dateTime47 = dateTime44.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology48 = dateTime47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology52 = chronology48.withZone(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField53 = chronology48.weekyearOfCentury();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(83968099800000L, chronology48);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime58 = localDate54.toDateTimeAtStartOfDay(dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.minusDays((int) '#');
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(dateTimeZone65);
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(dateTimeZone68);
        org.joda.time.DateTime dateTime70 = localDate66.toDateTimeAtStartOfDay(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime61.toDateTime(dateTimeZone68);
        org.joda.time.DateTime dateTime73 = dateTime61.plusWeeks(5);
        int int74 = dateTimeZone57.getOffset((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableDateTime mutableDateTime75 = dateTime25.toMutableDateTime(dateTimeZone57);
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) 1439, dateTimeZone57);
        long long78 = dateTimeZone57.previousTransition((long) 11);
        java.util.Locale locale81 = java.util.Locale.forLanguageTag("year");
        java.lang.String str82 = dateTimeZone57.getName(1250121600032L, locale81);
        int int83 = dateTimeField21.getMaximumTextLength(locale81);
        long long85 = dateTimeField21.roundHalfCeiling(83692604318697L);
        long long88 = dateTimeField21.add((-187200001L), (long) 88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and mutableDateTime75", (dateTime2.compareTo(mutableDateTime75) == 0) == dateTime2.equals(mutableDateTime75));
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test396");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        int int20 = dateTime17.getWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime17.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime17.plus(readablePeriod23);
        int int25 = property13.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = property13.addToCopy((long) 11);
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("fr");
        java.lang.String str30 = property13.getAsShortText(locale29);
        org.joda.time.DateTime dateTime31 = property13.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(21);
        org.joda.time.DateTime dateTime34 = dateTime31.withZone(dateTimeZone33);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone37);
        org.joda.time.LocalDate localDate40 = localDate38.withDayOfYear(100);
        int int41 = localDate38.size();
        org.joda.time.LocalDate localDate43 = localDate38.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusDays((int) '#');
        int int49 = dateTime46.getWeekyear();
        org.joda.time.DateMidnight dateMidnight50 = dateTime46.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property52 = dateTime46.property(dateTimeFieldType51);
        org.joda.time.LocalDate.Property property53 = localDate43.property(dateTimeFieldType51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property59 = dateTime58.hourOfDay();
        org.joda.time.DateTime dateTime61 = dateTime58.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology62 = dateTime61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology66 = chronology62.withZone(dateTimeZone65);
        org.joda.time.DurationField durationField67 = chronology62.weeks();
        org.joda.time.DateTimeField dateTimeField68 = chronology62.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField69 = chronology62.hourOfHalfday();
        boolean boolean70 = dateTimeFieldType51.isSupported(chronology62);
        org.joda.time.DateTimeField dateTimeField71 = chronology62.year();
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) 12, chronology62);
        org.joda.time.DateTime dateTime73 = dateTime34.toDateTime(chronology62);
        org.joda.time.DurationField durationField74 = chronology62.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime34", (dateTime31.compareTo(dateTime34) == 0) == dateTime31.equals(dateTime34));
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test397");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays(626);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.DateTime dateTime12 = dateTime9.withZone(dateTimeZone11);
        java.lang.String str13 = dateTimeZone11.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime12", (dateTime9.compareTo(dateTime12) == 0) == dateTime9.equals(dateTime12));
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test398");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime dateTime12 = dateTime9.plusMonths((int) 'x');
        int int13 = dateTime9.getMonthOfYear();
        org.joda.time.Instant instant14 = dateTime9.toInstant();
        org.joda.time.DateTime dateTime16 = dateTime9.withYear(60);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.plus(readablePeriod20);
        org.joda.time.DateTime dateTime23 = dateTime19.plusMillis(2022);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays((int) '#');
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(dateTimeZone31);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = localDate32.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime27.toDateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime39 = dateTime27.plusWeeks(5);
        org.joda.time.Chronology chronology40 = dateTime27.getChronology();
        org.joda.time.Chronology chronology41 = dateTime27.getChronology();
        org.joda.time.DateTime dateTime42 = dateTime24.withChronology(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMillis(1439);
        int int45 = dateTime42.getMillisOfDay();
        org.joda.time.DateTime.Property property46 = dateTime42.dayOfYear();
        int int47 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and instant14", (dateTime9.compareTo(instant14) == 0) == dateTime9.equals(instant14));
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test399");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.now(chronology9);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField16 = chronology9.millis();
        org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay(obj0, chronology9);
        org.joda.time.DurationField durationField18 = chronology9.eras();
        org.joda.time.DateTimeField dateTimeField19 = chronology9.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField18", Math.signum(durationField16.compareTo(durationField18)) == -Math.signum(durationField18.compareTo(durationField16)));
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test400");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime4.minusSeconds((int) (short) -1);
        org.joda.time.DateTime.Property property16 = dateTime4.centuryOfEra();
        org.joda.time.DateTime.Property property17 = dateTime4.centuryOfEra();
        org.joda.time.DateTime dateTime19 = dateTime4.plusMinutes((-1970));
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime24.hourOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime29 = dateTime24.minusDays((int) 'u');
        int int30 = dateTime24.getYearOfEra();
        org.joda.time.DateTime dateTime32 = dateTime24.plusMillis(4);
        org.joda.time.DateTime.Property property33 = dateTime24.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.MonthDay monthDay35 = new org.joda.time.MonthDay(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property41 = dateTime40.hourOfDay();
        org.joda.time.DateTime dateTime43 = dateTime40.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology44 = dateTime43.getChronology();
        org.joda.time.MonthDay monthDay45 = monthDay35.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.dayOfYear();
        java.util.Locale locale51 = new java.util.Locale("hourOfDay", "", "2022-02-11");
        int int52 = dateTimeField47.getMaximumShortTextLength(locale51);
        java.lang.String str53 = property33.getAsText(locale51);
        java.util.Calendar calendar54 = dateTime19.toCalendar(locale51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test401");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTime dateTime10 = property8.setCopy((int) (short) 100);
        org.joda.time.Instant instant11 = dateTime10.toInstant();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(227, 28);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime10.toMutableDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant11", (dateTime10.compareTo(instant11) == 0) == dateTime10.equals(instant11));
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test402");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        org.joda.time.LocalDate localDate13 = localDate4.withYearOfEra(32769);
        org.joda.time.LocalDate localDate15 = localDate4.minusDays((int) (byte) -1);
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime18 = dateTime16.plusWeeks(100);
        org.joda.time.DateTime.Property property19 = dateTime16.secondOfDay();
        java.lang.String str20 = property19.getAsText();
        java.lang.String str21 = property19.getName();
        org.joda.time.DateTime dateTime23 = property19.addWrapFieldToCopy(0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone25);
        org.joda.time.LocalDate localDate28 = localDate26.withDayOfYear(100);
        org.joda.time.LocalDate.Property property29 = localDate26.dayOfMonth();
        org.joda.time.LocalDate localDate30 = property29.getLocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.plusWeeks(14);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra(52);
        org.joda.time.LocalDate.Property property36 = localDate35.weekOfWeekyear();
        org.joda.time.LocalDate.Property property37 = localDate35.centuryOfEra();
        int int38 = localDate30.compareTo((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.Chronology chronology39 = localDate30.getChronology();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) dateTime23, chronology39);
        org.joda.time.DateTime dateTime41 = dateTime40.toDateTimeISO();
        org.joda.time.DateTime.Property property42 = dateTime41.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime40", (dateTime16.compareTo(dateTime40) == 0) == dateTime16.equals(dateTime40));
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test403");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime16 = dateTime2.minusDays(20);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 10);
        int int20 = dateTimeZone18.getStandardOffset(0L);
        org.joda.time.DateTime dateTime21 = dateTime2.toDateTime(dateTimeZone18);
        long long24 = dateTimeZone18.adjustOffset((long) 1941, true);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime21", (dateTime2.compareTo(dateTime21) == 0) == dateTime2.equals(dateTime21));
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test404");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusMillis(2022);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) dateTime6);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime7.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime7.plusMonths((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(638);
        org.joda.time.DateTime dateTime13 = dateTime10.withZone(dateTimeZone12);
        java.lang.String str15 = dateTimeZone12.getShortName((long) 110607);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime13", (dateTime10.compareTo(dateTime13) == 0) == dateTime10.equals(dateTime13));
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test405");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.millisOfDay();
        org.joda.time.DurationField durationField14 = chronology10.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology10.year();
        org.joda.time.DateTimeField dateTimeField18 = chronology10.centuryOfEra();
        java.util.Calendar.Builder builder20 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder23 = builder20.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder27 = builder23.setTimeOfDay((int) 'x', (int) ' ', 0);
        java.util.Calendar.Builder builder31 = builder23.setTimeOfDay((int) (short) -1, 0, 2730);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale32);
        calendar33.setLenient(true);
        calendar33.setMinimalDaysInFirstWeek((int) (short) 1);
        calendar33.setMinimalDaysInFirstWeek(2730);
        calendar33.clear();
        int int41 = calendar33.getFirstDayOfWeek();
        java.lang.Object obj42 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long49 = dateTimeZone45.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(obj42, dateTimeZone45);
        org.joda.time.DateTime dateTime51 = dateTime50.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone52 = dateTime50.getZone();
        java.util.TimeZone timeZone53 = dateTimeZone52.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        calendar33.setTimeZone(timeZone53);
        java.util.Calendar.Builder builder56 = builder31.setTimeZone(timeZone53);
        java.util.Locale locale60 = new java.util.Locale("Property[dayOfMonth]", "fr", "10");
        java.util.Locale locale61 = java.util.Locale.ITALY;
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.lang.String str63 = locale62.getLanguage();
        java.lang.String str64 = locale61.getDisplayScript(locale62);
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(locale62);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(locale62);
        java.lang.String str67 = locale60.getDisplayCountry(locale62);
        java.lang.String str68 = locale62.getVariant();
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone53, locale62);
        java.lang.String str70 = dateTimeField18.getAsShortText((long) 19005, locale62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar65 and calendar69", (calendar65.compareTo(calendar69) == 0) == calendar65.equals(calendar69));
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test406");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.Chronology chronology15 = dateTime2.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.eras();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.secondOfMinute();
        org.joda.time.DurationField durationField18 = chronology15.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField16, durationField18, and durationField16", !(durationField16.compareTo(durationField18) == 0) || (Math.signum(durationField16.compareTo(durationField16)) == Math.signum(durationField18.compareTo(durationField16))));
    }
}


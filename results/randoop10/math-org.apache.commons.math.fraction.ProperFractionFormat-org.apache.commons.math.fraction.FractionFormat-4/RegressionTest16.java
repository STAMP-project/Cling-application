import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest16 {

    public static boolean debug = false;

    @Test
    public void test08001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08001");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction8.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        double double29 = fraction27.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction33 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction27.multiply(fraction33);
        boolean boolean35 = fraction24.equals((java.lang.Object) fraction27);
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str37 = locale36.getDisplayLanguage();
        java.lang.String str38 = locale36.toLanguageTag();
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        java.lang.String str41 = locale39.getISO3Language();
        java.lang.String str42 = locale36.getDisplayScript(locale39);
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.lang.String str44 = locale36.getDisplayCountry(locale43);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale36);
        boolean boolean46 = fraction27.equals((java.lang.Object) locale36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale36);
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance(locale50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance(locale52);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = new org.apache.commons.math.fraction.FractionFormat(numberFormat51, numberFormat53);
        numberFormat53.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field58 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition59 = new java.text.FieldPosition((java.text.Format.Field) field58);
        java.lang.String str60 = fieldPosition59.toString();
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale62 = java.util.Locale.ROOT;
        java.lang.String str63 = locale62.getDisplayScript();
        java.lang.String str64 = locale61.getDisplayName(locale62);
        boolean boolean65 = fieldPosition59.equals((java.lang.Object) locale62);
        fieldPosition59.setEndIndex((int) '#');
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getCurrencyInstance(locale68);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat69);
        java.text.ParsePosition parsePosition73 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction74 = properFractionFormat70.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition73);
        boolean boolean75 = fieldPosition59.equals((java.lang.Object) parsePosition73);
        java.lang.Number number76 = numberFormat53.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition73);
        int int77 = numberFormat53.getMinimumIntegerDigits();
        java.util.Currency currency78 = numberFormat53.getCurrency();
        java.lang.StringBuffer stringBuffer79 = null;
        java.text.NumberFormat.Field field80 = java.text.NumberFormat.Field.DECIMAL_SEPARATOR;
        java.text.FieldPosition fieldPosition81 = new java.text.FieldPosition((java.text.Format.Field) field80);
        java.text.Format.Field field82 = fieldPosition81.getFieldAttribute();
        java.text.FieldPosition fieldPosition83 = new java.text.FieldPosition(field82);
        int int84 = fieldPosition83.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer85 = numberFormat49.format((java.lang.Object) currency78, stringBuffer79, fieldPosition83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.008333333333333333d) + "'", double29 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinese" + "'", str37, "Chinese");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zh-TW" + "'", str38, "zh-TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zho" + "'", str41, "zho");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Taiwan" + "'", str44, "Taiwan");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(field58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str60, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Chinese (Taiwan)" + "'", str64, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNull(fraction74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(number76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(currency78);
        org.junit.Assert.assertEquals(currency78.toString(), "XXX");
        org.junit.Assert.assertNotNull(field80);
        org.junit.Assert.assertNotNull(field82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test08002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08002");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8, numberFormat10);
        boolean boolean12 = numberFormat10.isGroupingUsed();
        boolean boolean13 = numberFormat10.isGroupingUsed();
        fractionFormat6.setNumeratorFormat(numberFormat10);
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        int int21 = numberFormat20.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        boolean boolean32 = numberFormat31.isGroupingUsed();
        java.util.Currency currency33 = numberFormat31.getCurrency();
        numberFormat28.setCurrency(currency33);
        java.util.Currency currency35 = numberFormat28.getCurrency();
        java.math.RoundingMode roundingMode36 = numberFormat28.getRoundingMode();
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) 'a');
        java.lang.String str40 = parsePosition39.toString();
        java.lang.String str41 = parsePosition39.toString();
        java.lang.Object obj42 = numberFormat28.parseObject("zho", parsePosition39);
        java.lang.Object obj43 = fractionFormat22.parseObject("java.text.NumberFormat$Field(currency)", parsePosition39);
        java.lang.Object obj44 = numberFormat10.parseObject("Italian", parsePosition39);
        java.lang.Object obj45 = numberFormat1.parseObject("600", parsePosition39);
        java.util.Locale locale47 = new java.util.Locale("Chinese (Taiwan)");
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance(locale49);
        java.util.Currency currency52 = numberFormat51.getCurrency();
        numberFormat51.setMinimumIntegerDigits(1);
        numberFormat51.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj60 = numberFormat51.parseObject("Japan", parsePosition59);
        int int61 = numberFormat51.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat48, numberFormat51);
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str65 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction64);
        int int66 = fraction64.getNumerator();
        long long67 = fraction64.longValue();
        java.text.AttributedCharacterIterator attributedCharacterIterator68 = properFractionFormat63.formatToCharacterIterator((java.lang.Object) long67);
        java.text.NumberFormat numberFormat69 = properFractionFormat63.getNumeratorFormat();
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getNumberInstance(locale70);
        java.util.Locale locale72 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet73 = locale72.getUnicodeLocaleAttributes();
        java.util.Locale locale74 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str75 = locale72.getDisplayScript(locale74);
        java.lang.String str77 = locale74.getExtension('u');
        java.lang.String str78 = locale70.getDisplayLanguage(locale74);
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale74);
        java.text.NumberFormat numberFormat80 = fractionFormat79.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat81 = new org.apache.commons.math.fraction.FractionFormat(numberFormat69, numberFormat80);
        numberFormat80.setGroupingUsed(true);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(currency33);
        org.junit.Assert.assertEquals(currency33.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode36.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str40, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str41, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertEquals(locale47.toString(), "chinese (taiwan)");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "TWD");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1 / 1" + "'", str65, "1 / 1");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(attributedCharacterIterator68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "anglais" + "'", str78, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
    }

    @Test
    public void test08003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08003");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        int int18 = fraction12.intValue();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction12.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.reciprocal();
        double double21 = fraction20.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str26 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction25);
        float float27 = fraction25.floatValue();
        org.apache.commons.math.fraction.Fraction fraction30 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str31 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction30);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction25.subtract(fraction30);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction22.divide(fraction32);
        java.lang.String str34 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction32);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.016666666666666666d + "'", double21 == 0.016666666666666666d);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1 / 1" + "'", str26, "1 / 1");
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1 / 100" + "'", str31, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "101 / 100" + "'", str34, "101 / 100");
    }

    @Test
    public void test08004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08004");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category0, locale5);
        java.lang.String str7 = locale5.getISO3Language();
        java.util.Locale locale10 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale10);
        java.lang.String str12 = locale5.getDisplayScript(locale10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale10);
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.StringBuffer stringBuffer16 = null;
        java.text.NumberFormat.Field field17 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition18 = new java.text.FieldPosition((java.text.Format.Field) field17);
        int int19 = fieldPosition18.getEndIndex();
        fieldPosition18.setBeginIndex((int) (byte) 100);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.lang.String str26 = fractionFormat24.format((java.lang.Object) 100);
        boolean boolean27 = fieldPosition18.equals((java.lang.Object) fractionFormat24);
        int int28 = fieldPosition18.getBeginIndex();
        int int29 = fieldPosition18.getBeginIndex();
        java.text.Format.Field field30 = fieldPosition18.getFieldAttribute();
        fieldPosition18.setEndIndex(3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer33 = fractionFormat14.format((java.lang.Object) locale15, stringBuffer16, fieldPosition18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fra" + "'", str7, "fra");
        org.junit.Assert.assertEquals(locale10.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertNotNull(field17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100 0 / 1" + "'", str26, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(field30);
    }

    @Test
    public void test08005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08005");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale5.getISO3Country();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Set<java.lang.Character> charSet10 = locale5.getExtensionKeys();
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.lang.String str12 = locale11.getDisplayCountry();
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale locale14 = java.util.Locale.PRC;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = locale11.getDisplayCountry(locale13);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getISO3Language();
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleKeys();
        java.lang.String str20 = locale17.getDisplayLanguage();
        java.lang.String str21 = locale11.getDisplayScript(locale17);
        java.text.NumberFormat.Field field22 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field22);
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition((java.text.Format.Field) field22, 1);
        java.text.FieldPosition fieldPosition27 = new java.text.FieldPosition((java.text.Format.Field) field22, (int) (short) 100);
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayScript();
        java.lang.String str31 = locale28.getDisplayCountry(locale29);
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale29);
        boolean boolean34 = field22.equals((java.lang.Object) locale29);
        boolean boolean35 = locale29.hasExtensions();
        java.lang.String str36 = locale11.getDisplayLanguage(locale29);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getInstance(locale29);
        java.util.Locale locale38 = locale29.stripExtensions();
        java.util.Locale locale41 = new java.util.Locale("anglais", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getCurrencyInstance(locale41);
        java.util.Locale locale43 = locale41.stripExtensions();
        java.lang.String str44 = locale29.getDisplayLanguage(locale43);
        java.lang.String str45 = locale5.getDisplayLanguage(locale29);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str15, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Korean" + "'", str20, "Korean");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Japan" + "'", str31, "Japan");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Italian" + "'", str36, "Italian");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals(locale41.toString(), "anglais_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "anglais_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Korean" + "'", str45, "Korean");
    }

    @Test
    public void test08006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08006");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str10 = locale8.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.lang.String str12 = locale5.getDisplayCountry(locale8);
        java.lang.String str13 = locale5.getISO3Language();
        java.lang.String str14 = locale5.getDisplayName();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale16.getISO3Language();
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale20);
        java.lang.String str24 = locale16.getDisplayLanguage(locale20);
        java.lang.String str25 = locale16.getDisplayName();
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale locale27 = java.util.Locale.getDefault(category0);
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Locale locale29 = locale28.stripExtensions();
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.util.Locale locale32 = locale31.stripExtensions();
        java.util.Locale locale34 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale34);
        java.lang.String str36 = locale34.getDisplayCountry();
        java.lang.String str37 = locale31.getDisplayName(locale34);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = locale38.getDisplayScript();
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale40.getISO3Language();
        java.lang.String str42 = locale38.getDisplayScript(locale40);
        java.lang.String str43 = locale31.getDisplayLanguage(locale40);
        java.lang.String str44 = locale31.toLanguageTag();
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale31);
        java.lang.String str46 = locale31.toLanguageTag();
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getNumberInstance(locale31);
        java.lang.String str48 = locale29.getDisplayVariant(locale31);
        java.util.Locale.setDefault(category0, locale29);
        java.util.Locale locale50 = java.util.Locale.getDefault(category0);
        java.util.Locale locale51 = locale50.stripExtensions();
        java.lang.String str52 = locale50.getDisplayLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "France" + "'", str12, "France");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fra" + "'", str13, "fra");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "French (France)" + "'", str14, "French (France)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zho" + "'", str18, "zho");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese" + "'", str24, "Chinese");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinese (Taiwan)" + "'", str25, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale28);
// flaky:         org.junit.Assert.assertEquals(locale28.toString(), "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0])_CA");
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0])_CA");
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0])_CA");
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0])_CA");
        org.junit.Assert.assertNotNull(locale32);
// flaky:         org.junit.Assert.assertEquals(locale32.toString(), "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0])_CA");
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0]) (Canada)" + "'", str37, "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0]) (Canada)");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "kor" + "'", str41, "kor");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0])" + "'", str43, "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0])");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "und-CA" + "'", str44, "und-CA");
        org.junit.Assert.assertNotNull(numberFormat45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "und-CA" + "'", str46, "und-CA");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale50);
// flaky:         org.junit.Assert.assertEquals(locale50.toString(), "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0])_CA");
        org.junit.Assert.assertNotNull(locale51);
// flaky:         org.junit.Assert.assertEquals(locale51.toString(), "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0])_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0])" + "'", str52, "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0])");
    }

    @Test
    public void test08007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08007");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale0.getDisplayCountry(locale3);
        java.util.Set<java.lang.String> strSet8 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale9 = locale0.stripExtensions();
        java.lang.String str10 = locale0.getLanguage();
        java.lang.String str11 = locale0.getScript();
        java.lang.String str12 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.util.Currency currency15 = numberFormat13.getCurrency();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "France" + "'", str7, "France");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "fr" + "'", str10, "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "fr-FR" + "'", str12, "fr-FR");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "EUR");
    }

    @Test
    public void test08008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08008");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction12.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction12.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str30 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction29);
        float float31 = fraction29.floatValue();
        org.apache.commons.math.fraction.Fraction fraction34 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str35 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction34);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction29.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction12.add(fraction34);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.negate();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.abs();
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.negate();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.abs();
        long long48 = fraction46.longValue();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction42.multiply(fraction46);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction42.abs();
        org.apache.commons.math.fraction.Fraction fraction53 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.negate();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.abs();
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.negate();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.abs();
        long long61 = fraction59.longValue();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction55.multiply(fraction59);
        org.apache.commons.math.fraction.Fraction fraction63 = fraction42.multiply(fraction62);
        org.apache.commons.math.fraction.Fraction fraction67 = new org.apache.commons.math.fraction.Fraction((double) (-1.0f), (double) 10, (int) (byte) -1);
        int int68 = fraction67.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction69 = fraction63.subtract(fraction67);
        org.apache.commons.math.fraction.Fraction fraction70 = fraction12.divide(fraction69);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1 / 1" + "'", str30, "1 / 1");
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 1.0f + "'", float31 == 1.0f);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-1 / 100" + "'", str35, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
    }

    @Test
    public void test08009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08009");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        long long4 = fraction2.longValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.divide(fraction9);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        java.util.Locale locale13 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str14 = locale11.getDisplayScript(locale13);
        boolean boolean15 = fraction10.equals((java.lang.Object) locale11);
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = locale16.getScript();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale16.getDisplayVariant();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale16);
        java.lang.String str21 = locale11.getDisplayScript(locale16);
        java.lang.String str22 = locale11.getDisplayScript();
        java.lang.String str23 = locale11.getISO3Language();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1 / 100" + "'", str3, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zho" + "'", str23, "zho");
    }

    @Test
    public void test08010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08010");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction13 = properFractionFormat9.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition12);
        java.lang.Object obj14 = numberFormat1.parseObject("zh-TW", parsePosition12);
        numberFormat1.setMinimumIntegerDigits((int) (byte) 0);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        boolean boolean19 = numberFormat18.isParseIntegerOnly();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.lang.String str23 = locale20.getISO3Country();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale20);
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        int int30 = numberFormat29.getMaximumIntegerDigits();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        boolean boolean33 = numberFormat32.isGroupingUsed();
        java.util.Currency currency34 = numberFormat32.getCurrency();
        numberFormat29.setCurrency(currency34);
        java.util.Currency currency36 = numberFormat29.getCurrency();
        int int37 = numberFormat29.getMaximumFractionDigits();
        java.lang.Object obj38 = numberFormat29.clone();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        numberFormat40.setMaximumFractionDigits(100);
        numberFormat40.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str47 = numberFormat40.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat29, numberFormat40);
        numberFormat40.setMinimumIntegerDigits(600);
        numberFormat40.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat18, numberFormat40);
        numberFormat40.setMinimumIntegerDigits(35);
        java.util.Currency currency56 = numberFormat40.getCurrency();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNull(fraction13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100%" + "'", str47, "100%");
        org.junit.Assert.assertNotNull(currency56);
        org.junit.Assert.assertEquals(currency56.toString(), "XXX");
    }

    @Test
    public void test08011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08011");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction8.add(fraction14);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.divide(fraction20);
        int int23 = fraction17.intValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction17.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction4.add(fraction17);
        org.apache.commons.math.fraction.Fraction fraction29 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str30 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction29);
        long long31 = fraction29.longValue();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction32.divide(fraction36);
        double double38 = fraction32.doubleValue();
        int int39 = fraction32.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction17.multiply(fraction32);
        short short41 = fraction40.shortValue();
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1 / 100" + "'", str30, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.01d + "'", double38 == 0.01d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 0 + "'", short41 == (short) 0);
    }

    @Test
    public void test08012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08012");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale0.getDisplayCountry(locale3);
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.setScript("");
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.lang.String str13 = locale11.toLanguageTag();
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = locale14.getISO3Language();
        java.lang.String str17 = locale11.getDisplayScript(locale14);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = locale11.getDisplayCountry(locale18);
        java.util.Locale.Builder builder20 = builder8.setLocale(locale18);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale21.toLanguageTag();
        java.lang.String str27 = locale21.getDisplayVariant();
        java.lang.String str28 = locale21.getVariant();
        java.util.Locale.Builder builder29 = builder20.setLocale(locale21);
        java.util.Locale locale30 = locale21.stripExtensions();
        java.lang.String str31 = locale0.getDisplayName(locale21);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "France" + "'", str7, "France");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese" + "'", str12, "Chinese");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zh-TW" + "'", str13, "zh-TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zho" + "'", str16, "zho");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Taiwan" + "'", str19, "Taiwan");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "und" + "'", str26, "und");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "French (France)" + "'", str31, "French (France)");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
    }

    @Test
    public void test08013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08013");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str8 = numberFormat4.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        org.apache.commons.math.fraction.Fraction fraction11 = fractionFormat9.parse("1,000%");
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.reciprocal();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0%" + "'", str8, "0%");
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
    }

    @Test
    public void test08014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08014");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale2 = locale0.stripExtensions();
        java.lang.String str3 = locale0.getDisplayName();
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale4.toLanguageTag();
        java.lang.String str6 = locale4.getDisplayLanguage();
        java.lang.String str7 = locale4.getISO3Country();
        java.lang.String str8 = locale0.getDisplayScript(locale4);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale0);
        numberFormat9.setMinimumIntegerDigits((int) (byte) 88);
        java.lang.Object obj12 = numberFormat9.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Chinese (China)" + "'", str3, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese" + "'", str6, "Chinese");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "TWN" + "'", str7, "TWN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(obj12);
    }

    @Test
    public void test08015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08015");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        java.util.Currency currency14 = numberFormat4.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException18 = new org.apache.commons.math.fraction.FractionConversionException((double) (-1.0f), (int) ' ');
        java.lang.Object[] objArray19 = fractionConversionException18.getArguments();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = numberFormat4.format((java.lang.Object) objArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[-1.0, 32]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[-1.0, 32]");
    }

    @Test
    public void test08016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08016");
        java.util.Locale locale2 = new java.util.Locale("anglais", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]");
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getCurrencyInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        boolean boolean6 = numberFormat5.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        numberFormat5.setMaximumFractionDigits((int) (byte) -120);
        boolean boolean10 = numberFormat3.equals((java.lang.Object) (byte) -120);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        java.text.NumberFormat numberFormat12 = fractionFormat11.getNumeratorFormat();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        boolean boolean16 = numberFormat15.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19, numberFormat21);
        java.text.ParsePosition parsePosition25 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj26 = numberFormat21.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition25);
        properFractionFormat17.setNumeratorFormat(numberFormat21);
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance(locale28);
        boolean boolean30 = numberFormat29.isParseIntegerOnly();
        numberFormat29.setGroupingUsed(false);
        properFractionFormat17.setWholeFormat(numberFormat29);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        boolean boolean40 = numberFormat39.isGroupingUsed();
        properFractionFormat37.setWholeFormat(numberFormat39);
        java.text.NumberFormat numberFormat42 = properFractionFormat37.getWholeFormat();
        java.text.ParsePosition parsePosition45 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number46 = numberFormat42.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition45);
        java.lang.Object obj47 = properFractionFormat17.parseObject("2,147,483,647 / 1", parsePosition45);
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getInstance(locale48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = new org.apache.commons.math.fraction.FractionFormat(numberFormat49, numberFormat51);
        boolean boolean53 = numberFormat51.isGroupingUsed();
        boolean boolean54 = numberFormat51.isGroupingUsed();
        java.text.ParsePosition parsePosition57 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj58 = numberFormat51.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition57);
        numberFormat51.setParseIntegerOnly(false);
        properFractionFormat17.setDenominatorFormat(numberFormat51);
        java.text.ParsePosition parsePosition64 = new java.text.ParsePosition((int) (short) 0);
        org.apache.commons.math.fraction.Fraction fraction65 = properFractionFormat17.parse("59\240999 %", parsePosition64);
        java.lang.Object obj66 = numberFormat12.parseObject("java.text.ParseException: java.text.ParsePosition[index=52,errorIndex=52]", parsePosition64);
        org.junit.Assert.assertEquals(locale2.toString(), "anglais_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNull(number46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(fraction65);
        org.junit.Assert.assertNull(obj66);
    }

    @Test
    public void test08017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08017");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str8 = numberFormat4.format((double) 0.0f);
        java.util.Locale locale12 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        int int14 = numberFormat13.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13);
        java.text.NumberFormat numberFormat16 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat13, numberFormat16);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException20 = new org.apache.commons.math.fraction.FractionConversionException(0.0d, 10);
        boolean boolean21 = numberFormat13.equals((java.lang.Object) 10);
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23, numberFormat25);
        int int27 = numberFormat23.getMaximumIntegerDigits();
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayScript();
        java.lang.String str31 = locale28.getDisplayCountry(locale29);
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance(locale29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale29);
        java.util.Set<java.lang.Character> charSet35 = locale29.getExtensionKeys();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getIntegerInstance(locale29);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat23, numberFormat36);
        java.util.Locale locale39 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale39);
        java.lang.String str42 = fractionFormat40.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat43 = fractionFormat40.getNumeratorFormat();
        java.util.Locale locale44 = java.util.Locale.getDefault();
        java.util.Locale locale45 = locale44.stripExtensions();
        java.util.Locale locale47 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale47);
        java.lang.String str49 = locale47.getDisplayCountry();
        java.lang.String str50 = locale44.getDisplayName(locale47);
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale53.getISO3Language();
        java.lang.String str55 = locale51.getDisplayScript(locale53);
        java.lang.String str56 = locale44.getDisplayLanguage(locale53);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getNumberInstance(locale44);
        fractionFormat40.setNumeratorFormat(numberFormat57);
        properFractionFormat37.setDenominatorFormat(numberFormat57);
        org.apache.commons.math.fraction.Fraction fraction62 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str63 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction62);
        float float64 = fraction62.floatValue();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction62.negate();
        java.util.Locale locale69 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getPercentInstance(locale69);
        int int71 = numberFormat70.getMaximumIntegerDigits();
        int int72 = numberFormat70.getMaximumFractionDigits();
        java.util.Locale locale73 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getInstance(locale73);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getPercentInstance(locale75);
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = new org.apache.commons.math.fraction.FractionFormat(numberFormat74, numberFormat76);
        org.apache.commons.math.fraction.FractionFormat fractionFormat78 = new org.apache.commons.math.fraction.FractionFormat(numberFormat70, numberFormat74);
        boolean boolean79 = fraction65.equals((java.lang.Object) fractionFormat78);
        java.text.NumberFormat numberFormat80 = fractionFormat78.getNumeratorFormat();
        properFractionFormat37.setDenominatorFormat(numberFormat80);
        java.util.Locale locale82 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat83 = java.text.NumberFormat.getInstance(locale82);
        java.util.Locale locale84 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat85 = java.text.NumberFormat.getPercentInstance(locale84);
        org.apache.commons.math.fraction.FractionFormat fractionFormat86 = new org.apache.commons.math.fraction.FractionFormat(numberFormat83, numberFormat85);
        int int87 = numberFormat85.getMaximumFractionDigits();
        properFractionFormat37.setDenominatorFormat(numberFormat85);
        boolean boolean89 = numberFormat85.isParseIntegerOnly();
        boolean boolean90 = numberFormat85.isGroupingUsed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj92 = numberFormat85.parseObject("org.apache.commons.math.fraction.FractionConversionException: Unable to convert 49,371.429 to fraction after 0 iterations");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0%" + "'", str8, "0%");
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Japan" + "'", str31, "Japan");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "100 0 / 1" + "'", str42, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale44);
// flaky:         org.junit.Assert.assertEquals(locale44.toString(), "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0])_CA");
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0])_CA");
        org.junit.Assert.assertEquals(locale47.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0]) (Canada)" + "'", str50, "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0]) (Canada)");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "kor" + "'", str54, "kor");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0])" + "'", str56, "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0])");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1 / 1" + "'", str63, "1 / 1");
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + 1.0f + "'", float64 == 1.0f);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertEquals(locale69.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test08018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08018");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat4 = properFractionFormat3.getWholeFormat();
        numberFormat4.setMinimumFractionDigits((int) (byte) 0);
        numberFormat4.setMinimumFractionDigits(60);
        numberFormat4.setMaximumFractionDigits((int) (byte) 1);
        java.math.RoundingMode roundingMode11 = numberFormat4.getRoundingMode();
        numberFormat4.setMaximumFractionDigits(6000);
        java.lang.Object obj14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator15 = numberFormat4.formatToCharacterIterator(obj14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: formatToCharacterIterator must be passed non-null object");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode11.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test08019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08019");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.String str8 = locale0.getDisplayLanguage();
        java.lang.String str9 = locale0.getDisplayVariant();
        java.lang.String str10 = locale0.getDisplayScript();
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.lang.String str16 = locale12.toLanguageTag();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale locale19 = builder17.build();
        java.lang.String str20 = locale19.getScript();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale21.toLanguageTag();
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale24.getISO3Language();
        java.lang.String str27 = locale21.getDisplayScript(locale24);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale21.getDisplayCountry(locale28);
        java.util.Locale locale31 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str32 = locale28.getDisplayLanguage(locale31);
        java.lang.String str33 = locale19.getDisplayCountry(locale31);
        java.lang.String str34 = locale12.getDisplayVariant(locale19);
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale36.getDisplayScript();
        java.lang.String str38 = locale35.getDisplayCountry(locale36);
        java.util.Set<java.lang.String> strSet39 = locale36.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getIntegerInstance(locale36);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getInstance(locale36);
        java.util.Set<java.lang.Character> charSet42 = locale36.getExtensionKeys();
        java.lang.String str43 = locale19.getDisplayVariant(locale36);
        java.lang.String str44 = locale36.getDisplayCountry();
        java.lang.String str45 = locale36.getDisplayScript();
        java.util.Set<java.lang.Character> charSet46 = locale36.getExtensionKeys();
        java.lang.String str47 = locale0.getDisplayScript(locale36);
        java.lang.String str48 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinese" + "'", str22, "Chinese");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh-TW" + "'", str23, "zh-TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zho" + "'", str26, "zho");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Taiwan" + "'", str29, "Taiwan");
        org.junit.Assert.assertEquals(locale31.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Italian" + "'", str32, "Italian");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Japan" + "'", str38, "Japan");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test08020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08020");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 100L, (double) 0.008263889f, 60);
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale locale7 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.lang.String str9 = locale7.getDisplayCountry();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.lang.String str11 = locale4.getDisplayCountry(locale7);
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = locale12.getDisplayScript(locale14);
        java.lang.String str16 = locale7.getDisplayScript(locale14);
        java.lang.Object obj17 = locale14.clone();
        boolean boolean18 = fraction3.equals((java.lang.Object) locale14);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "France" + "'", str11, "France");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "fr_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "fr_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08021");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        java.math.RoundingMode roundingMode12 = numberFormat4.getRoundingMode();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        boolean boolean19 = numberFormat17.isGroupingUsed();
        boolean boolean20 = numberFormat17.isGroupingUsed();
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj24 = numberFormat17.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition23);
        numberFormat17.setParseIntegerOnly(false);
        properFractionFormat13.setWholeFormat(numberFormat17);
        int int28 = numberFormat17.getMinimumFractionDigits();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Locale locale32 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.lang.String str34 = locale32.getDisplayCountry();
        java.lang.String str35 = locale29.getDisplayName(locale32);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale36.getDisplayScript();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale38.getISO3Language();
        java.lang.String str40 = locale36.getDisplayScript(locale38);
        java.lang.String str41 = locale29.getDisplayLanguage(locale38);
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getNumberInstance(locale29);
        java.util.Currency currency43 = numberFormat42.getCurrency();
        java.util.Locale locale47 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        int int49 = numberFormat48.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = new org.apache.commons.math.fraction.FractionFormat(numberFormat48);
        numberFormat48.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode53 = numberFormat48.getRoundingMode();
        numberFormat42.setRoundingMode(roundingMode53);
        numberFormat42.setParseIntegerOnly(false);
        numberFormat42.setParseIntegerOnly(true);
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17, numberFormat42);
        numberFormat17.setMinimumIntegerDigits((int) (byte) 17);
        java.lang.Object obj62 = numberFormat17.clone();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode12 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode12.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0])_CA");
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0])_CA");
        org.junit.Assert.assertEquals(locale32.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0]) (Canada)" + "'", str35, "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0]) (Canada)");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "kor" + "'", str39, "kor");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0])" + "'", str41, "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0])");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(currency43);
// flaky:         org.junit.Assert.assertEquals(currency43.toString(), "CAD");
        org.junit.Assert.assertEquals(locale47.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode53 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode53.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj62);
    }

    @Test
    public void test08022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08022");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.DECIMAL_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = field0.toString();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("en");
        java.util.Locale.Builder builder8 = builder3.setExtension('a', "Korean");
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.lang.String str10 = locale9.getDisplayScript();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale11.getISO3Language();
        java.lang.String str13 = locale9.getDisplayScript(locale11);
        java.lang.String str14 = locale9.toLanguageTag();
        java.lang.String str15 = locale9.getDisplayVariant();
        boolean boolean16 = locale9.hasExtensions();
        java.util.Locale.Builder builder17 = builder8.setLocale(locale9);
        java.util.Locale.Builder builder20 = builder17.setExtension('u', "");
        boolean boolean21 = field0.equals((java.lang.Object) builder20);
        java.lang.String str22 = field0.toString();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale23);
        boolean boolean25 = numberFormat24.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance(locale27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat28, numberFormat30);
        java.text.ParsePosition parsePosition34 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj35 = numberFormat30.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition34);
        properFractionFormat26.setNumeratorFormat(numberFormat30);
        java.text.NumberFormat numberFormat37 = properFractionFormat26.getNumeratorFormat();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.lang.Object obj41 = properFractionFormat40.clone();
        java.text.NumberFormat numberFormat42 = properFractionFormat40.getWholeFormat();
        int int43 = numberFormat42.getMaximumIntegerDigits();
        java.lang.Object obj44 = numberFormat42.clone();
        properFractionFormat26.setNumeratorFormat(numberFormat42);
        java.util.Locale locale49 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance(locale49);
        int int51 = numberFormat50.getMaximumIntegerDigits();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance(locale52);
        boolean boolean54 = numberFormat53.isGroupingUsed();
        java.util.Currency currency55 = numberFormat53.getCurrency();
        numberFormat50.setCurrency(currency55);
        java.util.Currency currency57 = numberFormat50.getCurrency();
        int int58 = numberFormat50.getMaximumFractionDigits();
        java.lang.Object obj59 = numberFormat50.clone();
        numberFormat50.setMinimumFractionDigits((int) (short) 1);
        java.util.Locale locale62 = java.util.Locale.ENGLISH;
        java.lang.String str63 = locale62.getScript();
        java.util.Locale locale67 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str68 = locale62.getDisplayScript(locale67);
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getNumberInstance(locale67);
        int int70 = numberFormat69.getMinimumIntegerDigits();
        java.util.Locale locale74 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getPercentInstance(locale74);
        int int76 = numberFormat75.getMaximumIntegerDigits();
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat78 = java.text.NumberFormat.getPercentInstance(locale77);
        boolean boolean79 = numberFormat78.isGroupingUsed();
        java.util.Currency currency80 = numberFormat78.getCurrency();
        numberFormat75.setCurrency(currency80);
        java.lang.Object obj82 = numberFormat75.clone();
        boolean boolean83 = numberFormat75.isGroupingUsed();
        int int84 = numberFormat75.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat85 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50, numberFormat69, numberFormat75);
        numberFormat50.setMinimumIntegerDigits(120);
        numberFormat50.setMinimumIntegerDigits((int) (byte) -1);
        properFractionFormat26.setDenominatorFormat(numberFormat50);
        java.text.NumberFormat numberFormat91 = properFractionFormat26.getWholeFormat();
        boolean boolean92 = field0.equals((java.lang.Object) numberFormat91);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.NumberFormat$Field(decimal separator)" + "'", str2, "java.text.NumberFormat$Field(decimal separator)");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "kor" + "'", str12, "kor");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "und" + "'", str14, "und");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.text.NumberFormat$Field(decimal separator)" + "'", str22, "java.text.NumberFormat$Field(decimal separator)");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(locale49.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(currency55);
        org.junit.Assert.assertEquals(currency55.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency57);
        org.junit.Assert.assertEquals(currency57.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals(locale67.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertEquals(locale74.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(currency80);
        org.junit.Assert.assertEquals(currency80.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(numberFormat91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test08023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08023");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str15 = fractionFormat13.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat16 = fractionFormat13.getNumeratorFormat();
        numberFormat16.setMaximumFractionDigits((int) (short) -1);
        int int19 = numberFormat16.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance(locale21);
        boolean boolean23 = numberFormat22.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat(numberFormat26, numberFormat28);
        java.text.ParsePosition parsePosition32 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj33 = numberFormat28.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition32);
        properFractionFormat24.setNumeratorFormat(numberFormat28);
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getCurrencyInstance(locale35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.util.Locale locale39 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale39);
        java.lang.String str42 = fractionFormat40.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat43 = fractionFormat40.getNumeratorFormat();
        java.util.Locale locale44 = java.util.Locale.getDefault();
        java.util.Locale locale45 = locale44.stripExtensions();
        java.util.Locale locale47 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale47);
        java.lang.String str49 = locale47.getDisplayCountry();
        java.lang.String str50 = locale44.getDisplayName(locale47);
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale53.getISO3Language();
        java.lang.String str55 = locale51.getDisplayScript(locale53);
        java.lang.String str56 = locale44.getDisplayLanguage(locale53);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getNumberInstance(locale44);
        fractionFormat40.setNumeratorFormat(numberFormat57);
        properFractionFormat37.setWholeFormat(numberFormat57);
        properFractionFormat24.setWholeFormat(numberFormat57);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        java.util.Locale locale65 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance(locale65);
        java.lang.String[] strArray67 = java.util.Locale.getISOCountries();
        boolean boolean68 = numberFormat66.equals((java.lang.Object) strArray67);
        java.lang.String str70 = numberFormat66.format((double) (byte) -1);
        java.util.Locale locale71 = java.util.Locale.JAPAN;
        java.util.Locale locale72 = java.util.Locale.ROOT;
        java.lang.String str73 = locale72.getDisplayScript();
        java.lang.String str74 = locale71.getDisplayCountry(locale72);
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getNumberInstance(locale71);
        numberFormat75.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57, numberFormat66, numberFormat75);
        properFractionFormat20.setWholeFormat(numberFormat66);
        java.text.ParsePosition parsePosition82 = new java.text.ParsePosition((int) '#');
        parsePosition82.setErrorIndex(600);
        org.apache.commons.math.fraction.Fraction fraction85 = properFractionFormat20.parse("\ub300\ub9cc", parsePosition82);
        parsePosition82.setIndex(35);
        org.apache.commons.math.fraction.Fraction fraction88 = properFractionFormat9.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 100 to fraction (100/-1)", parsePosition82);
        java.text.NumberFormat numberFormat89 = properFractionFormat9.getWholeFormat();
        java.lang.Number number91 = numberFormat89.parse("-1 / 1");
        int int92 = numberFormat89.getMinimumIntegerDigits();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "100 0 / 1" + "'", str15, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "100 0 / 1" + "'", str42, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale44);
// flaky:         org.junit.Assert.assertEquals(locale44.toString(), "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0])_CA");
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0])_CA");
        org.junit.Assert.assertEquals(locale47.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0]) (Canada)" + "'", str50, "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0]) (Canada)");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "kor" + "'", str54, "kor");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0])" + "'", str56, "chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0])");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertEquals(locale65.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "-100%" + "'", str70, "-100%");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Japan" + "'", str74, "Japan");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNull(fraction85);
        org.junit.Assert.assertNull(fraction88);
        org.junit.Assert.assertNotNull(numberFormat89);
        org.junit.Assert.assertEquals("'" + number91 + "' != '" + (-1L) + "'", number91, (-1L));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test08024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08024");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        boolean boolean5 = numberFormat3.isGroupingUsed();
        boolean boolean6 = numberFormat3.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        java.util.Currency currency8 = numberFormat3.getCurrency();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
    }

    @Test
    public void test08025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08025");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        boolean boolean4 = field0.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.lang.String str6 = locale5.getDisplayCountry();
        java.lang.String str7 = locale2.getDisplayVariant(locale5);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.util.Locale locale9 = locale5.stripExtensions();
        java.lang.String str10 = locale9.getDisplayScript();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder11.setScript("");
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.lang.String str16 = locale14.toLanguageTag();
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale17.getISO3Language();
        java.lang.String str20 = locale14.getDisplayScript(locale17);
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale14.getDisplayCountry(locale21);
        java.util.Locale.Builder builder23 = builder11.setLocale(locale21);
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale24.getISO3Language();
        java.util.Locale locale28 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale28);
        java.lang.String str30 = locale28.getDisplayCountry();
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getIntegerInstance(locale28);
        java.lang.String str32 = locale24.getDisplayLanguage(locale28);
        java.lang.String str33 = locale24.getVariant();
        java.util.Locale.Builder builder34 = builder23.setLocale(locale24);
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("fr");
        java.util.Locale locale37 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale37);
        java.lang.String str39 = locale36.getDisplayLanguage(locale37);
        java.util.Set<java.lang.String> strSet40 = locale36.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder41 = builder34.setLocale(locale36);
        java.lang.String str42 = locale36.getVariant();
        java.lang.String str43 = locale9.getDisplayCountry(locale36);
        java.lang.String str44 = locale36.getLanguage();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinese" + "'", str15, "Chinese");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh-TW" + "'", str16, "zh-TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zho" + "'", str19, "zho");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Taiwan" + "'", str22, "Taiwan");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zho" + "'", str26, "zho");
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese" + "'", str32, "Chinese");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "fran\347ais" + "'", str39, "fran\347ais");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fr" + "'", str44, "fr");
    }

    @Test
    public void test08026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08026");
        java.util.Locale locale3 = new java.util.Locale("Overflow trying to convert {0} to fraction ({1}/{2})", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=97,endIndex=0]", "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000%");
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Locale.setDefault(category4, locale6);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category4, locale9);
        java.lang.String str11 = locale9.getISO3Language();
        java.util.Locale locale14 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale14);
        java.lang.String str16 = locale9.getDisplayScript(locale14);
        java.lang.String str17 = locale14.toLanguageTag();
        java.lang.String str18 = locale14.getScript();
        java.util.Locale locale19 = locale14.stripExtensions();
        java.lang.String str20 = locale3.getDisplayName(locale19);
        org.junit.Assert.assertEquals(locale3.toString(), "overflow trying to convert {0} to fraction ({1}/{2})_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=97,ENDINDEX=0]_000000000000000000000000000000000000000000000000000000000000000000000000000000001000000%");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "\uc911\uad6d\uc5b4__Taiwan");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fra" + "'", str11, "fra");
        org.junit.Assert.assertEquals(locale14.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "chinese" + "'", str17, "chinese");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "chinese_HI!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "overflow trying to convert {0} to fraction ({1}/{2}) (JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=97,ENDINDEX=0],000000000000000000000000000000000000000000000000000000000000000000000000000000001000000%)" + "'", str20, "overflow trying to convert {0} to fraction ({1}/{2}) (JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=97,ENDINDEX=0],000000000000000000000000000000000000000000000000000000000000000000000000000000001000000%)");
    }

    @Test
    public void test08027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08027");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getCurrencyInstance(locale0);
        boolean boolean4 = numberFormat3.isParseIntegerOnly();
        java.math.RoundingMode roundingMode5 = numberFormat3.getRoundingMode();
        java.lang.Object obj6 = numberFormat3.clone();
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition((int) 'a');
        java.lang.String str9 = parsePosition8.toString();
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale.Builder builder12 = builder10.clear();
        java.util.Locale.Builder builder13 = builder12.clear();
        boolean boolean14 = parsePosition8.equals((java.lang.Object) builder13);
        java.util.Locale.Builder builder16 = builder13.setVariant("Japan");
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        boolean boolean18 = numberFormat3.equals((java.lang.Object) builder16);
        java.math.RoundingMode roundingMode19 = numberFormat3.getRoundingMode();
        java.util.Locale locale23 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        numberFormat24.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency27 = numberFormat24.getCurrency();
        numberFormat24.setGroupingUsed(true);
        java.util.Locale locale33 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        java.lang.String[] strArray35 = java.util.Locale.getISOCountries();
        boolean boolean36 = numberFormat34.equals((java.lang.Object) strArray35);
        int int37 = numberFormat34.getMinimumIntegerDigits();
        java.util.Currency currency38 = numberFormat34.getCurrency();
        numberFormat24.setCurrency(currency38);
        numberFormat3.setCurrency(currency38);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getInstance(locale41);
        java.util.Locale locale43 = java.util.Locale.getDefault();
        boolean boolean44 = numberFormat42.equals((java.lang.Object) locale43);
        java.util.Locale locale46 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale46);
        java.lang.String str48 = locale46.getDisplayCountry();
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getIntegerInstance(locale46);
        java.lang.String str50 = locale43.getDisplayVariant(locale46);
        java.lang.String str51 = locale46.toLanguageTag();
        java.lang.StringBuffer stringBuffer52 = null;
        java.text.NumberFormat.Field field53 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition54 = new java.text.FieldPosition((java.text.Format.Field) field53);
        java.lang.String str55 = fieldPosition54.toString();
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.lang.String str58 = locale57.getDisplayScript();
        java.lang.String str59 = locale56.getDisplayName(locale57);
        boolean boolean60 = fieldPosition54.equals((java.lang.Object) locale57);
        fieldPosition54.setEndIndex((int) '#');
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getCurrencyInstance(locale63);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64);
        java.text.ParsePosition parsePosition68 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction69 = properFractionFormat65.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition68);
        boolean boolean70 = fieldPosition54.equals((java.lang.Object) parsePosition68);
        int int71 = fieldPosition54.getEndIndex();
        int int72 = fieldPosition54.getEndIndex();
        fieldPosition54.setEndIndex((-1));
        java.lang.String str75 = fieldPosition54.toString();
        int int76 = fieldPosition54.getEndIndex();
        fieldPosition54.setBeginIndex((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer79 = numberFormat3.format((java.lang.Object) locale46, stringBuffer52, fieldPosition54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + roundingMode5 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode5.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str9, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + roundingMode19 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode19.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals(locale23.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "XXX");
        org.junit.Assert.assertEquals(locale33.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(currency38);
        org.junit.Assert.assertEquals(currency38.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(locale43);
// flaky:         org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals(locale46.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "und" + "'", str51, "und");
        org.junit.Assert.assertNotNull(field53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str55, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Chinese (Taiwan)" + "'", str59, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNull(fraction69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=-1]" + "'", str75, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=-1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
    }

    @Test
    public void test08028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08028");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale2 = locale1.stripExtensions();
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Set<java.lang.Character> charSet6 = locale4.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.lang.String str9 = locale2.getDisplayCountry(locale4);
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale10.getDisplayCountry(locale11);
        java.util.Set<java.lang.String> strSet14 = locale11.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale11);
        java.util.Locale locale16 = locale11.stripExtensions();
        java.util.Locale.setDefault(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.getDefault(category19);
        java.lang.String str21 = locale18.getDisplayScript(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale23);
        java.lang.String str25 = locale20.getDisplayScript(locale23);
        java.lang.String str26 = locale16.getDisplayCountry(locale23);
        java.lang.String str27 = locale2.getDisplayLanguage(locale23);
        java.util.Locale locale31 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        boolean boolean35 = locale32.hasExtensions();
        java.lang.String str36 = locale31.getDisplayName(locale32);
        java.util.Locale locale38 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale38);
        java.lang.String str40 = locale38.getDisplayCountry();
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getIntegerInstance(locale38);
        java.util.Set<java.lang.String> strSet42 = locale38.getUnicodeLocaleAttributes();
        java.lang.String str43 = locale31.getDisplayCountry(locale38);
        java.lang.String str44 = locale23.getDisplayScript(locale38);
        java.lang.Object obj45 = locale23.clone();
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kor" + "'", str5, "kor");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(fractionFormat8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Japan" + "'", str13, "Japan");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.FORMAT + "'", category19.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals(locale31.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str36, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertEquals(locale38.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ZH_TW" + "'", str43, "ZH_TW");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "ko");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "ko");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "ko");
    }

    @Test
    public void test08029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08029");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat6, numberFormat8);
        boolean boolean10 = numberFormat8.isGroupingUsed();
        boolean boolean11 = numberFormat8.isGroupingUsed();
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj15 = numberFormat8.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition14);
        numberFormat8.setParseIntegerOnly(false);
        properFractionFormat4.setWholeFormat(numberFormat8);
        java.lang.String str20 = numberFormat8.format((double) 97);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "9,700%" + "'", str20, "9,700%");
    }

    @Test
    public void test08030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08030");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getEndIndex();
        fieldPosition1.setBeginIndex((int) (byte) 100);
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str9 = fractionFormat7.format((java.lang.Object) 100);
        boolean boolean10 = fieldPosition1.equals((java.lang.Object) fractionFormat7);
        java.text.Format.Field field11 = fieldPosition1.getFieldAttribute();
        java.text.Format.Field field12 = fieldPosition1.getFieldAttribute();
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = java.util.Locale.getDefault(category13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale15);
        java.util.Locale.setDefault(category13, locale15);
        java.util.Locale locale20 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category13, locale20);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.negate();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction25.add(fraction31);
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction34.divide(fraction37);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale40.getDisplayScript();
        java.lang.String str42 = locale40.getScript();
        boolean boolean43 = fraction39.equals((java.lang.Object) locale40);
        java.util.Locale.setDefault(category13, locale40);
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getInstance(locale45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = new org.apache.commons.math.fraction.FractionFormat(numberFormat46, numberFormat48);
        numberFormat48.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field53 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition54 = new java.text.FieldPosition((java.text.Format.Field) field53);
        java.lang.String str55 = fieldPosition54.toString();
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.lang.String str58 = locale57.getDisplayScript();
        java.lang.String str59 = locale56.getDisplayName(locale57);
        boolean boolean60 = fieldPosition54.equals((java.lang.Object) locale57);
        fieldPosition54.setEndIndex((int) '#');
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getCurrencyInstance(locale63);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64);
        java.text.ParsePosition parsePosition68 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction69 = properFractionFormat65.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition68);
        boolean boolean70 = fieldPosition54.equals((java.lang.Object) parsePosition68);
        java.lang.Number number71 = numberFormat48.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition68);
        org.apache.commons.math.fraction.Fraction fraction74 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction75 = fraction74.negate();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction75.abs();
        org.apache.commons.math.fraction.Fraction fraction77 = fraction75.abs();
        java.util.Locale locale78 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat79 = java.text.NumberFormat.getInstance(locale78);
        java.util.Locale locale80 = java.util.Locale.getDefault();
        boolean boolean81 = numberFormat79.equals((java.lang.Object) locale80);
        boolean boolean82 = fraction77.equals((java.lang.Object) locale80);
        boolean boolean83 = parsePosition68.equals((java.lang.Object) locale80);
        java.util.Locale.setDefault(category13, locale80);
        java.lang.String str85 = locale80.getVariant();
        java.lang.String str86 = locale80.getDisplayVariant();
        java.text.NumberFormat numberFormat87 = java.text.NumberFormat.getIntegerInstance(locale80);
        java.util.Set<java.lang.Character> charSet88 = locale80.getExtensionKeys();
        boolean boolean89 = fieldPosition1.equals((java.lang.Object) charSet88);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100 0 / 1" + "'", str9, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertNotNull(field12);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertEquals(locale20.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(field53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str55, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Chinese (Taiwan)" + "'", str59, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNull(fraction69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(number71);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertNotNull(charSet88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test08031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08031");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.lang.String str4 = locale1.getDisplayVariant();
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.lang.String str6 = locale5.getDisplayCountry();
        java.lang.String str7 = locale5.getDisplayLanguage();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayScript();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getISO3Language();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        java.lang.String str13 = locale8.toLanguageTag();
        java.util.Set<java.lang.String> strSet14 = locale8.getUnicodeLocaleKeys();
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale15);
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleKeys();
        boolean boolean18 = locale15.hasExtensions();
        java.lang.String str19 = locale8.getDisplayVariant(locale15);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance(locale20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21, numberFormat23);
        numberFormat23.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field28 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition29 = new java.text.FieldPosition((java.text.Format.Field) field28);
        java.lang.String str30 = fieldPosition29.toString();
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.lang.String str33 = locale32.getDisplayScript();
        java.lang.String str34 = locale31.getDisplayName(locale32);
        boolean boolean35 = fieldPosition29.equals((java.lang.Object) locale32);
        fieldPosition29.setEndIndex((int) '#');
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance(locale38);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction44 = properFractionFormat40.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition43);
        boolean boolean45 = fieldPosition29.equals((java.lang.Object) parsePosition43);
        java.lang.Number number46 = numberFormat23.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition43);
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.negate();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction50.abs();
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getInstance(locale53);
        java.util.Locale locale55 = java.util.Locale.getDefault();
        boolean boolean56 = numberFormat54.equals((java.lang.Object) locale55);
        boolean boolean57 = fraction52.equals((java.lang.Object) locale55);
        boolean boolean58 = parsePosition43.equals((java.lang.Object) locale55);
        java.lang.String str59 = locale8.getDisplayScript(locale55);
        java.lang.String str60 = locale5.getDisplayName(locale55);
        java.lang.String str61 = locale55.getVariant();
        java.lang.String str62 = locale1.getDisplayName(locale55);
        java.lang.String str63 = locale1.getDisplayCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ub300\ub9cc" + "'", str6, "\ub300\ub9cc");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str7, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "kor" + "'", str11, "kor");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "und" + "'", str13, "und");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(field28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str30, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese (Taiwan)" + "'", str34, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNull(fraction44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(number46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Chinese (Taiwan)" + "'", str60, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Korean" + "'", str62, "Korean");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test08032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08032");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str9 = locale8.getDisplayVariant();
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.util.Locale locale15 = locale13.stripExtensions();
        java.util.Locale locale16 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale16);
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        boolean boolean19 = locale16.hasExtensions();
        java.lang.String str20 = locale13.getDisplayScript(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale16);
        java.lang.String str22 = locale8.getDisplayScript(locale16);
        java.lang.String str23 = locale0.getDisplayLanguage(locale8);
        java.lang.String str24 = locale8.getDisplayLanguage();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale8);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10,000%" + "'", str9, "10,000%");
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Korean" + "'", str23, "Korean");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "taiwan" + "'", str24, "taiwan");
        org.junit.Assert.assertNotNull(numberFormat25);
    }

    @Test
    public void test08033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08033");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = numberFormat1.isGroupingUsed();
        java.util.Currency currency3 = numberFormat1.getCurrency();
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        numberFormat8.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str12 = numberFormat8.format((double) 0.0f);
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        int int18 = numberFormat17.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17);
        java.text.NumberFormat numberFormat20 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8, numberFormat17, numberFormat20);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.lang.String str25 = locale23.getDisplayCountry();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getIntegerInstance(locale23);
        numberFormat26.setMinimumIntegerDigits(0);
        numberFormat26.setMinimumIntegerDigits(0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat20, numberFormat26);
        java.math.RoundingMode roundingMode32 = numberFormat1.getRoundingMode();
        numberFormat1.setMaximumFractionDigits((int) (byte) -16);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "XXX");
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0%" + "'", str12, "0%");
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + roundingMode32 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode32.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test08034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08034");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat5);
        boolean boolean7 = numberFormat5.isGroupingUsed();
        boolean boolean8 = numberFormat5.isGroupingUsed();
        fractionFormat1.setNumeratorFormat(numberFormat5);
        java.lang.Object obj10 = numberFormat5.clone();
        java.lang.Object obj11 = numberFormat5.clone();
        boolean boolean12 = numberFormat5.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5);
        int int14 = numberFormat5.getMaximumFractionDigits();
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.text.AttributedCharacterIterator attributedCharacterIterator20 = numberFormat17.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj21 = numberFormat17.clone();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getCurrencyInstance(locale23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        java.text.ParsePosition parsePosition28 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction29 = properFractionFormat25.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition28);
        java.lang.Object obj30 = numberFormat17.parseObject("zh-TW", parsePosition28);
        numberFormat17.setMinimumIntegerDigits((int) (byte) 0);
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale33);
        boolean boolean35 = numberFormat34.isParseIntegerOnly();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale36.getISO3Language();
        java.util.Set<java.lang.String> strSet38 = locale36.getUnicodeLocaleKeys();
        java.lang.String str39 = locale36.getISO3Country();
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getNumberInstance(locale36);
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        int int46 = numberFormat45.getMaximumIntegerDigits();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        boolean boolean49 = numberFormat48.isGroupingUsed();
        java.util.Currency currency50 = numberFormat48.getCurrency();
        numberFormat45.setCurrency(currency50);
        java.util.Currency currency52 = numberFormat45.getCurrency();
        int int53 = numberFormat45.getMaximumFractionDigits();
        java.lang.Object obj54 = numberFormat45.clone();
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance(locale55);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat56);
        numberFormat56.setMaximumFractionDigits(100);
        numberFormat56.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str63 = numberFormat56.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40, numberFormat45, numberFormat56);
        numberFormat56.setMinimumIntegerDigits(600);
        numberFormat56.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17, numberFormat34, numberFormat56);
        java.util.Locale locale70 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet71 = locale70.getUnicodeLocaleAttributes();
        java.util.Locale locale73 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat74 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale73);
        java.lang.String str75 = locale73.getDisplayCountry();
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getIntegerInstance(locale73);
        java.lang.String str77 = locale70.getDisplayCountry(locale73);
        java.text.NumberFormat numberFormat78 = java.text.NumberFormat.getPercentInstance(locale70);
        properFractionFormat69.setWholeFormat(numberFormat78);
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.lang.String str81 = locale80.getISO3Language();
        java.lang.String str82 = locale80.getDisplayCountry();
        java.util.Locale locale83 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet84 = locale83.getUnicodeLocaleAttributes();
        java.lang.String str85 = locale83.getISO3Language();
        java.lang.String str86 = locale80.getDisplayScript(locale83);
        org.apache.commons.math.fraction.FractionFormat fractionFormat87 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale80);
        java.text.NumberFormat numberFormat88 = java.text.NumberFormat.getCurrencyInstance(locale80);
        java.lang.String str89 = locale80.getDisplayName();
        java.text.NumberFormat numberFormat90 = java.text.NumberFormat.getInstance(locale80);
        int int91 = numberFormat90.getMinimumFractionDigits();
        properFractionFormat69.setWholeFormat(numberFormat90);
        java.text.ParsePosition parsePosition95 = new java.text.ParsePosition(8654399);
        org.apache.commons.math.fraction.Fraction fraction96 = properFractionFormat69.parse("java.text.ParsePosition[index=1,errorIndex=0]", parsePosition95);
        java.lang.Object obj97 = numberFormat5.parseObject("java.text.ParsePosition[index=10,errorIndex=-1]", parsePosition95);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(attributedCharacterIterator20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNull(fraction29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "kor" + "'", str37, "kor");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(currency50);
        org.junit.Assert.assertEquals(currency50.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "100%" + "'", str63, "100%");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertEquals(locale73.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "France" + "'", str77, "France");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "kor" + "'", str81, "kor");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "zho" + "'", str85, "zho");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(fractionFormat87);
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str89, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNull(fraction96);
        org.junit.Assert.assertNull(obj97);
    }

    @Test
    public void test08035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08035");
        java.util.Locale locale1 = new java.util.Locale("java.text.parseexception: zh_tw");
        java.util.Locale locale2 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale2.getDisplayCountry(locale4);
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale6);
        java.lang.String str9 = locale6.getDisplayScript();
        java.lang.String str10 = locale2.getDisplayVariant(locale6);
        java.lang.String str11 = locale1.getDisplayCountry(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        java.text.NumberFormat numberFormat13 = fractionFormat12.getNumeratorFormat();
        java.lang.String str15 = numberFormat13.format((double) (-119));
        boolean boolean16 = numberFormat13.isGroupingUsed();
        int int17 = numberFormat13.getMinimumIntegerDigits();
        org.junit.Assert.assertEquals(locale1.toString(), "java.text.parseexception: zh_tw");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str3, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Taiwan" + "'", str5, "Taiwan");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-119" + "'", str15, "-119");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test08036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08036");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumFractionDigits((int) (short) -1);
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        java.util.Currency currency15 = numberFormat13.getCurrency();
        numberFormat10.setCurrency(currency15);
        java.util.Currency currency17 = numberFormat10.getCurrency();
        numberFormat2.setCurrency(currency17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        java.lang.String str25 = numberFormat20.format((long) 100);
        int int26 = numberFormat20.getMaximumFractionDigits();
        numberFormat20.setMinimumFractionDigits((int) (short) 0);
        int int29 = numberFormat20.getMaximumFractionDigits();
        java.math.RoundingMode roundingMode30 = numberFormat20.getRoundingMode();
        numberFormat20.setGroupingUsed(false);
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getCurrencyInstance(locale33);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction39 = properFractionFormat35.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition38);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale43);
        boolean boolean45 = numberFormat44.isGroupingUsed();
        properFractionFormat42.setWholeFormat(numberFormat44);
        java.text.NumberFormat numberFormat47 = properFractionFormat42.getWholeFormat();
        properFractionFormat35.setWholeFormat(numberFormat47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat20, numberFormat47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.text.ParseException parseException53 = new java.text.ParseException("-3\240200 %", (int) (byte) 16);
        boolean boolean54 = numberFormat20.equals((java.lang.Object) "-3\240200 %");
        boolean boolean55 = numberFormat20.isParseIntegerOnly();
        boolean boolean56 = numberFormat20.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat58 = fractionFormat57.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20, numberFormat58);
        java.util.Locale locale61 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale61);
        java.lang.String str64 = fractionFormat62.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat65 = fractionFormat62.getNumeratorFormat();
        java.util.Locale locale66 = java.util.Locale.getDefault();
        java.util.Locale locale67 = locale66.stripExtensions();
        java.util.Locale locale69 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale69);
        java.lang.String str71 = locale69.getDisplayCountry();
        java.lang.String str72 = locale66.getDisplayName(locale69);
        java.util.Locale locale73 = java.util.Locale.ROOT;
        java.lang.String str74 = locale73.getDisplayScript();
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.lang.String str76 = locale75.getISO3Language();
        java.lang.String str77 = locale73.getDisplayScript(locale75);
        java.lang.String str78 = locale66.getDisplayLanguage(locale75);
        java.text.NumberFormat numberFormat79 = java.text.NumberFormat.getNumberInstance(locale66);
        fractionFormat62.setNumeratorFormat(numberFormat79);
        java.lang.String str82 = numberFormat79.format((long) 600);
        java.lang.String str84 = numberFormat79.format((double) 96);
        java.lang.String str86 = numberFormat79.format((double) (-2.0f));
        java.util.Locale locale87 = java.util.Locale.ROOT;
        java.lang.String str88 = locale87.getDisplayScript();
        java.util.Locale locale89 = java.util.Locale.KOREAN;
        java.lang.String str90 = locale89.getISO3Language();
        java.lang.String str91 = locale87.getDisplayScript(locale89);
        java.text.NumberFormat numberFormat92 = java.text.NumberFormat.getPercentInstance(locale87);
        numberFormat92.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat95 = new org.apache.commons.math.fraction.FractionFormat(numberFormat79, numberFormat92);
        int int96 = numberFormat79.getMinimumFractionDigits();
        fractionFormat59.setDenominatorFormat(numberFormat79);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "10,000%" + "'", str25, "10,000%");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + roundingMode30 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode30.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNull(fraction39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertEquals(locale61.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "100 0 / 1" + "'", str64, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertEquals(locale69.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "kor" + "'", str76, "kor");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "600" + "'", str82, "600");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "96" + "'", str84, "96");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "-2" + "'", str86, "-2");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "kor" + "'", str90, "kor");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(numberFormat92);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test08037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08037");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat14 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat15 = properFractionFormat3.getWholeFormat();
        int int16 = numberFormat15.getMaximumFractionDigits();
        int int17 = numberFormat15.getMinimumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test08038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08038");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.lang.String str2 = locale0.getScript();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance(locale5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        numberFormat6.setMaximumFractionDigits(100);
        java.lang.String str11 = numberFormat6.format((long) 100);
        int int12 = numberFormat6.getMaximumFractionDigits();
        numberFormat6.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        boolean boolean24 = numberFormat23.isGroupingUsed();
        properFractionFormat21.setWholeFormat(numberFormat23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat16, numberFormat23);
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getCurrencyInstance(locale28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction34 = properFractionFormat30.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        boolean boolean40 = numberFormat39.isGroupingUsed();
        properFractionFormat37.setWholeFormat(numberFormat39);
        java.text.NumberFormat numberFormat42 = properFractionFormat37.getWholeFormat();
        properFractionFormat30.setWholeFormat(numberFormat42);
        java.text.NumberFormat numberFormat44 = properFractionFormat30.getNumeratorFormat();
        java.util.Locale locale46 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale46);
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance(locale49);
        java.util.Currency currency52 = numberFormat51.getCurrency();
        numberFormat51.setMinimumIntegerDigits(1);
        numberFormat51.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj60 = numberFormat51.parseObject("Japan", parsePosition59);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException64 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str65 = fractionConversionException64.getPattern();
        java.lang.Throwable[] throwableArray66 = fractionConversionException64.getSuppressed();
        java.lang.Object[] objArray67 = fractionConversionException64.getArguments();
        boolean boolean68 = parsePosition59.equals((java.lang.Object) objArray67);
        int int69 = parsePosition59.getIndex();
        int int70 = parsePosition59.getIndex();
        java.lang.Object obj71 = fractionFormat47.parseObject("\ud55c\uad6d\uc5b4", parsePosition59);
        org.apache.commons.math.fraction.Fraction fraction72 = properFractionFormat30.parse("und", parsePosition59);
        parsePosition59.setIndex((int) 'u');
        parsePosition59.setErrorIndex(0);
        java.lang.Number number77 = numberFormat6.parse("japan", parsePosition59);
        org.apache.commons.math.fraction.Fraction fraction78 = fractionFormat3.parse("1,049 / 60", parsePosition59);
        java.lang.String str79 = parsePosition59.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10,000%" + "'", str11, "10,000%");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNull(fraction34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "TWD");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str65, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(fraction72);
        org.junit.Assert.assertNull(number77);
        org.junit.Assert.assertNull(fraction78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "java.text.ParsePosition[index=117,errorIndex=116]" + "'", str79, "java.text.ParsePosition[index=117,errorIndex=116]");
    }

    @Test
    public void test08039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08039");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it-IT");
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7, numberFormat9);
        numberFormat9.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field14 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition15 = new java.text.FieldPosition((java.text.Format.Field) field14);
        java.lang.String str16 = fieldPosition15.toString();
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayScript();
        java.lang.String str20 = locale17.getDisplayName(locale18);
        boolean boolean21 = fieldPosition15.equals((java.lang.Object) locale18);
        fieldPosition15.setEndIndex((int) '#');
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getCurrencyInstance(locale24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction30 = properFractionFormat26.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition29);
        boolean boolean31 = fieldPosition15.equals((java.lang.Object) parsePosition29);
        java.lang.Number number32 = numberFormat9.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition29);
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.negate();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction36.abs();
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getInstance(locale39);
        java.util.Locale locale41 = java.util.Locale.getDefault();
        boolean boolean42 = numberFormat40.equals((java.lang.Object) locale41);
        boolean boolean43 = fraction38.equals((java.lang.Object) locale41);
        boolean boolean44 = parsePosition29.equals((java.lang.Object) locale41);
        java.lang.String str45 = locale41.getDisplayVariant();
        java.util.Locale locale46 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale46);
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance(locale49);
        java.util.Currency currency52 = numberFormat51.getCurrency();
        numberFormat51.setMinimumIntegerDigits(1);
        numberFormat51.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj60 = numberFormat51.parseObject("Japan", parsePosition59);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException64 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str65 = fractionConversionException64.getPattern();
        java.lang.Throwable[] throwableArray66 = fractionConversionException64.getSuppressed();
        java.lang.Object[] objArray67 = fractionConversionException64.getArguments();
        boolean boolean68 = parsePosition59.equals((java.lang.Object) objArray67);
        int int69 = parsePosition59.getIndex();
        int int70 = parsePosition59.getIndex();
        java.lang.Object obj71 = fractionFormat47.parseObject("\ud55c\uad6d\uc5b4", parsePosition59);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat73 = properFractionFormat72.getWholeFormat();
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getPercentInstance(locale74);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat76 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat75);
        numberFormat75.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = new org.apache.commons.math.fraction.FractionFormat(numberFormat73, numberFormat75);
        java.text.NumberFormat numberFormat80 = fractionFormat79.getNumeratorFormat();
        boolean boolean81 = parsePosition59.equals((java.lang.Object) fractionFormat79);
        java.util.Locale locale82 = java.util.Locale.TAIWAN;
        java.lang.String str83 = locale82.toLanguageTag();
        java.lang.String str84 = locale82.getISO3Country();
        java.lang.String str85 = locale82.toLanguageTag();
        java.lang.String str86 = locale82.getDisplayVariant();
        java.text.NumberFormat numberFormat87 = java.text.NumberFormat.getInstance(locale82);
        boolean boolean88 = parsePosition59.equals((java.lang.Object) locale82);
        java.lang.String str89 = locale41.getDisplayName(locale82);
        java.util.Locale.Builder builder90 = builder5.setLocale(locale82);
        java.lang.String str91 = locale82.getDisplayName();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(field14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str16, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Chinese (Taiwan)" + "'", str20, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNull(fraction30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(number32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "TWD");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str65, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "zh-TW" + "'", str83, "zh-TW");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "TWN" + "'", str84, "TWN");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "zh-TW" + "'", str85, "zh-TW");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(builder90);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str91, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
    }

    @Test
    public void test08040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08040");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        fieldPosition1.setEndIndex((int) ' ');
        java.text.Format.Field field4 = fieldPosition1.getFieldAttribute();
        int int5 = fieldPosition1.getField();
        java.text.Format.Field field6 = fieldPosition1.getFieldAttribute();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Set<java.lang.Character> charSet9 = locale7.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition(599);
        org.apache.commons.math.fraction.Fraction fraction15 = fractionFormat11.parse("english", parsePosition14);
        int int16 = parsePosition14.getIndex();
        boolean boolean17 = field6.equals((java.lang.Object) parsePosition14);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(field6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNull(fraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 599 + "'", int16 == 599);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08041");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat6 = fractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = fractionFormat2.getNumeratorFormat();
        java.lang.String str9 = numberFormat7.format((long) 2147483647);
        boolean boolean10 = numberFormat7.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        java.lang.Object obj12 = numberFormat7.clone();
        numberFormat7.setMaximumIntegerDigits((int) (byte) 60);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2,147,483,647" + "'", str9, "2,147,483,647");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(obj12);
    }

    @Test
    public void test08042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08042");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        boolean boolean47 = numberFormat45.equals((java.lang.Object) strArray46);
        java.lang.String str49 = numberFormat45.format((double) (byte) -1);
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale50.getDisplayCountry(locale51);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getNumberInstance(locale50);
        numberFormat54.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36, numberFormat45, numberFormat54);
        java.util.Locale locale61 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance(locale61);
        numberFormat62.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str66 = numberFormat62.format((double) 0.0f);
        java.util.Locale locale70 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getPercentInstance(locale70);
        int int72 = numberFormat71.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = new org.apache.commons.math.fraction.FractionFormat(numberFormat71);
        java.text.NumberFormat numberFormat74 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62, numberFormat71, numberFormat74);
        properFractionFormat57.setWholeFormat(numberFormat62);
        java.text.NumberFormat numberFormat77 = properFractionFormat57.getWholeFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-100%" + "'", str49, "-100%");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Japan" + "'", str53, "Japan");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals(locale61.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0%" + "'", str66, "0%");
        org.junit.Assert.assertEquals(locale70.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertNotNull(numberFormat77);
    }

    @Test
    public void test08043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08043");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale6.getISO3Language();
        java.lang.String str8 = locale6.getDisplayCountry();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str11 = locale9.getISO3Language();
        java.lang.String str12 = locale6.getDisplayScript(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getCurrencyInstance(locale6);
        java.lang.String str15 = locale6.getDisplayName();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat16);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zho" + "'", str11, "zho");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat16);
    }

    @Test
    public void test08044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08044");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.lang.String str8 = locale0.getVariant();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale0);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction16 = properFractionFormat12.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition15);
        java.text.NumberFormat numberFormat17 = properFractionFormat12.getWholeFormat();
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19, numberFormat21);
        boolean boolean23 = numberFormat21.isGroupingUsed();
        boolean boolean24 = numberFormat21.isGroupingUsed();
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj28 = numberFormat21.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21);
        java.text.NumberFormat numberFormat30 = fractionFormat29.getNumeratorFormat();
        properFractionFormat12.setNumeratorFormat(numberFormat30);
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        java.lang.String[] strArray37 = java.util.Locale.getISOCountries();
        boolean boolean38 = numberFormat36.equals((java.lang.Object) strArray37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat30, numberFormat36);
        java.util.Locale locale41 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.lang.String str44 = fractionFormat42.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat45 = fractionFormat42.getNumeratorFormat();
        java.text.NumberFormat numberFormat46 = fractionFormat42.getNumeratorFormat();
        java.text.NumberFormat numberFormat47 = fractionFormat42.getNumeratorFormat();
        numberFormat47.setMinimumIntegerDigits(600);
        int int50 = numberFormat47.getMinimumIntegerDigits();
        properFractionFormat39.setNumeratorFormat(numberFormat47);
        java.text.NumberFormat numberFormat52 = properFractionFormat39.getDenominatorFormat();
        boolean boolean53 = numberFormat52.isParseIntegerOnly();
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category55 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale56 = java.util.Locale.getDefault(category55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale57);
        java.util.Locale.setDefault(category55, locale57);
        java.util.Locale locale60 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category55, locale60);
        java.lang.String str62 = locale54.getDisplayLanguage(locale60);
        java.util.Set<java.lang.String> strSet63 = locale54.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getIntegerInstance(locale54);
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getPercentInstance(locale54);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator66 = numberFormat52.formatToCharacterIterator((java.lang.Object) locale54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc77c\ubcf8" + "'", str5, "\uc77c\ubcf8");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc77c\ubcf8" + "'", str6, "\uc77c\ubcf8");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNull(fraction16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals(locale41.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "100 0 / 1" + "'", str44, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 600 + "'", int50 == 600);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertTrue("'" + category55 + "' != '" + java.util.Locale.Category.FORMAT + "'", category55.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale56);
// flaky:         org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "anglais" + "'", str62, "anglais");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
    }

    @Test
    public void test08045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08045");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale10.getDisplayCountry(locale11);
        java.util.Set<java.lang.String> strSet14 = locale11.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale11);
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) 'a');
        java.lang.String str18 = parsePosition17.toString();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale.Builder builder21 = builder19.clear();
        java.util.Locale.Builder builder22 = builder21.clear();
        boolean boolean23 = parsePosition17.equals((java.lang.Object) builder22);
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale26);
        java.util.Locale.setDefault(category24, locale26);
        java.util.Locale locale29 = java.util.Locale.getDefault(category24);
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale29);
        boolean boolean32 = parsePosition17.equals((java.lang.Object) locale29);
        java.lang.String str33 = locale11.getDisplayScript(locale29);
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.lang.String str35 = locale34.getDisplayCountry();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.PRC;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale34.getDisplayCountry(locale36);
        java.lang.String str40 = locale29.getDisplayLanguage(locale34);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getCurrencyInstance(locale29);
        boolean boolean42 = locale29.hasExtensions();
        java.lang.String str43 = locale5.getDisplayVariant(locale29);
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getCurrencyInstance(locale5);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getNumberInstance(locale5);
        java.lang.Object obj46 = locale5.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Japan" + "'", str13, "Japan");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str18, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str38, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "coreano" + "'", str40, "coreano");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "hi!");
    }

    @Test
    public void test08046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08046");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getEndIndex();
        int int3 = fieldPosition1.getField();
        java.lang.String str4 = fieldPosition1.toString();
        java.text.Format.Field field5 = fieldPosition1.getFieldAttribute();
        java.text.FieldPosition fieldPosition7 = new java.text.FieldPosition(field5, 0);
        java.util.Locale locale8 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.util.Locale.setDefault(locale8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.lang.String str12 = locale8.toLanguageTag();
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale13.toLanguageTag();
        java.util.Set<java.lang.String> strSet19 = locale13.getUnicodeLocaleKeys();
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale20);
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        boolean boolean23 = locale20.hasExtensions();
        java.lang.String str24 = locale13.getDisplayVariant(locale20);
        java.lang.String str25 = locale8.getDisplayVariant(locale20);
        java.util.Locale locale29 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.lang.String str30 = locale29.getDisplayName();
        java.lang.String str31 = locale8.getDisplayName(locale29);
        boolean boolean32 = field5.equals((java.lang.Object) str31);
        java.text.FieldPosition fieldPosition34 = new java.text.FieldPosition(field5, 14500);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(field5);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str9, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh-TW" + "'", str12, "zh-TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(locale29.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1 / 1 (zh-tw)" + "'", str30, "1 / 1 (zh-tw)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese (Taiwan)" + "'", str31, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test08047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08047");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat4 = properFractionFormat2.getWholeFormat();
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayScript();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = locale5.getDisplayScript(locale7);
        java.lang.String str10 = locale5.toLanguageTag();
        java.util.Set<java.lang.String> strSet11 = locale5.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getCurrencyInstance(locale5);
        java.lang.Object obj13 = numberFormat12.clone();
        java.util.Locale locale17 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        int int19 = numberFormat18.getMaximumIntegerDigits();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        boolean boolean22 = numberFormat21.isGroupingUsed();
        java.util.Currency currency23 = numberFormat21.getCurrency();
        numberFormat18.setCurrency(currency23);
        java.util.Currency currency25 = numberFormat18.getCurrency();
        numberFormat12.setCurrency(currency25);
        properFractionFormat2.setWholeFormat(numberFormat12);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale29.getISO3Language();
        java.util.Set<java.lang.Character> charSet31 = locale29.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale29);
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition(599);
        org.apache.commons.math.fraction.Fraction fraction37 = fractionFormat33.parse("english", parsePosition36);
        int int38 = parsePosition36.getIndex();
        org.apache.commons.math.fraction.Fraction fraction39 = properFractionFormat2.parse("1%", parsePosition36);
        parsePosition36.setIndex(32);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "und" + "'", str10, "und");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(locale17.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "kor" + "'", str30, "kor");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNull(fraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 599 + "'", int38 == 599);
        org.junit.Assert.assertNull(fraction39);
    }

    @Test
    public void test08048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08048");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str8 = locale6.getDisplayCountry();
        java.lang.String str9 = locale3.getDisplayName(locale6);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale10.getDisplayScript();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        java.lang.String str14 = locale10.getDisplayScript(locale12);
        java.lang.String str15 = locale3.getDisplayLanguage(locale12);
        java.lang.String str16 = locale3.toLanguageTag();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.String str18 = locale3.toLanguageTag();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance(locale3);
        java.lang.String str20 = locale1.getDisplayVariant(locale3);
        java.lang.String str21 = locale1.getISO3Language();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance(locale1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj24 = numberFormat22.parseObject("hi!");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (Taiwan)" + "'", str9, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str15, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh-TW" + "'", str16, "zh-TW");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh-TW" + "'", str18, "zh-TW");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zho" + "'", str21, "zho");
        org.junit.Assert.assertNotNull(numberFormat22);
    }

    @Test
    public void test08049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08049");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet9 = locale5.getExtensionKeys();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = locale5.getDisplayName(locale10);
        java.util.Locale locale14 = locale10.stripExtensions();
        java.util.Locale locale15 = java.util.Locale.JAPAN;
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale16.getDisplayScript();
        java.lang.String str18 = locale15.getDisplayCountry(locale16);
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale14.getDisplayVariant(locale16);
        java.lang.String str22 = locale14.getExtension('a');
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale14);
        java.util.Locale locale25 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale25);
        java.lang.String str27 = locale25.getDisplayCountry();
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getIntegerInstance(locale25);
        java.lang.String str29 = locale25.toLanguageTag();
        java.lang.String str30 = locale14.getDisplayCountry(locale25);
        java.util.Set<java.lang.Character> charSet31 = locale25.getExtensionKeys();
        java.lang.String str32 = locale25.getDisplayCountry();
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder33.setScript("");
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.lang.String str39 = locale36.getDisplayLanguage(locale38);
        java.util.Locale.Builder builder40 = builder35.setLocale(locale36);
        java.util.Locale.Builder builder41 = builder35.clearExtensions();
        java.util.Locale.Builder builder42 = builder35.clearExtensions();
        java.util.Locale.Builder builder44 = builder42.setVariant("");
        java.util.Locale locale45 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str46 = locale45.getDisplayLanguage();
        java.util.Locale.setDefault(locale45);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getIntegerInstance(locale45);
        java.lang.String str49 = locale45.toLanguageTag();
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayScript();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.lang.String str53 = locale52.getISO3Language();
        java.lang.String str54 = locale50.getDisplayScript(locale52);
        java.lang.String str55 = locale50.toLanguageTag();
        java.util.Set<java.lang.String> strSet56 = locale50.getUnicodeLocaleKeys();
        java.util.Locale locale57 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale57);
        java.util.Set<java.lang.String> strSet59 = locale57.getUnicodeLocaleKeys();
        boolean boolean60 = locale57.hasExtensions();
        java.lang.String str61 = locale50.getDisplayVariant(locale57);
        java.lang.String str62 = locale45.getDisplayVariant(locale57);
        java.util.Locale locale66 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.lang.String str67 = locale66.getDisplayName();
        java.lang.String str68 = locale45.getDisplayName(locale66);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale69);
        java.lang.String str71 = locale69.getISO3Language();
        java.util.Locale locale72 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet73 = locale72.getUnicodeLocaleAttributes();
        java.lang.String str74 = locale72.getISO3Language();
        java.lang.String str76 = locale72.getExtension('u');
        java.lang.String str77 = locale69.getDisplayName(locale72);
        java.lang.String str78 = locale45.getDisplayName(locale72);
        java.lang.String str79 = locale72.getVariant();
        java.lang.String str80 = locale72.getISO3Country();
        java.util.Locale.Builder builder81 = builder42.setLocale(locale72);
        java.lang.String str82 = locale25.getDisplayName(locale72);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str12, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str13, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Japan" + "'", str18, "Japan");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "und" + "'", str29, "und");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Canada" + "'", str30, "Canada");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Chinesisch" + "'", str39, "Chinesisch");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u4e2d\u6587" + "'", str46, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "zh-TW" + "'", str49, "zh-TW");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "kor" + "'", str53, "kor");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "und" + "'", str55, "und");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals(locale66.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1 / 1 (zh-tw)" + "'", str67, "1 / 1 (zh-tw)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Chinese (Taiwan)" + "'", str68, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "kor" + "'", str71, "kor");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "fra" + "'", str74, "fra");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "cor\351en" + "'", str77, "cor\351en");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "chinois (Taiwan)" + "'", str78, "chinois (Taiwan)");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "FRA" + "'", str80, "FRA");
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
    }

    @Test
    public void test08050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08050");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str5 = locale1.getDisplayCountry();
        java.lang.String str6 = locale1.getLanguage();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test08051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08051");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        boolean boolean6 = locale1.hasExtensions();
        java.util.Locale locale9 = new java.util.Locale("anglais", "kor");
        java.lang.String str10 = locale1.getDisplayLanguage(locale9);
        java.util.Locale.setDefault(locale9);
        java.lang.String str12 = locale9.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals(locale9.toString(), "anglais_KOR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "anglais_KOR" + "'", str12, "anglais_KOR");
    }

    @Test
    public void test08052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08052");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.lang.Object obj7 = numberFormat4.clone();
        numberFormat4.setParseIntegerOnly(true);
        java.util.Locale locale11 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str13 = locale11.getDisplayCountry();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance(locale11);
        java.lang.String str15 = locale11.toLanguageTag();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale locale18 = builder16.build();
        java.lang.String str19 = locale18.getScript();
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.lang.String str22 = locale20.toLanguageTag();
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.lang.String str25 = locale23.getISO3Language();
        java.lang.String str26 = locale20.getDisplayScript(locale23);
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.lang.String str28 = locale20.getDisplayCountry(locale27);
        java.util.Locale locale30 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str31 = locale27.getDisplayLanguage(locale30);
        java.lang.String str32 = locale18.getDisplayCountry(locale30);
        java.lang.String str33 = locale11.getDisplayVariant(locale18);
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale35.getDisplayScript();
        java.lang.String str37 = locale34.getDisplayCountry(locale35);
        java.util.Set<java.lang.String> strSet38 = locale35.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getIntegerInstance(locale35);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getInstance(locale35);
        java.util.Set<java.lang.Character> charSet41 = locale35.getExtensionKeys();
        java.lang.String str42 = locale18.getDisplayVariant(locale35);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getInstance(locale18);
        boolean boolean44 = numberFormat4.equals((java.lang.Object) numberFormat43);
        int int45 = numberFormat4.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "und" + "'", str15, "und");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Chinese" + "'", str21, "Chinese");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh-TW" + "'", str22, "zh-TW");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zho" + "'", str25, "zho");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Taiwan" + "'", str28, "Taiwan");
        org.junit.Assert.assertEquals(locale30.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Italian" + "'", str31, "Italian");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Japan" + "'", str37, "Japan");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test08053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08053");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale3.toLanguageTag();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getISO3Language();
        java.lang.String str9 = locale3.getDisplayScript(locale6);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale3.getDisplayCountry(locale10);
        java.lang.String str12 = locale3.getVariant();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getNumberInstance(locale3);
        numberFormat13.setMaximumIntegerDigits((-1));
        properFractionFormat2.setDenominatorFormat(numberFormat13);
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.lang.String str19 = locale17.getExtension('a');
        java.util.Locale locale20 = locale17.stripExtensions();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance(locale20);
        java.lang.String str23 = numberFormat21.format((double) (-32));
        properFractionFormat2.setNumeratorFormat(numberFormat21);
        int int25 = numberFormat21.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Chinese" + "'", str4, "Chinese");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Taiwan" + "'", str11, "Taiwan");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-32" + "'", str23, "-32");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test08054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08054");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.text.NumberFormat numberFormat41 = properFractionFormat40.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction43 = properFractionFormat40.parse("6,000");
        java.text.NumberFormat numberFormat44 = properFractionFormat40.getWholeFormat();
        numberFormat44.setMaximumIntegerDigits(98);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "anglais_KOR");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "anglais (KOR)" + "'", str29, "anglais (KOR)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "anglais" + "'", str35, "anglais");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(numberFormat44);
    }

    @Test
    public void test08055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08055");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.lang.String str1 = locale0.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale0);
        int int4 = numberFormat3.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zho" + "'", str1, "zho");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
    }

    @Test
    public void test08056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08056");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) ' ');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        boolean boolean20 = numberFormat19.isGroupingUsed();
        java.util.Currency currency21 = numberFormat19.getCurrency();
        int int22 = numberFormat19.getMinimumFractionDigits();
        int int23 = numberFormat19.getMinimumIntegerDigits();
        java.lang.Object obj24 = numberFormat19.clone();
        java.text.NumberFormat numberFormat25 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19, numberFormat25);
        boolean boolean27 = fraction16.equals((java.lang.Object) numberFormat19);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction8.add(fraction16);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction3.divide(fraction16);
        org.apache.commons.math.fraction.Fraction fraction32 = new org.apache.commons.math.fraction.Fraction((-4.656612875245797E-8d), 11);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction29.subtract(fraction32);
        org.apache.commons.math.fraction.Fraction fraction37 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.abs();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction42.abs();
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.negate();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.abs();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction48.abs();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction42.add(fraction48);
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.negate();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction51.divide(fraction54);
        int int57 = fraction51.intValue();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction51.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction51.abs();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction38.add(fraction51);
        org.apache.commons.math.fraction.Fraction fraction61 = fraction32.divide(fraction51);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
    }

    @Test
    public void test08057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08057");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.text.NumberFormat numberFormat10 = properFractionFormat9.getWholeFormat();
        numberFormat10.setMinimumFractionDigits((int) (byte) 100);
        numberFormat10.setMaximumIntegerDigits((int) (byte) 52);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(numberFormat10);
    }

    @Test
    public void test08058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08058");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj8 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition7);
        parsePosition7.setIndex(119);
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale13 = java.util.Locale.getDefault(category11);
        boolean boolean14 = parsePosition7.equals((java.lang.Object) category11);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str20 = locale18.getDisplayCountry();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance(locale18);
        java.lang.String str22 = locale15.getDisplayCountry(locale18);
        java.util.Locale.setDefault(category11, locale18);
        java.util.Locale locale24 = java.util.Locale.getDefault(category11);
        java.util.Locale locale28 = new java.util.Locale("fr_CA", "java.text.ParsePosition[index=0,errorIndex=-1]", "zh-tw");
        java.lang.String str30 = locale28.getExtension('x');
        java.util.Locale.setDefault(category11, locale28);
        java.util.Locale locale32 = java.util.Locale.getDefault(category11);
        java.util.Locale locale33 = java.util.Locale.getDefault(category11);
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder36 = builder34.setScript("");
        java.util.Locale.Builder builder38 = builder36.setLanguage("en");
        java.util.Locale.Builder builder39 = builder38.clearExtensions();
        java.util.Locale.Builder builder41 = builder39.setLanguageTag("fr");
        java.util.Locale.Builder builder43 = builder41.removeUnicodeLocaleAttribute("zho");
        java.util.Locale locale44 = builder43.build();
        java.util.Locale.setDefault(category11, locale44);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "anglais_KOR");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "France" + "'", str22, "France");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertEquals(locale28.toString(), "fr_ca_JAVA.TEXT.PARSEPOSITION[INDEX=0,ERRORINDEX=-1]_zh-tw");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_ca_JAVA.TEXT.PARSEPOSITION[INDEX=0,ERRORINDEX=-1]_zh-tw");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_ca_JAVA.TEXT.PARSEPOSITION[INDEX=0,ERRORINDEX=-1]_zh-tw");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
    }

    @Test
    public void test08059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08059");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale locale17 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.lang.String str20 = locale14.getDisplayName(locale17);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale14.getDisplayLanguage(locale23);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale14);
        fractionFormat10.setNumeratorFormat(numberFormat27);
        properFractionFormat7.setWholeFormat(numberFormat27);
        fractionFormat4.setNumeratorFormat(numberFormat27);
        java.util.Locale locale34 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str37 = locale36.getDisplayLanguage();
        java.lang.String str38 = locale36.toLanguageTag();
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        java.lang.String str41 = locale39.getISO3Language();
        java.lang.String str42 = locale36.getDisplayScript(locale39);
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.lang.String str44 = locale36.getDisplayCountry(locale43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        java.math.RoundingMode roundingMode47 = numberFormat46.getRoundingMode();
        numberFormat35.setRoundingMode(roundingMode47);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27, numberFormat35);
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        java.text.NumberFormat numberFormat51 = fractionFormat49.getDenominatorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "anglais_KOR");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "anglais (KOR)" + "'", str20, "anglais (KOR)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "anglais" + "'", str26, "anglais");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals(locale34.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str37, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zh-TW" + "'", str38, "zh-TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zho" + "'", str41, "zho");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Taiwan" + "'", str44, "Taiwan");
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + roundingMode47 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode47.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
    }

    @Test
    public void test08060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08060");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(category0, locale9);
        java.util.Locale locale13 = java.util.Locale.getDefault(category0);
        java.lang.String str14 = locale13.getDisplayName();
        java.lang.String str15 = locale13.toLanguageTag();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getNumberInstance(locale13);
        java.lang.String str18 = numberFormat16.format((double) 117L);
        int int19 = numberFormat16.getMaximumFractionDigits();
        java.lang.StringBuffer stringBuffer21 = null;
        java.text.NumberFormat.Field field22 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field22);
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition((java.text.Format.Field) field22, (int) (short) 0);
        fieldPosition25.setEndIndex(0);
        fieldPosition25.setEndIndex(599);
        int int30 = fieldPosition25.getBeginIndex();
        int int31 = fieldPosition25.getBeginIndex();
        fieldPosition25.setBeginIndex((int) (byte) -101);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer34 = numberFormat16.format((long) 20, stringBuffer21, fieldPosition25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str11, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str14, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "en-CA" + "'", str15, "en-CA");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "117" + "'", str18, "117");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test08061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08061");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.lang.String str5 = locale1.toLanguageTag();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = builder6.build();
        java.lang.String str9 = locale8.getScript();
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.lang.String str12 = locale10.toLanguageTag();
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale13.getISO3Language();
        java.lang.String str16 = locale10.getDisplayScript(locale13);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale10.getDisplayCountry(locale17);
        java.util.Locale locale20 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str21 = locale17.getDisplayLanguage(locale20);
        java.lang.String str22 = locale8.getDisplayCountry(locale20);
        java.lang.String str23 = locale1.getDisplayVariant(locale8);
        java.lang.String str24 = locale1.getCountry();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale1);
        java.lang.String str26 = locale1.getScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = locale1.getUnicodeLocaleType("und-anglais");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: und-anglais");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str11, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh-TW" + "'", str12, "zh-TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zho" + "'", str15, "zho");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Taiwan" + "'", str18, "Taiwan");
        org.junit.Assert.assertEquals(locale20.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Italian" + "'", str21, "Italian");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test08062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08062");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        long long12 = fraction8.longValue();
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale13.toLanguageTag();
        java.lang.String str19 = locale13.getDisplayVariant();
        java.lang.String str20 = locale13.getVariant();
        boolean boolean21 = fraction8.equals((java.lang.Object) str20);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        long long32 = fraction30.longValue();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction26.multiply(fraction30);
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.abs();
        long long44 = fraction42.longValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction38.multiply(fraction42);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction30.subtract(fraction45);
        org.apache.commons.math.fraction.Fraction fraction49 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str50 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction49);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction30.subtract(fraction49);
        org.apache.commons.math.fraction.Fraction fraction52 = fraction8.divide(fraction30);
        java.text.ParsePosition parsePosition54 = new java.text.ParsePosition((int) '4');
        parsePosition54.setErrorIndex(600);
        boolean boolean57 = fraction8.equals((java.lang.Object) 600);
        org.apache.commons.math.fraction.Fraction fraction58 = fraction8.reciprocal();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1 / 100" + "'", str50, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(fraction58);
    }

    @Test
    public void test08063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08063");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        java.lang.String str2 = locale0.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat4 = fractionFormat3.getNumeratorFormat();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = locale5.getDisplayCountry(locale6);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getNumberInstance(locale5);
        int int10 = numberFormat9.getMinimumFractionDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        numberFormat12.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9, numberFormat12);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        boolean boolean19 = numberFormat18.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance(locale21);
        boolean boolean23 = numberFormat22.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat(numberFormat26, numberFormat28);
        java.text.ParsePosition parsePosition32 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj33 = numberFormat28.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition32);
        properFractionFormat24.setNumeratorFormat(numberFormat28);
        int int35 = numberFormat28.getMinimumFractionDigits();
        properFractionFormat20.setWholeFormat(numberFormat28);
        fractionFormat16.setDenominatorFormat(numberFormat28);
        fractionFormat3.setDenominatorFormat(numberFormat28);
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.util.Locale locale41 = locale40.stripExtensions();
        java.util.Locale locale42 = locale41.stripExtensions();
        java.lang.String str43 = locale41.getLanguage();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getInstance(locale41);
        java.text.NumberFormat numberFormat45 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = new org.apache.commons.math.fraction.FractionFormat(numberFormat44, numberFormat45);
        java.text.NumberFormat.Field field48 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition49 = new java.text.FieldPosition((java.text.Format.Field) field48);
        java.lang.String str50 = fieldPosition49.toString();
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale52.getDisplayScript();
        java.lang.String str54 = locale51.getDisplayName(locale52);
        boolean boolean55 = fieldPosition49.equals((java.lang.Object) locale52);
        fieldPosition49.setEndIndex((int) '#');
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getCurrencyInstance(locale58);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        java.text.ParsePosition parsePosition63 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction64 = properFractionFormat60.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition63);
        boolean boolean65 = fieldPosition49.equals((java.lang.Object) parsePosition63);
        java.lang.String str66 = parsePosition63.toString();
        parsePosition63.setErrorIndex((int) (short) 10);
        java.lang.String str69 = parsePosition63.toString();
        int int70 = parsePosition63.getIndex();
        int int71 = parsePosition63.getErrorIndex();
        java.lang.Object obj72 = fractionFormat46.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=1]", parsePosition63);
        org.apache.commons.math.fraction.Fraction fraction73 = fractionFormat3.parse("taiwan (ZH_TW,10,000%)", parsePosition63);
        int int74 = parsePosition63.getErrorIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Japan" + "'", str8, "Japan");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "anglais_KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "anglais" + "'", str43, "anglais");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(field48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str50, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Chinese (Taiwan)" + "'", str54, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNull(fraction64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str66, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=10]" + "'", str69, "java.text.ParsePosition[index=1,errorIndex=10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNull(fraction73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    public void test08064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08064");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale0.getDisplayCountry(locale3);
        java.lang.String str8 = locale0.getISO3Language();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance(locale0);
        boolean boolean10 = numberFormat9.isGroupingUsed();
        boolean boolean11 = numberFormat9.isParseIntegerOnly();
        java.lang.String str13 = numberFormat9.format((double) 7260);
        java.lang.StringBuffer stringBuffer15 = null;
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition(10000);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer18 = numberFormat9.format((long) 14401, stringBuffer15, fieldPosition17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "France" + "'", str7, "France");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "7\240\u20ac" + "'", str13, "7\240\u20ac");
    }

    @Test
    public void test08065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08065");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder1.setLanguageTag("en");
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.PRC;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.util.Locale.Builder builder7 = builder1.setLocale(locale5);
        java.util.Locale locale8 = builder7.build();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.lang.String str15 = locale9.getDisplayName(locale12);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale16.getDisplayScript();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale18.getISO3Language();
        java.lang.String str20 = locale16.getDisplayScript(locale18);
        java.lang.String str21 = locale9.getDisplayLanguage(locale18);
        java.lang.String str22 = locale8.getDisplayVariant(locale18);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale8);
        boolean boolean24 = locale0.equals((java.lang.Object) numberFormat23);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str6, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "anglais_KOR");
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "anglais (KOR)" + "'", str15, "anglais (KOR)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "anglais" + "'", str21, "anglais");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test08066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08066");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        boolean boolean5 = numberFormat3.isGroupingUsed();
        boolean boolean6 = numberFormat3.isGroupingUsed();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj10 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat13 = properFractionFormat12.getDenominatorFormat();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        boolean boolean20 = numberFormat19.isGroupingUsed();
        properFractionFormat17.setWholeFormat(numberFormat19);
        java.text.NumberFormat numberFormat22 = properFractionFormat17.getWholeFormat();
        java.lang.String str24 = numberFormat22.format((double) 1.0f);
        numberFormat22.setMaximumIntegerDigits((int) (byte) 100);
        numberFormat22.setParseIntegerOnly(false);
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale32 = java.util.Locale.getDefault(category31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale33);
        java.util.Locale.setDefault(category31, locale33);
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category31, locale36);
        java.lang.String str38 = locale30.getDisplayLanguage(locale36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getCurrencyInstance(locale41);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.text.ParsePosition parsePosition46 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction47 = properFractionFormat43.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition46);
        java.lang.Object obj48 = fractionFormat39.parseObject("214,748,364,700%", parsePosition46);
        java.lang.String str49 = parsePosition46.toString();
        java.lang.Object obj50 = numberFormat22.parseObject("600", parsePosition46);
        org.apache.commons.math.fraction.Fraction fraction51 = properFractionFormat12.parse("\uc911\uad6d\uc5b4", parsePosition46);
        java.lang.Object obj52 = numberFormat3.parseObject("10,000%", parsePosition46);
        parsePosition46.setIndex(6000);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100%" + "'", str24, "100%");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "anglais" + "'", str38, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNull(fraction47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=3]" + "'", str49, "java.text.ParsePosition[index=1,errorIndex=3]");
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(fraction51);
        org.junit.Assert.assertEquals("'" + obj52 + "' != '" + 0L + "'", obj52, 0L);
    }

    @Test
    public void test08067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08067");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("chinois");
        java.lang.String str7 = locale6.getScript();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat8);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency11 = numberFormat10.getCurrency();
        java.lang.String str13 = numberFormat10.format(1.0d);
        int int14 = numberFormat10.getMinimumIntegerDigits();
        int int15 = numberFormat10.getMinimumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat10);
        int int17 = numberFormat10.getMinimumIntegerDigits();
        java.lang.StringBuffer stringBuffer19 = null;
        java.text.NumberFormat.Field field20 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition21 = new java.text.FieldPosition((java.text.Format.Field) field20);
        int int22 = fieldPosition21.getField();
        java.text.Format.Field field23 = fieldPosition21.getFieldAttribute();
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition(field23, (int) (short) 10);
        int int26 = fieldPosition25.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer27 = numberFormat10.format(0.0d, stringBuffer19, fieldPosition25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "chinois");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "100 %" + "'", str13, "100 %");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(field20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(field23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
    }

    @Test
    public void test08068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08068");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        float float4 = fraction2.floatValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.negate();
        java.lang.String str6 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction5);
        double double7 = fraction5.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        long long19 = fraction17.longValue();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction13.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        long long31 = fraction29.longValue();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction25.multiply(fraction29);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction17.subtract(fraction32);
        org.apache.commons.math.fraction.Fraction fraction36 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str37 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction36);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction17.subtract(fraction36);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction8.add(fraction38);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1 / 1" + "'", str3, "1 / 1");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-1 / 1" + "'", str6, "-1 / 1");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1 / 100" + "'", str37, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
    }

    @Test
    public void test08069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08069");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        boolean boolean5 = numberFormat3.isGroupingUsed();
        boolean boolean6 = numberFormat3.isGroupingUsed();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj10 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition9);
        numberFormat3.setParseIntegerOnly(false);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance(locale13);
        numberFormat14.setGroupingUsed(true);
        int int17 = numberFormat14.getMaximumFractionDigits();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayScript();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.lang.String str22 = locale18.getDisplayScript(locale20);
        java.lang.String str23 = locale18.toLanguageTag();
        java.util.Set<java.lang.String> strSet24 = locale18.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale18);
        java.text.NumberFormat numberFormat26 = fractionFormat25.getDenominatorFormat();
        java.util.Locale locale27 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale27);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat30, numberFormat32);
        boolean boolean34 = numberFormat32.isGroupingUsed();
        boolean boolean35 = numberFormat32.isGroupingUsed();
        fractionFormat28.setNumeratorFormat(numberFormat32);
        java.lang.Object obj37 = numberFormat32.clone();
        java.text.ParseException parseException40 = new java.text.ParseException("Taiwan", (int) (byte) 100);
        boolean boolean41 = numberFormat32.equals((java.lang.Object) parseException40);
        java.util.Locale locale43 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale43);
        java.lang.String str46 = fractionFormat44.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat47 = fractionFormat44.getNumeratorFormat();
        numberFormat47.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency50 = numberFormat47.getCurrency();
        numberFormat32.setCurrency(currency50);
        numberFormat26.setCurrency(currency50);
        numberFormat26.setMinimumFractionDigits(14400);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3, numberFormat14, numberFormat26);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "und" + "'", str23, "und");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals(locale43.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100 0 / 1" + "'", str46, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(currency50);
        org.junit.Assert.assertEquals(currency50.toString(), "XXX");
    }

    @Test
    public void test08070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08070");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getEndIndex();
        fieldPosition1.setBeginIndex((int) (byte) 100);
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str9 = fractionFormat7.format((java.lang.Object) 100);
        boolean boolean10 = fieldPosition1.equals((java.lang.Object) fractionFormat7);
        java.text.Format.Field field11 = fieldPosition1.getFieldAttribute();
        fieldPosition1.setEndIndex((int) (short) 100);
        int int14 = fieldPosition1.getEndIndex();
        fieldPosition1.setEndIndex((-120));
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100 0 / 1" + "'", str9, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
    }

    @Test
    public void test08071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08071");
        java.util.Locale locale2 = new java.util.Locale("it", "\uc911\uad6d\uc5b4");
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayCountry(locale4);
        java.util.Set<java.lang.String> strSet7 = locale4.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        boolean boolean9 = locale4.hasExtensions();
        java.util.Locale locale12 = new java.util.Locale("anglais", "kor");
        java.lang.String str13 = locale4.getDisplayLanguage(locale12);
        java.text.NumberFormat.Field field14 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition15 = new java.text.FieldPosition((java.text.Format.Field) field14);
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getInstance(locale16);
        boolean boolean18 = field14.equals((java.lang.Object) locale16);
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale16.getISO3Language();
        java.util.Locale locale21 = locale16.stripExtensions();
        java.lang.String str22 = locale12.getDisplayName(locale21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        java.lang.String str24 = locale2.getDisplayScript(locale12);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale2);
        java.text.NumberFormat.Field field26 = java.text.NumberFormat.Field.EXPONENT;
        java.text.FieldPosition fieldPosition27 = new java.text.FieldPosition((java.text.Format.Field) field26);
        java.text.FieldPosition fieldPosition29 = new java.text.FieldPosition((java.text.Format.Field) field26, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction33 = new org.apache.commons.math.fraction.Fraction((double) (-1.0f), (double) 10, (int) (byte) -1);
        long long34 = fraction33.longValue();
        boolean boolean35 = field26.equals((java.lang.Object) fraction33);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction33.negate();
        java.lang.String str37 = numberFormat25.format((java.lang.Object) fraction33);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Japan" + "'", str6, "Japan");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals(locale12.toString(), "anglais_KOR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(field14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "eng" + "'", str20, "eng");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "anglais (KOR)" + "'", str22, "anglais (KOR)");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(field26);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-100%" + "'", str37, "-100%");
    }

    @Test
    public void test08072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08072");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale0);
        java.lang.String str4 = locale0.getDisplayVariant();
        java.util.Locale locale8 = new java.util.Locale("Japanese (Japan)", "java.text.NumberFormat$Field(currency)", "\uc911\uad6d\uc5b4");
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale8.getScript();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = locale11.getScript();
        java.util.Locale locale16 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str17 = locale11.getDisplayScript(locale16);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getNumberInstance(locale16);
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet20 = locale16.getExtensionKeys();
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale locale22 = java.util.Locale.PRC;
        java.lang.String str23 = locale21.getDisplayName(locale22);
        java.lang.String str24 = locale16.getDisplayName(locale21);
        java.util.Locale locale25 = locale21.stripExtensions();
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = locale26.getDisplayCountry(locale27);
        java.util.Set<java.lang.String> strSet30 = locale27.getUnicodeLocaleAttributes();
        java.lang.String str31 = locale25.getDisplayVariant(locale27);
        java.lang.String str33 = locale25.getExtension('a');
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getIntegerInstance(locale25);
        java.util.Locale locale36 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        java.lang.String str38 = locale36.getDisplayCountry();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getIntegerInstance(locale36);
        java.lang.String str40 = locale36.toLanguageTag();
        java.lang.String str41 = locale25.getDisplayCountry(locale36);
        java.util.Set<java.lang.Character> charSet42 = locale36.getExtensionKeys();
        java.lang.String str43 = locale36.getDisplayCountry();
        java.lang.String str44 = locale8.getDisplayLanguage(locale36);
        java.lang.String str45 = locale0.getDisplayName(locale8);
        java.lang.String str46 = locale0.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(locale16.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str23, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str24, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Japan" + "'", str29, "Japan");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "und" + "'", str40, "und");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Canada" + "'", str41, "Canada");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "japanese (japan)" + "'", str44, "japanese (japan)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Italian" + "'", str45, "Italian");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "it" + "'", str46, "it");
    }

    @Test
    public void test08073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08073");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale2.getDisplayScript(locale4);
        java.util.Locale.setDefault(category0, locale4);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale4);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.math.RoundingMode roundingMode9 = numberFormat7.getRoundingMode();
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.util.Locale locale13 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.lang.String str15 = locale13.getDisplayCountry();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getIntegerInstance(locale13);
        java.lang.String str17 = locale10.getDisplayCountry(locale13);
        java.lang.String str18 = locale10.getISO3Language();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale10);
        boolean boolean20 = numberFormat19.isGroupingUsed();
        boolean boolean21 = numberFormat19.isParseIntegerOnly();
        numberFormat19.setGroupingUsed(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7, numberFormat19);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + roundingMode9 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode9.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "France" + "'", str17, "France");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fra" + "'", str18, "fra");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08074");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.text.NumberFormat numberFormat29 = properFractionFormat28.getWholeFormat();
        java.lang.Object obj30 = properFractionFormat28.clone();
        java.util.Locale locale31 = java.util.Locale.TAIWAN;
        java.lang.String str32 = locale31.toLanguageTag();
        java.lang.String str34 = locale31.getExtension('x');
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale31);
        java.text.NumberFormat.Field field37 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition38 = new java.text.FieldPosition((java.text.Format.Field) field37);
        java.lang.String str39 = fieldPosition38.toString();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale41.getDisplayScript();
        java.lang.String str43 = locale40.getDisplayName(locale41);
        boolean boolean44 = fieldPosition38.equals((java.lang.Object) locale41);
        fieldPosition38.setEndIndex((int) '#');
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getCurrencyInstance(locale47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.text.ParsePosition parsePosition52 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction53 = properFractionFormat49.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition52);
        boolean boolean54 = fieldPosition38.equals((java.lang.Object) parsePosition52);
        java.lang.String str55 = parsePosition52.toString();
        parsePosition52.setErrorIndex((int) (short) 10);
        java.lang.Object obj58 = numberFormat35.parseObject("java.text.ParseException: zh_TW", parsePosition52);
        java.util.Locale locale62 = new java.util.Locale("anglais", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]");
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getCurrencyInstance(locale62);
        java.text.ParsePosition parsePosition66 = new java.text.ParsePosition((int) '#');
        parsePosition66.setErrorIndex(600);
        java.lang.String str69 = parsePosition66.toString();
        int int70 = parsePosition66.getErrorIndex();
        java.lang.Object obj71 = numberFormat63.parseObject("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)", parsePosition66);
        java.lang.Object obj72 = numberFormat35.parseObject("java.text.parseexception: zh_tw", parsePosition66);
        properFractionFormat28.setWholeFormat(numberFormat35);
        java.lang.String str75 = numberFormat35.format((double) (-0.1f));
        java.lang.StringBuffer stringBuffer77 = null;
        java.text.FieldPosition fieldPosition78 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer79 = numberFormat35.format((double) (byte) 64, stringBuffer77, fieldPosition78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zh-TW" + "'", str32, "zh-TW");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(field37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str39, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinese (Taiwan)" + "'", str43, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNull(fraction53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str55, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertEquals(locale62.toString(), "anglais_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "java.text.ParsePosition[index=35,errorIndex=600]" + "'", str69, "java.text.ParsePosition[index=35,errorIndex=600]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 600 + "'", int70 == 600);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "-10%" + "'", str75, "-10%");
    }

    @Test
    public void test08075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08075");
        java.util.Locale locale3 = new java.util.Locale("\uc911\uad6d\uc5b4", "", "Taiwan");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale3);
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7, numberFormat9);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj14 = numberFormat9.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition13);
        java.lang.String str15 = parsePosition13.toString();
        boolean boolean17 = parsePosition13.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        java.lang.Object obj18 = numberFormat4.parseObject("\u6cd5\u6587\u6cd5\u570b)", parsePosition13);
        int int19 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale21.getISO3Language();
        java.util.Locale.setDefault(category20, locale21);
        java.lang.String str24 = locale21.getDisplayVariant();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getIntegerInstance(locale21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat25);
        java.lang.Object obj28 = numberFormat4.clone();
        org.junit.Assert.assertEquals(locale3.toString(), "\uc911\uad6d\uc5b4__Taiwan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str15, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(obj28);
    }

    @Test
    public void test08076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08076");
        java.text.NumberFormat numberFormat0 = null;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance(locale1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        boolean boolean6 = numberFormat5.isGroupingUsed();
        properFractionFormat3.setWholeFormat(numberFormat5);
        java.text.NumberFormat numberFormat8 = properFractionFormat3.getWholeFormat();
        java.util.Currency currency9 = numberFormat8.getCurrency();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getISO3Language();
        java.util.Set<java.lang.String> strSet12 = locale10.getUnicodeLocaleKeys();
        java.lang.String str13 = locale10.getISO3Country();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getNumberInstance(locale10);
        numberFormat14.setMinimumFractionDigits(0);
        java.util.Currency currency17 = numberFormat14.getCurrency();
        java.lang.Object obj18 = numberFormat14.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14);
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.lang.String str23 = locale20.getDisplayCountry(locale21);
        java.util.Set<java.lang.String> strSet24 = locale21.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getIntegerInstance(locale21);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition((int) 'a');
        java.lang.String str28 = parsePosition27.toString();
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder29.clearExtensions();
        java.util.Locale.Builder builder31 = builder29.clear();
        java.util.Locale.Builder builder32 = builder31.clear();
        boolean boolean33 = parsePosition27.equals((java.lang.Object) builder32);
        java.util.Locale.Category category34 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale35 = java.util.Locale.getDefault(category34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale36);
        java.util.Locale.setDefault(category34, locale36);
        java.util.Locale locale39 = java.util.Locale.getDefault(category34);
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale39);
        boolean boolean42 = parsePosition27.equals((java.lang.Object) locale39);
        java.lang.String str43 = locale21.getDisplayScript(locale39);
        java.util.Locale locale44 = java.util.Locale.ITALIAN;
        java.lang.String str45 = locale44.getDisplayCountry();
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.util.Locale locale47 = java.util.Locale.PRC;
        java.lang.String str48 = locale46.getDisplayName(locale47);
        java.lang.String str49 = locale44.getDisplayCountry(locale46);
        java.lang.String str50 = locale39.getDisplayLanguage(locale44);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance(locale44);
        java.util.Locale locale52 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale52);
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getInstance(locale54);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance(locale56);
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = new org.apache.commons.math.fraction.FractionFormat(numberFormat55, numberFormat57);
        boolean boolean59 = numberFormat57.isGroupingUsed();
        boolean boolean60 = numberFormat57.isGroupingUsed();
        fractionFormat53.setNumeratorFormat(numberFormat57);
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getIntegerInstance(locale62);
        java.lang.String str65 = numberFormat63.format(0.0d);
        java.util.Locale locale66 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleAttributes();
        boolean boolean68 = numberFormat63.equals((java.lang.Object) strSet67);
        org.apache.commons.math.fraction.FractionFormat fractionFormat69 = new org.apache.commons.math.fraction.FractionFormat(numberFormat57, numberFormat63);
        java.util.Locale locale70 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getInstance(locale70);
        boolean boolean72 = numberFormat71.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        int int74 = numberFormat71.getMaximumIntegerDigits();
        numberFormat71.setMaximumFractionDigits(100);
        fractionFormat69.setNumeratorFormat(numberFormat71);
        java.text.NumberFormat numberFormat78 = fractionFormat69.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat51, numberFormat78);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat8, numberFormat78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: whole format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "kor" + "'", str11, "kor");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Japan" + "'", str23, "Japan");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str28, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + category34 + "' != '" + java.util.Locale.Category.FORMAT + "'", category34.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale35);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str48, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "coreano" + "'", str50, "coreano");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0" + "'", str65, "0");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertNotNull(numberFormat78);
    }

    @Test
    public void test08077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08077");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        numberFormat5.setGroupingUsed(true);
        numberFormat5.setMaximumIntegerDigits((int) (short) 100);
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale14);
        java.util.Currency currency17 = numberFormat16.getCurrency();
        numberFormat16.setMinimumIntegerDigits(1);
        numberFormat16.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj25 = numberFormat16.parseObject("Japan", parsePosition24);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException29 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str30 = fractionConversionException29.getPattern();
        java.lang.Throwable[] throwableArray31 = fractionConversionException29.getSuppressed();
        java.lang.Object[] objArray32 = fractionConversionException29.getArguments();
        boolean boolean33 = parsePosition24.equals((java.lang.Object) objArray32);
        int int34 = parsePosition24.getIndex();
        int int35 = parsePosition24.getIndex();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        boolean boolean41 = numberFormat40.isGroupingUsed();
        properFractionFormat38.setWholeFormat(numberFormat40);
        java.text.NumberFormat numberFormat43 = properFractionFormat38.getWholeFormat();
        java.util.Currency currency44 = numberFormat43.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = new org.apache.commons.math.fraction.FractionFormat(numberFormat43);
        boolean boolean46 = parsePosition24.equals((java.lang.Object) numberFormat43);
        int int47 = numberFormat43.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat43);
        java.text.ParsePosition parsePosition51 = new java.text.ParsePosition((int) (byte) 87);
        java.lang.Object obj52 = fractionFormat48.parseObject("-\244 14,399.00", parsePosition51);
        org.apache.commons.math.fraction.Fraction fraction54 = fractionFormat48.parse("200,000%");
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "TWD");
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str30, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(fraction54);
    }

    @Test
    public void test08078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08078");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction2.multiply(fraction6);
        org.apache.commons.math.fraction.Fraction fraction8 = fraction2.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.reciprocal();
        java.lang.String str10 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction8);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "7 / 20" + "'", str10, "7 / 20");
    }

    @Test
    public void test08079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08079");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        numberFormat1.setMaximumFractionDigits(2147483647);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        java.lang.Number number19 = numberFormat1.parse("\ud55c\uad6d\uc5b4", parsePosition16);
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getCurrencyInstance(locale21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.util.Locale locale25 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale25);
        java.lang.String str28 = fractionFormat26.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat29 = fractionFormat26.getNumeratorFormat();
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Locale locale33 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.lang.String str35 = locale33.getDisplayCountry();
        java.lang.String str36 = locale30.getDisplayName(locale33);
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.lang.String str38 = locale37.getDisplayScript();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale39.getISO3Language();
        java.lang.String str41 = locale37.getDisplayScript(locale39);
        java.lang.String str42 = locale30.getDisplayLanguage(locale39);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getNumberInstance(locale30);
        fractionFormat26.setNumeratorFormat(numberFormat43);
        properFractionFormat23.setWholeFormat(numberFormat43);
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getInstance(locale47);
        boolean boolean49 = numberFormat48.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.text.ParsePosition parsePosition53 = new java.text.ParsePosition((int) '4');
        org.apache.commons.math.fraction.Fraction fraction54 = properFractionFormat50.parse("0%", parsePosition53);
        java.lang.Object obj55 = properFractionFormat23.parseObject("\u6cd5\u6587\u6cd5\u570b)", parsePosition53);
        java.text.NumberFormat.Field field57 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition58 = new java.text.FieldPosition((java.text.Format.Field) field57);
        java.lang.String str59 = fieldPosition58.toString();
        java.util.Locale locale60 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.lang.String str62 = locale61.getDisplayScript();
        java.lang.String str63 = locale60.getDisplayName(locale61);
        boolean boolean64 = fieldPosition58.equals((java.lang.Object) locale61);
        fieldPosition58.setEndIndex((int) '#');
        java.util.Locale locale67 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getCurrencyInstance(locale67);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat68);
        java.text.ParsePosition parsePosition72 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction73 = properFractionFormat69.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition72);
        boolean boolean74 = fieldPosition58.equals((java.lang.Object) parsePosition72);
        java.lang.String str75 = parsePosition72.toString();
        int int76 = parsePosition72.getIndex();
        org.apache.commons.math.fraction.Fraction fraction77 = properFractionFormat23.parse("java.text.ParsePosition[index=52,errorIndex=-1]", parsePosition72);
        java.lang.Number number78 = numberFormat1.parse("-1 / 1", parsePosition72);
        int int79 = parsePosition72.getErrorIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "100 0 / 1" + "'", str28, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "anglais_KOR");
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "anglais (KOR)" + "'", str36, "anglais (KOR)");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "kor" + "'", str40, "kor");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "anglais" + "'", str42, "anglais");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(fraction54);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(field57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str59, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Chinese (Taiwan)" + "'", str63, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNull(fraction73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str75, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNull(fraction77);
        org.junit.Assert.assertNull(number78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
    }

    @Test
    public void test08080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08080");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayName(locale4);
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale4);
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field8);
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field8, (int) (byte) 10);
        boolean boolean12 = fieldPosition1.equals((java.lang.Object) field8);
        java.text.NumberFormat.Field field13 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition15 = new java.text.FieldPosition((java.text.Format.Field) field13, (int) '#');
        java.text.Format.Field field16 = fieldPosition15.getFieldAttribute();
        boolean boolean17 = field8.equals((java.lang.Object) fieldPosition15);
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.util.Locale locale19 = locale18.stripExtensions();
        boolean boolean20 = field8.equals((java.lang.Object) locale19);
        java.util.Locale.Category category21 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale22 = java.util.Locale.getDefault(category21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale23);
        java.util.Locale.setDefault(category21, locale23);
        java.util.Locale locale28 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category21, locale28);
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction39.abs();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction33.add(fraction39);
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.negate();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction42.divide(fraction45);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.lang.String str49 = locale48.getDisplayScript();
        java.lang.String str50 = locale48.getScript();
        boolean boolean51 = fraction47.equals((java.lang.Object) locale48);
        java.util.Locale.setDefault(category21, locale48);
        java.util.Locale locale53 = java.util.Locale.getDefault(category21);
        java.util.Locale locale54 = java.util.Locale.TAIWAN;
        java.lang.String str55 = locale54.toLanguageTag();
        java.lang.String str56 = locale54.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale54);
        java.util.Locale.setDefault(category21, locale54);
        boolean boolean59 = field8.equals((java.lang.Object) category21);
        java.util.Locale locale60 = java.util.Locale.getDefault(category21);
        java.util.Locale locale61 = java.util.Locale.getDefault(category21);
        java.util.Locale locale62 = java.util.Locale.getDefault(category21);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(field13);
        org.junit.Assert.assertNotNull(field16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "anglais_KOR");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.FORMAT + "'", category21.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals(locale28.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "zh-TW" + "'", str55, "zh-TW");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str56, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
    }

    @Test
    public void test08081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08081");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        boolean boolean9 = numberFormat7.equals((java.lang.Object) locale8);
        boolean boolean10 = fraction5.equals((java.lang.Object) locale8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction5.abs();
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        boolean boolean14 = fraction11.equals((java.lang.Object) locale12);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        long long25 = fraction23.longValue();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.multiply(fraction23);
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        long long37 = fraction35.longValue();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction31.multiply(fraction35);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction19.divide(fraction38);
        org.apache.commons.math.fraction.Fraction fraction40 = fraction19.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction11.subtract(fraction40);
        int int42 = fraction41.getDenominator();
        long long43 = fraction41.longValue();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction41.abs();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction41.negate();
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.lang.String str47 = locale46.getScript();
        java.util.Locale locale51 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str52 = locale46.getDisplayScript(locale51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale46);
        java.util.Set<java.lang.String> strSet54 = locale46.getUnicodeLocaleKeys();
        java.lang.String str55 = locale46.getScript();
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getNumberInstance(locale46);
        java.lang.String str57 = locale46.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            int int58 = fraction45.compareTo((java.lang.Object) locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Locale cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "anglais_KOR");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 120 + "'", int42 == 120);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-119L) + "'", long43 == (-119L));
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals(locale51.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "en" + "'", str57, "en");
    }

    @Test
    public void test08082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08082");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 100);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.negate();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.abs();
        long long12 = fraction10.longValue();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction6.multiply(fraction10);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.abs();
        long long24 = fraction22.longValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction18.multiply(fraction22);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction6.divide(fraction25);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction6.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction29 = new org.apache.commons.math.fraction.Fraction((double) 1L);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction27.divide(fraction29);
        double double31 = fraction29.doubleValue();
        int int32 = fraction29.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction29.abs();
        long long34 = fraction33.longValue();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction1.subtract(fraction35);
        java.lang.String str37 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction1);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) 10, 60);
        org.apache.commons.math.fraction.Fraction fraction41 = fraction1.divide(fraction40);
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance();
        numberFormat42.setMaximumIntegerDigits(2147483647);
        java.lang.String str46 = numberFormat42.format((long) 2147483647);
        java.util.Locale locale50 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale50);
        int int52 = numberFormat51.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = new org.apache.commons.math.fraction.FractionFormat(numberFormat51);
        numberFormat51.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode56 = numberFormat51.getRoundingMode();
        numberFormat42.setRoundingMode(roundingMode56);
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = locale59.getDisplayScript();
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale61.getISO3Language();
        java.lang.String str63 = locale59.getDisplayScript(locale61);
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale59);
        java.util.Locale locale66 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getCurrencyInstance(locale66);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        java.text.ParsePosition parsePosition71 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction72 = properFractionFormat68.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition71);
        org.apache.commons.math.fraction.Fraction fraction73 = fractionFormat64.parse("\uc911\uad6d\uc5b4", parsePosition71);
        java.lang.Object obj74 = numberFormat42.parseObject("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition71);
        boolean boolean75 = fraction40.equals((java.lang.Object) "java.text.ParsePosition[index=0,errorIndex=0]");
        java.lang.String str76 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction40);
        double double77 = fraction40.doubleValue();
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "100 / 1" + "'", str37, "100 / 1");
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "214,748,364,700%" + "'", str46, "214,748,364,700%");
        org.junit.Assert.assertEquals(locale50.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode56 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode56.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "kor" + "'", str62, "kor");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNull(fraction72);
        org.junit.Assert.assertNull(fraction73);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1 / 6" + "'", str76, "1 / 6");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.16666666666666666d + "'", double77 == 0.16666666666666666d);
    }

    @Test
    public void test08083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08083");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale0.getDisplayCountry(locale3);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        boolean boolean15 = numberFormat14.isGroupingUsed();
        properFractionFormat12.setWholeFormat(numberFormat14);
        java.text.NumberFormat numberFormat17 = properFractionFormat12.getWholeFormat();
        java.util.Locale locale22 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        numberFormat23.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str27 = numberFormat23.format((double) 0.0f);
        int int28 = numberFormat23.getMaximumIntegerDigits();
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getInstance(locale29);
        java.util.Currency currency32 = numberFormat31.getCurrency();
        numberFormat31.setMinimumIntegerDigits(1);
        java.text.NumberFormat numberFormat35 = null;
        java.util.Locale locale39 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        numberFormat40.setMinimumIntegerDigits((int) (short) -1);
        boolean boolean43 = numberFormat40.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = new org.apache.commons.math.fraction.FractionFormat(numberFormat35, numberFormat40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23, numberFormat31, numberFormat35);
        java.util.Locale locale50 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale50);
        int int52 = numberFormat51.getMaximumIntegerDigits();
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance(locale53);
        boolean boolean55 = numberFormat54.isGroupingUsed();
        java.util.Currency currency56 = numberFormat54.getCurrency();
        numberFormat51.setCurrency(currency56);
        java.util.Currency currency58 = numberFormat51.getCurrency();
        java.math.RoundingMode roundingMode59 = numberFormat51.getRoundingMode();
        java.text.ParsePosition parsePosition62 = new java.text.ParsePosition((int) 'a');
        java.lang.String str63 = parsePosition62.toString();
        java.lang.String str64 = parsePosition62.toString();
        java.lang.Object obj65 = numberFormat51.parseObject("zho", parsePosition62);
        java.lang.Object obj66 = numberFormat23.parseObject("", parsePosition62);
        int int67 = parsePosition62.getErrorIndex();
        java.lang.Number number68 = numberFormat17.parse("100 0 / 1", parsePosition62);
        fractionFormat9.setNumeratorFormat(numberFormat17);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "France" + "'", str7, "France");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals(locale22.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0%" + "'", str27, "0%");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(currency32);
        org.junit.Assert.assertEquals(currency32.toString(), "TWD");
        org.junit.Assert.assertEquals(locale39.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals(locale50.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(currency56);
        org.junit.Assert.assertEquals(currency56.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency58);
        org.junit.Assert.assertEquals(currency58.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode59 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode59.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str63, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str64, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNull(number68);
    }

    @Test
    public void test08084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08084");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        boolean boolean6 = locale1.hasExtensions();
        java.lang.String str7 = locale1.getDisplayLanguage();
        java.lang.String str8 = locale1.getDisplayScript();
        java.lang.Object obj9 = locale1.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "");
    }

    @Test
    public void test08085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08085");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale locale17 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.lang.String str20 = locale14.getDisplayName(locale17);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale14.getDisplayLanguage(locale23);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale14);
        fractionFormat10.setNumeratorFormat(numberFormat27);
        properFractionFormat7.setWholeFormat(numberFormat27);
        fractionFormat4.setNumeratorFormat(numberFormat27);
        java.text.NumberFormat numberFormat31 = fractionFormat4.getNumeratorFormat();
        java.text.NumberFormat numberFormat32 = fractionFormat4.getDenominatorFormat();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        numberFormat33.setMaximumIntegerDigits(2147483647);
        java.lang.String str37 = numberFormat33.format((long) 'a');
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale38);
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        numberFormat40.setMinimumIntegerDigits(1728000);
        numberFormat40.setMaximumIntegerDigits(600);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32, numberFormat33, numberFormat40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        org.apache.commons.math.fraction.Fraction fraction48 = properFractionFormat46.parse("-92 / 1");
        int int49 = fraction48.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction48.reciprocal();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "anglais_KOR");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "anglais (KOR)" + "'", str20, "anglais (KOR)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "anglais" + "'", str26, "anglais");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "9,700%" + "'", str37, "9,700%");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-92) + "'", int49 == (-92));
        org.junit.Assert.assertNotNull(fraction50);
    }

    @Test
    public void test08086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08086");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.toLanguageTag();
        java.lang.String str2 = locale0.getVariant();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder3.setScript("");
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.lang.String str9 = locale6.getDisplayLanguage(locale8);
        java.util.Locale.Builder builder10 = builder5.setLocale(locale6);
        java.lang.String str11 = locale0.getDisplayVariant(locale6);
        java.lang.String str12 = locale6.getScript();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale6);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category16 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale17 = java.util.Locale.getDefault(category16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale18);
        java.util.Locale.setDefault(category16, locale18);
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category16, locale21);
        java.lang.String str23 = locale15.getDisplayLanguage(locale21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale21);
        boolean boolean25 = locale21.hasExtensions();
        java.lang.String str26 = locale21.getCountry();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale21);
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance(locale28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = new org.apache.commons.math.fraction.FractionFormat(numberFormat29, numberFormat31);
        boolean boolean33 = numberFormat31.isGroupingUsed();
        boolean boolean34 = numberFormat31.isGroupingUsed();
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj38 = numberFormat31.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition37);
        numberFormat31.setGroupingUsed(false);
        int int41 = numberFormat31.getMinimumIntegerDigits();
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency43 = numberFormat42.getCurrency();
        java.lang.String str45 = numberFormat42.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.text.NumberFormat numberFormat47 = properFractionFormat46.getWholeFormat();
        numberFormat47.setParseIntegerOnly(false);
        java.util.Locale locale53 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance(locale53);
        numberFormat54.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str58 = numberFormat54.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = new org.apache.commons.math.fraction.FractionFormat(numberFormat54);
        java.lang.String str61 = numberFormat54.format((long) 600);
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getIntegerInstance(locale62);
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = new org.apache.commons.math.fraction.FractionFormat(numberFormat54, numberFormat63);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31, numberFormat47, numberFormat54);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat27, numberFormat54);
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh-TW" + "'", str1, "zh-TW");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinesisch" + "'", str9, "Chinesisch");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.FORMAT + "'", category16.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "anglais" + "'", str23, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CA" + "'", str26, "CA");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(currency43);
        org.junit.Assert.assertEquals(currency43.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "100 %" + "'", str45, "100 %");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals(locale53.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0%" + "'", str58, "0%");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "60,000%" + "'", str61, "60,000%");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(numberFormat63);
    }

    @Test
    public void test08087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08087");
        java.util.Locale locale1 = new java.util.Locale("kor");
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance(locale1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.lang.String str4 = locale3.getScript();
        java.util.Locale locale8 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str9 = locale3.getDisplayScript(locale8);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getNumberInstance(locale8);
        java.util.Set<java.lang.String> strSet11 = locale8.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet12 = locale8.getExtensionKeys();
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale locale14 = java.util.Locale.PRC;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = locale8.getDisplayName(locale13);
        java.util.Locale locale17 = locale13.stripExtensions();
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale19.getDisplayScript();
        java.lang.String str21 = locale18.getDisplayCountry(locale19);
        java.util.Set<java.lang.String> strSet22 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str23 = locale17.getDisplayVariant(locale19);
        java.lang.String str24 = locale1.getDisplayCountry(locale19);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getCurrencyInstance(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25);
        java.util.Locale locale28 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale28);
        java.lang.String str31 = fractionFormat29.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat32 = fractionFormat29.getNumeratorFormat();
        java.text.NumberFormat numberFormat33 = fractionFormat29.getNumeratorFormat();
        java.text.NumberFormat numberFormat34 = fractionFormat29.getNumeratorFormat();
        java.lang.String str36 = numberFormat34.format((long) 2147483647);
        java.math.RoundingMode roundingMode37 = numberFormat34.getRoundingMode();
        fractionFormat26.setDenominatorFormat(numberFormat34);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction40 = fractionFormat26.parse("en-US");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"en-US\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "kor");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(locale8.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str15, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str16, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Japan" + "'", str21, "Japan");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100 0 / 1" + "'", str31, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2,147,483,647" + "'", str36, "2,147,483,647");
        org.junit.Assert.assertTrue("'" + roundingMode37 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode37.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test08088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08088");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        boolean boolean47 = numberFormat45.equals((java.lang.Object) strArray46);
        java.lang.String str49 = numberFormat45.format((double) (byte) -1);
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale50.getDisplayCountry(locale51);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getNumberInstance(locale50);
        numberFormat54.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36, numberFormat45, numberFormat54);
        java.util.Locale locale61 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance(locale61);
        numberFormat62.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str66 = numberFormat62.format((double) 0.0f);
        java.util.Locale locale70 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getPercentInstance(locale70);
        int int72 = numberFormat71.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = new org.apache.commons.math.fraction.FractionFormat(numberFormat71);
        java.text.NumberFormat numberFormat74 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62, numberFormat71, numberFormat74);
        properFractionFormat57.setWholeFormat(numberFormat62);
        java.lang.String str78 = numberFormat62.format((long) 1727999);
        java.util.Locale locale82 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat83 = java.text.NumberFormat.getPercentInstance(locale82);
        numberFormat83.setMinimumIntegerDigits((int) (short) -1);
        boolean boolean86 = numberFormat83.isParseIntegerOnly();
        java.lang.Number number88 = numberFormat83.parse("-.019841270113829523000000000000000000000000000000000000000000%");
        int int89 = numberFormat83.getMinimumFractionDigits();
        java.text.AttributedCharacterIterator attributedCharacterIterator90 = numberFormat62.formatToCharacterIterator((java.lang.Object) int89);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "anglais_KOR");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "anglais (KOR)" + "'", str29, "anglais (KOR)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "anglais" + "'", str35, "anglais");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-100%" + "'", str49, "-100%");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Japan" + "'", str53, "Japan");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals(locale61.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0%" + "'", str66, "0%");
        org.junit.Assert.assertEquals(locale70.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "172,799,900%" + "'", str78, "172,799,900%");
        org.junit.Assert.assertEquals(locale82.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + number88 + "' != '" + (-1.9841270113829523E-4d) + "'", number88, (-1.9841270113829523E-4d));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(attributedCharacterIterator90);
    }

    @Test
    public void test08089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08089");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency8 = numberFormat5.getCurrency();
        boolean boolean9 = numberFormat5.isGroupingUsed();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale11);
        boolean boolean13 = numberFormat12.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16, numberFormat18);
        java.text.ParsePosition parsePosition22 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj23 = numberFormat18.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition22);
        properFractionFormat14.setNumeratorFormat(numberFormat18);
        java.text.NumberFormat numberFormat25 = properFractionFormat14.getWholeFormat();
        java.text.NumberFormat numberFormat26 = properFractionFormat14.getWholeFormat();
        int int27 = numberFormat26.getMaximumFractionDigits();
        numberFormat26.setGroupingUsed(false);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        boolean boolean36 = numberFormat35.isGroupingUsed();
        properFractionFormat33.setWholeFormat(numberFormat35);
        java.text.NumberFormat numberFormat38 = properFractionFormat33.getWholeFormat();
        java.text.ParsePosition parsePosition41 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number42 = numberFormat38.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition41);
        int int43 = parsePosition41.getIndex();
        int int44 = parsePosition41.getErrorIndex();
        int int45 = parsePosition41.getIndex();
        java.lang.Number number46 = numberFormat26.parse("france_CHINESE (TAIWAN)", parsePosition41);
        java.lang.String str47 = parsePosition41.toString();
        java.lang.Object obj48 = numberFormat5.parseObject("JAVA.TEXT.FIELDPOSITION[FIELD=100,ATTRIBUTE=NULL,BEGININDEX=0,ENDINDEX=0]", parsePosition41);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNull(number42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNull(number46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str47, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj48);
    }

    @Test
    public void test08090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08090");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        long long12 = fraction8.longValue();
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale13.toLanguageTag();
        java.lang.String str19 = locale13.getDisplayVariant();
        java.lang.String str20 = locale13.getVariant();
        boolean boolean21 = fraction8.equals((java.lang.Object) str20);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        long long32 = fraction30.longValue();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction26.multiply(fraction30);
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.abs();
        long long44 = fraction42.longValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction38.multiply(fraction42);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction30.subtract(fraction45);
        org.apache.commons.math.fraction.Fraction fraction49 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str50 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction49);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction30.subtract(fraction49);
        org.apache.commons.math.fraction.Fraction fraction52 = fraction8.divide(fraction30);
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.negate();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.abs();
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.negate();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction61.abs();
        long long63 = fraction61.longValue();
        org.apache.commons.math.fraction.Fraction fraction64 = fraction57.multiply(fraction61);
        org.apache.commons.math.fraction.Fraction fraction67 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction68 = fraction67.negate();
        org.apache.commons.math.fraction.Fraction fraction69 = fraction68.abs();
        org.apache.commons.math.fraction.Fraction fraction72 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction73 = fraction72.negate();
        org.apache.commons.math.fraction.Fraction fraction74 = fraction73.abs();
        long long75 = fraction73.longValue();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction69.multiply(fraction73);
        org.apache.commons.math.fraction.Fraction fraction77 = fraction61.subtract(fraction76);
        org.apache.commons.math.fraction.Fraction fraction80 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str81 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction80);
        org.apache.commons.math.fraction.Fraction fraction82 = fraction61.subtract(fraction80);
        long long83 = fraction80.longValue();
        org.apache.commons.math.fraction.Fraction fraction84 = fraction30.divide(fraction80);
        float float85 = fraction84.floatValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1 / 100" + "'", str50, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "-1 / 100" + "'", str81, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + (-0.8333333f) + "'", float85 == (-0.8333333f));
    }

    @Test
    public void test08091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08091");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        boolean boolean4 = field0.equals((java.lang.Object) locale2);
        java.util.Set<java.lang.String> strSet5 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str6 = locale2.getISO3Language();
        java.util.Locale locale7 = locale2.stripExtensions();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("Germany");
        java.lang.String str10 = locale2.getDisplayLanguage(locale9);
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.lang.String str16 = locale12.toLanguageTag();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale locale19 = builder17.build();
        java.lang.String str20 = locale19.getScript();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale21.toLanguageTag();
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale24.getISO3Language();
        java.lang.String str27 = locale21.getDisplayScript(locale24);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale21.getDisplayCountry(locale28);
        java.util.Locale locale31 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str32 = locale28.getDisplayLanguage(locale31);
        java.lang.String str33 = locale19.getDisplayCountry(locale31);
        java.lang.String str34 = locale12.getDisplayVariant(locale19);
        java.lang.String str35 = locale19.getLanguage();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getInstance(locale19);
        java.lang.String str37 = locale2.getDisplayLanguage(locale19);
        java.lang.String str38 = locale2.getDisplayVariant();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getNumberInstance(locale2);
        java.lang.String str40 = locale2.getISO3Country();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "germany");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str22, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh-TW" + "'", str23, "zh-TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zho" + "'", str26, "zho");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Taiwan" + "'", str29, "Taiwan");
        org.junit.Assert.assertEquals(locale31.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Italian" + "'", str32, "Italian");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "English" + "'", str37, "English");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test08092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08092");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder8 = builder3.setExtension('a', "TWN");
        java.util.Locale.Builder builder10 = builder3.removeUnicodeLocaleAttribute("zho");
        java.util.Locale.Builder builder12 = builder3.setRegion("fr");
        java.util.Locale locale14 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str16 = locale14.getDisplayCountry();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance(locale14);
        java.lang.String str18 = locale14.toLanguageTag();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale locale21 = builder19.build();
        java.lang.String str22 = locale21.getScript();
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str24 = locale23.getDisplayLanguage();
        java.lang.String str25 = locale23.toLanguageTag();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.lang.String str28 = locale26.getISO3Language();
        java.lang.String str29 = locale23.getDisplayScript(locale26);
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.lang.String str31 = locale23.getDisplayCountry(locale30);
        java.util.Locale locale33 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str34 = locale30.getDisplayLanguage(locale33);
        java.lang.String str35 = locale21.getDisplayCountry(locale33);
        java.lang.String str36 = locale14.getDisplayVariant(locale21);
        java.util.Locale locale37 = java.util.Locale.JAPAN;
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = locale38.getDisplayScript();
        java.lang.String str40 = locale37.getDisplayCountry(locale38);
        java.util.Set<java.lang.String> strSet41 = locale38.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getIntegerInstance(locale38);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getInstance(locale38);
        java.util.Set<java.lang.Character> charSet44 = locale38.getExtensionKeys();
        java.lang.String str45 = locale21.getDisplayVariant(locale38);
        java.lang.String str46 = locale38.getDisplayCountry();
        java.util.Locale.Builder builder47 = builder12.setLocale(locale38);
        java.lang.String str48 = locale38.getDisplayCountry();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str24, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh-TW" + "'", str25, "zh-TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "zho" + "'", str28, "zho");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Taiwan" + "'", str31, "Taiwan");
        org.junit.Assert.assertEquals(locale33.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Italian" + "'", str34, "Italian");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Japan" + "'", str40, "Japan");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(charSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test08093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08093");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits(2147483647);
        java.lang.String str4 = numberFormat0.format((long) 'a');
        int int5 = numberFormat0.getMinimumFractionDigits();
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale6.getISO3Language();
        java.lang.String str8 = locale6.getDisplayVariant();
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str15 = locale9.getDisplayScript(locale14);
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale16.getISO3Language();
        java.lang.String str19 = locale16.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale16);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance(locale16);
        java.lang.String str22 = locale9.getDisplayScript(locale16);
        java.lang.String str23 = locale6.getDisplayName(locale16);
        java.util.Locale locale26 = new java.util.Locale("CN", "10 / 1");
        java.lang.String str27 = locale6.getDisplayName(locale26);
        java.lang.StringBuffer stringBuffer28 = null;
        java.text.NumberFormat.Field field29 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition31 = new java.text.FieldPosition((java.text.Format.Field) field29, (int) '#');
        java.text.Format.Field field32 = fieldPosition31.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction38.multiply(fraction42);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction35.add(fraction42);
        boolean boolean45 = field32.equals((java.lang.Object) fraction35);
        java.text.FieldPosition fieldPosition46 = new java.text.FieldPosition(field32);
        java.text.Format.Field field47 = fieldPosition46.getFieldAttribute();
        int int48 = fieldPosition46.getEndIndex();
        java.text.Format.Field field49 = fieldPosition46.getFieldAttribute();
        fieldPosition46.setBeginIndex((int) 'u');
        int int52 = fieldPosition46.getEndIndex();
        java.text.Format.Field field53 = fieldPosition46.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer54 = numberFormat0.format((java.lang.Object) locale26, stringBuffer28, fieldPosition46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "9\240700 %" + "'", str4, "9\240700 %");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "jpn" + "'", str7, "jpn");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zho" + "'", str18, "zho");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zho" + "'", str19, "zho");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str23, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertEquals(locale26.toString(), "cn_10 / 1");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Japanese (Japan)" + "'", str27, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(field29);
        org.junit.Assert.assertNotNull(field32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(field47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(field49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(field53);
    }

    @Test
    public void test08094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08094");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale3.toLanguageTag();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getISO3Language();
        java.lang.String str9 = locale3.getDisplayScript(locale6);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale3.getDisplayCountry(locale10);
        java.lang.String str12 = locale3.getVariant();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getNumberInstance(locale3);
        numberFormat13.setMaximumIntegerDigits((-1));
        properFractionFormat2.setDenominatorFormat(numberFormat13);
        numberFormat13.setMinimumIntegerDigits(8654399);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.text.NumberFormat numberFormat20 = properFractionFormat19.getWholeFormat();
        java.text.NumberFormat numberFormat21 = properFractionFormat19.getWholeFormat();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.lang.Object obj25 = numberFormat23.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23);
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getCurrencyInstance(locale27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.util.Locale locale31 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale31);
        java.lang.String str34 = fractionFormat32.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat35 = fractionFormat32.getNumeratorFormat();
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.util.Locale locale37 = locale36.stripExtensions();
        java.util.Locale locale39 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale39);
        java.lang.String str41 = locale39.getDisplayCountry();
        java.lang.String str42 = locale36.getDisplayName(locale39);
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = locale43.getDisplayScript();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.lang.String str46 = locale45.getISO3Language();
        java.lang.String str47 = locale43.getDisplayScript(locale45);
        java.lang.String str48 = locale36.getDisplayLanguage(locale45);
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getNumberInstance(locale36);
        fractionFormat32.setNumeratorFormat(numberFormat49);
        properFractionFormat29.setWholeFormat(numberFormat49);
        fractionFormat26.setNumeratorFormat(numberFormat49);
        java.lang.String str54 = numberFormat49.format((-1.0d));
        java.lang.String str56 = numberFormat49.format(2.147483647E9d);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getInstance();
        numberFormat57.setParseIntegerOnly(true);
        java.math.RoundingMode roundingMode60 = numberFormat57.getRoundingMode();
        int int61 = numberFormat57.getMinimumIntegerDigits();
        java.lang.Object obj62 = numberFormat57.clone();
        java.util.Locale locale66 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance(locale66);
        int int68 = numberFormat67.getMaximumIntegerDigits();
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getPercentInstance(locale69);
        boolean boolean71 = numberFormat70.isGroupingUsed();
        java.util.Currency currency72 = numberFormat70.getCurrency();
        numberFormat67.setCurrency(currency72);
        java.util.Currency currency74 = numberFormat67.getCurrency();
        java.math.RoundingMode roundingMode75 = numberFormat67.getRoundingMode();
        numberFormat57.setRoundingMode(roundingMode75);
        numberFormat49.setRoundingMode(roundingMode75);
        org.apache.commons.math.fraction.FractionFormat fractionFormat78 = new org.apache.commons.math.fraction.FractionFormat(numberFormat49);
        java.util.Locale locale80 = java.util.Locale.forLanguageTag("9,700%");
        java.lang.String str81 = locale80.getDisplayLanguage();
        java.lang.String str82 = locale80.getVariant();
        java.text.NumberFormat numberFormat83 = java.text.NumberFormat.getInstance(locale80);
        org.apache.commons.math.fraction.FractionFormat fractionFormat84 = new org.apache.commons.math.fraction.FractionFormat(numberFormat49, numberFormat83);
        java.lang.StringBuffer stringBuffer85 = null;
        java.text.FieldPosition fieldPosition87 = new java.text.FieldPosition((-97));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer88 = properFractionFormat19.format((java.lang.Object) numberFormat83, stringBuffer85, fieldPosition87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str4, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Taiwan" + "'", str11, "Taiwan");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100 0 / 1" + "'", str34, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "anglais_KOR");
        org.junit.Assert.assertEquals(locale39.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "anglais (KOR)" + "'", str42, "anglais (KOR)");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "kor" + "'", str46, "kor");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "anglais" + "'", str48, "anglais");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-1" + "'", str54, "-1");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2,147,483,647" + "'", str56, "2,147,483,647");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertTrue("'" + roundingMode60 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode60.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(locale66.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(currency72);
        org.junit.Assert.assertEquals(currency72.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency74);
        org.junit.Assert.assertEquals(currency74.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode75 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode75.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(numberFormat83);
    }

    @Test
    public void test08095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08095");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat4 = fractionFormat3.getNumeratorFormat();
        java.text.NumberFormat numberFormat5 = fractionFormat3.getDenominatorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
    }

    @Test
    public void test08096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08096");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        boolean boolean47 = numberFormat45.equals((java.lang.Object) strArray46);
        java.lang.String str49 = numberFormat45.format((double) (byte) -1);
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale50.getDisplayCountry(locale51);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getNumberInstance(locale50);
        numberFormat54.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36, numberFormat45, numberFormat54);
        java.text.NumberFormat numberFormat58 = properFractionFormat57.getWholeFormat();
        java.util.Locale locale62 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance(locale62);
        int int64 = numberFormat63.getMaximumIntegerDigits();
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance(locale65);
        boolean boolean67 = numberFormat66.isGroupingUsed();
        java.util.Currency currency68 = numberFormat66.getCurrency();
        numberFormat63.setCurrency(currency68);
        java.util.Currency currency70 = numberFormat63.getCurrency();
        int int71 = numberFormat63.getMaximumFractionDigits();
        numberFormat63.setMinimumFractionDigits((int) 'a');
        properFractionFormat57.setWholeFormat(numberFormat63);
        java.text.NumberFormat numberFormat75 = properFractionFormat57.getDenominatorFormat();
        int int76 = numberFormat75.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "anglais_KOR");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "anglais (KOR)" + "'", str29, "anglais (KOR)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "anglais" + "'", str35, "anglais");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-100%" + "'", str49, "-100%");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Japan" + "'", str53, "Japan");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertEquals(locale62.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(currency68);
        org.junit.Assert.assertEquals(currency68.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency70);
        org.junit.Assert.assertEquals(currency70.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
    }

    @Test
    public void test08097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08097");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        long long4 = fraction2.longValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        int int7 = fraction6.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction11.add(fraction17);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction20.divide(fraction23);
        int int26 = fraction20.intValue();
        float float27 = fraction20.floatValue();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction28.divide(fraction31);
        org.apache.commons.math.fraction.Fraction fraction36 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str37 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction36);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction28.subtract(fraction36);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction6.divide(fraction36);
        java.util.Locale locale40 = java.util.Locale.JAPAN;
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale41.getDisplayScript();
        java.lang.String str43 = locale40.getDisplayCountry(locale41);
        java.util.Locale locale44 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str45 = locale44.getDisplayLanguage();
        java.util.Locale locale46 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str47 = locale44.getDisplayCountry(locale46);
        java.lang.String str48 = locale41.getDisplayName(locale46);
        java.util.Set<java.lang.Character> charSet49 = locale41.getExtensionKeys();
        java.util.Locale locale50 = locale41.stripExtensions();
        java.lang.String str51 = locale41.getVariant();
        boolean boolean52 = fraction39.equals((java.lang.Object) locale41);
        byte byte53 = fraction39.byteValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1 / 100" + "'", str3, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 0.016666668f + "'", float27 == 0.016666668f);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1 / 100" + "'", str37, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Japan" + "'", str43, "Japan");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str45, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Taiwan" + "'", str47, "Taiwan");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(charSet49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + byte53 + "' != '" + (byte) -1 + "'", byte53 == (byte) -1);
    }

    @Test
    public void test08098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08098");
        java.util.Locale locale3 = new java.util.Locale("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", "org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 100 to fraction (1/-2,147,483,647)", "en");
        boolean boolean4 = locale3.hasExtensions();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getCurrencyInstance(locale3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        org.junit.Assert.assertEquals(locale3.toString(), "java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=100,endindex=0]_ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 100 TO FRACTION (1/-2,147,483,647)_en");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(numberFormat5);
    }

    @Test
    public void test08099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08099");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        java.lang.Object obj5 = numberFormat3.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.util.Locale locale11 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str14 = fractionFormat12.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat15 = fractionFormat12.getNumeratorFormat();
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Locale locale17 = locale16.stripExtensions();
        java.util.Locale locale19 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale19);
        java.lang.String str21 = locale19.getDisplayCountry();
        java.lang.String str22 = locale16.getDisplayName(locale19);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale23.getDisplayScript();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale25.getISO3Language();
        java.lang.String str27 = locale23.getDisplayScript(locale25);
        java.lang.String str28 = locale16.getDisplayLanguage(locale25);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale16);
        fractionFormat12.setNumeratorFormat(numberFormat29);
        properFractionFormat9.setWholeFormat(numberFormat29);
        fractionFormat6.setNumeratorFormat(numberFormat29);
        java.lang.String str34 = numberFormat29.format((-1.0d));
        boolean boolean35 = numberFormat1.equals((java.lang.Object) numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance();
        numberFormat37.setMaximumIntegerDigits(2147483647);
        java.lang.String str41 = numberFormat37.format((long) 'a');
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat37);
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.lang.String str45 = locale44.getScript();
        java.util.Locale locale49 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str50 = locale44.getDisplayScript(locale49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale44);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance(locale53);
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean56 = numberFormat54.equals((java.lang.Object) numberFormat55);
        java.util.Locale locale61 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance(locale61);
        int int63 = numberFormat62.getMaximumIntegerDigits();
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getPercentInstance(locale64);
        boolean boolean66 = numberFormat65.isGroupingUsed();
        java.util.Currency currency67 = numberFormat65.getCurrency();
        numberFormat62.setCurrency(currency67);
        java.util.Currency currency69 = numberFormat62.getCurrency();
        java.math.RoundingMode roundingMode70 = numberFormat62.getRoundingMode();
        java.text.ParsePosition parsePosition73 = new java.text.ParsePosition((int) 'a');
        java.lang.String str74 = parsePosition73.toString();
        java.lang.String str75 = parsePosition73.toString();
        java.lang.Object obj76 = numberFormat62.parseObject("zho", parsePosition73);
        java.lang.String str77 = parsePosition73.toString();
        java.lang.Number number78 = numberFormat55.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition73);
        java.lang.Object obj79 = fractionFormat51.parseObject("zho", parsePosition73);
        int int80 = parsePosition73.getIndex();
        int int81 = parsePosition73.getErrorIndex();
        java.lang.String str82 = parsePosition73.toString();
        java.lang.String str83 = parsePosition73.toString();
        java.lang.Object obj84 = numberFormat1.parseObject("fra", parsePosition73);
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "100 0 / 1" + "'", str14, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinese (Taiwan)" + "'", str22, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str28, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1" + "'", str34, "-1");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(numberFormat37);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "9,700%" + "'", str41, "9,700%");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals(locale49.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals(locale61.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(currency67);
        org.junit.Assert.assertEquals(currency67.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency69);
        org.junit.Assert.assertEquals(currency69.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode70 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode70.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str74, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str75, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str77, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number78);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 97 + "'", int80 == 97);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 96 + "'", int81 == 96);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=96]" + "'", str82, "java.text.ParsePosition[index=97,errorIndex=96]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=96]" + "'", str83, "java.text.ParsePosition[index=97,errorIndex=96]");
        org.junit.Assert.assertNull(obj84);
    }

    @Test
    public void test08100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08100");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        java.util.Locale locale9 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12, numberFormat14);
        boolean boolean16 = numberFormat14.isGroupingUsed();
        boolean boolean17 = numberFormat14.isGroupingUsed();
        fractionFormat10.setNumeratorFormat(numberFormat14);
        java.lang.Object obj19 = numberFormat14.clone();
        java.text.ParseException parseException22 = new java.text.ParseException("Taiwan", (int) (byte) 100);
        boolean boolean23 = numberFormat14.equals((java.lang.Object) parseException22);
        java.util.Locale locale25 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale25);
        java.lang.String str28 = fractionFormat26.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat29 = fractionFormat26.getNumeratorFormat();
        numberFormat29.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency32 = numberFormat29.getCurrency();
        numberFormat14.setCurrency(currency32);
        numberFormat8.setCurrency(currency32);
        java.util.Currency currency35 = numberFormat8.getCurrency();
        int int36 = numberFormat8.getMaximumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "100 0 / 1" + "'", str28, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(currency32);
        org.junit.Assert.assertEquals(currency32.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
    }

    @Test
    public void test08101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08101");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str4 = locale0.getISO3Language();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getISO3Language();
        java.lang.String str7 = locale5.getDisplayCountry();
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getISO3Language();
        java.lang.String str11 = locale5.getDisplayScript(locale8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getCurrencyInstance(locale5);
        java.lang.String str14 = locale5.getDisplayName();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale5);
        java.lang.String str16 = locale0.getDisplayScript(locale5);
        java.lang.String str17 = locale0.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zho" + "'", str10, "zho");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u97d3\u6587" + "'", str14, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test08102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08102");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        java.lang.String str7 = locale4.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) 'a');
        java.lang.String str12 = parsePosition11.toString();
        java.lang.String str13 = parsePosition11.toString();
        parsePosition11.setErrorIndex(3);
        int int16 = parsePosition11.getErrorIndex();
        java.lang.Object obj17 = fractionFormat8.parseObject("", parsePosition11);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.util.Currency currency21 = numberFormat19.getCurrency();
        fractionFormat8.setNumeratorFormat(numberFormat19);
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        numberFormat27.setMinimumIntegerDigits((int) (short) -1);
        boolean boolean30 = numberFormat27.isParseIntegerOnly();
        java.lang.Number number32 = numberFormat27.parse("-.019841270113829523000000000000000000000000000000000000000000%");
        int int33 = numberFormat27.getMinimumFractionDigits();
        fractionFormat8.setDenominatorFormat(numberFormat27);
        numberFormat27.setMaximumFractionDigits(52);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zho" + "'", str7, "zho");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str12, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str13, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + number32 + "' != '" + (-1.9841270113829523E-4d) + "'", number32, (-1.9841270113829523E-4d));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test08103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08103");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = numberFormat1.isGroupingUsed();
        java.lang.Object obj3 = numberFormat1.clone();
        java.lang.String str5 = numberFormat1.format((long) 117);
        numberFormat1.setGroupingUsed(true);
        boolean boolean8 = numberFormat1.isGroupingUsed();
        java.util.Currency currency9 = numberFormat1.getCurrency();
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str13 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction12);
        float float14 = fraction12.floatValue();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction12.negate();
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        int int21 = numberFormat20.getMaximumIntegerDigits();
        int int22 = numberFormat20.getMaximumFractionDigits();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24, numberFormat26);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20, numberFormat24);
        boolean boolean29 = fraction15.equals((java.lang.Object) fractionFormat28);
        java.text.NumberFormat numberFormat30 = fractionFormat28.getNumeratorFormat();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getInstance(locale32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33, numberFormat35);
        numberFormat35.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field40 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition41 = new java.text.FieldPosition((java.text.Format.Field) field40);
        java.lang.String str42 = fieldPosition41.toString();
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.lang.String str45 = locale44.getDisplayScript();
        java.lang.String str46 = locale43.getDisplayName(locale44);
        boolean boolean47 = fieldPosition41.equals((java.lang.Object) locale44);
        fieldPosition41.setEndIndex((int) '#');
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getCurrencyInstance(locale50);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        java.text.ParsePosition parsePosition55 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction56 = properFractionFormat52.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition55);
        boolean boolean57 = fieldPosition41.equals((java.lang.Object) parsePosition55);
        java.lang.Number number58 = numberFormat35.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition55);
        int int59 = parsePosition55.getIndex();
        java.lang.String str60 = parsePosition55.toString();
        java.lang.Object obj61 = null;
        boolean boolean62 = parsePosition55.equals(obj61);
        java.lang.Object obj63 = numberFormat30.parseObject("java.text.ParsePosition[index=1,errorIndex=1]", parsePosition55);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getPercentInstance(locale64);
        boolean boolean66 = numberFormat65.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65);
        numberFormat65.setMaximumFractionDigits((int) (byte) -120);
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = new org.apache.commons.math.fraction.FractionFormat(numberFormat30, numberFormat65);
        java.math.RoundingMode roundingMode71 = numberFormat65.getRoundingMode();
        numberFormat1.setRoundingMode(roundingMode71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj74 = numberFormat1.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "11,700%" + "'", str5, "11,700%");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1 / 1" + "'", str13, "1 / 1");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(field40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str42, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Chinese (Taiwan)" + "'", str46, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNull(fraction56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(number58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str60, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + roundingMode71 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode71.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test08104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08104");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat3 = properFractionFormat2.getWholeFormat();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean7 = numberFormat5.equals((java.lang.Object) numberFormat6);
        properFractionFormat2.setWholeFormat(numberFormat5);
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getWholeFormat();
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale11.getISO3Language();
        java.util.Locale.setDefault(category10, locale11);
        java.util.Locale locale14 = java.util.Locale.getDefault(category10);
        java.util.Locale locale15 = java.util.Locale.getDefault(category10);
        java.util.Locale locale17 = new java.util.Locale("java.text.parseexception: zh_tw");
        java.util.Locale.setDefault(category10, locale17);
        java.util.Locale locale19 = java.util.Locale.getDefault(category10);
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = numberFormat9.format((java.lang.Object) strSet20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "kor" + "'", str12, "kor");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals(locale17.toString(), "java.text.parseexception: zh_tw");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "java.text.parseexception: zh_tw");
        org.junit.Assert.assertNotNull(strSet20);
    }

    @Test
    public void test08105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08105");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayName(locale3);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale9.getISO3Language();
        java.lang.String str11 = locale7.getDisplayScript(locale9);
        java.lang.String str12 = locale0.getDisplayLanguage(locale9);
        java.lang.String str13 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale16.getISO3Language();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.lang.String str19 = locale16.getISO3Country();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getNumberInstance(locale16);
        java.util.Locale locale24 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        int int26 = numberFormat25.getMaximumIntegerDigits();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        boolean boolean29 = numberFormat28.isGroupingUsed();
        java.util.Currency currency30 = numberFormat28.getCurrency();
        numberFormat25.setCurrency(currency30);
        java.util.Currency currency32 = numberFormat25.getCurrency();
        int int33 = numberFormat25.getMaximumFractionDigits();
        java.lang.Object obj34 = numberFormat25.clone();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        numberFormat36.setMaximumFractionDigits(100);
        numberFormat36.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str43 = numberFormat36.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20, numberFormat25, numberFormat36);
        java.text.NumberFormat.Field field46 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition47 = new java.text.FieldPosition((java.text.Format.Field) field46);
        java.lang.String str48 = fieldPosition47.toString();
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayScript();
        java.lang.String str52 = locale49.getDisplayName(locale50);
        boolean boolean53 = fieldPosition47.equals((java.lang.Object) locale50);
        fieldPosition47.setEndIndex((int) '#');
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getCurrencyInstance(locale56);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        java.text.ParsePosition parsePosition61 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction62 = properFractionFormat58.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition61);
        boolean boolean63 = fieldPosition47.equals((java.lang.Object) parsePosition61);
        int int64 = parsePosition61.getIndex();
        org.apache.commons.math.fraction.Fraction fraction65 = properFractionFormat44.parse("hi!", parsePosition61);
        java.lang.String str66 = parsePosition61.toString();
        parsePosition61.setErrorIndex((int) (short) 100);
        java.lang.Object obj69 = numberFormat14.parseObject("org.apache.commons.math.fraction.FractionConversionException: Unable to convert 97 to fraction after 0 iterations", parsePosition61);
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str12, "\uc911\uad6d\uc5b4");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zh-TW" + "'", str13, "zh-TW");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals(locale24.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency32);
        org.junit.Assert.assertEquals(currency32.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "100%" + "'", str43, "100%");
        org.junit.Assert.assertNotNull(field46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str48, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Chinese (Taiwan)" + "'", str52, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNull(fraction62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNull(fraction65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str66, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj69);
    }

    @Test
    public void test08106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08106");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        java.lang.String str3 = numberFormat0.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        java.lang.String[] strArray10 = java.util.Locale.getISOCountries();
        boolean boolean11 = numberFormat9.equals((java.lang.Object) strArray10);
        java.util.Locale locale15 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        int int17 = numberFormat16.getMaximumIntegerDigits();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        boolean boolean20 = numberFormat19.isGroupingUsed();
        java.util.Currency currency21 = numberFormat19.getCurrency();
        numberFormat16.setCurrency(currency21);
        java.util.Currency currency23 = numberFormat16.getCurrency();
        java.math.RoundingMode roundingMode24 = numberFormat16.getRoundingMode();
        numberFormat9.setRoundingMode(roundingMode24);
        boolean boolean26 = numberFormat9.isParseIntegerOnly();
        properFractionFormat4.setWholeFormat(numberFormat9);
        java.text.NumberFormat numberFormat28 = properFractionFormat4.getDenominatorFormat();
        java.text.NumberFormat numberFormat29 = properFractionFormat4.getNumeratorFormat();
        java.text.NumberFormat numberFormat30 = properFractionFormat4.getNumeratorFormat();
        numberFormat30.setParseIntegerOnly(false);
        java.lang.String str34 = numberFormat30.format((long) 84);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
// flaky:         org.junit.Assert.assertEquals(currency1.toString(), "TWD");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100%" + "'", str3, "100%");
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode24 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode24.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "8,400%" + "'", str34, "8,400%");
    }

    @Test
    public void test08107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08107");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Set<java.lang.Character> charSet8 = locale0.getExtensionKeys();
        java.lang.String str9 = locale0.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Japan" + "'", str5, "Japan");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Japan" + "'", str6, "Japan");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ja" + "'", str9, "ja");
    }

    @Test
    public void test08108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08108");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat14 = properFractionFormat3.getNumeratorFormat();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.Object obj18 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat19 = properFractionFormat17.getWholeFormat();
        int int20 = numberFormat19.getMaximumIntegerDigits();
        java.lang.Object obj21 = numberFormat19.clone();
        properFractionFormat3.setNumeratorFormat(numberFormat19);
        numberFormat19.setParseIntegerOnly(true);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(obj21);
    }

    @Test
    public void test08109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08109");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayName(locale4);
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale4);
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field8);
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field8, (int) (byte) 10);
        boolean boolean12 = fieldPosition1.equals((java.lang.Object) field8);
        int int13 = fieldPosition1.getField();
        fieldPosition1.setEndIndex(0);
        java.text.Format.Field field16 = fieldPosition1.getFieldAttribute();
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition(field16);
        java.text.FieldPosition fieldPosition19 = new java.text.FieldPosition(field16, (int) (byte) -120);
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.abs();
        long long30 = fraction28.longValue();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction24.multiply(fraction28);
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        long long42 = fraction40.longValue();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction36.multiply(fraction40);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction24.divide(fraction43);
        double double45 = fraction44.doubleValue();
        java.util.Locale locale46 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getInstance(locale46);
        java.util.Locale locale49 = locale46.stripExtensions();
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale50);
        java.lang.String str52 = locale49.getDisplayName(locale50);
        boolean boolean53 = fraction44.equals((java.lang.Object) locale49);
        java.lang.String str54 = locale49.getVariant();
        java.util.Locale locale55 = java.util.Locale.US;
        java.lang.String str56 = locale55.getDisplayScript();
        java.lang.String str57 = locale49.getDisplayVariant(locale55);
        java.util.Set<java.lang.String> strSet58 = locale49.getUnicodeLocaleKeys();
        boolean boolean59 = field16.equals((java.lang.Object) locale49);
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.lang.String str61 = locale60.getDisplayScript();
        java.lang.String str62 = locale60.getCountry();
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleAttributes();
        java.util.Locale locale66 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale66);
        java.lang.String str68 = locale66.getDisplayCountry();
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getIntegerInstance(locale66);
        java.lang.String str70 = locale63.getDisplayCountry(locale66);
        java.lang.String str71 = locale63.getISO3Language();
        java.lang.String str72 = locale63.getDisplayName();
        java.lang.String str74 = locale63.getExtension('x');
        org.apache.commons.math.fraction.Fraction fraction77 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction78 = fraction77.negate();
        org.apache.commons.math.fraction.Fraction fraction79 = fraction78.abs();
        org.apache.commons.math.fraction.Fraction fraction80 = fraction78.abs();
        java.util.Locale locale81 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat82 = java.text.NumberFormat.getInstance(locale81);
        java.util.Locale locale83 = java.util.Locale.getDefault();
        boolean boolean84 = numberFormat82.equals((java.lang.Object) locale83);
        boolean boolean85 = fraction80.equals((java.lang.Object) locale83);
        org.apache.commons.math.fraction.Fraction fraction86 = fraction80.abs();
        java.util.Locale locale87 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat88 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale87);
        boolean boolean89 = fraction86.equals((java.lang.Object) locale87);
        java.text.NumberFormat numberFormat90 = java.text.NumberFormat.getPercentInstance(locale87);
        java.lang.String str91 = locale63.getDisplayScript(locale87);
        java.lang.String str92 = locale60.getDisplayVariant(locale63);
        java.lang.String str93 = locale49.getDisplayLanguage(locale60);
        java.lang.String str94 = locale49.getCountry();
        java.lang.String str95 = locale49.getScript();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(field16);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 120.0d + "'", double45 == 120.0d);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str52, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "KR" + "'", str62, "KR");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertEquals(locale66.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "France" + "'", str70, "France");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "fra" + "'", str71, "fra");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "French (France)" + "'", str72, "French (France)");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertNotNull(locale83);
// flaky:         org.junit.Assert.assertEquals(locale83.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(numberFormat90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str93, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "TW" + "'", str94, "TW");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test08110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08110");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        long long4 = fraction2.longValue();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction8.abs();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale11);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        boolean boolean14 = numberFormat12.equals((java.lang.Object) locale13);
        boolean boolean15 = fraction10.equals((java.lang.Object) locale13);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction10.abs();
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale17);
        boolean boolean19 = fraction16.equals((java.lang.Object) locale17);
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.abs();
        long long30 = fraction28.longValue();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction24.multiply(fraction28);
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        long long42 = fraction40.longValue();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction36.multiply(fraction40);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction24.divide(fraction43);
        org.apache.commons.math.fraction.Fraction fraction45 = fraction24.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction16.subtract(fraction45);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction2.subtract(fraction46);
        int int48 = fraction2.intValue();
        long long49 = fraction2.longValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1 / 100" + "'", str3, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
    }

    @Test
    public void test08111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08111");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((int) (short) 0);
        int int10 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        java.lang.String str19 = numberFormat17.format((double) 10L);
        java.util.Currency currency20 = numberFormat17.getCurrency();
        numberFormat1.setCurrency(currency20);
        java.lang.String str23 = numberFormat1.format((long) 97);
        java.lang.String str25 = numberFormat1.format(0L);
        java.lang.Object obj26 = numberFormat1.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1,000%" + "'", str19, "1,000%");
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0%" + "'", str23, "0%");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0%" + "'", str25, "0%");
        org.junit.Assert.assertNotNull(obj26);
    }

    @Test
    public void test08112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08112");
        java.text.NumberFormat numberFormat0 = null;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale1);
        boolean boolean3 = numberFormat2.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat6, numberFormat8);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj13 = numberFormat8.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition12);
        properFractionFormat4.setNumeratorFormat(numberFormat8);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getCurrencyInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.util.Locale locale19 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale19);
        java.lang.String str22 = fractionFormat20.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat23 = fractionFormat20.getNumeratorFormat();
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Locale locale25 = locale24.stripExtensions();
        java.util.Locale locale27 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale27);
        java.lang.String str29 = locale27.getDisplayCountry();
        java.lang.String str30 = locale24.getDisplayName(locale27);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = locale31.getDisplayScript();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale33.getISO3Language();
        java.lang.String str35 = locale31.getDisplayScript(locale33);
        java.lang.String str36 = locale24.getDisplayLanguage(locale33);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getNumberInstance(locale24);
        fractionFormat20.setNumeratorFormat(numberFormat37);
        properFractionFormat17.setWholeFormat(numberFormat37);
        properFractionFormat4.setWholeFormat(numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.util.Locale locale45 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale45);
        java.lang.String[] strArray47 = java.util.Locale.getISOCountries();
        boolean boolean48 = numberFormat46.equals((java.lang.Object) strArray47);
        java.lang.String str50 = numberFormat46.format((double) (byte) -1);
        java.util.Locale locale51 = java.util.Locale.JAPAN;
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale52.getDisplayScript();
        java.lang.String str54 = locale51.getDisplayCountry(locale52);
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getNumberInstance(locale51);
        numberFormat55.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37, numberFormat46, numberFormat55);
        int int59 = numberFormat46.getMaximumFractionDigits();
        int int60 = numberFormat46.getMinimumFractionDigits();
        int int61 = numberFormat46.getMinimumFractionDigits();
        numberFormat46.setParseIntegerOnly(false);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getPercentInstance(locale64);
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean67 = numberFormat65.equals((java.lang.Object) numberFormat66);
        java.util.Locale locale72 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getPercentInstance(locale72);
        int int74 = numberFormat73.getMaximumIntegerDigits();
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getPercentInstance(locale75);
        boolean boolean77 = numberFormat76.isGroupingUsed();
        java.util.Currency currency78 = numberFormat76.getCurrency();
        numberFormat73.setCurrency(currency78);
        java.util.Currency currency80 = numberFormat73.getCurrency();
        java.math.RoundingMode roundingMode81 = numberFormat73.getRoundingMode();
        java.text.ParsePosition parsePosition84 = new java.text.ParsePosition((int) 'a');
        java.lang.String str85 = parsePosition84.toString();
        java.lang.String str86 = parsePosition84.toString();
        java.lang.Object obj87 = numberFormat73.parseObject("zho", parsePosition84);
        java.lang.String str88 = parsePosition84.toString();
        java.lang.Number number89 = numberFormat66.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition84);
        numberFormat66.setMaximumIntegerDigits(5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat92 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat46, numberFormat66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: whole format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "100 0 / 1" + "'", str22, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese (Taiwan)" + "'", str30, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "kor" + "'", str34, "kor");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str36, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals(locale45.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-100%" + "'", str50, "-100%");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Japan" + "'", str54, "Japan");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals(locale72.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(currency78);
        org.junit.Assert.assertEquals(currency78.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency80);
        org.junit.Assert.assertEquals(currency80.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode81 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode81.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str85, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str86, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str88, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number89);
    }

    @Test
    public void test08113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08113");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat14 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat15 = properFractionFormat3.getWholeFormat();
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        boolean boolean18 = numberFormat17.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.text.NumberFormat numberFormat20 = properFractionFormat19.getDenominatorFormat();
        java.lang.Object obj21 = numberFormat20.clone();
        properFractionFormat3.setWholeFormat(numberFormat20);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        numberFormat28.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str32 = numberFormat28.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat28);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale34.getISO3Language();
        java.util.Set<java.lang.Character> charSet36 = locale34.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet37 = locale34.getExtensionKeys();
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getCurrencyInstance(locale34);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        fractionFormat33.setNumeratorFormat(numberFormat38);
        java.util.Locale locale43 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale43);
        java.lang.String str45 = locale43.getDisplayCountry();
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getIntegerInstance(locale43);
        numberFormat46.setMinimumIntegerDigits(0);
        java.lang.String str50 = numberFormat46.format(1.0d);
        java.util.Locale locale52 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getInstance(locale52);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = new org.apache.commons.math.fraction.FractionFormat(numberFormat53, numberFormat55);
        boolean boolean57 = numberFormat55.isGroupingUsed();
        boolean boolean58 = numberFormat55.isGroupingUsed();
        java.text.ParsePosition parsePosition61 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj62 = numberFormat55.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition61);
        java.lang.Object obj63 = numberFormat46.parseObject("Taiwan", parsePosition61);
        java.lang.Object obj64 = fractionFormat33.parseObject("Chinesisch (Taiwan)", parsePosition61);
        org.apache.commons.math.fraction.Fraction fraction65 = properFractionFormat3.parse("NT$2,147,483,647.00", parsePosition61);
        int int66 = parsePosition61.getIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0%" + "'", str32, "0%");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "kor" + "'", str35, "kor");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertNotNull(charSet37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals(locale43.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1" + "'", str50, "1");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(fraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
    }

    @Test
    public void test08114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08114");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale0.getDisplayName(locale1);
        java.lang.String str4 = locale0.getDisplayCountry();
        java.util.Locale locale8 = new java.util.Locale("1 / 100", "france (CHINESE (TAIWAN))", "java.text.FieldPosition[field=10,attribute=java.text.NumberFormat$Field(currency),beginIndex=10,endIndex=0]");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.lang.String str10 = locale0.getDisplayLanguage(locale8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale8);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "francese (Francia)" + "'", str3, "francese (Francia)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "France" + "'", str4, "France");
        org.junit.Assert.assertEquals(locale8.toString(), "1 / 100_FRANCE (CHINESE (TAIWAN))_java.text.FieldPosition[field=10,attribute=java.text.NumberFormat$Field(currency),beginIndex=10,endIndex=0]");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "French" + "'", str10, "French");
        org.junit.Assert.assertNotNull(numberFormat11);
    }

    @Test
    public void test08115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08115");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction8.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str28 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction8.subtract(fraction27);
        int int30 = fraction27.getDenominator();
        int int31 = fraction27.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction27.abs();
        java.util.Locale locale35 = new java.util.Locale("Korean", "ja-JP");
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getInstance(locale36);
        java.util.Locale locale39 = locale36.stripExtensions();
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        java.lang.String str42 = locale39.getDisplayName(locale40);
        java.lang.String str43 = locale39.getISO3Country();
        java.lang.String str44 = locale35.getDisplayScript(locale39);
        java.lang.String str45 = locale35.getLanguage();
        boolean boolean46 = fraction27.equals((java.lang.Object) locale35);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 / 100" + "'", str28, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertEquals(locale35.toString(), "korean_JA-JP");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str42, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "TWN" + "'", str43, "TWN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "korean" + "'", str45, "korean");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test08116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08116");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        int int8 = numberFormat7.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        org.apache.commons.math.fraction.Fraction fraction11 = fractionFormat9.parse("100%");
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.multiply(fraction21);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction14.add(fraction21);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str25 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction24);
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction29.add(fraction35);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction24.multiply(fraction35);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.ONE;
        long long41 = fraction40.longValue();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction24.multiply(fraction40);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction23.multiply(fraction42);
        int int44 = fraction23.intValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction11.add(fraction23);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.abs();
        java.lang.String str47 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction46);
        int int48 = fraction46.intValue();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1 / 1" + "'", str25, "1 / 1");
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100 / 1" + "'", str47, "100 / 1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
    }

    @Test
    public void test08117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08117");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        boolean boolean19 = numberFormat18.isGroupingUsed();
        properFractionFormat16.setWholeFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat11, numberFormat18);
        int int22 = numberFormat11.getMaximumIntegerDigits();
        numberFormat11.setMinimumIntegerDigits(14500);
        java.lang.StringBuffer stringBuffer26 = null;
        java.text.NumberFormat.Field field27 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition28 = new java.text.FieldPosition((java.text.Format.Field) field27);
        int int29 = fieldPosition28.getField();
        java.text.Format.Field field30 = fieldPosition28.getFieldAttribute();
        fieldPosition28.setEndIndex((int) 'a');
        java.text.Format.Field field33 = fieldPosition28.getFieldAttribute();
        fieldPosition28.setBeginIndex(119);
        java.lang.String str36 = fieldPosition28.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer37 = numberFormat11.format((long) (short) 17, stringBuffer26, fieldPosition28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(field27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(field30);
        org.junit.Assert.assertNotNull(field33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=119,endIndex=97]" + "'", str36, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=119,endIndex=97]");
    }

    @Test
    public void test08118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08118");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getWholeFormat();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        numberFormat3.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getISO3Language();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale12);
        java.util.Currency currency15 = numberFormat14.getCurrency();
        numberFormat14.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat14);
        fractionFormat7.setDenominatorFormat(numberFormat14);
        java.text.NumberFormat numberFormat21 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21);
        java.text.NumberFormat numberFormat23 = fractionFormat22.getNumeratorFormat();
        java.util.Locale locale25 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale25);
        java.lang.String str27 = locale25.getDisplayCountry();
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getIntegerInstance(locale25);
        numberFormat28.setMinimumIntegerDigits(0);
        numberFormat28.setMinimumIntegerDigits(0);
        org.apache.commons.math.fraction.Fraction fraction36 = new org.apache.commons.math.fraction.Fraction((double) 2147483647, (double) 100.0f, (int) 'u');
        java.lang.String str37 = numberFormat28.format((java.lang.Object) 100.0f);
        int int38 = numberFormat28.getMaximumIntegerDigits();
        fractionFormat22.setDenominatorFormat(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zho" + "'", str10, "zho");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "TWD");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "100" + "'", str37, "100");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
    }

    @Test
    public void test08119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08119");
        java.util.Locale locale3 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str4 = locale3.getDisplayVariant();
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale locale10 = locale8.stripExtensions();
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale11);
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        boolean boolean14 = locale11.hasExtensions();
        java.lang.String str15 = locale8.getDisplayScript(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale11);
        java.lang.String str17 = locale3.getDisplayScript(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        java.util.Locale locale21 = new java.util.Locale("864,119 / 14,400", "java.text.ParsePosition[index=35,errorIndex=600]");
        java.lang.String str22 = locale3.getDisplayCountry(locale21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = locale3.getUnicodeLocaleType("7,260");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 7,260");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "10,000%" + "'", str4, "10,000%");
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals(locale21.toString(), "864,119 / 14,400_JAVA.TEXT.PARSEPOSITION[INDEX=35,ERRORINDEX=600]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ZH_TW" + "'", str22, "ZH_TW");
    }

    @Test
    public void test08120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08120");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        numberFormat1.setMinimumFractionDigits((-2));
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction11.add(fraction17);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction20.divide(fraction23);
        java.util.Locale.Category category26 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale27 = java.util.Locale.getDefault(category26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale28);
        java.util.Locale.setDefault(category26, locale28);
        java.util.Locale locale31 = java.util.Locale.getDefault(category26);
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale31);
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.negate();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.abs();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction43.abs();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction37.add(fraction43);
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.negate();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction46.divide(fraction49);
        int int52 = fraction46.intValue();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction46.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction46.abs();
        int int55 = fraction46.getDenominator();
        java.lang.String str56 = numberFormat33.format((java.lang.Object) fraction46);
        org.apache.commons.math.fraction.Fraction fraction59 = org.apache.commons.math.fraction.Fraction.getReducedFraction(1, (int) (byte) -120);
        int int60 = fraction59.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction46.multiply(fraction59);
        org.apache.commons.math.fraction.Fraction fraction62 = fraction25.add(fraction46);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator63 = numberFormat1.formatToCharacterIterator((java.lang.Object) fraction46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.FORMAT + "'", category26.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 60 + "'", int55 == 60);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2%" + "'", str56, "2%");
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
    }

    @Test
    public void test08121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08121");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction8.add(fraction14);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction3.multiply(fraction14);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ONE;
        long long20 = fraction19.longValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction3.multiply(fraction19);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction2.subtract(fraction21);
        float float23 = fraction22.floatValue();
        double double24 = fraction22.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str28 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        long long29 = fraction27.longValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction30.divide(fraction34);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = new org.apache.commons.math.fraction.Fraction((double) 100);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction36.divide(fraction38);
        org.apache.commons.math.fraction.Fraction fraction40 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction22.multiply(fraction40);
        java.lang.Class<?> wildcardClass42 = fraction22.getClass();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1 / 1" + "'", str4, "1 / 1");
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 / 100" + "'", str28, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test08122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08122");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((int) (short) 0);
        int int10 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        java.lang.String str19 = numberFormat17.format((double) 10L);
        java.util.Currency currency20 = numberFormat17.getCurrency();
        numberFormat1.setCurrency(currency20);
        java.lang.String str23 = numberFormat1.format((long) 97);
        numberFormat1.setGroupingUsed(true);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1,000%" + "'", str19, "1,000%");
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0%" + "'", str23, "0%");
    }

    @Test
    public void test08123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08123");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat7.parse("java.text.ParseException: zh_TW", parsePosition16);
        java.text.NumberFormat numberFormat22 = properFractionFormat7.getDenominatorFormat();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24, numberFormat26);
        boolean boolean28 = numberFormat26.isGroupingUsed();
        java.lang.String str30 = numberFormat26.format((double) 100);
        java.lang.String str32 = numberFormat26.format((double) (short) 10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat22, numberFormat26);
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.lang.String str36 = locale34.getISO3Language();
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getInstance(locale34);
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getInstance(locale38);
        java.util.Currency currency41 = numberFormat40.getCurrency();
        numberFormat40.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = new org.apache.commons.math.fraction.FractionFormat(numberFormat37, numberFormat40);
        java.lang.String str47 = numberFormat37.format(0.0d);
        java.util.Locale locale48 = java.util.Locale.JAPAN;
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = locale49.getDisplayScript();
        java.lang.String str51 = locale48.getDisplayCountry(locale49);
        java.util.Set<java.lang.String> strSet52 = locale49.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getIntegerInstance(locale49);
        java.lang.Object obj54 = numberFormat53.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22, numberFormat37, numberFormat53);
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getInstance(locale57);
        boolean boolean59 = numberFormat58.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getInstance(locale61);
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance(locale63);
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = new org.apache.commons.math.fraction.FractionFormat(numberFormat62, numberFormat64);
        java.text.ParsePosition parsePosition68 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj69 = numberFormat64.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition68);
        properFractionFormat60.setNumeratorFormat(numberFormat64);
        java.util.Locale locale71 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getInstance(locale71);
        boolean boolean73 = numberFormat72.isParseIntegerOnly();
        numberFormat72.setGroupingUsed(false);
        properFractionFormat60.setWholeFormat(numberFormat72);
        numberFormat72.setMinimumFractionDigits((int) 'u');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat72);
        java.util.Locale locale81 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat82 = java.text.NumberFormat.getPercentInstance(locale81);
        boolean boolean83 = numberFormat82.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat82);
        java.lang.String str86 = numberFormat82.format(0.008333333333333333d);
        boolean boolean87 = numberFormat82.isParseIntegerOnly();
        java.text.ParsePosition parsePosition90 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj91 = numberFormat82.parseObject("\u65e5\u6587", parsePosition90);
        int int92 = parsePosition90.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction93 = properFractionFormat79.parse("\uc601\uc5b4\uce90\ub098\ub2e4)", parsePosition90);
        int int94 = parsePosition90.getIndex();
        org.apache.commons.math.fraction.Fraction fraction95 = properFractionFormat55.parse("zh_CN", parsePosition90);
        int int96 = parsePosition90.getIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(fraction21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10,000%" + "'", str30, "10,000%");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1,000%" + "'", str32, "1,000%");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "zho" + "'", str36, "zho");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(currency41);
        org.junit.Assert.assertEquals(currency41.toString(), "TWD");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0" + "'", str47, "0");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Japan" + "'", str51, "Japan");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "1%" + "'", str86, "1%");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNull(fraction93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNull(fraction95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test08124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08124");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, 117);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction9 = properFractionFormat5.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition8);
        boolean boolean10 = field0.equals((java.lang.Object) properFractionFormat5);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = locale11.getScript();
        java.util.Locale locale16 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str17 = locale11.getDisplayScript(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean23 = numberFormat21.equals((java.lang.Object) numberFormat22);
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        int int30 = numberFormat29.getMaximumIntegerDigits();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        boolean boolean33 = numberFormat32.isGroupingUsed();
        java.util.Currency currency34 = numberFormat32.getCurrency();
        numberFormat29.setCurrency(currency34);
        java.util.Currency currency36 = numberFormat29.getCurrency();
        java.math.RoundingMode roundingMode37 = numberFormat29.getRoundingMode();
        java.text.ParsePosition parsePosition40 = new java.text.ParsePosition((int) 'a');
        java.lang.String str41 = parsePosition40.toString();
        java.lang.String str42 = parsePosition40.toString();
        java.lang.Object obj43 = numberFormat29.parseObject("zho", parsePosition40);
        java.lang.String str44 = parsePosition40.toString();
        java.lang.Number number45 = numberFormat22.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition40);
        java.lang.Object obj46 = fractionFormat18.parseObject("zho", parsePosition40);
        int int47 = parsePosition40.getIndex();
        java.util.Locale locale48 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.util.Locale locale50 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str51 = locale48.getDisplayScript(locale50);
        java.lang.String str53 = locale50.getExtension('u');
        java.lang.String str54 = locale50.getScript();
        boolean boolean55 = parsePosition40.equals((java.lang.Object) locale50);
        java.lang.String str57 = locale50.getExtension('x');
        boolean boolean58 = field0.equals((java.lang.Object) str57);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNull(fraction9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(locale16.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode37 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode37.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str41, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str42, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str44, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number45);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 97 + "'", int47 == 97);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test08125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08125");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat7.parse("java.text.ParseException: zh_TW", parsePosition16);
        java.text.NumberFormat numberFormat22 = properFractionFormat7.getDenominatorFormat();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        boolean boolean29 = numberFormat28.isGroupingUsed();
        properFractionFormat26.setWholeFormat(numberFormat28);
        java.text.NumberFormat numberFormat31 = properFractionFormat26.getWholeFormat();
        java.lang.String str33 = numberFormat31.format((double) 1.0f);
        numberFormat31.setMaximumIntegerDigits((int) (byte) 100);
        numberFormat31.setParseIntegerOnly(false);
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category40 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale41 = java.util.Locale.getDefault(category40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale42);
        java.util.Locale.setDefault(category40, locale42);
        java.util.Locale locale45 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category40, locale45);
        java.lang.String str47 = locale39.getDisplayLanguage(locale45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale45);
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getCurrencyInstance(locale50);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        java.text.ParsePosition parsePosition55 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction56 = properFractionFormat52.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition55);
        java.lang.Object obj57 = fractionFormat48.parseObject("214,748,364,700%", parsePosition55);
        java.lang.String str58 = parsePosition55.toString();
        java.lang.Object obj59 = numberFormat31.parseObject("600", parsePosition55);
        java.lang.String str60 = parsePosition55.toString();
        org.apache.commons.math.fraction.Fraction fraction61 = properFractionFormat7.parse("org.apache.commons.math.fraction.FractionConversionException: Unable to convert 10 to fraction after 0 iterations", parsePosition55);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction63 = properFractionFormat7.parse("2,147,483,647.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"2,147,483,647.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(fraction21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "100%" + "'", str33, "100%");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.FORMAT + "'", category40.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale41);
// flaky:         org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "anglais" + "'", str47, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNull(fraction56);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=3]" + "'", str58, "java.text.ParsePosition[index=1,errorIndex=3]");
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=3]" + "'", str60, "java.text.ParsePosition[index=1,errorIndex=3]");
        org.junit.Assert.assertNull(fraction61);
    }

    @Test
    public void test08126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08126");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        boolean boolean9 = numberFormat7.equals((java.lang.Object) locale8);
        boolean boolean10 = fraction5.equals((java.lang.Object) locale8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction5.abs();
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        boolean boolean14 = fraction11.equals((java.lang.Object) locale12);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction11.negate();
        float float16 = fraction15.floatValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction15.negate();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + (-0.008333334f) + "'", float16 == (-0.008333334f));
        org.junit.Assert.assertNotNull(fraction17);
    }

    @Test
    public void test08127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08127");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = builder3.build();
        java.lang.String str6 = locale5.getDisplayCountry();
        boolean boolean7 = locale5.hasExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale10);
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale13);
        java.util.Currency currency16 = numberFormat15.getCurrency();
        numberFormat15.setMinimumIntegerDigits(1);
        numberFormat15.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj24 = numberFormat15.parseObject("Japan", parsePosition23);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException28 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str29 = fractionConversionException28.getPattern();
        java.lang.Throwable[] throwableArray30 = fractionConversionException28.getSuppressed();
        java.lang.Object[] objArray31 = fractionConversionException28.getArguments();
        boolean boolean32 = parsePosition23.equals((java.lang.Object) objArray31);
        int int33 = parsePosition23.getIndex();
        int int34 = parsePosition23.getIndex();
        java.lang.Object obj35 = fractionFormat11.parseObject("\ud55c\uad6d\uc5b4", parsePosition23);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale37);
        boolean boolean39 = numberFormat38.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.String str42 = numberFormat38.format(0.008333333333333333d);
        boolean boolean43 = numberFormat38.isParseIntegerOnly();
        java.text.ParsePosition parsePosition46 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj47 = numberFormat38.parseObject("\u65e5\u6587", parsePosition46);
        int int48 = parsePosition46.getIndex();
        java.lang.Object obj49 = fractionFormat11.parseObject("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition46);
        parsePosition46.setErrorIndex((int) (short) 2);
        org.apache.commons.math.fraction.Fraction fraction52 = fractionFormat8.parse("zh-cn", parsePosition46);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "TWD");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str29, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1%" + "'", str42, "1%");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(fraction52);
    }

    @Test
    public void test08128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08128");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.util.Locale locale8 = new java.util.Locale("zho", "Chinese (Taiwan)", "Overflow trying to convert {0} to fraction ({1}/{2})");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        java.lang.String str10 = locale3.getDisplayCountry(locale8);
        java.lang.String str11 = locale3.getLanguage();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str19 = locale13.getDisplayScript(locale18);
        java.util.Set<java.lang.String> strSet20 = locale13.getUnicodeLocaleKeys();
        java.util.Locale.Category category21 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale22 = java.util.Locale.getDefault(category21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale23);
        java.util.Locale.setDefault(category21, locale23);
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category21, locale26);
        java.lang.String str28 = locale26.getISO3Language();
        java.util.Locale locale31 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getIntegerInstance(locale31);
        java.lang.String str33 = locale26.getDisplayScript(locale31);
        java.lang.String str34 = locale13.getDisplayLanguage(locale26);
        java.lang.String str35 = locale13.getCountry();
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str37 = locale36.getDisplayLanguage();
        java.lang.String str38 = locale13.getDisplayName(locale36);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale36);
        java.lang.String str40 = locale3.getDisplayCountry(locale36);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "HI!" + "'", str10, "HI!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.FORMAT + "'", category21.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fra" + "'", str28, "fra");
        org.junit.Assert.assertEquals(locale31.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinese" + "'", str37, "Chinese");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "HI!" + "'", str40, "HI!");
    }

    @Test
    public void test08129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08129");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayScript();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = locale5.getDisplayScript(locale7);
        java.lang.String str10 = locale5.toLanguageTag();
        java.util.Set<java.lang.String> strSet11 = locale5.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean16 = numberFormat14.equals((java.lang.Object) numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        boolean boolean18 = numberFormat14.equals((java.lang.Object) fractionFormat17);
        fractionFormat12.setDenominatorFormat(numberFormat14);
        properFractionFormat4.setDenominatorFormat(numberFormat14);
        java.util.Locale locale21 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale21);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24, numberFormat26);
        boolean boolean28 = numberFormat26.isGroupingUsed();
        boolean boolean29 = numberFormat26.isGroupingUsed();
        fractionFormat22.setNumeratorFormat(numberFormat26);
        java.lang.Object obj31 = numberFormat26.clone();
        java.lang.Object obj32 = numberFormat26.clone();
        boolean boolean33 = numberFormat26.isParseIntegerOnly();
        java.util.Locale locale35 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale35);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getIntegerInstance(locale35);
        numberFormat37.setMinimumIntegerDigits((int) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat26, numberFormat37);
        int int41 = numberFormat14.getMinimumFractionDigits();
        int int42 = numberFormat14.getMaximumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "und" + "'", str10, "und");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
    }

    @Test
    public void test08130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08130");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = builder6.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder6.setLanguageTag("\ub300\ub9cc");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
    }

    @Test
    public void test08131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08131");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder9 = builder5.addUnicodeLocaleAttribute("fra");
        java.util.Locale locale10 = builder9.build();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder12 = builder9.clearExtensions();
        java.util.Locale.Builder builder14 = builder12.setRegion("US");
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getScript();
        java.lang.String str17 = locale15.getDisplayName();
        java.util.Locale locale18 = locale15.stripExtensions();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale locale21 = builder19.build();
        java.util.Locale.Builder builder22 = builder19.clearExtensions();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.util.Locale.Builder builder25 = builder19.setLocale(locale23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.text.NumberFormat.Field field27 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition29 = new java.text.FieldPosition((java.text.Format.Field) field27, (int) '#');
        java.text.Format.Field field30 = fieldPosition29.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction36.multiply(fraction40);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction33.add(fraction40);
        boolean boolean43 = field30.equals((java.lang.Object) fraction33);
        java.text.FieldPosition fieldPosition44 = new java.text.FieldPosition(field30);
        java.text.Format.Field field45 = fieldPosition44.getFieldAttribute();
        int int46 = fieldPosition44.getEndIndex();
        java.util.Locale locale49 = new java.util.Locale("eng", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        boolean boolean50 = fieldPosition44.equals((java.lang.Object) locale49);
        java.lang.String str51 = locale23.getDisplayCountry(locale49);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getNumberInstance(locale49);
        java.lang.String str53 = locale18.getDisplayCountry(locale49);
        java.util.Locale.Builder builder54 = builder14.setLocale(locale18);
        java.util.Locale.Builder builder55 = builder54.clear();
        java.lang.Class<?> wildcardClass56 = builder55.getClass();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "france__#u-fra");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Korean" + "'", str17, "Korean");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(field27);
        org.junit.Assert.assertNotNull(field30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(field45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals(locale49.toString(), "eng_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test08132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08132");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction8.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str28 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction8.subtract(fraction27);
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.abs();
        long long40 = fraction38.longValue();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction34.multiply(fraction38);
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.negate();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.abs();
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.negate();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.abs();
        long long52 = fraction50.longValue();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction46.multiply(fraction50);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction38.subtract(fraction53);
        org.apache.commons.math.fraction.Fraction fraction57 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str58 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction57);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction38.subtract(fraction57);
        org.apache.commons.math.fraction.Fraction fraction60 = fraction27.divide(fraction59);
        org.apache.commons.math.fraction.Fraction fraction61 = fraction27.reciprocal();
        java.util.Locale.Builder builder62 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder63 = builder62.clearExtensions();
        java.util.Locale.Builder builder65 = builder62.setVariant("");
        java.util.Locale.Builder builder67 = builder65.setLanguage("Japan");
        java.util.Locale.Builder builder69 = builder67.setLanguage("France");
        java.util.Locale.Builder builder70 = builder67.clear();
        java.util.Locale locale72 = java.util.Locale.forLanguageTag("9,700%");
        java.lang.String str73 = locale72.getDisplayLanguage();
        java.util.Locale.Builder builder74 = builder70.setLocale(locale72);
        java.util.Locale.Builder builder75 = builder70.clearExtensions();
        boolean boolean76 = fraction27.equals((java.lang.Object) builder75);
        java.lang.String str77 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 / 100" + "'", str28, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "-1 / 100" + "'", str58, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-1 / 100" + "'", str77, "-1 / 100");
    }

    @Test
    public void test08133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08133");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str3 = locale0.getISO3Language();
        java.text.NumberFormat.Field field4 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field4);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        boolean boolean7 = field4.equals((java.lang.Object) locale6);
        java.lang.String str8 = locale6.getCountry();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str12 = locale9.getDisplayScript(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.lang.String str14 = locale6.getDisplayVariant(locale9);
        java.lang.String str15 = locale0.getDisplayCountry(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zho" + "'", str3, "zho");
        org.junit.Assert.assertNotNull(field4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CN" + "'", str8, "CN");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u53f0\u7063" + "'", str15, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(fractionFormat16);
    }

    @Test
    public void test08134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08134");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale2 = locale1.stripExtensions();
        java.lang.String str3 = locale1.getLanguage();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale1);
        java.text.NumberFormat numberFormat5 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat5);
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field8);
        java.lang.String str10 = fieldPosition9.toString();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayScript();
        java.lang.String str14 = locale11.getDisplayName(locale12);
        boolean boolean15 = fieldPosition9.equals((java.lang.Object) locale12);
        fieldPosition9.setEndIndex((int) '#');
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction24 = properFractionFormat20.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition23);
        boolean boolean25 = fieldPosition9.equals((java.lang.Object) parsePosition23);
        java.lang.String str26 = parsePosition23.toString();
        parsePosition23.setErrorIndex((int) (short) 10);
        java.lang.String str29 = parsePosition23.toString();
        int int30 = parsePosition23.getIndex();
        int int31 = parsePosition23.getErrorIndex();
        java.lang.Object obj32 = fractionFormat6.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=1]", parsePosition23);
        parsePosition23.setIndex((int) (byte) -120);
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ko" + "'", str3, "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str10, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese (Taiwan)" + "'", str14, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNull(fraction24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str26, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=10]" + "'", str29, "java.text.ParsePosition[index=1,errorIndex=10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNull(obj32);
    }

    @Test
    public void test08135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08135");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        boolean boolean12 = numberFormat11.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj22 = numberFormat17.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition21);
        properFractionFormat13.setNumeratorFormat(numberFormat17);
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getCurrencyInstance(locale24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.util.Locale locale28 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale28);
        java.lang.String str31 = fractionFormat29.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat32 = fractionFormat29.getNumeratorFormat();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Locale locale34 = locale33.stripExtensions();
        java.util.Locale locale36 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        java.lang.String str38 = locale36.getDisplayCountry();
        java.lang.String str39 = locale33.getDisplayName(locale36);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale40.getDisplayScript();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale42.getISO3Language();
        java.lang.String str44 = locale40.getDisplayScript(locale42);
        java.lang.String str45 = locale33.getDisplayLanguage(locale42);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getNumberInstance(locale33);
        fractionFormat29.setNumeratorFormat(numberFormat46);
        properFractionFormat26.setWholeFormat(numberFormat46);
        properFractionFormat13.setWholeFormat(numberFormat46);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.util.Locale locale54 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        java.lang.String[] strArray56 = java.util.Locale.getISOCountries();
        boolean boolean57 = numberFormat55.equals((java.lang.Object) strArray56);
        java.lang.String str59 = numberFormat55.format((double) (byte) -1);
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.lang.String str62 = locale61.getDisplayScript();
        java.lang.String str63 = locale60.getDisplayCountry(locale61);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getNumberInstance(locale60);
        numberFormat64.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46, numberFormat55, numberFormat64);
        properFractionFormat9.setWholeFormat(numberFormat55);
        java.text.ParsePosition parsePosition71 = new java.text.ParsePosition((int) '#');
        parsePosition71.setErrorIndex(600);
        org.apache.commons.math.fraction.Fraction fraction74 = properFractionFormat9.parse("\ub300\ub9cc", parsePosition71);
        java.text.NumberFormat numberFormat75 = properFractionFormat9.getWholeFormat();
        numberFormat75.setGroupingUsed(false);
        numberFormat75.setParseIntegerOnly(false);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100 0 / 1" + "'", str31, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
// flaky:         org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Korean" + "'", str39, "Korean");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "kor" + "'", str43, "kor");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str45, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals(locale54.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-100%" + "'", str59, "-100%");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Japan" + "'", str63, "Japan");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNull(fraction74);
        org.junit.Assert.assertNotNull(numberFormat75);
    }

    @Test
    public void test08136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08136");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 2147483647, (double) 'a', 117);
        long long4 = fraction3.longValue();
        java.lang.String str5 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        java.lang.String str6 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException10 = new org.apache.commons.math.fraction.FractionConversionException((double) '4', (long) (-1), (long) (short) 0);
        java.lang.Throwable[] throwableArray11 = fractionConversionException10.getSuppressed();
        boolean boolean12 = fraction3.equals((java.lang.Object) throwableArray11);
        long long13 = fraction3.longValue();
        long long14 = fraction3.longValue();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2147483647L + "'", long4 == 2147483647L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2,147,483,647 / 1" + "'", str5, "2,147,483,647 / 1");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2,147,483,647 / 1" + "'", str6, "2,147,483,647 / 1");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2147483647L + "'", long13 == 2147483647L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2147483647L + "'", long14 == 2147483647L);
    }

    @Test
    public void test08137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08137");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        boolean boolean5 = numberFormat3.isGroupingUsed();
        boolean boolean6 = numberFormat3.isGroupingUsed();
        numberFormat3.setMinimumFractionDigits(1);
        java.lang.Object obj9 = numberFormat3.clone();
        int int10 = numberFormat3.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test08138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08138");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category0, locale5);
        java.lang.String str7 = locale5.getISO3Language();
        java.util.Locale locale10 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale10);
        java.lang.String str12 = locale5.getDisplayScript(locale10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale10);
        numberFormat13.setMaximumFractionDigits(20);
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale17);
        java.util.Currency currency20 = numberFormat19.getCurrency();
        numberFormat19.setMinimumIntegerDigits(1);
        numberFormat19.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj28 = numberFormat19.parseObject("Japan", parsePosition27);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException32 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str33 = fractionConversionException32.getPattern();
        java.lang.Throwable[] throwableArray34 = fractionConversionException32.getSuppressed();
        java.lang.Object[] objArray35 = fractionConversionException32.getArguments();
        boolean boolean36 = parsePosition27.equals((java.lang.Object) objArray35);
        int int37 = parsePosition27.getIndex();
        java.lang.String str38 = parsePosition27.toString();
        parsePosition27.setIndex((-14399));
        java.lang.Object obj41 = numberFormat13.parseObject("17", parsePosition27);
        numberFormat13.setGroupingUsed(false);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fra" + "'", str7, "fra");
        org.junit.Assert.assertEquals(locale10.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "TWD");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str33, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str38, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test08139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08139");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.text.NumberFormat numberFormat6 = properFractionFormat5.getDenominatorFormat();
        java.lang.Number number8 = numberFormat6.parse("-\244 1.00");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + number8 + "' != '" + (-1L) + "'", number8, (-1L));
    }

    @Test
    public void test08140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08140");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.lang.String str8 = locale0.getDisplayCountry(locale7);
        java.lang.String str10 = locale0.getUnicodeLocaleType("ko");
        java.util.Locale locale12 = new java.util.Locale("zh_tw");
        java.lang.String str13 = locale0.getDisplayCountry(locale12);
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = java.util.Locale.getDefault(category14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale16);
        java.util.Locale.setDefault(category14, locale16);
        java.util.Locale locale19 = java.util.Locale.getDefault(category14);
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale21.getISO3Language();
        java.util.Locale.setDefault(category20, locale21);
        java.util.Locale.setDefault(category14, locale21);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = locale25.getISO3Country();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getIntegerInstance(locale25);
        java.util.Locale.setDefault(category14, locale25);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale25);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale25);
        java.lang.String str32 = locale0.getDisplayName(locale25);
        java.lang.String str33 = locale0.getLanguage();
        java.lang.String str35 = locale0.getExtension('u');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Taiwan" + "'", str8, "Taiwan");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_tw");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Taiwan" + "'", str13, "Taiwan");
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "cinese (Taiwan)" + "'", str32, "cinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "zh" + "'", str33, "zh");
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test08141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08141");
        java.text.NumberFormat numberFormat0 = null;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        numberFormat5.setMinimumIntegerDigits((int) (short) -1);
        boolean boolean8 = numberFormat5.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat5);
        java.util.Currency currency10 = numberFormat5.getCurrency();
        numberFormat5.setGroupingUsed(true);
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "XXX");
    }

    @Test
    public void test08142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08142");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.text.NumberFormat numberFormat29 = properFractionFormat28.getWholeFormat();
        java.util.Locale locale33 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        int int35 = numberFormat34.getMaximumIntegerDigits();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        boolean boolean38 = numberFormat37.isGroupingUsed();
        java.util.Currency currency39 = numberFormat37.getCurrency();
        numberFormat34.setCurrency(currency39);
        java.util.Currency currency41 = numberFormat34.getCurrency();
        java.math.RoundingMode roundingMode42 = numberFormat34.getRoundingMode();
        properFractionFormat28.setWholeFormat(numberFormat34);
        java.text.NumberFormat numberFormat44 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat28.getNumeratorFormat();
        java.text.NumberFormat numberFormat46 = properFractionFormat28.getNumeratorFormat();
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getCurrencyInstance();
        int int48 = numberFormat47.getMaximumFractionDigits();
        boolean boolean49 = numberFormat47.isParseIntegerOnly();
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getIntegerInstance();
        java.util.Locale locale52 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale52);
        java.lang.String str55 = fractionFormat53.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat56 = fractionFormat53.getNumeratorFormat();
        numberFormat56.setMaximumFractionDigits((int) (short) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47, numberFormat50, numberFormat56);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getPercentInstance(locale60);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        numberFormat61.setMaximumFractionDigits(100);
        java.lang.String str66 = numberFormat61.format((long) 100);
        int int67 = numberFormat61.getMaximumFractionDigits();
        numberFormat61.setMinimumFractionDigits((int) (short) 0);
        int int70 = numberFormat61.getMaximumFractionDigits();
        java.math.RoundingMode roundingMode71 = numberFormat61.getRoundingMode();
        numberFormat61.setGroupingUsed(false);
        java.lang.Object obj74 = numberFormat61.clone();
        properFractionFormat59.setNumeratorFormat(numberFormat61);
        java.text.NumberFormat numberFormat76 = properFractionFormat59.getWholeFormat();
        java.text.NumberFormat numberFormat77 = properFractionFormat59.getWholeFormat();
        properFractionFormat28.setNumeratorFormat(numberFormat77);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals(locale33.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency41);
        org.junit.Assert.assertEquals(currency41.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode42 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode42.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals(locale52.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "100 0 / 1" + "'", str55, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "10,000%" + "'", str66, "10,000%");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertTrue("'" + roundingMode71 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode71.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(numberFormat77);
    }

    @Test
    public void test08143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08143");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        boolean boolean47 = numberFormat45.equals((java.lang.Object) strArray46);
        java.lang.String str49 = numberFormat45.format((double) (byte) -1);
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale50.getDisplayCountry(locale51);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getNumberInstance(locale50);
        numberFormat54.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36, numberFormat45, numberFormat54);
        java.util.Locale locale61 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance(locale61);
        numberFormat62.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str66 = numberFormat62.format((double) 0.0f);
        java.util.Locale locale70 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getPercentInstance(locale70);
        int int72 = numberFormat71.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = new org.apache.commons.math.fraction.FractionFormat(numberFormat71);
        java.text.NumberFormat numberFormat74 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62, numberFormat71, numberFormat74);
        properFractionFormat57.setWholeFormat(numberFormat62);
        java.util.Locale locale77 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat78 = java.text.NumberFormat.getCurrencyInstance(locale77);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat78);
        java.text.NumberFormat numberFormat80 = properFractionFormat79.getWholeFormat();
        numberFormat80.setGroupingUsed(false);
        numberFormat80.setMaximumIntegerDigits(1);
        numberFormat80.setMaximumFractionDigits(120);
        java.math.RoundingMode roundingMode87 = numberFormat80.getRoundingMode();
        properFractionFormat57.setWholeFormat(numberFormat80);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Korean" + "'", str29, "Korean");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-100%" + "'", str49, "-100%");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Japan" + "'", str53, "Japan");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals(locale61.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0%" + "'", str66, "0%");
        org.junit.Assert.assertEquals(locale70.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertTrue("'" + roundingMode87 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode87.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test08144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08144");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        long long4 = fraction2.longValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        int int7 = fraction6.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction11.add(fraction17);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction20.divide(fraction23);
        int int26 = fraction20.intValue();
        float float27 = fraction20.floatValue();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction28.divide(fraction31);
        org.apache.commons.math.fraction.Fraction fraction36 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str37 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction36);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction28.subtract(fraction36);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction6.divide(fraction36);
        java.util.Locale locale40 = java.util.Locale.JAPAN;
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale41.getDisplayScript();
        java.lang.String str43 = locale40.getDisplayCountry(locale41);
        java.util.Locale locale44 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str45 = locale44.getDisplayLanguage();
        java.util.Locale locale46 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str47 = locale44.getDisplayCountry(locale46);
        java.lang.String str48 = locale41.getDisplayName(locale46);
        java.util.Set<java.lang.Character> charSet49 = locale41.getExtensionKeys();
        java.util.Locale locale50 = locale41.stripExtensions();
        java.lang.String str51 = locale41.getVariant();
        boolean boolean52 = fraction39.equals((java.lang.Object) locale41);
        float float53 = fraction39.floatValue();
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'x', 117);
        org.apache.commons.math.fraction.Fraction fraction59 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.negate();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.abs();
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.negate();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.abs();
        long long67 = fraction65.longValue();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction61.multiply(fraction65);
        org.apache.commons.math.fraction.Fraction fraction71 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction72 = fraction71.negate();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction72.abs();
        org.apache.commons.math.fraction.Fraction fraction76 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction77 = fraction76.negate();
        org.apache.commons.math.fraction.Fraction fraction78 = fraction77.abs();
        long long79 = fraction77.longValue();
        org.apache.commons.math.fraction.Fraction fraction80 = fraction73.multiply(fraction77);
        org.apache.commons.math.fraction.Fraction fraction81 = fraction65.subtract(fraction80);
        int int82 = fraction81.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction83 = fraction56.add(fraction81);
        org.apache.commons.math.fraction.Fraction fraction86 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction87 = fraction86.reciprocal();
        int int88 = fraction87.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction89 = fraction83.divide(fraction87);
        org.apache.commons.math.fraction.Fraction fraction90 = fraction39.subtract(fraction87);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1 / 100" + "'", str3, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 0.016666668f + "'", float27 == 0.016666668f);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1 / 100" + "'", str37, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Japan" + "'", str43, "Japan");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str45, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Taiwan" + "'", str47, "Taiwan");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(charSet49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + (-1.0f) + "'", float53 == (-1.0f));
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 119 + "'", int82 == 119);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-100) + "'", int88 == (-100));
        org.junit.Assert.assertNotNull(fraction89);
        org.junit.Assert.assertNotNull(fraction90);
    }

    @Test
    public void test08145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08145");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 100, (int) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.negate();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.abs();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction7.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.abs();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction13.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction7.add(fraction13);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction16.divide(fraction19);
        int int22 = fraction16.intValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 100, (int) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.negate();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction23.multiply(fraction26);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.negate();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction36.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction32.add(fraction38);
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction29.multiply(fraction39);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction2.divide(fraction39);
        int int43 = fraction42.getNumerator();
        java.lang.String str44 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction42);
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 100);
        java.lang.String str48 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction47);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction47.negate();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.negate();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction49.negate();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction42.subtract(fraction49);
        int int53 = fraction49.getDenominator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-120) + "'", int43 == (-120));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-120 / 119" + "'", str44, "-120 / 119");
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0 / 1" + "'", str48, "0 / 1");
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test08146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08146");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        java.lang.String str3 = numberFormat0.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat5 = properFractionFormat4.getWholeFormat();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction12 = properFractionFormat8.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        boolean boolean18 = numberFormat17.isGroupingUsed();
        properFractionFormat15.setWholeFormat(numberFormat17);
        java.text.NumberFormat numberFormat20 = properFractionFormat15.getWholeFormat();
        properFractionFormat8.setWholeFormat(numberFormat20);
        java.text.NumberFormat numberFormat22 = properFractionFormat8.getNumeratorFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat8.getWholeFormat();
        properFractionFormat4.setNumeratorFormat(numberFormat23);
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale25);
        boolean boolean27 = numberFormat26.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat30, numberFormat32);
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj37 = numberFormat32.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition36);
        properFractionFormat28.setNumeratorFormat(numberFormat32);
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getCurrencyInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.util.Locale locale43 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale43);
        java.lang.String str46 = fractionFormat44.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat47 = fractionFormat44.getNumeratorFormat();
        java.util.Locale locale48 = java.util.Locale.getDefault();
        java.util.Locale locale49 = locale48.stripExtensions();
        java.util.Locale locale51 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale51);
        java.lang.String str53 = locale51.getDisplayCountry();
        java.lang.String str54 = locale48.getDisplayName(locale51);
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayScript();
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.lang.String str58 = locale57.getISO3Language();
        java.lang.String str59 = locale55.getDisplayScript(locale57);
        java.lang.String str60 = locale48.getDisplayLanguage(locale57);
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getNumberInstance(locale48);
        fractionFormat44.setNumeratorFormat(numberFormat61);
        properFractionFormat41.setWholeFormat(numberFormat61);
        properFractionFormat28.setWholeFormat(numberFormat61);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        java.util.Locale locale69 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getPercentInstance(locale69);
        java.lang.String[] strArray71 = java.util.Locale.getISOCountries();
        boolean boolean72 = numberFormat70.equals((java.lang.Object) strArray71);
        java.lang.String str74 = numberFormat70.format((double) (byte) -1);
        java.util.Locale locale75 = java.util.Locale.JAPAN;
        java.util.Locale locale76 = java.util.Locale.ROOT;
        java.lang.String str77 = locale76.getDisplayScript();
        java.lang.String str78 = locale75.getDisplayCountry(locale76);
        java.text.NumberFormat numberFormat79 = java.text.NumberFormat.getNumberInstance(locale75);
        numberFormat79.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61, numberFormat70, numberFormat79);
        java.text.NumberFormat numberFormat83 = properFractionFormat82.getWholeFormat();
        int int84 = numberFormat83.getMaximumFractionDigits();
        numberFormat83.setMaximumFractionDigits(35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat87 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23, numberFormat83);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction89 = fractionFormat87.parse("fr-CA");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"fr-CA\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
        org.junit.Assert.assertEquals(currency1.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100%" + "'", str3, "100%");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(fraction12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals(locale43.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100 0 / 1" + "'", str46, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(locale48);
// flaky:         org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(locale49);
// flaky:         org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals(locale51.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "kor" + "'", str58, "kor");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertEquals(locale69.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-100%" + "'", str74, "-100%");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Japan" + "'", str78, "Japan");
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
    }

    @Test
    public void test08147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08147");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = properFractionFormat2.clone();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj7 = properFractionFormat2.parseObject("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (10/97)", parsePosition6);
        java.util.Locale locale8 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat13);
        boolean boolean15 = numberFormat13.isGroupingUsed();
        boolean boolean16 = numberFormat13.isGroupingUsed();
        fractionFormat9.setNumeratorFormat(numberFormat13);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale18.getISO3Language();
        java.lang.String str20 = locale18.getDisplayCountry();
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.lang.String str23 = locale21.getISO3Language();
        java.lang.String str24 = locale18.getDisplayScript(locale21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getIntegerInstance(locale18);
        java.util.Currency currency27 = numberFormat26.getCurrency();
        numberFormat13.setCurrency(currency27);
        properFractionFormat2.setWholeFormat(numberFormat13);
        java.text.NumberFormat numberFormat30 = properFractionFormat2.getNumeratorFormat();
        numberFormat30.setMaximumIntegerDigits(9);
        java.util.Currency currency33 = numberFormat30.getCurrency();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zho" + "'", str23, "zho");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(currency33);
        org.junit.Assert.assertEquals(currency33.toString(), "XXX");
    }

    @Test
    public void test08148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08148");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        java.lang.Object obj5 = numberFormat3.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.util.Locale locale11 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str14 = fractionFormat12.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat15 = fractionFormat12.getNumeratorFormat();
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Locale locale17 = locale16.stripExtensions();
        java.util.Locale locale19 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale19);
        java.lang.String str21 = locale19.getDisplayCountry();
        java.lang.String str22 = locale16.getDisplayName(locale19);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale23.getDisplayScript();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale25.getISO3Language();
        java.lang.String str27 = locale23.getDisplayScript(locale25);
        java.lang.String str28 = locale16.getDisplayLanguage(locale25);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale16);
        fractionFormat12.setNumeratorFormat(numberFormat29);
        properFractionFormat9.setWholeFormat(numberFormat29);
        fractionFormat6.setNumeratorFormat(numberFormat29);
        java.lang.String str34 = numberFormat29.format((-1.0d));
        boolean boolean35 = numberFormat1.equals((java.lang.Object) numberFormat29);
        java.lang.Object obj36 = numberFormat1.clone();
        int int37 = numberFormat1.getMaximumIntegerDigits();
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Locale locale39 = locale38.stripExtensions();
        java.util.Locale locale41 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.lang.String str43 = locale41.getDisplayCountry();
        java.lang.String str44 = locale38.getDisplayName(locale41);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.lang.String str46 = locale45.getDisplayScript();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale47.getISO3Language();
        java.lang.String str49 = locale45.getDisplayScript(locale47);
        java.lang.String str50 = locale38.getDisplayLanguage(locale47);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getNumberInstance(locale38);
        java.util.Currency currency52 = numberFormat51.getCurrency();
        java.util.Locale locale56 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance(locale56);
        int int58 = numberFormat57.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = new org.apache.commons.math.fraction.FractionFormat(numberFormat57);
        numberFormat57.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode62 = numberFormat57.getRoundingMode();
        numberFormat51.setRoundingMode(roundingMode62);
        java.math.RoundingMode roundingMode64 = numberFormat51.getRoundingMode();
        java.util.Currency currency65 = numberFormat51.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat51);
        numberFormat51.setMaximumIntegerDigits((int) (byte) -51);
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "100 0 / 1" + "'", str14, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinese (Taiwan)" + "'", str22, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str28, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1" + "'", str34, "-1");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(locale38);
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale39);
// flaky:         org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale41.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Chinese (Taiwan)" + "'", str44, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "kor" + "'", str48, "kor");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str50, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(currency52);
// flaky:         org.junit.Assert.assertEquals(currency52.toString(), "TWD");
        org.junit.Assert.assertEquals(locale56.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode62 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode62.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + roundingMode64 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode64.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(currency65);
// flaky:         org.junit.Assert.assertEquals(currency65.toString(), "TWD");
    }

    @Test
    public void test08149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08149");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition((int) '4');
        parsePosition8.setIndex(0);
        java.lang.Object obj11 = properFractionFormat5.parseObject("und", parsePosition8);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        boolean boolean18 = numberFormat17.isGroupingUsed();
        properFractionFormat15.setWholeFormat(numberFormat17);
        java.text.NumberFormat numberFormat20 = properFractionFormat15.getWholeFormat();
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number24 = numberFormat20.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition23);
        org.apache.commons.math.fraction.Fraction fraction25 = properFractionFormat5.parse("\u6cd5\u6587\u6cd5\u570b)", parsePosition23);
        java.lang.String str26 = parsePosition23.toString();
        parsePosition23.setIndex((-14400));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNull(number24);
        org.junit.Assert.assertNull(fraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str26, "java.text.ParsePosition[index=1,errorIndex=1]");
    }

    @Test
    public void test08150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08150");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction4.abs();
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        long long23 = fraction21.longValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction17.multiply(fraction21);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction4.multiply(fraction24);
        java.text.NumberFormat.Field field26 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition28 = new java.text.FieldPosition((java.text.Format.Field) field26, (int) '#');
        java.text.Format.Field field29 = fieldPosition28.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction35.multiply(fraction39);
        org.apache.commons.math.fraction.Fraction fraction41 = fraction32.add(fraction39);
        boolean boolean42 = field29.equals((java.lang.Object) fraction32);
        java.lang.String str43 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction32);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction25.multiply(fraction32);
        java.util.Locale.Category category45 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale46 = java.util.Locale.getDefault(category45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale47);
        java.util.Locale.setDefault(category45, locale47);
        java.util.Locale locale50 = java.util.Locale.getDefault(category45);
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale50);
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.negate();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.abs();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction56.abs();
        org.apache.commons.math.fraction.Fraction fraction61 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction62 = fraction61.negate();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction62.abs();
        org.apache.commons.math.fraction.Fraction fraction64 = fraction62.abs();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction56.add(fraction62);
        org.apache.commons.math.fraction.Fraction fraction68 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction69 = fraction68.negate();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction65.divide(fraction68);
        int int71 = fraction65.intValue();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction65.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction65.abs();
        int int74 = fraction65.getDenominator();
        java.lang.String str75 = numberFormat52.format((java.lang.Object) fraction65);
        org.apache.commons.math.fraction.Fraction fraction78 = org.apache.commons.math.fraction.Fraction.getReducedFraction(1, (int) (byte) -120);
        int int79 = fraction78.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction80 = fraction65.multiply(fraction78);
        int int81 = fraction25.compareTo((java.lang.Object) fraction78);
        org.apache.commons.math.fraction.Fraction fraction82 = fraction25.negate();
        long long83 = fraction82.longValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(field26);
        org.junit.Assert.assertNotNull(field29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1 / 120" + "'", str43, "-1 / 120");
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + category45 + "' != '" + java.util.Locale.Category.FORMAT + "'", category45.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale46);
// flaky:         org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 60 + "'", int74 == 60);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2%" + "'", str75, "2%");
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
    }

    @Test
    public void test08151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08151");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.List<java.lang.String> strList10 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList10);
        java.util.Collection<java.lang.String> strCollection12 = null;
        java.util.Locale.FilteringMode filteringMode13 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection12, filteringMode13);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str17 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap18);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList28);
        java.lang.String str31 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList30);
        java.util.Collection<java.lang.String> strCollection32 = null;
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strCollection32, filteringMode33);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str37 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strSet36);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap38 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList39 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap38);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList41 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.lang.String>) strSet46);
        java.util.Locale.FilteringMode filteringMode48 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags(languageRangeList41, (java.util.Collection<java.lang.String>) strSet46, filteringMode48);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale50);
        java.util.Locale locale55 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str56 = locale50.getDisplayScript(locale55);
        java.util.Set<java.lang.String> strSet57 = locale50.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags(languageRangeList41, (java.util.Collection<java.lang.String>) strSet57);
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags(languageRangeList39, (java.util.Collection<java.lang.String>) strSet57);
        java.lang.String str60 = java.util.Locale.lookupTag(languageRangeList19, (java.util.Collection<java.lang.String>) strList59);
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.util.Locale locale64 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList66 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.lang.String>) strSet65);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap67 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList68 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, strMap67);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap69 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList70 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, strMap69);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap71 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList72 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList70, strMap71);
        java.util.Locale.Builder builder73 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder74 = builder73.clearExtensions();
        java.util.Locale.Builder builder76 = builder73.setVariant("");
        java.util.Locale.Builder builder77 = builder76.clearExtensions();
        java.util.Locale.Category category78 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale79 = java.util.Locale.getDefault(category78);
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat81 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale80);
        java.util.Locale.setDefault(category78, locale80);
        java.util.Locale locale83 = java.util.Locale.getDefault(category78);
        java.util.Set<java.lang.String> strSet84 = locale83.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder85 = builder76.setLocale(locale83);
        java.util.Set<java.lang.String> strSet86 = locale83.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags(languageRangeList70, (java.util.Collection<java.lang.String>) strSet86);
        java.lang.String str88 = java.util.Locale.lookupTag(languageRangeList19, (java.util.Collection<java.lang.String>) strSet86);
        java.util.Locale locale90 = java.util.Locale.forLanguageTag("und");
        java.util.Set<java.lang.String> strSet91 = locale90.getUnicodeLocaleAttributes();
        java.lang.String str92 = java.util.Locale.lookupTag(languageRangeList19, (java.util.Collection<java.lang.String>) strSet91);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + filteringMode13 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode13.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode33.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(languageRangeList39);
        org.junit.Assert.assertNotNull(languageRangeList41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + filteringMode48 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode48.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(locale64);
// flaky:         org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(languageRangeList68);
        org.junit.Assert.assertNotNull(languageRangeList70);
        org.junit.Assert.assertNotNull(languageRangeList72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + category78 + "' != '" + java.util.Locale.Category.FORMAT + "'", category78.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat81);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "");
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNull(str92);
    }

    @Test
    public void test08152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08152");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction13 = properFractionFormat9.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition12);
        java.lang.Object obj14 = numberFormat1.parseObject("zh-TW", parsePosition12);
        numberFormat1.setMinimumIntegerDigits((int) (byte) 0);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        boolean boolean19 = numberFormat18.isParseIntegerOnly();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.lang.String str23 = locale20.getISO3Country();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale20);
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        int int30 = numberFormat29.getMaximumIntegerDigits();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        boolean boolean33 = numberFormat32.isGroupingUsed();
        java.util.Currency currency34 = numberFormat32.getCurrency();
        numberFormat29.setCurrency(currency34);
        java.util.Currency currency36 = numberFormat29.getCurrency();
        int int37 = numberFormat29.getMaximumFractionDigits();
        java.lang.Object obj38 = numberFormat29.clone();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        numberFormat40.setMaximumFractionDigits(100);
        numberFormat40.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str47 = numberFormat40.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat29, numberFormat40);
        numberFormat40.setMinimumIntegerDigits(600);
        numberFormat40.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat18, numberFormat40);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        java.util.Locale locale57 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale57);
        java.lang.String str59 = locale57.getDisplayCountry();
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getIntegerInstance(locale57);
        java.lang.String str61 = locale54.getDisplayCountry(locale57);
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance(locale54);
        properFractionFormat53.setWholeFormat(numberFormat62);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.lang.String str65 = locale64.getISO3Language();
        java.lang.String str66 = locale64.getDisplayCountry();
        java.util.Locale locale67 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet68 = locale67.getUnicodeLocaleAttributes();
        java.lang.String str69 = locale67.getISO3Language();
        java.lang.String str70 = locale64.getDisplayScript(locale67);
        org.apache.commons.math.fraction.FractionFormat fractionFormat71 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale64);
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getCurrencyInstance(locale64);
        java.lang.String str73 = locale64.getDisplayName();
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getInstance(locale64);
        int int75 = numberFormat74.getMinimumFractionDigits();
        properFractionFormat53.setWholeFormat(numberFormat74);
        java.text.ParsePosition parsePosition79 = new java.text.ParsePosition(8654399);
        org.apache.commons.math.fraction.Fraction fraction80 = properFractionFormat53.parse("java.text.ParsePosition[index=1,errorIndex=0]", parsePosition79);
        java.text.NumberFormat numberFormat81 = properFractionFormat53.getWholeFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNull(fraction13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100%" + "'", str47, "100%");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals(locale57.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "France" + "'", str61, "France");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "kor" + "'", str65, "kor");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "zho" + "'", str69, "zho");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(fractionFormat71);
        org.junit.Assert.assertNotNull(numberFormat72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u97d3\u6587" + "'", str73, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNull(fraction80);
        org.junit.Assert.assertNotNull(numberFormat81);
    }

    @Test
    public void test08153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08153");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str10 = locale8.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.lang.String str12 = locale5.getDisplayCountry(locale8);
        java.lang.String str13 = locale5.getISO3Language();
        java.lang.String str14 = locale5.getDisplayName();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale16 = java.util.Locale.getDefault(category0);
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.util.Locale locale18 = locale17.stripExtensions();
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        java.lang.String str23 = locale17.getDisplayName(locale20);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale24.getDisplayScript();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale26.getISO3Language();
        java.lang.String str28 = locale24.getDisplayScript(locale26);
        java.lang.String str29 = locale17.getDisplayLanguage(locale26);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getNumberInstance(locale17);
        java.util.Locale.setDefault(category0, locale17);
        java.util.Set<java.lang.String> strSet32 = locale17.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getInstance(locale17);
        numberFormat33.setMaximumIntegerDigits((-119));
        java.util.Currency currency36 = numberFormat33.getCurrency();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "France" + "'", str12, "France");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fra" + "'", str13, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u6cd5\u6587\u6cd5\u570b)" + "'", str14, "\u6cd5\u6587\u6cd5\u570b)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Chinese (Taiwan)" + "'", str23, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "kor" + "'", str27, "kor");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str29, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(currency36);
// flaky:         org.junit.Assert.assertEquals(currency36.toString(), "TWD");
    }

    @Test
    public void test08154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08154");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(10);
        int int2 = fieldPosition1.getEndIndex();
        fieldPosition1.setBeginIndex((int) '#');
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.lang.String str6 = locale5.getScript();
        java.util.Locale locale10 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str11 = locale5.getDisplayScript(locale10);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getNumberInstance(locale10);
        int int13 = numberFormat12.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        boolean boolean16 = fieldPosition1.equals((java.lang.Object) numberFormat12);
        fieldPosition1.setEndIndex((int) (byte) 100);
        int int19 = fieldPosition1.getField();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals(locale10.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test08155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08155");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getIntegerInstance(locale6);
        java.lang.String str8 = locale6.getISO3Language();
        java.util.Locale.Category category9 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale10 = java.util.Locale.getDefault(category9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale11);
        java.util.Locale.setDefault(category9, locale11);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.util.Locale locale17 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getIntegerInstance(locale17);
        java.lang.String str21 = locale14.getDisplayCountry(locale17);
        java.lang.String str22 = locale14.getISO3Language();
        java.lang.String str23 = locale14.getDisplayName();
        java.util.Locale.setDefault(category9, locale14);
        java.lang.String str25 = locale6.getDisplayLanguage(locale14);
        java.util.Locale.setDefault(category0, locale14);
        java.util.Locale locale27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Can't set default locale to NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.FORMAT + "'", category9.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "France" + "'", str21, "France");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fra" + "'", str22, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u6cd5\u6587\u6cd5\u570b)" + "'", str23, "\u6cd5\u6587\u6cd5\u570b)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test08156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08156");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 100);
        long long2 = fraction1.longValue();
        org.apache.commons.math.fraction.Fraction fraction5 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str6 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction5);
        long long7 = fraction5.longValue();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction1.divide(fraction9);
        int int11 = fraction9.getNumerator();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-1 / 100" + "'", str6, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test08157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08157");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.lang.String str10 = locale2.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale2);
        numberFormat11.setMaximumIntegerDigits((int) 'a');
        numberFormat11.setMinimumFractionDigits((int) (short) -14400);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.text.NumberFormat numberFormat17 = properFractionFormat16.getNumeratorFormat();
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale18);
        java.util.Locale locale20 = java.util.Locale.getDefault();
        boolean boolean21 = numberFormat19.equals((java.lang.Object) locale20);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.lang.String str25 = locale23.getDisplayCountry();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getIntegerInstance(locale23);
        java.lang.String str27 = locale20.getDisplayVariant(locale23);
        java.lang.String str28 = locale20.getDisplayCountry();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale20);
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("zh-TW");
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getNumberInstance(locale31);
        numberFormat32.setGroupingUsed(false);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale35.getISO3Language();
        java.util.Set<java.lang.String> strSet37 = locale35.getUnicodeLocaleKeys();
        java.lang.String str38 = locale35.getISO3Country();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getNumberInstance(locale35);
        java.util.Locale locale43 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale43);
        int int45 = numberFormat44.getMaximumIntegerDigits();
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance(locale46);
        boolean boolean48 = numberFormat47.isGroupingUsed();
        java.util.Currency currency49 = numberFormat47.getCurrency();
        numberFormat44.setCurrency(currency49);
        java.util.Currency currency51 = numberFormat44.getCurrency();
        int int52 = numberFormat44.getMaximumFractionDigits();
        java.lang.Object obj53 = numberFormat44.clone();
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        numberFormat55.setMaximumFractionDigits(100);
        numberFormat55.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str62 = numberFormat55.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39, numberFormat44, numberFormat55);
        java.text.NumberFormat.Field field65 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition66 = new java.text.FieldPosition((java.text.Format.Field) field65);
        java.lang.String str67 = fieldPosition66.toString();
        java.util.Locale locale68 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale69 = java.util.Locale.ROOT;
        java.lang.String str70 = locale69.getDisplayScript();
        java.lang.String str71 = locale68.getDisplayName(locale69);
        boolean boolean72 = fieldPosition66.equals((java.lang.Object) locale69);
        fieldPosition66.setEndIndex((int) '#');
        java.util.Locale locale75 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getCurrencyInstance(locale75);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        java.text.ParsePosition parsePosition80 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction81 = properFractionFormat77.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition80);
        boolean boolean82 = fieldPosition66.equals((java.lang.Object) parsePosition80);
        int int83 = parsePosition80.getIndex();
        org.apache.commons.math.fraction.Fraction fraction84 = properFractionFormat63.parse("hi!", parsePosition80);
        java.text.ParsePosition parsePosition87 = new java.text.ParsePosition(120);
        parsePosition87.setErrorIndex(119);
        org.apache.commons.math.fraction.Fraction fraction90 = properFractionFormat63.parse("java.text.ParsePosition[index=97,errorIndex=-1]", parsePosition87);
        java.text.NumberFormat numberFormat91 = properFractionFormat63.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat92 = new org.apache.commons.math.fraction.FractionFormat(numberFormat32, numberFormat91);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat93 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17, numberFormat29, numberFormat32);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u53f0\u7063" + "'", str10, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale20);
// flaky:         org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u53f0\u7063" + "'", str28, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "kor" + "'", str36, "kor");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals(locale43.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency51);
        org.junit.Assert.assertEquals(currency51.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "100%" + "'", str62, "100%");
        org.junit.Assert.assertNotNull(field65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str67, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Chinese (Taiwan)" + "'", str71, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNull(fraction81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNull(fraction84);
        org.junit.Assert.assertNull(fraction90);
        org.junit.Assert.assertNotNull(numberFormat91);
    }

    @Test
    public void test08158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08158");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.lang.String str8 = locale0.getDisplayCountry(locale7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat11 = fractionFormat10.getNumeratorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u4e2d\u6587" + "'", str1, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Taiwan" + "'", str8, "Taiwan");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
    }

    @Test
    public void test08159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08159");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        boolean boolean19 = numberFormat18.isGroupingUsed();
        properFractionFormat16.setWholeFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat11, numberFormat18);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24, numberFormat26);
        numberFormat26.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field31 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition32 = new java.text.FieldPosition((java.text.Format.Field) field31);
        java.lang.String str33 = fieldPosition32.toString();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale35.getDisplayScript();
        java.lang.String str37 = locale34.getDisplayName(locale35);
        boolean boolean38 = fieldPosition32.equals((java.lang.Object) locale35);
        fieldPosition32.setEndIndex((int) '#');
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getCurrencyInstance(locale41);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.text.ParsePosition parsePosition46 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction47 = properFractionFormat43.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition46);
        boolean boolean48 = fieldPosition32.equals((java.lang.Object) parsePosition46);
        java.lang.Number number49 = numberFormat26.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition46);
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.negate();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.abs();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction53.abs();
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getInstance(locale56);
        java.util.Locale locale58 = java.util.Locale.getDefault();
        boolean boolean59 = numberFormat57.equals((java.lang.Object) locale58);
        boolean boolean60 = fraction55.equals((java.lang.Object) locale58);
        boolean boolean61 = parsePosition46.equals((java.lang.Object) locale58);
        java.lang.Object obj62 = properFractionFormat21.parseObject("\uc911\uad6d\uc5b4", parsePosition46);
        java.text.NumberFormat numberFormat63 = properFractionFormat21.getWholeFormat();
        java.util.Locale locale66 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale66);
        java.lang.String str69 = fractionFormat67.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat70 = fractionFormat67.getNumeratorFormat();
        java.text.NumberFormat numberFormat71 = fractionFormat67.getNumeratorFormat();
        java.util.Locale locale72 = java.util.Locale.ITALY;
        boolean boolean73 = numberFormat71.equals((java.lang.Object) locale72);
        java.util.Locale.Builder builder74 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder76 = builder74.setScript("");
        java.util.Locale locale77 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str78 = locale77.getDisplayLanguage();
        java.lang.String str79 = locale77.toLanguageTag();
        java.util.Locale locale80 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet81 = locale80.getUnicodeLocaleAttributes();
        java.lang.String str82 = locale80.getISO3Language();
        java.lang.String str83 = locale77.getDisplayScript(locale80);
        java.util.Locale locale84 = java.util.Locale.ITALIAN;
        java.lang.String str85 = locale77.getDisplayCountry(locale84);
        java.util.Locale.Builder builder86 = builder74.setLocale(locale84);
        java.text.NumberFormat numberFormat87 = java.text.NumberFormat.getInstance(locale84);
        java.lang.String str88 = locale72.getDisplayVariant(locale84);
        org.apache.commons.math.fraction.FractionFormat fractionFormat89 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale84);
        java.text.ParsePosition parsePosition92 = new java.text.ParsePosition((int) (short) 100);
        int int93 = parsePosition92.getErrorIndex();
        java.lang.Object obj94 = fractionFormat89.parseObject("-32", parsePosition92);
        java.lang.Object obj95 = properFractionFormat21.parseObject("java.text.ParsePosition[index=6,errorIndex=1]", parsePosition92);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(field31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str33, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinese (Taiwan)" + "'", str37, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNull(fraction47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(number49);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(locale58);
// flaky:         org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertEquals(locale66.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "100 0 / 1" + "'", str69, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u4e2d\u6587" + "'", str78, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "zh-TW" + "'", str79, "zh-TW");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "zho" + "'", str82, "zho");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "it");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Taiwan" + "'", str85, "Taiwan");
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(fractionFormat89);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNull(obj95);
    }

    @Test
    public void test08160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08160");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("62%");
        java.lang.String str2 = locale1.getDisplayVariant();
        java.util.Locale.setDefault(locale1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(fractionFormat4);
    }

    @Test
    public void test08161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08161");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        boolean boolean19 = numberFormat18.isGroupingUsed();
        properFractionFormat16.setWholeFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat11, numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        numberFormat27.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str31 = numberFormat27.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27);
        java.text.NumberFormat numberFormat33 = fractionFormat32.getNumeratorFormat();
        java.lang.String str35 = numberFormat33.format(1.0d);
        java.lang.String str37 = numberFormat33.format((long) 117);
        properFractionFormat22.setWholeFormat(numberFormat33);
        java.text.NumberFormat numberFormat39 = properFractionFormat22.getWholeFormat();
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getCurrencyInstance(locale41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.text.ParsePosition parsePosition46 = new java.text.ParsePosition(100);
        java.lang.Object obj47 = fractionFormat43.parseObject("1 / 60", parsePosition46);
        parsePosition46.setErrorIndex(52);
        java.lang.Object obj50 = properFractionFormat22.parseObject("-\244 10.00", parsePosition46);
        java.text.NumberFormat numberFormat51 = properFractionFormat22.getWholeFormat();
        java.util.Locale locale52 = java.util.Locale.JAPAN;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.lang.String str54 = locale53.getDisplayScript();
        java.lang.String str55 = locale52.getDisplayCountry(locale53);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getNumberInstance(locale52);
        int int57 = numberFormat56.getMinimumFractionDigits();
        java.util.Locale locale59 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getInstance(locale59);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance(locale61);
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = new org.apache.commons.math.fraction.FractionFormat(numberFormat60, numberFormat62);
        numberFormat62.setMinimumFractionDigits((int) '4');
        int int66 = numberFormat62.getMinimumFractionDigits();
        java.text.ParsePosition parsePosition69 = new java.text.ParsePosition((int) '4');
        parsePosition69.setErrorIndex(600);
        java.lang.String str72 = parsePosition69.toString();
        java.lang.Object obj73 = numberFormat62.parseObject("fr", parsePosition69);
        java.lang.String str74 = parsePosition69.toString();
        java.lang.Object obj75 = numberFormat56.parseObject("\u82f1\u6587", parsePosition69);
        java.util.Locale locale79 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat80 = java.text.NumberFormat.getPercentInstance(locale79);
        java.lang.String str82 = numberFormat80.format((double) 10L);
        java.util.Currency currency83 = numberFormat80.getCurrency();
        numberFormat56.setCurrency(currency83);
        java.lang.Object obj85 = numberFormat56.clone();
        java.lang.StringBuffer stringBuffer86 = null;
        java.text.FieldPosition fieldPosition88 = new java.text.FieldPosition(34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer89 = properFractionFormat22.format((java.lang.Object) numberFormat56, stringBuffer86, fieldPosition88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0%" + "'", str31, "0%");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "100%" + "'", str35, "100%");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "11,700%" + "'", str37, "11,700%");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Japan" + "'", str55, "Japan");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "java.text.ParsePosition[index=52,errorIndex=600]" + "'", str72, "java.text.ParsePosition[index=52,errorIndex=600]");
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "java.text.ParsePosition[index=52,errorIndex=52]" + "'", str74, "java.text.ParsePosition[index=52,errorIndex=52]");
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertEquals(locale79.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "1,000%" + "'", str82, "1,000%");
        org.junit.Assert.assertNotNull(currency83);
        org.junit.Assert.assertEquals(currency83.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj85);
    }

    @Test
    public void test08162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08162");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat14 = properFractionFormat3.getNumeratorFormat();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.Object obj18 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat19 = properFractionFormat17.getWholeFormat();
        int int20 = numberFormat19.getMaximumIntegerDigits();
        java.lang.Object obj21 = numberFormat19.clone();
        properFractionFormat3.setNumeratorFormat(numberFormat19);
        int int23 = numberFormat19.getMinimumFractionDigits();
        numberFormat19.setGroupingUsed(false);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test08163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08163");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.util.Locale locale12 = java.util.Locale.getDefault(category0);
        java.util.Locale locale16 = new java.util.Locale("119", "2,857", "ita");
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale.Category category18 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale19 = java.util.Locale.getDefault(category18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale20);
        java.util.Locale.setDefault(category18, locale20);
        java.util.Locale locale23 = java.util.Locale.getDefault(category18);
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale25.getISO3Language();
        java.util.Locale.setDefault(category24, locale25);
        java.util.Locale.setDefault(category18, locale25);
        java.util.Locale locale29 = java.util.Locale.getDefault(category18);
        java.util.Locale locale30 = java.util.Locale.getDefault(category18);
        java.util.Locale locale34 = new java.util.Locale("119", "2,857", "ita");
        java.util.Locale.setDefault(category18, locale34);
        java.util.Locale.setDefault(category0, locale34);
        java.text.NumberFormat.Field field37 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition38 = new java.text.FieldPosition((java.text.Format.Field) field37);
        java.lang.String str39 = fieldPosition38.toString();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale41.getDisplayScript();
        java.lang.String str43 = locale40.getDisplayName(locale41);
        boolean boolean44 = fieldPosition38.equals((java.lang.Object) locale41);
        java.util.Locale locale45 = locale41.stripExtensions();
        java.util.Locale.setDefault(category0, locale41);
        java.util.Locale locale47 = java.util.Locale.getDefault(category0);
        java.util.Locale locale48 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals(locale16.toString(), "119_2,857_ita");
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.FORMAT + "'", category18.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals(locale34.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(field37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str39, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinese (Taiwan)" + "'", str43, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
    }

    @Test
    public void test08164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08164");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayName(locale3);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale9.getISO3Language();
        java.lang.String str11 = locale7.getDisplayScript(locale9);
        java.lang.String str12 = locale0.getDisplayLanguage(locale9);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getNumberInstance(locale0);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale0);
        java.lang.String str15 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test08165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08165");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        numberFormat4.setMinimumFractionDigits((int) (short) 1);
        boolean boolean16 = numberFormat4.isGroupingUsed();
        boolean boolean17 = numberFormat4.isParseIntegerOnly();
        boolean boolean18 = numberFormat4.isParseIntegerOnly();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        boolean boolean21 = numberFormat20.isGroupingUsed();
        numberFormat20.setGroupingUsed(true);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        boolean boolean32 = numberFormat31.isGroupingUsed();
        java.util.Currency currency33 = numberFormat31.getCurrency();
        numberFormat28.setCurrency(currency33);
        java.util.Currency currency35 = numberFormat28.getCurrency();
        java.math.RoundingMode roundingMode36 = numberFormat28.getRoundingMode();
        numberFormat20.setRoundingMode(roundingMode36);
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode44 = numberFormat42.getRoundingMode();
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = new org.apache.commons.math.fraction.FractionFormat(numberFormat42);
        numberFormat42.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat20, numberFormat42);
        numberFormat4.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.text.NumberFormat numberFormat52 = properFractionFormat51.getWholeFormat();
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getCurrencyInstance(locale54);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction60 = properFractionFormat56.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition59);
        int int61 = parsePosition59.getIndex();
        int int62 = parsePosition59.getErrorIndex();
        parsePosition59.setIndex((int) (short) 2);
        int int65 = parsePosition59.getErrorIndex();
        int int66 = parsePosition59.getIndex();
        org.apache.commons.math.fraction.Fraction fraction67 = properFractionFormat51.parse("java.text.ParseException: zh-CN", parsePosition59);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(currency33);
        org.junit.Assert.assertEquals(currency33.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode36.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode44 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode44.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNull(fraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNull(fraction67);
    }

    @Test
    public void test08166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08166");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        int int18 = fraction12.intValue();
        float float19 = fraction12.floatValue();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction20.divide(fraction23);
        org.apache.commons.math.fraction.Fraction fraction28 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str29 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction28);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction20.subtract(fraction28);
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.abs();
        long long41 = fraction39.longValue();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction35.multiply(fraction39);
        org.apache.commons.math.fraction.Fraction fraction45 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str46 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction45);
        long long47 = fraction45.longValue();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction45.abs();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction35.add(fraction45);
        int int50 = fraction45.intValue();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction28.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction54 = new org.apache.commons.math.fraction.Fraction(0.016666666666666666d, (int) (byte) 1);
        long long55 = fraction54.longValue();
        org.apache.commons.math.fraction.Fraction fraction57 = new org.apache.commons.math.fraction.Fraction((double) 35);
        org.apache.commons.math.fraction.Fraction fraction58 = fraction54.multiply(fraction57);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction51.subtract(fraction54);
        short short60 = fraction54.shortValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.016666668f + "'", float19 == 0.016666668f);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 / 100" + "'", str29, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-1 / 100" + "'", str46, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertTrue("'" + short60 + "' != '" + (short) 0 + "'", short60 == (short) 0);
    }

    @Test
    public void test08167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08167");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        java.lang.String str7 = locale4.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) 'a');
        java.lang.String str12 = parsePosition11.toString();
        java.lang.String str13 = parsePosition11.toString();
        parsePosition11.setErrorIndex(3);
        int int16 = parsePosition11.getErrorIndex();
        java.lang.Object obj17 = fractionFormat8.parseObject("", parsePosition11);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.util.Currency currency21 = numberFormat19.getCurrency();
        fractionFormat8.setNumeratorFormat(numberFormat19);
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        numberFormat27.setMinimumIntegerDigits((int) (short) -1);
        boolean boolean30 = numberFormat27.isParseIntegerOnly();
        java.lang.Number number32 = numberFormat27.parse("-.019841270113829523000000000000000000000000000000000000000000%");
        int int33 = numberFormat27.getMinimumFractionDigits();
        fractionFormat8.setDenominatorFormat(numberFormat27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zho" + "'", str7, "zho");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str12, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str13, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + number32 + "' != '" + (-1.9841270113829523E-4d) + "'", number32, (-1.9841270113829523E-4d));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test08168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08168");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        boolean boolean6 = numberFormat4.equals((java.lang.Object) strArray5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.AttributedCharacterIterator attributedCharacterIterator11 = numberFormat8.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj12 = numberFormat8.clone();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction20 = properFractionFormat16.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition19);
        java.lang.Object obj21 = numberFormat8.parseObject("zh-TW", parsePosition19);
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.lang.String str24 = locale22.toLanguageTag();
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        java.lang.String str27 = locale25.getISO3Language();
        java.lang.String str28 = locale22.getDisplayScript(locale25);
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        java.lang.String str30 = locale22.getDisplayCountry(locale29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        boolean boolean32 = numberFormat8.equals((java.lang.Object) locale22);
        int int33 = numberFormat8.getMinimumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat8);
        java.util.Locale locale38 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        int int40 = numberFormat39.getMaximumIntegerDigits();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        boolean boolean43 = numberFormat42.isGroupingUsed();
        java.util.Currency currency44 = numberFormat42.getCurrency();
        numberFormat39.setCurrency(currency44);
        java.lang.Object obj46 = numberFormat39.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat39);
        java.lang.String str49 = numberFormat39.format(5.787036911897303E-7d);
        numberFormat39.setMaximumIntegerDigits(10000);
        java.text.ParsePosition parsePosition53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number54 = numberFormat39.parse("214,748,364,700", parsePosition53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(attributedCharacterIterator11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNull(fraction20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str23, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh-TW" + "'", str24, "zh-TW");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "zho" + "'", str27, "zho");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Taiwan" + "'", str30, "Taiwan");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals(locale38.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0%" + "'", str49, "0%");
    }

    @Test
    public void test08169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08169");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getISO3Country();
        java.util.Locale locale4 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.lang.String str6 = locale4.getDisplayCountry();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getIntegerInstance(locale4);
        java.lang.String str8 = locale4.toLanguageTag();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale locale11 = builder9.build();
        java.lang.String str12 = locale11.getScript();
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str14 = locale13.getDisplayLanguage();
        java.lang.String str15 = locale13.toLanguageTag();
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale16.getISO3Language();
        java.lang.String str19 = locale13.getDisplayScript(locale16);
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale13.getDisplayCountry(locale20);
        java.util.Locale locale23 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str24 = locale20.getDisplayLanguage(locale23);
        java.lang.String str25 = locale11.getDisplayCountry(locale23);
        java.lang.String str26 = locale4.getDisplayVariant(locale11);
        java.lang.String str27 = locale4.getCountry();
        java.util.Locale.setDefault(locale4);
        java.lang.String str29 = locale0.getDisplayScript(locale4);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "und" + "'", str8, "und");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str14, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh-TW" + "'", str15, "zh-TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zho" + "'", str18, "zho");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Taiwan" + "'", str21, "Taiwan");
        org.junit.Assert.assertEquals(locale23.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Italian" + "'", str24, "Italian");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test08170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08170");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        java.math.RoundingMode roundingMode12 = numberFormat4.getRoundingMode();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        boolean boolean19 = numberFormat17.isGroupingUsed();
        boolean boolean20 = numberFormat17.isGroupingUsed();
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj24 = numberFormat17.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition23);
        numberFormat17.setParseIntegerOnly(false);
        properFractionFormat13.setWholeFormat(numberFormat17);
        int int28 = numberFormat17.getMinimumFractionDigits();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Locale locale32 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.lang.String str34 = locale32.getDisplayCountry();
        java.lang.String str35 = locale29.getDisplayName(locale32);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale36.getDisplayScript();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale38.getISO3Language();
        java.lang.String str40 = locale36.getDisplayScript(locale38);
        java.lang.String str41 = locale29.getDisplayLanguage(locale38);
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getNumberInstance(locale29);
        java.util.Currency currency43 = numberFormat42.getCurrency();
        java.util.Locale locale47 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        int int49 = numberFormat48.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = new org.apache.commons.math.fraction.FractionFormat(numberFormat48);
        numberFormat48.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode53 = numberFormat48.getRoundingMode();
        numberFormat42.setRoundingMode(roundingMode53);
        numberFormat42.setParseIntegerOnly(false);
        numberFormat42.setParseIntegerOnly(true);
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17, numberFormat42);
        java.lang.Number number61 = numberFormat42.parse("0,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000.0%");
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance(locale62);
        boolean boolean64 = numberFormat63.isGroupingUsed();
        java.lang.Object obj65 = numberFormat63.clone();
        java.lang.String str67 = numberFormat63.format((long) 117);
        numberFormat63.setGroupingUsed(true);
        boolean boolean70 = numberFormat63.isGroupingUsed();
        java.util.Currency currency71 = numberFormat63.getCurrency();
        java.math.RoundingMode roundingMode72 = numberFormat63.getRoundingMode();
        numberFormat42.setRoundingMode(roundingMode72);
        java.util.Locale locale74 = java.util.Locale.ROOT;
        java.lang.String str75 = locale74.getDisplayScript();
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.lang.String str77 = locale76.getISO3Language();
        java.lang.String str78 = locale74.getDisplayScript(locale76);
        java.text.NumberFormat numberFormat79 = java.text.NumberFormat.getPercentInstance(locale74);
        numberFormat79.setParseIntegerOnly(false);
        numberFormat79.setMaximumFractionDigits((int) (byte) 0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat79);
        java.math.RoundingMode roundingMode85 = numberFormat79.getRoundingMode();
        numberFormat42.setRoundingMode(roundingMode85);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode12 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode12.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertEquals(locale32.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "kor" + "'", str39, "kor");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(currency43);
        org.junit.Assert.assertEquals(currency43.toString(), "XXX");
        org.junit.Assert.assertEquals(locale47.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode53 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode53.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + number61 + "' != '" + 0L + "'", number61, 0L);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "11,700%" + "'", str67, "11,700%");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(currency71);
        org.junit.Assert.assertEquals(currency71.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode72 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode72.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "kor" + "'", str77, "kor");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertTrue("'" + roundingMode85 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode85.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test08171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08171");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder11 = builder8.setVariant("");
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        boolean boolean13 = numberFormat1.equals((java.lang.Object) builder11);
        java.util.Locale.Builder builder15 = builder11.setRegion("");
        java.util.Locale.Builder builder16 = builder11.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder16.addUnicodeLocaleAttribute("java.text.ParsePosition[index=1,errorIndex=3]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: java.text.ParsePosition[index=1,errorIndex=3] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08172");
        java.util.Locale locale1 = new java.util.Locale("de");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertNotNull(fractionFormat2);
    }

    @Test
    public void test08173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08173");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str1 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction0);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction5.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction0.multiply(fraction11);
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        long long20 = fraction18.longValue();
        boolean boolean21 = fraction0.equals((java.lang.Object) long20);
        float float22 = fraction0.floatValue();
        org.apache.commons.math.fraction.Fraction fraction25 = new org.apache.commons.math.fraction.Fraction((int) (short) 10000, (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction0.multiply(fraction26);
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1 / 1" + "'", str1, "1 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 1.0f + "'", float22 == 1.0f);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
    }

    @Test
    public void test08174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08174");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale7);
        java.util.Currency currency10 = numberFormat9.getCurrency();
        numberFormat9.setMinimumIntegerDigits(1);
        numberFormat9.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj18 = numberFormat9.parseObject("Japan", parsePosition17);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException22 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str23 = fractionConversionException22.getPattern();
        java.lang.Throwable[] throwableArray24 = fractionConversionException22.getSuppressed();
        java.lang.Object[] objArray25 = fractionConversionException22.getArguments();
        boolean boolean26 = parsePosition17.equals((java.lang.Object) objArray25);
        int int27 = parsePosition17.getIndex();
        int int28 = parsePosition17.getIndex();
        java.lang.Object obj29 = fractionFormat5.parseObject("\ud55c\uad6d\uc5b4", parsePosition17);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        boolean boolean33 = numberFormat32.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        java.lang.String str36 = numberFormat32.format(0.008333333333333333d);
        boolean boolean37 = numberFormat32.isParseIntegerOnly();
        java.text.ParsePosition parsePosition40 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj41 = numberFormat32.parseObject("\u65e5\u6587", parsePosition40);
        int int42 = parsePosition40.getIndex();
        java.lang.Object obj43 = fractionFormat5.parseObject("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition40);
        java.lang.Object obj44 = fractionFormat1.parseObject("NT$2,147,483,647.00", parsePosition40);
        java.text.NumberFormat numberFormat45 = fractionFormat1.getNumeratorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "TWD");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str23, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1%" + "'", str36, "1%");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(numberFormat45);
    }

    @Test
    public void test08175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08175");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number11 = numberFormat7.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition10);
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale16 = new java.util.Locale("zho", "Chinese (Taiwan)", "Overflow trying to convert {0} to fraction ({1}/{2})");
        java.lang.String str17 = locale12.getDisplayLanguage(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale16);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7, numberFormat19);
        java.lang.Object obj21 = numberFormat19.clone();
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale23 = java.util.Locale.US;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale24.getScript();
        java.lang.String str26 = locale23.getDisplayName(locale24);
        java.lang.String str27 = locale24.getLanguage();
        java.lang.String str28 = locale22.getDisplayScript(locale24);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator29 = numberFormat19.formatToCharacterIterator((java.lang.Object) locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(number11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale16.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanese" + "'", str17, "Japanese");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc601\uc5b4\ubbf8\uad6d)" + "'", str26, "\uc601\uc5b4\ubbf8\uad6d)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ko" + "'", str27, "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test08176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08176");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayName(locale3);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale9.getISO3Language();
        java.lang.String str11 = locale7.getDisplayScript(locale9);
        java.lang.String str12 = locale0.getDisplayLanguage(locale9);
        java.lang.String str13 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale0);
        java.util.Locale locale16 = new java.util.Locale("kor");
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.lang.String str19 = locale18.getScript();
        java.util.Locale locale23 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str24 = locale18.getDisplayScript(locale23);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getNumberInstance(locale23);
        java.util.Set<java.lang.String> strSet26 = locale23.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet27 = locale23.getExtensionKeys();
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.util.Locale locale29 = java.util.Locale.PRC;
        java.lang.String str30 = locale28.getDisplayName(locale29);
        java.lang.String str31 = locale23.getDisplayName(locale28);
        java.util.Locale locale32 = locale28.stripExtensions();
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = locale34.getDisplayScript();
        java.lang.String str36 = locale33.getDisplayCountry(locale34);
        java.util.Set<java.lang.String> strSet37 = locale34.getUnicodeLocaleAttributes();
        java.lang.String str38 = locale32.getDisplayVariant(locale34);
        java.lang.String str39 = locale16.getDisplayCountry(locale34);
        java.lang.String str40 = locale34.getDisplayVariant();
        java.lang.String str41 = locale0.getDisplayScript(locale34);
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getIntegerInstance(locale34);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "und" + "'", str13, "und");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals(locale16.toString(), "kor");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals(locale23.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str30, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str31, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Japan" + "'", str36, "Japan");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(numberFormat42);
    }

    @Test
    public void test08177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08177");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat14 = properFractionFormat3.getWholeFormat();
        int int15 = numberFormat14.getMinimumFractionDigits();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance();
        numberFormat16.setParseIntegerOnly(true);
        java.lang.Object obj19 = numberFormat16.clone();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat16, numberFormat20);
        boolean boolean22 = numberFormat14.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08178");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getExtension('u');
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.util.Locale locale11 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        int int13 = numberFormat12.getMaximumIntegerDigits();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        boolean boolean16 = numberFormat15.isGroupingUsed();
        java.util.Currency currency17 = numberFormat15.getCurrency();
        numberFormat12.setCurrency(currency17);
        properFractionFormat7.setWholeFormat(numberFormat12);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        boolean boolean23 = numberFormat22.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.lang.String str26 = numberFormat22.format(0.008333333333333333d);
        boolean boolean27 = numberFormat22.isParseIntegerOnly();
        java.text.ParsePosition parsePosition30 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj31 = numberFormat22.parseObject("\u65e5\u6587", parsePosition30);
        int int32 = parsePosition30.getErrorIndex();
        java.lang.Object obj33 = properFractionFormat7.parseObject("\uc601\uc5b4\ubbf8\uad6d)", parsePosition30);
        org.apache.commons.math.fraction.Fraction fraction34 = fractionFormat5.parse("-120 / 119", parsePosition30);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction36 = fractionFormat5.parse("hi!");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"hi!\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals(locale11.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1%" + "'", str26, "1%");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(fraction34);
    }

    @Test
    public void test08179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08179");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        java.lang.String str6 = languageRange1.getRange();
        java.lang.String str7 = languageRange1.getRange();
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getIntegerInstance(locale9);
        java.lang.String str13 = locale9.toLanguageTag();
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale locale16 = builder14.build();
        java.lang.String str17 = locale16.getScript();
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.lang.String str20 = locale18.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.lang.String str23 = locale21.getISO3Language();
        java.lang.String str24 = locale18.getDisplayScript(locale21);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = locale18.getDisplayCountry(locale25);
        java.util.Locale locale28 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str29 = locale25.getDisplayLanguage(locale28);
        java.lang.String str30 = locale16.getDisplayCountry(locale28);
        java.lang.String str31 = locale9.getDisplayVariant(locale16);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale33 = locale9.stripExtensions();
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale9);
        boolean boolean35 = numberFormat34.isGroupingUsed();
        numberFormat34.setMinimumFractionDigits(117);
        java.util.Currency currency38 = numberFormat34.getCurrency();
        boolean boolean39 = languageRange1.equals((java.lang.Object) currency38);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "eng" + "'", str7, "eng");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "und" + "'", str13, "und");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinese" + "'", str19, "Chinese");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh-TW" + "'", str20, "zh-TW");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zho" + "'", str23, "zho");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Taiwan" + "'", str26, "Taiwan");
        org.junit.Assert.assertEquals(locale28.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Italian" + "'", str29, "Italian");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(currency38);
        org.junit.Assert.assertEquals(currency38.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test08180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08180");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction13 = properFractionFormat9.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition12);
        java.lang.Object obj14 = numberFormat1.parseObject("zh-TW", parsePosition12);
        numberFormat1.setMinimumIntegerDigits((int) (byte) 0);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        boolean boolean19 = numberFormat18.isParseIntegerOnly();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.lang.String str23 = locale20.getISO3Country();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale20);
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        int int30 = numberFormat29.getMaximumIntegerDigits();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        boolean boolean33 = numberFormat32.isGroupingUsed();
        java.util.Currency currency34 = numberFormat32.getCurrency();
        numberFormat29.setCurrency(currency34);
        java.util.Currency currency36 = numberFormat29.getCurrency();
        int int37 = numberFormat29.getMaximumFractionDigits();
        java.lang.Object obj38 = numberFormat29.clone();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        numberFormat40.setMaximumFractionDigits(100);
        numberFormat40.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str47 = numberFormat40.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat29, numberFormat40);
        numberFormat40.setMinimumIntegerDigits(600);
        numberFormat40.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat18, numberFormat40);
        java.lang.Object obj54 = numberFormat1.clone();
        int int55 = numberFormat1.getMaximumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNull(fraction13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100%" + "'", str47, "100%");
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
    }

    @Test
    public void test08181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08181");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\u82f1\u6587\u52a0\u62ff\u5927)");
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance(locale1);
        java.lang.String str3 = locale1.toLanguageTag();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale1);
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.util.Locale.setDefault(category5, locale7);
        java.util.Locale locale10 = java.util.Locale.getDefault(category5);
        java.util.Locale.Category category11 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        java.util.Locale.setDefault(category11, locale12);
        java.util.Locale.setDefault(category5, locale12);
        java.util.Locale locale16 = java.util.Locale.getDefault(category5);
        java.util.Locale locale17 = java.util.Locale.getDefault(category5);
        java.util.Locale locale21 = new java.util.Locale("119", "2,857", "ita");
        java.util.Locale.setDefault(category5, locale21);
        java.util.Locale locale23 = java.util.Locale.getDefault(category5);
        java.lang.String str24 = locale1.getDisplayVariant(locale23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = locale23.getUnicodeLocaleType("java.text.FieldPosition[field=35,attribute=null,beginIndex=0,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: java.text.FieldPosition[field=35,attribute=null,beginIndex=0,endIndex=0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "und" + "'", str3, "und");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category11.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals(locale21.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "119_2,857_ita");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test08182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08182");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale locale5 = locale4.stripExtensions();
        java.util.Locale.Builder builder6 = null; // flaky: builder0.setLocale(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.text.AttributedCharacterIterator attributedCharacterIterator13 = numberFormat10.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj14 = numberFormat10.clone();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getCurrencyInstance(locale16);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction22 = properFractionFormat18.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition21);
        java.lang.Object obj23 = numberFormat10.parseObject("zh-TW", parsePosition21);
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str25 = locale24.getDisplayLanguage();
        java.lang.String str26 = locale24.toLanguageTag();
        java.util.Locale locale27 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        java.lang.String str29 = locale27.getISO3Language();
        java.lang.String str30 = locale24.getDisplayScript(locale27);
        java.util.Locale locale31 = java.util.Locale.ITALIAN;
        java.lang.String str32 = locale24.getDisplayCountry(locale31);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale24);
        boolean boolean34 = numberFormat10.equals((java.lang.Object) locale24);
        java.util.Locale locale37 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale37);
        java.lang.String str40 = fractionFormat38.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat41 = fractionFormat38.getNumeratorFormat();
        numberFormat41.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency44 = numberFormat41.getCurrency();
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance(locale46);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean49 = numberFormat47.equals((java.lang.Object) numberFormat48);
        java.util.Locale locale54 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        int int56 = numberFormat55.getMaximumIntegerDigits();
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance(locale57);
        boolean boolean59 = numberFormat58.isGroupingUsed();
        java.util.Currency currency60 = numberFormat58.getCurrency();
        numberFormat55.setCurrency(currency60);
        java.util.Currency currency62 = numberFormat55.getCurrency();
        java.math.RoundingMode roundingMode63 = numberFormat55.getRoundingMode();
        java.text.ParsePosition parsePosition66 = new java.text.ParsePosition((int) 'a');
        java.lang.String str67 = parsePosition66.toString();
        java.lang.String str68 = parsePosition66.toString();
        java.lang.Object obj69 = numberFormat55.parseObject("zho", parsePosition66);
        java.lang.String str70 = parsePosition66.toString();
        java.lang.Number number71 = numberFormat48.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition66);
        java.lang.Number number72 = numberFormat41.parse("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]", parsePosition66);
        java.lang.Number number73 = numberFormat10.parse("TW", parsePosition66);
        int int74 = parsePosition66.getIndex();
        parsePosition66.setErrorIndex((-12000));
        java.lang.Number number77 = numberFormat7.parse("java.text.ParsePosition[index=6000,errorIndex=97]", parsePosition66);
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.lang.String str79 = locale78.getScript();
        java.lang.String str80 = locale78.getDisplayName();
        java.util.Locale locale81 = locale78.stripExtensions();
        java.lang.String str82 = locale81.getCountry();
        java.lang.String str83 = locale81.getLanguage();
        boolean boolean84 = parsePosition66.equals((java.lang.Object) str83);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(attributedCharacterIterator13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNull(fraction22);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str25, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zh-TW" + "'", str26, "zh-TW");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "zho" + "'", str29, "zho");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Taiwan" + "'", str32, "Taiwan");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals(locale37.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "100 0 / 1" + "'", str40, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals(locale54.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(currency60);
        org.junit.Assert.assertEquals(currency60.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency62);
        org.junit.Assert.assertEquals(currency62.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode63 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode63.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str67, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str68, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str70, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number71);
        org.junit.Assert.assertNull(number72);
        org.junit.Assert.assertNull(number73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 97 + "'", int74 == 97);
        org.junit.Assert.assertNull(number77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str80, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ko" + "'", str83, "ko");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test08183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08183");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet9 = locale5.getExtensionKeys();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = locale5.getDisplayName(locale10);
        java.util.Locale locale14 = locale10.stripExtensions();
        java.util.Locale locale15 = null;
        java.lang.String str16 = locale10.getDisplayVariant(locale15);
        java.util.Locale locale17 = locale10.stripExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale17);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale17);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getCurrencyInstance(locale17);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str12, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str13, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
    }

    @Test
    public void test08184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08184");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((-2), 20);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1 / 10" + "'", str3, "-1 / 10");
    }

    @Test
    public void test08185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08185");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        java.lang.String str14 = locale12.getDisplayCountry();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale15.getISO3Language();
        java.lang.String str18 = locale12.getDisplayScript(locale15);
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale20 = java.util.Locale.getDefault(category0);
        java.util.Locale locale22 = new java.util.Locale("Chinese (Taiwan)");
        java.util.Locale.setDefault(category0, locale22);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zho" + "'", str17, "zho");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals(locale22.toString(), "chinese (taiwan)");
    }

    @Test
    public void test08186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08186");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        float float4 = fraction2.floatValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.negate();
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        int int12 = numberFormat10.getMaximumFractionDigits();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat14);
        boolean boolean19 = fraction5.equals((java.lang.Object) fractionFormat18);
        java.text.NumberFormat numberFormat20 = fractionFormat18.getNumeratorFormat();
        int int21 = numberFormat20.getMinimumFractionDigits();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1 / 1" + "'", str3, "1 / 1");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test08187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08187");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        boolean boolean4 = field0.equals((java.lang.Object) locale2);
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) '#');
        java.text.FieldPosition fieldPosition8 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (byte) -1);
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition((java.text.Format.Field) field0, 14400);
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency13 = numberFormat12.getCurrency();
        java.lang.String str15 = numberFormat12.format(1.0d);
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale17);
        java.util.Currency currency20 = numberFormat19.getCurrency();
        numberFormat19.setMinimumIntegerDigits(1);
        numberFormat19.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj28 = numberFormat19.parseObject("Japan", parsePosition27);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException32 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str33 = fractionConversionException32.getPattern();
        java.lang.Throwable[] throwableArray34 = fractionConversionException32.getSuppressed();
        java.lang.Object[] objArray35 = fractionConversionException32.getArguments();
        boolean boolean36 = parsePosition27.equals((java.lang.Object) objArray35);
        int int37 = parsePosition27.getIndex();
        java.lang.String str38 = parsePosition27.toString();
        java.lang.Object obj39 = numberFormat12.parseObject("java.text.ParsePosition[index=52,errorIndex=-1]", parsePosition27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        int int41 = numberFormat12.getMaximumIntegerDigits();
        java.util.Currency currency42 = numberFormat12.getCurrency();
        boolean boolean43 = field0.equals((java.lang.Object) currency42);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "100%" + "'", str15, "100%");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "TWD");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str33, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str38, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertNotNull(currency42);
        org.junit.Assert.assertEquals(currency42.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test08188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08188");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.Object obj8 = numberFormat7.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12, numberFormat14);
        java.text.ParsePosition parsePosition18 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj19 = numberFormat14.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition18);
        java.lang.String str20 = parsePosition18.toString();
        java.lang.String str21 = parsePosition18.toString();
        int int22 = parsePosition18.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction23 = properFractionFormat9.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 1 to fraction (-1/-120)", parsePosition18);
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = locale24.getScript();
        java.util.Locale locale29 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str30 = locale24.getDisplayScript(locale29);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getNumberInstance(locale29);
        int int32 = numberFormat31.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat31);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        boolean boolean35 = numberFormat31.isGroupingUsed();
        numberFormat31.setMinimumIntegerDigits((-1));
        properFractionFormat9.setWholeFormat(numberFormat31);
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        java.util.Locale locale42 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale42);
        java.lang.String str44 = locale42.getDisplayCountry();
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getIntegerInstance(locale42);
        java.lang.String str46 = locale39.getDisplayCountry(locale42);
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance(locale39);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator48 = properFractionFormat9.formatToCharacterIterator((java.lang.Object) locale39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str20, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str21, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNull(fraction23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(locale29.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "France" + "'", str46, "France");
        org.junit.Assert.assertNotNull(numberFormat47);
    }

    @Test
    public void test08189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08189");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("fr-FR");
        java.text.NumberFormat.Field field2 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field2);
        java.util.Locale locale4 = java.util.Locale.CHINA;
        boolean boolean5 = field2.equals((java.lang.Object) locale4);
        java.lang.String str6 = locale4.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayScript();
        java.lang.String str10 = locale7.getDisplayCountry(locale8);
        java.util.Set<java.lang.String> strSet11 = locale8.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str13 = locale4.getDisplayLanguage(locale8);
        java.util.Locale locale14 = locale4.stripExtensions();
        java.lang.String str15 = locale4.getCountry();
        java.util.Locale.Category category16 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale17 = java.util.Locale.getDefault(category16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale18);
        java.util.Locale.setDefault(category16, locale18);
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale21.getDisplayScript(locale22);
        java.util.Locale.setDefault(category16, locale21);
        java.util.Locale locale28 = new java.util.Locale("Japanese (Japan)", "chinois", "-1 / 120");
        java.util.Locale.setDefault(category16, locale28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale30.getISO3Language();
        java.lang.String str32 = locale30.getDisplayCountry();
        java.util.Locale locale33 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str35 = locale33.getISO3Language();
        java.lang.String str36 = locale30.getDisplayScript(locale33);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale33);
        java.util.Locale.setDefault(category16, locale33);
        java.lang.String str39 = locale4.getDisplayName(locale33);
        java.util.Set<java.lang.String> strSet40 = locale33.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet40);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(field2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Japan" + "'", str10, "Japan");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Chinese" + "'", str13, "Chinese");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CN" + "'", str15, "CN");
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.FORMAT + "'", category16.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "chinese (taiwan)");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals(locale28.toString(), "japanese (japan)_CHINOIS_-1 / 120");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "kor" + "'", str31, "kor");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "zho" + "'", str35, "zho");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(numberFormat37);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str39, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(strList41);
    }

    @Test
    public void test08190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08190");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        boolean boolean8 = numberFormat7.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat13);
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj18 = numberFormat13.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition17);
        properFractionFormat9.setNumeratorFormat(numberFormat13);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getCurrencyInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.util.Locale locale24 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale24);
        java.lang.String str27 = fractionFormat25.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat28 = fractionFormat25.getNumeratorFormat();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Locale locale32 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.lang.String str34 = locale32.getDisplayCountry();
        java.lang.String str35 = locale29.getDisplayName(locale32);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale36.getDisplayScript();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale38.getISO3Language();
        java.lang.String str40 = locale36.getDisplayScript(locale38);
        java.lang.String str41 = locale29.getDisplayLanguage(locale38);
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getNumberInstance(locale29);
        fractionFormat25.setNumeratorFormat(numberFormat42);
        properFractionFormat22.setWholeFormat(numberFormat42);
        properFractionFormat9.setWholeFormat(numberFormat42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.util.Locale locale50 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale50);
        java.lang.String[] strArray52 = java.util.Locale.getISOCountries();
        boolean boolean53 = numberFormat51.equals((java.lang.Object) strArray52);
        java.lang.String str55 = numberFormat51.format((double) (byte) -1);
        java.util.Locale locale56 = java.util.Locale.JAPAN;
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.lang.String str58 = locale57.getDisplayScript();
        java.lang.String str59 = locale56.getDisplayCountry(locale57);
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getNumberInstance(locale56);
        numberFormat60.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42, numberFormat51, numberFormat60);
        java.text.NumberFormat.Field field65 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition66 = new java.text.FieldPosition((java.text.Format.Field) field65);
        java.lang.String str67 = fieldPosition66.toString();
        java.util.Locale locale68 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale69 = java.util.Locale.ROOT;
        java.lang.String str70 = locale69.getDisplayScript();
        java.lang.String str71 = locale68.getDisplayName(locale69);
        boolean boolean72 = fieldPosition66.equals((java.lang.Object) locale69);
        fieldPosition66.setEndIndex((int) '#');
        java.util.Locale locale75 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getCurrencyInstance(locale75);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        java.text.ParsePosition parsePosition80 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction81 = properFractionFormat77.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition80);
        boolean boolean82 = fieldPosition66.equals((java.lang.Object) parsePosition80);
        int int83 = parsePosition80.getIndex();
        org.apache.commons.math.fraction.Fraction fraction84 = properFractionFormat63.parse("java.text.NumberFormat$Field(exponent symbol)", parsePosition80);
        int int85 = parsePosition80.getIndex();
        java.lang.Object obj86 = numberFormat1.parseObject("2,857", parsePosition80);
        int int87 = parsePosition80.getErrorIndex();
        int int88 = parsePosition80.getErrorIndex();
        int int89 = parsePosition80.getIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100 0 / 1" + "'", str27, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertEquals(locale32.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "chinese (JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0])" + "'", str35, "chinese (JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0])");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "kor" + "'", str39, "kor");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "chinese" + "'", str41, "chinese");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals(locale50.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-100%" + "'", str55, "-100%");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Japan" + "'", str59, "Japan");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(field65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str67, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Chinese (Taiwan)" + "'", str71, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNull(fraction81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNull(fraction84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 5 + "'", int87 == 5);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 5 + "'", int88 == 5);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test08191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08191");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.setRegion("");
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = locale9.getDisplayCountry();
        java.util.Locale.Builder builder11 = builder6.setLocale(locale9);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.lang.String str14 = locale12.toLanguageTag();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale15.getISO3Language();
        java.lang.String str18 = locale12.getDisplayScript(locale15);
        java.lang.String str19 = locale12.getDisplayName();
        java.lang.String str20 = locale9.getDisplayLanguage(locale12);
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale21);
        java.util.Locale locale23 = locale21.stripExtensions();
        java.lang.String str24 = locale21.getDisplayName();
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("0");
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = locale27.getScript();
        java.lang.String str30 = locale26.getDisplayCountry(locale27);
        java.lang.String str31 = locale21.getDisplayLanguage(locale26);
        java.lang.String str32 = locale26.getDisplayScript();
        java.lang.String str33 = locale9.getDisplayVariant(locale26);
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getInstance(locale34);
        java.util.Locale locale37 = locale34.stripExtensions();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        java.lang.String str40 = locale37.getDisplayName(locale38);
        java.text.NumberFormat.Field field41 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition42 = new java.text.FieldPosition((java.text.Format.Field) field41);
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getInstance(locale43);
        boolean boolean45 = field41.equals((java.lang.Object) locale43);
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        java.lang.String str47 = locale46.getDisplayCountry();
        java.lang.String str48 = locale43.getDisplayVariant(locale46);
        java.lang.String str49 = locale37.getDisplayLanguage(locale46);
        java.lang.String str50 = locale26.getDisplayName(locale46);
        java.lang.String str51 = locale26.getDisplayCountry();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str13, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh-TW" + "'", str14, "zh-TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zho" + "'", str17, "zho");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str19, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str20, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str24, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese" + "'", str31, "Chinese");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str40, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertNotNull(field41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "cinese" + "'", str49, "cinese");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test08192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08192");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale locale17 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.lang.String str20 = locale14.getDisplayName(locale17);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale14.getDisplayLanguage(locale23);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale14);
        fractionFormat10.setNumeratorFormat(numberFormat27);
        properFractionFormat7.setWholeFormat(numberFormat27);
        fractionFormat4.setNumeratorFormat(numberFormat27);
        java.util.Locale locale32 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.lang.String str35 = fractionFormat33.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat36 = fractionFormat33.getNumeratorFormat();
        numberFormat36.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency39 = numberFormat36.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat36);
        java.text.NumberFormat numberFormat41 = fractionFormat40.getNumeratorFormat();
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getInstance(locale42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = new org.apache.commons.math.fraction.FractionFormat(numberFormat43, numberFormat45);
        int int47 = numberFormat43.getMaximumIntegerDigits();
        numberFormat43.setGroupingUsed(true);
        java.lang.String str51 = numberFormat43.format((long) 119);
        fractionFormat40.setNumeratorFormat(numberFormat43);
        java.lang.Object obj53 = numberFormat43.clone();
        boolean boolean54 = numberFormat43.isGroupingUsed();
        numberFormat43.setMinimumIntegerDigits((-50));
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) '4');
        parsePosition59.setIndex(0);
        java.text.FieldPosition fieldPosition63 = new java.text.FieldPosition(1);
        boolean boolean64 = parsePosition59.equals((java.lang.Object) fieldPosition63);
        java.lang.Object obj65 = numberFormat43.parseObject("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition59);
        fractionFormat4.setDenominatorFormat(numberFormat43);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "chinese (JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0])" + "'", str20, "chinese (JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0])");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "chinese" + "'", str26, "chinese");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "100 0 / 1" + "'", str35, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "119" + "'", str51, "119");
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(obj65);
    }

    @Test
    public void test08193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08193");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder6 = builder3.setExtension('a', "TWN");
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("Canada");
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale.Builder builder10 = builder8.clear();
        java.util.Locale locale11 = builder10.build();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        java.lang.String str14 = locale12.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale12);
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.util.Locale locale18 = locale17.stripExtensions();
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        java.lang.String str23 = locale17.getDisplayName(locale20);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale24.getDisplayScript();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale26.getISO3Language();
        java.lang.String str28 = locale24.getDisplayScript(locale26);
        java.lang.String str29 = locale17.getDisplayLanguage(locale26);
        java.util.Locale locale32 = new java.util.Locale("hi!", "org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (0/-1)");
        java.lang.String str33 = locale26.getDisplayVariant(locale32);
        java.lang.String str34 = locale12.getDisplayLanguage(locale32);
        java.util.Locale locale35 = locale32.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder36 = builder10.setLocale(locale32);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertNotNull(locale18);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "chinese (JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0])" + "'", str23, "chinese (JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0])");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "kor" + "'", str27, "kor");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "chinese" + "'", str29, "chinese");
        org.junit.Assert.assertEquals(locale32.toString(), "hi!_ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Korean" + "'", str34, "Korean");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1)");
    }

    @Test
    public void test08194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08194");
        java.util.Locale locale2 = new java.util.Locale("anglais", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]");
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getCurrencyInstance(locale2);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str5 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction4);
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction9.add(fraction15);
        org.apache.commons.math.fraction.Fraction fraction19 = fraction4.multiply(fraction15);
        org.apache.commons.math.fraction.Fraction fraction20 = fraction4.negate();
        java.util.Locale.Category category21 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale22.getISO3Language();
        java.util.Locale.setDefault(category21, locale22);
        boolean boolean25 = fraction4.equals((java.lang.Object) locale22);
        java.lang.String str26 = locale2.getDisplayLanguage(locale22);
        java.lang.String str27 = locale22.getLanguage();
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str30 = locale29.getDisplayLanguage();
        java.lang.String str31 = locale29.toLanguageTag();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        boolean boolean34 = locale32.hasExtensions();
        java.lang.String str35 = locale32.getDisplayScript();
        java.lang.String str36 = locale29.getDisplayName(locale32);
        java.lang.String str37 = locale28.getDisplayName(locale29);
        java.lang.String str38 = locale22.getDisplayVariant(locale29);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getIntegerInstance(locale29);
        org.junit.Assert.assertEquals(locale2.toString(), "anglais_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1 / 1" + "'", str5, "1 / 1");
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category21.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "kor" + "'", str23, "kor");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "anglais" + "'", str26, "anglais");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ko" + "'", str27, "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str30, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zh-TW" + "'", str31, "zh-TW");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "chinois (Taiwan)" + "'", str36, "chinois (Taiwan)");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str37, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(numberFormat39);
    }

    @Test
    public void test08195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08195");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale2 = locale0.stripExtensions();
        boolean boolean3 = locale2.hasExtensions();
        java.lang.String str4 = locale2.getDisplayVariant();
        java.lang.String str5 = locale2.getDisplayVariant();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale2);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale2);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
    }

    @Test
    public void test08196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08196");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        numberFormat4.setMinimumFractionDigits((int) (short) 1);
        boolean boolean16 = numberFormat4.isGroupingUsed();
        boolean boolean17 = numberFormat4.isParseIntegerOnly();
        boolean boolean18 = numberFormat4.isParseIntegerOnly();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        boolean boolean21 = numberFormat20.isGroupingUsed();
        numberFormat20.setGroupingUsed(true);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        boolean boolean32 = numberFormat31.isGroupingUsed();
        java.util.Currency currency33 = numberFormat31.getCurrency();
        numberFormat28.setCurrency(currency33);
        java.util.Currency currency35 = numberFormat28.getCurrency();
        java.math.RoundingMode roundingMode36 = numberFormat28.getRoundingMode();
        numberFormat20.setRoundingMode(roundingMode36);
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode44 = numberFormat42.getRoundingMode();
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = new org.apache.commons.math.fraction.FractionFormat(numberFormat42);
        numberFormat42.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat20, numberFormat42);
        java.text.ParsePosition parsePosition51 = new java.text.ParsePosition(51);
        java.lang.Object obj52 = numberFormat42.parseObject("\u30d5\u30e9\u30f3\u30b9\u8a9e\u30ab\u30ca\u30c0)", parsePosition51);
        boolean boolean53 = numberFormat42.isParseIntegerOnly();
        numberFormat42.setParseIntegerOnly(true);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(currency33);
        org.junit.Assert.assertEquals(currency33.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode36.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode44 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode44.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test08197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08197");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder6 = builder3.setExtension('a', "TWN");
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("Canada");
        java.util.Locale.Builder builder10 = builder6.setRegion("US");
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.getDefault(category12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale14);
        java.util.Locale.setDefault(category12, locale14);
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category12, locale17);
        java.lang.String str19 = locale11.getDisplayLanguage(locale17);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance(locale11);
        java.lang.String str21 = locale11.getScript();
        java.util.Locale.Builder builder22 = builder10.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder22.setLanguage("\u4e2d\u56fd\u8a9e\u53f0\u6e7e)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ??? (??) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "anglais" + "'", str19, "anglais");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test08198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08198");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale0.getDisplayCountry(locale3);
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.setScript("");
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.lang.String str13 = locale11.toLanguageTag();
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = locale14.getISO3Language();
        java.lang.String str17 = locale11.getDisplayScript(locale14);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = locale11.getDisplayCountry(locale18);
        java.util.Locale.Builder builder20 = builder8.setLocale(locale18);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale21.toLanguageTag();
        java.lang.String str27 = locale21.getDisplayVariant();
        java.lang.String str28 = locale21.getVariant();
        java.util.Locale.Builder builder29 = builder20.setLocale(locale21);
        java.util.Locale locale30 = locale21.stripExtensions();
        java.lang.String str31 = locale0.getDisplayName(locale21);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.math.RoundingMode roundingMode33 = numberFormat32.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number35 = numberFormat32.parse("java.text.ParsePosition[index=6000,errorIndex=97]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"java.text.ParsePosition[index=6000,errorIndex=97]\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "France" + "'", str7, "France");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str12, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zh-TW" + "'", str13, "zh-TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zho" + "'", str16, "zho");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Taiwan" + "'", str19, "Taiwan");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "und" + "'", str26, "und");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "French (France)" + "'", str31, "French (France)");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + roundingMode33 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode33.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test08199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08199");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = builder3.build();
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        boolean boolean9 = numberFormat8.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.NumberFormat numberFormat11 = properFractionFormat10.getWholeFormat();
        numberFormat11.setMinimumFractionDigits((int) (byte) 0);
        numberFormat11.setMinimumFractionDigits(60);
        numberFormat11.setMaximumFractionDigits((int) (byte) 1);
        java.math.RoundingMode roundingMode18 = numberFormat11.getRoundingMode();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale19.getISO3Language();
        java.util.Locale.setDefault(locale19);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str24 = locale19.getDisplayName(locale22);
        java.lang.String str25 = locale19.getISO3Language();
        java.lang.String str26 = locale19.getCountry();
        boolean boolean27 = numberFormat11.equals((java.lang.Object) locale19);
        java.util.Locale.Builder builder28 = builder6.setLocale(locale19);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder30 = builder28.removeUnicodeLocaleAttribute("\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ?? (????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + roundingMode18 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode18.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "kor" + "'", str20, "kor");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "cor\351en" + "'", str24, "cor\351en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "kor" + "'", str25, "kor");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test08200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08200");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        int int8 = numberFormat7.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        org.apache.commons.math.fraction.Fraction fraction11 = fractionFormat9.parse("100%");
        java.text.NumberFormat numberFormat12 = fractionFormat9.getNumeratorFormat();
        java.math.RoundingMode roundingMode13 = numberFormat12.getRoundingMode();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode13.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test08201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08201");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale4);
        java.util.Currency currency7 = numberFormat6.getCurrency();
        numberFormat6.setMinimumIntegerDigits(1);
        numberFormat6.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj15 = numberFormat6.parseObject("Japan", parsePosition14);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException19 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str20 = fractionConversionException19.getPattern();
        java.lang.Throwable[] throwableArray21 = fractionConversionException19.getSuppressed();
        java.lang.Object[] objArray22 = fractionConversionException19.getArguments();
        boolean boolean23 = parsePosition14.equals((java.lang.Object) objArray22);
        int int24 = parsePosition14.getIndex();
        int int25 = parsePosition14.getIndex();
        parsePosition14.setIndex((int) (byte) -2);
        java.lang.Object obj28 = numberFormat1.parseObject("Chinesisch (China)", parsePosition14);
        numberFormat1.setMaximumIntegerDigits(32);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "TWD");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str20, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test08202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08202");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.lang.String str8 = locale0.getVariant();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str10 = locale0.getLanguage();
        java.lang.String str11 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Japan" + "'", str5, "Japan");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Japan" + "'", str6, "Japan");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ja" + "'", str10, "ja");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ja-JP" + "'", str11, "ja-JP");
    }

    @Test
    public void test08203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08203");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayName(locale4);
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale4);
        int int8 = fieldPosition1.getBeginIndex();
        int int9 = fieldPosition1.getEndIndex();
        java.lang.String str10 = fieldPosition1.toString();
        fieldPosition1.setBeginIndex((int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        boolean boolean15 = fieldPosition1.equals((java.lang.Object) fraction13);
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction19.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction19.add(fraction25);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction28.divide(fraction31);
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = locale34.getDisplayScript();
        java.lang.String str36 = locale34.getScript();
        boolean boolean37 = fraction33.equals((java.lang.Object) locale34);
        java.text.NumberFormat.Field field38 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition39 = new java.text.FieldPosition((java.text.Format.Field) field38);
        int int40 = fieldPosition39.getEndIndex();
        fieldPosition39.setBeginIndex((int) (byte) 100);
        java.util.Locale locale44 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale44);
        java.lang.String str47 = fractionFormat45.format((java.lang.Object) 100);
        boolean boolean48 = fieldPosition39.equals((java.lang.Object) fractionFormat45);
        java.text.Format.Field field49 = fieldPosition39.getFieldAttribute();
        int int50 = fieldPosition39.getEndIndex();
        org.apache.commons.math.fraction.Fraction fraction54 = new org.apache.commons.math.fraction.Fraction((double) 2147483647, (double) 'a', 117);
        int int55 = fraction54.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction54.reciprocal();
        boolean boolean57 = fieldPosition39.equals((java.lang.Object) fraction54);
        org.apache.commons.math.fraction.Fraction fraction58 = fraction33.divide(fraction54);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction13.add(fraction33);
        java.util.Locale locale60 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale60);
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale60);
        java.text.NumberFormat numberFormat64 = fractionFormat63.getNumeratorFormat();
        java.lang.Object obj65 = numberFormat64.clone();
        // The following exception was thrown during execution in test generation
        try {
            int int66 = fraction13.compareTo(obj65);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.text.DecimalFormat cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str10, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(field38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals(locale44.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100 0 / 1" + "'", str47, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(field49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertNotNull(fractionFormat63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(obj65);
    }

    @Test
    public void test08204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08204");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getCurrencyInstance(locale9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.util.Currency currency12 = numberFormat10.getCurrency();
        properFractionFormat8.setNumeratorFormat(numberFormat10);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale14.getISO3Language();
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleKeys();
        java.lang.String str17 = locale14.getISO3Country();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getNumberInstance(locale14);
        java.util.Locale locale22 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        int int24 = numberFormat23.getMaximumIntegerDigits();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        boolean boolean27 = numberFormat26.isGroupingUsed();
        java.util.Currency currency28 = numberFormat26.getCurrency();
        numberFormat23.setCurrency(currency28);
        java.util.Currency currency30 = numberFormat23.getCurrency();
        int int31 = numberFormat23.getMaximumFractionDigits();
        java.lang.Object obj32 = numberFormat23.clone();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        numberFormat34.setMaximumFractionDigits(100);
        numberFormat34.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str41 = numberFormat34.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat23, numberFormat34);
        numberFormat34.setMinimumIntegerDigits(600);
        boolean boolean45 = numberFormat34.isParseIntegerOnly();
        java.util.Locale locale47 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale47);
        java.lang.String str50 = fractionFormat48.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat51 = fractionFormat48.getNumeratorFormat();
        java.util.Locale locale52 = java.util.Locale.getDefault();
        java.util.Locale locale53 = locale52.stripExtensions();
        java.util.Locale locale55 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale55);
        java.lang.String str57 = locale55.getDisplayCountry();
        java.lang.String str58 = locale52.getDisplayName(locale55);
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = locale59.getDisplayScript();
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale61.getISO3Language();
        java.lang.String str63 = locale59.getDisplayScript(locale61);
        java.lang.String str64 = locale52.getDisplayLanguage(locale61);
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getNumberInstance(locale52);
        fractionFormat48.setNumeratorFormat(numberFormat65);
        java.util.Locale locale70 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getPercentInstance(locale70);
        numberFormat71.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str75 = numberFormat71.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = new org.apache.commons.math.fraction.FractionFormat(numberFormat71);
        int int77 = numberFormat71.getMinimumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat78 = new org.apache.commons.math.fraction.FractionFormat(numberFormat65, numberFormat71);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat34, numberFormat71);
        java.util.Locale locale81 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat82 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale81);
        java.lang.String str84 = fractionFormat82.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat85 = fractionFormat82.getNumeratorFormat();
        java.text.NumberFormat numberFormat86 = fractionFormat82.getNumeratorFormat();
        java.text.NumberFormat numberFormat87 = fractionFormat82.getNumeratorFormat();
        numberFormat87.setMinimumIntegerDigits(600);
        int int90 = numberFormat87.getMinimumIntegerDigits();
        properFractionFormat79.setDenominatorFormat(numberFormat87);
        java.text.NumberFormat numberFormat92 = properFractionFormat79.getDenominatorFormat();
        java.text.NumberFormat numberFormat93 = properFractionFormat79.getWholeFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals(locale22.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "100%" + "'", str41, "100%");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals(locale47.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "100 0 / 1" + "'", str50, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(locale52);
// flaky:         org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(locale53);
// flaky:         org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals(locale55.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "kor" + "'", str62, "kor");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals(locale70.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0%" + "'", str75, "0%");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertEquals(locale81.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat82);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "100 0 / 1" + "'", str84, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 600 + "'", int90 == 600);
        org.junit.Assert.assertNotNull(numberFormat92);
        org.junit.Assert.assertNotNull(numberFormat93);
    }

    @Test
    public void test08205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08205");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale5.toLanguageTag();
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder10.build();
        java.lang.String str13 = locale12.getScript();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.lang.String str16 = locale14.toLanguageTag();
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale17.getISO3Language();
        java.lang.String str20 = locale14.getDisplayScript(locale17);
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale14.getDisplayCountry(locale21);
        java.util.Locale locale24 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str25 = locale21.getDisplayLanguage(locale24);
        java.lang.String str26 = locale12.getDisplayCountry(locale24);
        java.lang.String str27 = locale5.getDisplayVariant(locale12);
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayScript();
        java.lang.String str31 = locale28.getDisplayCountry(locale29);
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance(locale29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale29);
        java.util.Set<java.lang.Character> charSet35 = locale29.getExtensionKeys();
        java.lang.String str36 = locale12.getDisplayVariant(locale29);
        java.lang.String str37 = locale29.getDisplayCountry();
        java.lang.String str38 = locale0.getDisplayName(locale29);
        java.lang.String str40 = locale0.getExtension('x');
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.lang.String str43 = numberFormat41.format(9700L);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "und" + "'", str9, "und");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinese" + "'", str15, "Chinese");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh-TW" + "'", str16, "zh-TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zho" + "'", str19, "zho");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Taiwan" + "'", str22, "Taiwan");
        org.junit.Assert.assertEquals(locale24.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Italian" + "'", str25, "Italian");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Japan" + "'", str31, "Japan");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Korean" + "'", str38, "Korean");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "9,700" + "'", str43, "9,700");
    }

    @Test
    public void test08206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08206");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleKeys();
        java.lang.String str10 = locale7.getISO3Country();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale7);
        java.util.Locale locale15 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        int int17 = numberFormat16.getMaximumIntegerDigits();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        boolean boolean20 = numberFormat19.isGroupingUsed();
        java.util.Currency currency21 = numberFormat19.getCurrency();
        numberFormat16.setCurrency(currency21);
        java.util.Currency currency23 = numberFormat16.getCurrency();
        int int24 = numberFormat16.getMaximumFractionDigits();
        java.lang.Object obj25 = numberFormat16.clone();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        numberFormat27.setMaximumFractionDigits(100);
        numberFormat27.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str34 = numberFormat27.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11, numberFormat16, numberFormat27);
        java.text.NumberFormat.Field field37 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition38 = new java.text.FieldPosition((java.text.Format.Field) field37);
        java.lang.String str39 = fieldPosition38.toString();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale41.getDisplayScript();
        java.lang.String str43 = locale40.getDisplayName(locale41);
        boolean boolean44 = fieldPosition38.equals((java.lang.Object) locale41);
        fieldPosition38.setEndIndex((int) '#');
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getCurrencyInstance(locale47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.text.ParsePosition parsePosition52 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction53 = properFractionFormat49.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition52);
        boolean boolean54 = fieldPosition38.equals((java.lang.Object) parsePosition52);
        int int55 = parsePosition52.getIndex();
        org.apache.commons.math.fraction.Fraction fraction56 = properFractionFormat35.parse("hi!", parsePosition52);
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getInstance(locale57);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = new org.apache.commons.math.fraction.FractionFormat(numberFormat58, numberFormat60);
        boolean boolean62 = numberFormat60.isGroupingUsed();
        boolean boolean63 = numberFormat60.isGroupingUsed();
        java.text.ParsePosition parsePosition66 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj67 = numberFormat60.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition66);
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = new org.apache.commons.math.fraction.FractionFormat(numberFormat60);
        java.text.NumberFormat numberFormat69 = fractionFormat68.getNumeratorFormat();
        properFractionFormat35.setWholeFormat(numberFormat69);
        properFractionFormat2.setNumeratorFormat(numberFormat69);
        java.lang.Object obj72 = numberFormat69.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100%" + "'", str34, "100%");
        org.junit.Assert.assertNotNull(field37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str39, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinese (Taiwan)" + "'", str43, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNull(fraction53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNull(fraction56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(obj72);
    }

    @Test
    public void test08207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08207");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleKeys();
        java.lang.String str5 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str11 = fractionFormat9.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat12 = fractionFormat9.getNumeratorFormat();
        numberFormat12.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency15 = numberFormat12.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12);
        boolean boolean17 = numberFormat12.isGroupingUsed();
        java.lang.Object obj18 = numberFormat12.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat6, numberFormat12);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Germany" + "'", str5, "Germany");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100 0 / 1" + "'", str11, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj18);
    }

    @Test
    public void test08208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08208");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str8 = numberFormat4.format((double) 0.0f);
        java.util.Locale locale12 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        int int14 = numberFormat13.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13);
        java.text.NumberFormat numberFormat16 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat13, numberFormat16);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException20 = new org.apache.commons.math.fraction.FractionConversionException(0.0d, 10);
        boolean boolean21 = numberFormat13.equals((java.lang.Object) 10);
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23, numberFormat25);
        int int27 = numberFormat23.getMaximumIntegerDigits();
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayScript();
        java.lang.String str31 = locale28.getDisplayCountry(locale29);
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance(locale29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale29);
        java.util.Set<java.lang.Character> charSet35 = locale29.getExtensionKeys();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getIntegerInstance(locale29);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat23, numberFormat36);
        java.util.Locale locale39 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale39);
        java.lang.String str42 = fractionFormat40.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat43 = fractionFormat40.getNumeratorFormat();
        java.util.Locale locale44 = java.util.Locale.getDefault();
        java.util.Locale locale45 = locale44.stripExtensions();
        java.util.Locale locale47 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale47);
        java.lang.String str49 = locale47.getDisplayCountry();
        java.lang.String str50 = locale44.getDisplayName(locale47);
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale53.getISO3Language();
        java.lang.String str55 = locale51.getDisplayScript(locale53);
        java.lang.String str56 = locale44.getDisplayLanguage(locale53);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getNumberInstance(locale44);
        fractionFormat40.setNumeratorFormat(numberFormat57);
        properFractionFormat37.setDenominatorFormat(numberFormat57);
        org.apache.commons.math.fraction.Fraction fraction62 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str63 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction62);
        float float64 = fraction62.floatValue();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction62.negate();
        java.util.Locale locale69 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getPercentInstance(locale69);
        int int71 = numberFormat70.getMaximumIntegerDigits();
        int int72 = numberFormat70.getMaximumFractionDigits();
        java.util.Locale locale73 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getInstance(locale73);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getPercentInstance(locale75);
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = new org.apache.commons.math.fraction.FractionFormat(numberFormat74, numberFormat76);
        org.apache.commons.math.fraction.FractionFormat fractionFormat78 = new org.apache.commons.math.fraction.FractionFormat(numberFormat70, numberFormat74);
        boolean boolean79 = fraction65.equals((java.lang.Object) fractionFormat78);
        java.text.NumberFormat numberFormat80 = fractionFormat78.getNumeratorFormat();
        properFractionFormat37.setDenominatorFormat(numberFormat80);
        java.text.NumberFormat numberFormat82 = properFractionFormat37.getWholeFormat();
        java.text.ParsePosition parsePosition85 = new java.text.ParsePosition((int) (short) 2);
        org.apache.commons.math.fraction.Fraction fraction86 = properFractionFormat37.parse("", parsePosition85);
        int int87 = parsePosition85.getErrorIndex();
        boolean boolean89 = parsePosition85.equals((java.lang.Object) "120");
        java.lang.String str90 = parsePosition85.toString();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0%" + "'", str8, "0%");
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Japan" + "'", str31, "Japan");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "100 0 / 1" + "'", str42, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale44);
// flaky:         org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals(locale47.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "kor" + "'", str54, "kor");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1 / 1" + "'", str63, "1 / 1");
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + 1.0f + "'", float64 == 1.0f);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertEquals(locale69.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertNull(fraction86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "java.text.ParsePosition[index=2,errorIndex=1]" + "'", str90, "java.text.ParsePosition[index=2,errorIndex=1]");
    }

    @Test
    public void test08209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08209");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        numberFormat5.setMaximumIntegerDigits(0);
        java.lang.Object obj10 = numberFormat5.clone();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test08210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08210");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        java.lang.String str3 = numberFormat0.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat5 = properFractionFormat4.getWholeFormat();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        numberFormat8.setMinimumIntegerDigits(1728000);
        boolean boolean11 = numberFormat8.isGroupingUsed();
        properFractionFormat4.setWholeFormat(numberFormat8);
        boolean boolean13 = numberFormat8.isParseIntegerOnly();
        java.lang.Object obj14 = numberFormat8.clone();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
        org.junit.Assert.assertEquals(currency1.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100%" + "'", str3, "100%");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(obj14);
    }

    @Test
    public void test08211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08211");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale4 = new java.util.Locale("zho", "Chinese (Taiwan)", "Overflow trying to convert {0} to fraction ({1}/{2})");
        java.lang.String str5 = locale0.getDisplayLanguage(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.lang.String str7 = locale4.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale4.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Japanese" + "'", str5, "Japanese");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zho (CHINESE (TAIWAN),Overflow trying to convert {0} to fraction ({1}/{2}))" + "'", str7, "zho (CHINESE (TAIWAN),Overflow trying to convert {0} to fraction ({1}/{2}))");
    }

    @Test
    public void test08212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08212");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayLanguage();
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.String str5 = locale4.getScript();
        java.util.Locale locale9 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str10 = locale4.getDisplayScript(locale9);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale4);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getNumberInstance(locale4);
        java.lang.String str13 = locale1.getDisplayName(locale4);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals(locale9.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test08213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08213");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction12.add(fraction18);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction21.divide(fraction24);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = locale27.getScript();
        boolean boolean30 = fraction26.equals((java.lang.Object) locale27);
        java.util.Locale.setDefault(category0, locale27);
        java.lang.String str32 = locale27.getDisplayName();
        java.util.Locale locale33 = locale27.stripExtensions();
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder34.clearExtensions();
        java.util.Locale.Builder builder37 = builder34.setVariant("");
        java.util.Locale.Builder builder39 = builder34.setScript("");
        java.util.Locale.Builder builder40 = builder34.clearExtensions();
        java.util.Locale.Builder builder42 = builder40.setRegion("");
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.lang.String str44 = locale43.getDisplayCountry();
        java.util.Locale.Builder builder45 = builder40.setLocale(locale43);
        java.util.Locale locale46 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale46);
        java.util.Locale locale48 = locale46.stripExtensions();
        java.lang.String str49 = locale46.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.TAIWAN;
        java.lang.String str51 = locale50.toLanguageTag();
        java.lang.String str52 = locale50.getDisplayLanguage();
        java.lang.String str53 = locale50.getISO3Country();
        java.lang.String str54 = locale46.getDisplayScript(locale50);
        java.lang.String str55 = locale43.getDisplayScript(locale50);
        java.lang.String str56 = locale27.getDisplayLanguage(locale43);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getInstance(locale27);
        boolean boolean58 = locale27.hasExtensions();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str49, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "zh-TW" + "'", str51, "zh-TW");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str52, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "TWN" + "'", str53, "TWN");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test08214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08214");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale9.getISO3Language();
        java.util.Locale.setDefault(locale9);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str14 = locale9.getDisplayName(locale12);
        java.lang.String str15 = locale9.getISO3Language();
        java.util.Locale locale17 = new java.util.Locale("100 0 / 1");
        java.lang.String str18 = locale9.getDisplayCountry(locale17);
        java.lang.String str20 = locale9.getExtension('u');
        java.lang.String str21 = locale9.getLanguage();
        java.lang.String str22 = locale7.getDisplayCountry(locale9);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale23.getDisplayScript();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale25.getISO3Language();
        java.lang.String str27 = locale23.getDisplayScript(locale25);
        java.lang.String str28 = locale23.getDisplayName();
        java.lang.String str29 = locale23.getDisplayLanguage();
        java.lang.String str30 = locale7.getDisplayLanguage(locale23);
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("");
        java.lang.String str33 = locale32.getCountry();
        java.lang.String str34 = locale32.getDisplayScript();
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder37 = builder35.setScript("");
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.lang.String str41 = locale38.getDisplayLanguage(locale40);
        java.util.Locale.Builder builder42 = builder37.setLocale(locale38);
        java.util.Locale.Builder builder43 = builder37.clearExtensions();
        java.util.Locale.Builder builder44 = builder37.clearExtensions();
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getInstance(locale45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = new org.apache.commons.math.fraction.FractionFormat(numberFormat46, numberFormat48);
        numberFormat48.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field53 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition54 = new java.text.FieldPosition((java.text.Format.Field) field53);
        java.lang.String str55 = fieldPosition54.toString();
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.lang.String str58 = locale57.getDisplayScript();
        java.lang.String str59 = locale56.getDisplayName(locale57);
        boolean boolean60 = fieldPosition54.equals((java.lang.Object) locale57);
        fieldPosition54.setEndIndex((int) '#');
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getCurrencyInstance(locale63);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64);
        java.text.ParsePosition parsePosition68 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction69 = properFractionFormat65.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition68);
        boolean boolean70 = fieldPosition54.equals((java.lang.Object) parsePosition68);
        java.lang.Number number71 = numberFormat48.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition68);
        org.apache.commons.math.fraction.Fraction fraction74 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction75 = fraction74.negate();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction75.abs();
        org.apache.commons.math.fraction.Fraction fraction77 = fraction75.abs();
        java.util.Locale locale78 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat79 = java.text.NumberFormat.getInstance(locale78);
        java.util.Locale locale80 = java.util.Locale.getDefault();
        boolean boolean81 = numberFormat79.equals((java.lang.Object) locale80);
        boolean boolean82 = fraction77.equals((java.lang.Object) locale80);
        boolean boolean83 = parsePosition68.equals((java.lang.Object) locale80);
        java.lang.String str85 = locale80.getUnicodeLocaleType("US");
        java.util.Locale.Builder builder86 = builder37.setLocale(locale80);
        java.lang.String str87 = locale32.getDisplayScript(locale80);
        java.lang.String str88 = locale32.getISO3Country();
        java.lang.String str89 = locale23.getDisplayLanguage(locale32);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cor\351en" + "'", str14, "cor\351en");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals(locale17.toString(), "100 0 / 1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ko" + "'", str21, "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "KOR" + "'", str22, "KOR");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "anglais" + "'", str30, "anglais");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Chinesisch" + "'", str41, "Chinesisch");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(field53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str55, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Chinese (Taiwan)" + "'", str59, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNull(fraction69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(number71);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
    }

    @Test
    public void test08215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08215");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getDisplayLanguage();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale4);
        boolean boolean7 = numberFormat6.isParseIntegerOnly();
        java.lang.StringBuffer stringBuffer9 = null;
        java.text.NumberFormat.Field field10 = java.text.NumberFormat.Field.PERMILLE;
        java.text.NumberFormat.Field field11 = java.text.NumberFormat.Field.CURRENCY;
        boolean boolean12 = field10.equals((java.lang.Object) field11);
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition((java.text.Format.Field) field10);
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition((java.text.Format.Field) field10);
        java.text.Format.Field field15 = fieldPosition14.getFieldAttribute();
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition(10);
        int int18 = fieldPosition17.getEndIndex();
        fieldPosition17.setBeginIndex((int) '#');
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.lang.String str22 = locale21.getScript();
        java.util.Locale locale26 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str27 = locale21.getDisplayScript(locale26);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getNumberInstance(locale26);
        int int29 = numberFormat28.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        boolean boolean32 = fieldPosition17.equals((java.lang.Object) numberFormat28);
        fieldPosition17.setEndIndex((int) (byte) 100);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strSet39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, strMap41);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale locale46 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.lang.String>) strSet47);
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.lang.String>) strList54);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap57 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList58 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, strMap57);
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = locale59.getDisplayScript();
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale61.getISO3Language();
        java.lang.String str63 = locale59.getDisplayScript(locale61);
        java.util.Set<java.lang.String> strSet64 = locale61.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet65 = locale61.getUnicodeLocaleKeys();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList67 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray68 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList69 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList69, languageRangeArray68);
        java.util.Locale locale71 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList73 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, (java.util.Collection<java.lang.String>) strSet72);
        java.util.Locale.FilteringMode filteringMode74 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags(languageRangeList67, (java.util.Collection<java.lang.String>) strSet72, filteringMode74);
        java.util.List<java.lang.String> strList76 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.lang.String>) strSet65, filteringMode74);
        java.lang.String str77 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.lang.String>) strSet65);
        java.util.List<java.lang.String> strList78 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strSet65);
        java.text.NumberFormat.Field field79 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition80 = new java.text.FieldPosition((java.text.Format.Field) field79);
        java.util.Locale locale81 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat82 = java.text.NumberFormat.getInstance(locale81);
        boolean boolean83 = field79.equals((java.lang.Object) locale81);
        java.util.Set<java.lang.String> strSet84 = locale81.getUnicodeLocaleAttributes();
        java.lang.String str85 = locale81.getISO3Language();
        java.util.Locale locale86 = locale81.stripExtensions();
        java.util.Set<java.lang.String> strSet87 = locale81.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode88 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strSet87, filteringMode88);
        boolean boolean90 = fieldPosition17.equals((java.lang.Object) strList89);
        boolean boolean91 = fieldPosition14.equals((java.lang.Object) boolean90);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer92 = numberFormat6.format((double) (byte) 35, stringBuffer9, fieldPosition14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(field15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals(locale26.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(languageRangeList58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "kor" + "'", str62, "kor");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(languageRangeList67);
        org.junit.Assert.assertNotNull(languageRangeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertTrue("'" + filteringMode74 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode74.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertNotNull(field79);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "eng" + "'", str85, "eng");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "en");
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertTrue("'" + filteringMode88 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode88.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test08216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08216");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Locale.setDefault(locale5);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale5.getDisplayName(locale8);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = java.util.Locale.getDefault(category13);
        java.lang.String str15 = locale12.getDisplayScript(locale14);
        java.lang.String str16 = locale14.getDisplayCountry();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale17);
        java.lang.String str19 = locale14.getDisplayScript(locale17);
        java.lang.String str20 = locale14.getLanguage();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale21.getISO3Language();
        java.lang.String str24 = locale14.getDisplayVariant(locale21);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale25.getScript();
        java.lang.String str27 = locale25.getDisplayName();
        java.util.Locale locale28 = locale25.stripExtensions();
        java.lang.String str29 = locale28.getCountry();
        java.lang.String str30 = locale28.getVariant();
        java.lang.String str31 = locale14.getDisplayLanguage(locale28);
        java.util.Locale.setDefault(category0, locale14);
        java.util.Locale locale33 = java.util.Locale.getDefault(category0);
        java.util.Locale locale34 = java.util.Locale.getDefault(category0);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale35.getDisplayScript();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale37.getISO3Language();
        java.lang.String str39 = locale35.getDisplayScript(locale37);
        java.lang.String str40 = locale35.toLanguageTag();
        java.util.Set<java.lang.String> strSet41 = locale35.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale35);
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("zh-TW");
        java.lang.String str45 = locale35.getDisplayLanguage(locale44);
        java.util.Locale.setDefault(category0, locale44);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cor\351en" + "'", str10, "cor\351en");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ko" + "'", str20, "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str22, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zho" + "'", str23, "zho");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str31, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "kor" + "'", str38, "kor");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "und" + "'", str40, "und");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test08217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08217");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("0");
        java.util.Locale locale2 = java.util.Locale.ROOT;
        java.lang.String str3 = locale2.getDisplayScript();
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale1.getDisplayCountry(locale2);
        java.lang.String str6 = locale1.getDisplayName();
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Locale locale11 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale8.getDisplayName(locale11);
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getISO3Language();
        java.lang.String str19 = locale15.getDisplayScript(locale17);
        java.lang.String str20 = locale8.getDisplayLanguage(locale17);
        java.lang.String str21 = locale8.toLanguageTag();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.util.Locale.setDefault(category7, locale8);
        java.util.Locale locale24 = java.util.Locale.getDefault(category7);
        java.lang.String str25 = locale1.getDisplayScript(locale24);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getCurrencyInstance(locale1);
        boolean boolean28 = locale1.equals((java.lang.Object) "1,728,001 / 120");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Korean" + "'", str14, "Korean");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str20, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ko" + "'", str21, "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test08218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08218");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.lang.String str8 = locale0.getVariant();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale0);
        java.lang.String str10 = locale0.getDisplayScript();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.lang.String str13 = locale12.getDisplayCountry();
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.PRC;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.lang.String str17 = locale12.getDisplayCountry(locale14);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale18.getISO3Language();
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleKeys();
        java.lang.String str21 = locale18.getDisplayLanguage();
        java.lang.String str22 = locale12.getDisplayScript(locale18);
        java.text.NumberFormat.Field field23 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition24 = new java.text.FieldPosition((java.text.Format.Field) field23);
        java.text.FieldPosition fieldPosition26 = new java.text.FieldPosition((java.text.Format.Field) field23, 1);
        java.text.FieldPosition fieldPosition28 = new java.text.FieldPosition((java.text.Format.Field) field23, (int) (short) 100);
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = locale29.getDisplayCountry(locale30);
        java.util.Set<java.lang.String> strSet33 = locale30.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        boolean boolean35 = field23.equals((java.lang.Object) locale30);
        boolean boolean36 = locale30.hasExtensions();
        java.lang.String str37 = locale12.getDisplayLanguage(locale30);
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getInstance(locale30);
        java.util.Locale locale39 = locale30.stripExtensions();
        java.lang.String str40 = locale0.getDisplayLanguage(locale30);
        java.util.Set<java.lang.String> strSet41 = locale0.getUnicodeLocaleAttributes();
        boolean boolean42 = locale0.hasExtensions();
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getIntegerInstance(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Japan" + "'", str5, "Japan");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Japan" + "'", str6, "Japan");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str16, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertNotNull(strSet20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Korean" + "'", str21, "Korean");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(field23);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Japan" + "'", str32, "Japan");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Italian" + "'", str37, "Italian");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Japanese" + "'", str40, "Japanese");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(numberFormat43);
    }

    @Test
    public void test08219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08219");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) ' ');
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        numberFormat3.setMaximumFractionDigits(100);
        java.lang.String str8 = numberFormat3.format((long) 100);
        int int9 = numberFormat3.getMaximumFractionDigits();
        numberFormat3.setMinimumFractionDigits((int) (short) 0);
        int int12 = numberFormat3.getMaximumFractionDigits();
        boolean boolean13 = numberFormat3.isGroupingUsed();
        numberFormat3.setGroupingUsed(false);
        int int16 = numberFormat3.getMaximumIntegerDigits();
        boolean boolean17 = parsePosition1.equals((java.lang.Object) numberFormat3);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10,000%" + "'", str8, "10,000%");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08220");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.util.Locale locale30 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.lang.String str33 = fractionFormat31.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat34 = fractionFormat31.getNumeratorFormat();
        java.text.NumberFormat numberFormat35 = fractionFormat31.getNumeratorFormat();
        java.text.NumberFormat numberFormat36 = fractionFormat31.getNumeratorFormat();
        java.lang.String str38 = numberFormat36.format((long) 2147483647);
        properFractionFormat28.setDenominatorFormat(numberFormat36);
        java.text.ParsePosition parsePosition42 = new java.text.ParsePosition((int) '4');
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = locale43.getDisplayScript();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.lang.String str46 = locale45.getISO3Language();
        java.lang.String str47 = locale43.getDisplayScript(locale45);
        java.lang.String str48 = locale43.toLanguageTag();
        java.util.Set<java.lang.String> strSet49 = locale43.getUnicodeLocaleKeys();
        boolean boolean50 = parsePosition42.equals((java.lang.Object) locale43);
        java.lang.Object obj51 = numberFormat36.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=0,endIndex=0]", parsePosition42);
        java.lang.String str52 = parsePosition42.toString();
        java.lang.String str53 = parsePosition42.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "100 0 / 1" + "'", str33, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2,147,483,647" + "'", str38, "2,147,483,647");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "kor" + "'", str46, "kor");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "und" + "'", str48, "und");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.text.ParsePosition[index=52,errorIndex=52]" + "'", str52, "java.text.ParsePosition[index=52,errorIndex=52]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "java.text.ParsePosition[index=52,errorIndex=52]" + "'", str53, "java.text.ParsePosition[index=52,errorIndex=52]");
    }

    @Test
    public void test08221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08221");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        boolean boolean4 = numberFormat3.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        boolean boolean6 = numberFormat3.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        numberFormat1.setParseIntegerOnly(false);
        numberFormat1.setParseIntegerOnly(true);
        java.lang.String str13 = numberFormat1.format((double) 0.016666668f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.text.NumberFormat.Field field15 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition16 = new java.text.FieldPosition((java.text.Format.Field) field15);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        boolean boolean19 = field15.equals((java.lang.Object) locale17);
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale20.getDisplayCountry();
        java.lang.String str22 = locale17.getDisplayVariant(locale20);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale20);
        int int24 = numberFormat23.getMaximumFractionDigits();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.Object obj28 = numberFormat26.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat(numberFormat26);
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getCurrencyInstance(locale30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        java.util.Locale locale34 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale34);
        java.lang.String str37 = fractionFormat35.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat38 = fractionFormat35.getNumeratorFormat();
        java.util.Locale locale39 = java.util.Locale.getDefault();
        java.util.Locale locale40 = locale39.stripExtensions();
        java.util.Locale locale42 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale42);
        java.lang.String str44 = locale42.getDisplayCountry();
        java.lang.String str45 = locale39.getDisplayName(locale42);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.lang.String str47 = locale46.getDisplayScript();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale48.getISO3Language();
        java.lang.String str50 = locale46.getDisplayScript(locale48);
        java.lang.String str51 = locale39.getDisplayLanguage(locale48);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getNumberInstance(locale39);
        fractionFormat35.setNumeratorFormat(numberFormat52);
        properFractionFormat32.setWholeFormat(numberFormat52);
        fractionFormat29.setNumeratorFormat(numberFormat52);
        java.text.NumberFormat numberFormat56 = fractionFormat29.getNumeratorFormat();
        java.text.NumberFormat numberFormat57 = fractionFormat29.getDenominatorFormat();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance();
        numberFormat58.setMaximumIntegerDigits(2147483647);
        java.lang.String str62 = numberFormat58.format((long) 'a');
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale63);
        java.text.NumberFormat numberFormat65 = fractionFormat64.getDenominatorFormat();
        numberFormat65.setMinimumIntegerDigits(1728000);
        numberFormat65.setMaximumIntegerDigits(600);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57, numberFormat58, numberFormat65);
        java.lang.Object obj71 = numberFormat65.clone();
        java.util.Locale locale72 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getInstance(locale72);
        java.util.Locale locale74 = java.util.Locale.getDefault();
        boolean boolean75 = numberFormat73.equals((java.lang.Object) locale74);
        boolean boolean76 = numberFormat73.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = new org.apache.commons.math.fraction.FractionFormat(numberFormat73);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23, numberFormat65, numberFormat73);
        java.text.NumberFormat numberFormat79 = properFractionFormat78.getWholeFormat();
        fractionFormat14.setDenominatorFormat(numberFormat79);
        numberFormat79.setMaximumIntegerDigits((int) '4');
        int int83 = numberFormat79.getMinimumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "100%_ZH-TW");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertNotNull(field15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "100 0 / 1" + "'", str37, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(locale39);
// flaky:         org.junit.Assert.assertEquals(locale39.toString(), "100%_ZH-TW");
        org.junit.Assert.assertNotNull(locale40);
// flaky:         org.junit.Assert.assertEquals(locale40.toString(), "100%_ZH-TW");
        org.junit.Assert.assertEquals(locale42.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "100% (ZH-TW)" + "'", str45, "100% (ZH-TW)");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "kor" + "'", str49, "kor");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "100%" + "'", str51, "100%");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "9,700%" + "'", str62, "9,700%");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(locale74);
// flaky:         org.junit.Assert.assertEquals(locale74.toString(), "100%_ZH-TW");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test08222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08222");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        int int1 = numberFormat0.getMaximumFractionDigits();
        boolean boolean2 = numberFormat0.isParseIntegerOnly();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance();
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str8 = fractionFormat6.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat9 = fractionFormat6.getNumeratorFormat();
        numberFormat9.setMaximumFractionDigits((int) (short) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat3, numberFormat9);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        numberFormat14.setMaximumFractionDigits(100);
        java.lang.String str19 = numberFormat14.format((long) 100);
        int int20 = numberFormat14.getMaximumFractionDigits();
        numberFormat14.setMinimumFractionDigits((int) (short) 0);
        int int23 = numberFormat14.getMaximumFractionDigits();
        java.math.RoundingMode roundingMode24 = numberFormat14.getRoundingMode();
        numberFormat14.setGroupingUsed(false);
        java.lang.Object obj27 = numberFormat14.clone();
        properFractionFormat12.setNumeratorFormat(numberFormat14);
        java.text.NumberFormat numberFormat29 = properFractionFormat12.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction30 = null;
        java.lang.StringBuffer stringBuffer31 = null;
        java.text.NumberFormat.Field field32 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition((java.text.Format.Field) field32);
        java.lang.String str34 = fieldPosition33.toString();
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale36.getDisplayScript();
        java.lang.String str38 = locale35.getDisplayName(locale36);
        boolean boolean39 = fieldPosition33.equals((java.lang.Object) locale36);
        int int40 = fieldPosition33.getBeginIndex();
        int int41 = fieldPosition33.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer42 = properFractionFormat12.format(fraction30, stringBuffer31, fieldPosition33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100 0 / 1" + "'", str8, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "10,000%" + "'", str19, "10,000%");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + roundingMode24 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode24.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(field32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str34, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Chinese (Taiwan)" + "'", str38, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test08223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08223");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\244 87.00");
        java.lang.String str2 = locale1.getScript();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        java.lang.String str4 = locale1.toLanguageTag();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "und" + "'", str4, "und");
    }

    @Test
    public void test08224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08224");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        boolean boolean19 = numberFormat18.isGroupingUsed();
        properFractionFormat16.setWholeFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat11, numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.text.NumberFormat numberFormat23 = properFractionFormat22.getWholeFormat();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str25 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction24);
        long long26 = fraction24.longValue();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction24.reciprocal();
        java.lang.StringBuffer stringBuffer28 = null;
        java.text.NumberFormat.Field field29 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition30 = new java.text.FieldPosition((java.text.Format.Field) field29);
        int int31 = fieldPosition30.getBeginIndex();
        int int32 = fieldPosition30.getField();
        int int33 = fieldPosition30.getBeginIndex();
        fieldPosition30.setBeginIndex((int) (short) 100);
        java.text.Format.Field field36 = fieldPosition30.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer37 = properFractionFormat22.format(fraction27, stringBuffer28, fieldPosition30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1 / 1" + "'", str25, "1 / 1");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(field29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(field36);
    }

    @Test
    public void test08225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08225");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.lang.String str6 = locale4.toLanguageTag();
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale7.getISO3Language();
        java.lang.String str10 = locale4.getDisplayScript(locale7);
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.lang.String str12 = locale4.getDisplayCountry(locale11);
        java.util.Locale.Builder builder13 = builder1.setLocale(locale11);
        java.lang.String str14 = locale11.getDisplayScript();
        boolean boolean15 = field0.equals((java.lang.Object) locale11);
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition((java.text.Format.Field) field0, 0);
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.lang.String str19 = locale18.toLanguageTag();
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale18.getDisplayCountry();
        java.lang.String str22 = locale18.getISO3Country();
        java.util.Locale locale23 = locale18.stripExtensions();
        boolean boolean24 = field0.equals((java.lang.Object) locale23);
        java.text.NumberFormat.Field field25 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition26 = new java.text.FieldPosition((java.text.Format.Field) field25);
        java.lang.String str27 = fieldPosition26.toString();
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayScript();
        java.lang.String str31 = locale28.getDisplayName(locale29);
        boolean boolean32 = fieldPosition26.equals((java.lang.Object) locale29);
        fieldPosition26.setEndIndex((int) '#');
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getCurrencyInstance(locale35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.text.ParsePosition parsePosition40 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction41 = properFractionFormat37.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition40);
        boolean boolean42 = fieldPosition26.equals((java.lang.Object) parsePosition40);
        boolean boolean43 = field0.equals((java.lang.Object) parsePosition40);
        java.text.FieldPosition fieldPosition45 = new java.text.FieldPosition((java.text.Format.Field) field0, 7);
        int int46 = fieldPosition45.getField();
        java.text.Format.Field field47 = fieldPosition45.getFieldAttribute();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Chinese" + "'", str5, "Chinese");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh-TW" + "'", str6, "zh-TW");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zho" + "'", str9, "zho");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Taiwan" + "'", str12, "Taiwan");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh-TW" + "'", str19, "zh-TW");
        org.junit.Assert.assertNotNull(strSet20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Taiwan" + "'", str21, "Taiwan");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "TWN" + "'", str22, "TWN");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(field25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str27, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese (Taiwan)" + "'", str31, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNull(fraction41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 7 + "'", int46 == 7);
        org.junit.Assert.assertNotNull(field47);
    }

    @Test
    public void test08226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08226");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder8 = builder5.clear();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("9,700%");
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.util.Locale.Builder builder12 = builder8.setLocale(locale10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str18 = locale14.getISO3Language();
        boolean boolean19 = numberFormat13.equals((java.lang.Object) locale14);
        java.util.Locale.Builder builder20 = builder8.setLocale(locale14);
        java.util.Locale.Builder builder22 = builder20.addUnicodeLocaleAttribute("Korean");
        java.util.Locale.Builder builder24 = builder20.setRegion("FR");
        java.util.Locale.Builder builder25 = builder20.clearExtensions();
        java.util.Locale.Builder builder27 = builder20.setLanguage("English");
        java.util.Locale.Builder builder28 = builder20.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test08227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08227");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str10 = locale8.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.lang.String str12 = locale5.getDisplayCountry(locale8);
        java.lang.String str13 = locale5.getISO3Language();
        java.lang.String str14 = locale5.getDisplayName();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale16.getISO3Language();
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale20);
        java.lang.String str24 = locale16.getDisplayLanguage(locale20);
        java.lang.String str25 = locale16.getDisplayName();
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale.setDefault(locale16);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getCurrencyInstance(locale16);
        java.util.Set<java.lang.String> strSet29 = locale16.getUnicodeLocaleAttributes();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "France" + "'", str12, "France");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fra" + "'", str13, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "French (France)" + "'", str14, "French (France)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zho" + "'", str18, "zho");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese" + "'", str24, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinese (Taiwan)" + "'", str25, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(strSet29);
    }

    @Test
    public void test08228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08228");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(category0, locale9);
        java.lang.String str13 = locale9.getScript();
        java.lang.String str14 = locale9.getLanguage();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale9);
        java.lang.String str17 = numberFormat15.format((long) 2147483647);
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.lang.String str21 = locale20.getDisplayScript();
        java.lang.String str22 = locale19.getDisplayCountry(locale20);
        java.util.Set<java.lang.String> strSet23 = locale20.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getIntegerInstance(locale20);
        int int25 = numberFormat24.getMaximumIntegerDigits();
        numberFormat24.setMinimumFractionDigits(2147483647);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getIntegerInstance(locale28);
        boolean boolean30 = numberFormat24.equals((java.lang.Object) locale28);
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) 'a');
        java.lang.String str34 = parsePosition33.toString();
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder36 = builder35.clearExtensions();
        java.util.Locale.Builder builder37 = builder35.clear();
        java.util.Locale.Builder builder38 = builder37.clear();
        boolean boolean39 = parsePosition33.equals((java.lang.Object) builder38);
        java.util.Locale.Category category40 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale41 = java.util.Locale.getDefault(category40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale42);
        java.util.Locale.setDefault(category40, locale42);
        java.util.Locale locale45 = java.util.Locale.getDefault(category40);
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance(locale45);
        boolean boolean48 = parsePosition33.equals((java.lang.Object) locale45);
        java.lang.Object obj49 = numberFormat24.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(exponent sign),beginIndex=0,endIndex=0]", parsePosition33);
        java.lang.String str50 = parsePosition33.toString();
        int int51 = parsePosition33.getIndex();
        java.lang.Object obj52 = numberFormat15.parseObject("\ud504\ub791\uc2a4", parsePosition33);
        java.lang.StringBuffer stringBuffer54 = null;
        java.text.NumberFormat.Field field55 = java.text.NumberFormat.Field.EXPONENT;
        java.text.FieldPosition fieldPosition56 = new java.text.FieldPosition((java.text.Format.Field) field55);
        java.lang.String str57 = fieldPosition56.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer58 = numberFormat15.format((long) (-12000), stringBuffer54, fieldPosition56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str11, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en" + "'", str14, "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2,147,483,647" + "'", str17, "2,147,483,647");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Japan" + "'", str22, "Japan");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str34, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.FORMAT + "'", category40.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str50, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 97 + "'", int51 == 97);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(field55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(exponent),beginIndex=0,endIndex=0]" + "'", str57, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(exponent),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test08229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08229");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        numberFormat1.setMaximumFractionDigits((int) (byte) 100);
        numberFormat1.setMaximumFractionDigits((int) (byte) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setParseIntegerOnly(true);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale13.getISO3Language();
        java.lang.String str15 = locale13.getDisplayCountry();
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale16.getISO3Language();
        java.lang.String str19 = locale13.getDisplayScript(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.text.NumberFormat.Field field22 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field22);
        java.lang.String str24 = fieldPosition23.toString();
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = locale25.getDisplayName(locale26);
        boolean boolean29 = fieldPosition23.equals((java.lang.Object) locale26);
        fieldPosition23.setEndIndex((int) '#');
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction38 = properFractionFormat34.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition37);
        boolean boolean39 = fieldPosition23.equals((java.lang.Object) parsePosition37);
        java.lang.String str40 = parsePosition37.toString();
        parsePosition37.setErrorIndex((int) (short) 10);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency44 = numberFormat43.getCurrency();
        java.lang.String str46 = numberFormat43.format(1.0d);
        int int47 = numberFormat43.getMinimumIntegerDigits();
        boolean boolean48 = parsePosition37.equals((java.lang.Object) int47);
        java.lang.Object obj49 = fractionFormat20.parseObject("ita", parsePosition37);
        java.lang.Object obj50 = numberFormat1.parseObject("100% (ZH-TW)", parsePosition37);
        java.util.Currency currency51 = numberFormat1.getCurrency();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "kor" + "'", str14, "kor");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zho" + "'", str18, "zho");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str24, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Chinese (Taiwan)" + "'", str28, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNull(fraction38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str40, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100%" + "'", str46, "100%");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + obj50 + "' != '" + 0L + "'", obj50, 0L);
        org.junit.Assert.assertNotNull(currency51);
        org.junit.Assert.assertEquals(currency51.toString(), "XXX");
    }

    @Test
    public void test08230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08230");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        boolean boolean5 = numberFormat3.isGroupingUsed();
        boolean boolean6 = numberFormat3.isGroupingUsed();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj10 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition9);
        numberFormat3.setGroupingUsed(false);
        int int13 = numberFormat3.getMinimumIntegerDigits();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale14.getDisplayScript();
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale16.getISO3Language();
        java.lang.String str18 = locale14.getDisplayScript(locale16);
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet20 = locale16.getUnicodeLocaleKeys();
        java.lang.String str21 = locale16.toLanguageTag();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getNumberInstance(locale16);
        boolean boolean23 = numberFormat22.isGroupingUsed();
        java.text.NumberFormat numberFormat24 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3, numberFormat22, numberFormat24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction27 = properFractionFormat25.parse("java.text.parseexception: zh_tw");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"java.text.parseexception: zh_tw\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ko" + "'", str21, "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test08231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08231");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str8 = fractionFormat6.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat9 = fractionFormat6.getNumeratorFormat();
        fractionFormat3.setNumeratorFormat(numberFormat9);
        numberFormat9.setMaximumFractionDigits(2147483647);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction17.abs();
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance(locale20);
        java.util.Locale locale22 = java.util.Locale.getDefault();
        boolean boolean23 = numberFormat21.equals((java.lang.Object) locale22);
        boolean boolean24 = fraction19.equals((java.lang.Object) locale22);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction19.abs();
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale26);
        boolean boolean28 = fraction25.equals((java.lang.Object) locale26);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        long long39 = fraction37.longValue();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction33.multiply(fraction37);
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.negate();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.abs();
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.negate();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.abs();
        long long51 = fraction49.longValue();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction45.multiply(fraction49);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction33.divide(fraction52);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction33.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction25.subtract(fraction54);
        int int56 = fraction55.getDenominator();
        float float57 = fraction55.floatValue();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction55.reciprocal();
        java.lang.StringBuffer stringBuffer59 = null;
        java.text.NumberFormat.Field field60 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition61 = new java.text.FieldPosition((java.text.Format.Field) field60);
        java.text.FieldPosition fieldPosition63 = new java.text.FieldPosition((java.text.Format.Field) field60, 1);
        int int64 = fieldPosition63.getEndIndex();
        java.text.Format.Field field65 = fieldPosition63.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer66 = properFractionFormat13.format((java.lang.Object) fraction55, stringBuffer59, fieldPosition63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100 0 / 1" + "'", str8, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 120 + "'", int56 == 120);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + (-119.99167f) + "'", float57 == (-119.99167f));
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(field60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(field65);
    }

    @Test
    public void test08232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08232");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        int int8 = numberFormat7.getMaximumFractionDigits();
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getISO3Language();
        java.util.Locale.setDefault(category9, locale10);
        java.util.Locale locale13 = java.util.Locale.getDefault(category9);
        java.lang.String str14 = locale13.getDisplayCountry();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        boolean boolean19 = numberFormat18.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        boolean boolean21 = numberFormat18.isGroupingUsed();
        java.lang.String str23 = numberFormat18.format((double) 10L);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale24.getISO3Language();
        java.util.Set<java.lang.String> strSet26 = locale24.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getCurrencyInstance(locale24);
        boolean boolean28 = numberFormat27.isParseIntegerOnly();
        java.math.RoundingMode roundingMode29 = numberFormat27.getRoundingMode();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18, numberFormat27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat15, numberFormat18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category9.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "kor" + "'", str11, "kor");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1,000%" + "'", str23, "1,000%");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "kor" + "'", str25, "kor");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + roundingMode29 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode29.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test08233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08233");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits(2147483647);
        numberFormat0.setMinimumIntegerDigits((int) (byte) -101);
        numberFormat0.setMinimumFractionDigits(600);
        boolean boolean7 = numberFormat0.isParseIntegerOnly();
        java.util.Locale locale8 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = locale8.getDisplayCountry(locale10);
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.getDefault(category12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale14);
        java.util.Locale.setDefault(category12, locale14);
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category12, locale17);
        java.lang.String str19 = locale17.getISO3Language();
        java.lang.String str20 = locale8.getDisplayLanguage(locale17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale17);
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat22);
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str29 = fractionFormat27.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat30 = fractionFormat27.getNumeratorFormat();
        numberFormat30.setMaximumFractionDigits((int) (short) -1);
        int int33 = numberFormat30.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition(119);
        int int38 = parsePosition37.getIndex();
        org.apache.commons.math.fraction.Fraction fraction39 = properFractionFormat34.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 100 to fraction (100/-1)", parsePosition37);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        java.text.AttributedCharacterIterator attributedCharacterIterator44 = numberFormat41.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj45 = numberFormat41.clone();
        numberFormat41.setMaximumFractionDigits(2147483647);
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getInstance(locale49);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = new org.apache.commons.math.fraction.FractionFormat(numberFormat50, numberFormat52);
        java.text.ParsePosition parsePosition56 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj57 = numberFormat52.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition56);
        java.lang.String str58 = parsePosition56.toString();
        java.lang.Number number59 = numberFormat41.parse("\ud55c\uad6d\uc5b4", parsePosition56);
        int int60 = numberFormat41.getMinimumFractionDigits();
        boolean boolean61 = parsePosition37.equals((java.lang.Object) int60);
        java.lang.Number number62 = numberFormat22.parse("61.855670103092784%", parsePosition37);
        java.util.Locale locale66 = new java.util.Locale("anglais", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]");
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getCurrencyInstance(locale66);
        java.text.ParsePosition parsePosition70 = new java.text.ParsePosition((int) '#');
        parsePosition70.setErrorIndex(600);
        java.lang.String str73 = parsePosition70.toString();
        int int74 = parsePosition70.getErrorIndex();
        java.lang.Object obj75 = numberFormat67.parseObject("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)", parsePosition70);
        java.lang.Number number76 = numberFormat22.parse("chinese", parsePosition70);
        parsePosition70.setErrorIndex((int) (byte) -51);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str9, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Taiwan" + "'", str11, "Taiwan");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "fra" + "'", str19, "fra");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "chinois" + "'", str20, "chinois");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "100 0 / 1" + "'", str29, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 119 + "'", int38 == 119);
        org.junit.Assert.assertNull(fraction39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(attributedCharacterIterator44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str58, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(number62);
        org.junit.Assert.assertEquals(locale66.toString(), "anglais_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "java.text.ParsePosition[index=35,errorIndex=600]" + "'", str73, "java.text.ParsePosition[index=35,errorIndex=600]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 600 + "'", int74 == 600);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNull(number76);
    }

    @Test
    public void test08234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08234");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Locale locale7 = locale6.stripExtensions();
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.lang.String str12 = locale6.getDisplayName(locale9);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale6.getDisplayLanguage(locale15);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance(locale6);
        fractionFormat2.setNumeratorFormat(numberFormat19);
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale22);
        java.util.Currency currency25 = numberFormat24.getCurrency();
        numberFormat24.setMinimumIntegerDigits(1);
        numberFormat24.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition32 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj33 = numberFormat24.parseObject("Japan", parsePosition32);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException37 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str38 = fractionConversionException37.getPattern();
        java.lang.Throwable[] throwableArray39 = fractionConversionException37.getSuppressed();
        java.lang.Object[] objArray40 = fractionConversionException37.getArguments();
        boolean boolean41 = parsePosition32.equals((java.lang.Object) objArray40);
        int int42 = parsePosition32.getIndex();
        int int43 = parsePosition32.getIndex();
        java.lang.Object obj44 = fractionFormat2.parseObject("Germany", parsePosition32);
        java.text.NumberFormat numberFormat45 = fractionFormat2.getDenominatorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj47 = fractionFormat2.parseObject("CHN");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "1,000%");
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "1,000%");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1,000%" + "'", str12, "1,000%");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1,000%" + "'", str18, "1,000%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "TWD");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str38, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(numberFormat45);
    }

    @Test
    public void test08235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08235");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category1, locale6);
        java.lang.String str8 = locale0.getDisplayLanguage(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getCurrencyInstance(locale11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction17 = properFractionFormat13.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition16);
        java.lang.Object obj18 = fractionFormat9.parseObject("214,748,364,700%", parsePosition16);
        int int19 = parsePosition16.getIndex();
        parsePosition16.setIndex((int) (byte) -2);
        parsePosition16.setIndex(9);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "1,000%");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "anglais" + "'", str8, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(fraction17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test08236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08236");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale3);
        java.util.Currency currency6 = numberFormat5.getCurrency();
        numberFormat5.setMinimumIntegerDigits(1);
        numberFormat5.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj14 = numberFormat5.parseObject("Japan", parsePosition13);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException18 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str19 = fractionConversionException18.getPattern();
        java.lang.Throwable[] throwableArray20 = fractionConversionException18.getSuppressed();
        java.lang.Object[] objArray21 = fractionConversionException18.getArguments();
        boolean boolean22 = parsePosition13.equals((java.lang.Object) objArray21);
        int int23 = parsePosition13.getIndex();
        int int24 = parsePosition13.getIndex();
        java.lang.Object obj25 = fractionFormat1.parseObject("\ud55c\uad6d\uc5b4", parsePosition13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat27 = properFractionFormat26.getWholeFormat();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        numberFormat29.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27, numberFormat29);
        java.text.NumberFormat numberFormat34 = fractionFormat33.getNumeratorFormat();
        boolean boolean35 = parsePosition13.equals((java.lang.Object) fractionFormat33);
        java.util.Locale.Category category36 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale37 = java.util.Locale.getDefault(category36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale38);
        java.util.Locale.setDefault(category36, locale38);
        java.util.Locale locale41 = java.util.Locale.getDefault(category36);
        java.util.Locale.Category category42 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = locale43.getISO3Language();
        java.util.Locale.setDefault(category42, locale43);
        java.util.Locale.setDefault(category36, locale43);
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.lang.String str48 = locale47.getISO3Country();
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getIntegerInstance(locale47);
        java.util.Locale.setDefault(category36, locale47);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getNumberInstance(locale47);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale47);
        fractionFormat33.setNumeratorFormat(numberFormat52);
        boolean boolean54 = numberFormat52.isParseIntegerOnly();
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getNumberInstance();
        java.util.Locale locale56 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getCurrencyInstance(locale56);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52, numberFormat55, numberFormat57);
        org.apache.commons.math.fraction.Fraction fraction61 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str62 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction61);
        float float63 = fraction61.floatValue();
        org.apache.commons.math.fraction.Fraction fraction64 = fraction61.negate();
        java.util.Locale locale68 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getPercentInstance(locale68);
        int int70 = numberFormat69.getMaximumIntegerDigits();
        int int71 = numberFormat69.getMaximumFractionDigits();
        java.util.Locale locale72 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getInstance(locale72);
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getPercentInstance(locale74);
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = new org.apache.commons.math.fraction.FractionFormat(numberFormat73, numberFormat75);
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = new org.apache.commons.math.fraction.FractionFormat(numberFormat69, numberFormat73);
        boolean boolean78 = fraction64.equals((java.lang.Object) fractionFormat77);
        java.text.NumberFormat numberFormat79 = fractionFormat77.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat80 = new org.apache.commons.math.fraction.FractionFormat(numberFormat79);
        java.text.NumberFormat numberFormat81 = fractionFormat80.getDenominatorFormat();
        int int82 = numberFormat81.getMinimumIntegerDigits();
        properFractionFormat58.setWholeFormat(numberFormat81);
        java.text.NumberFormat numberFormat84 = properFractionFormat58.getNumeratorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "TWD");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str19, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + category36 + "' != '" + java.util.Locale.Category.FORMAT + "'", category36.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category42 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category42.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "kor" + "'", str44, "kor");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(locale56);
// flaky:         org.junit.Assert.assertEquals(locale56.toString(), "1,000%");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1 / 1" + "'", str62, "1 / 1");
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 1.0f + "'", float63 == 1.0f);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertEquals(locale68.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(numberFormat84);
    }

    @Test
    public void test08237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08237");
        java.text.NumberFormat numberFormat0 = null;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        numberFormat5.setMinimumIntegerDigits((int) (short) -1);
        boolean boolean8 = numberFormat5.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat5);
        java.util.Currency currency10 = numberFormat5.getCurrency();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.lang.String str13 = locale11.toLanguageTag();
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = locale14.getISO3Language();
        java.lang.String str17 = locale11.getDisplayScript(locale14);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category21 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale22 = java.util.Locale.getDefault(category21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale23);
        java.util.Locale.setDefault(category21, locale23);
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category21, locale26);
        java.lang.String str28 = locale20.getDisplayLanguage(locale26);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance(locale20);
        int int30 = numberFormat29.getMinimumIntegerDigits();
        properFractionFormat19.setWholeFormat(numberFormat29);
        java.text.NumberFormat numberFormat32 = properFractionFormat19.getDenominatorFormat();
        boolean boolean33 = numberFormat32.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        java.util.Locale locale38 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        int int40 = numberFormat39.getMaximumIntegerDigits();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        boolean boolean43 = numberFormat42.isGroupingUsed();
        java.util.Currency currency44 = numberFormat42.getCurrency();
        numberFormat39.setCurrency(currency44);
        java.util.Currency currency46 = numberFormat39.getCurrency();
        int int47 = numberFormat39.getMaximumFractionDigits();
        java.lang.Object obj48 = numberFormat39.clone();
        java.lang.Object obj49 = numberFormat39.clone();
        int int50 = numberFormat39.getMaximumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat32, numberFormat39);
        java.text.NumberFormat numberFormat52 = properFractionFormat51.getDenominatorFormat();
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str12, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zh-TW" + "'", str13, "zh-TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zho" + "'", str16, "zho");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.FORMAT + "'", category21.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "anglais" + "'", str28, "anglais");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals(locale38.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(numberFormat52);
    }

    @Test
    public void test08238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08238");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale0);
        java.lang.String str4 = locale0.getDisplayVariant();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction8.abs();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale11);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        boolean boolean14 = numberFormat12.equals((java.lang.Object) locale13);
        boolean boolean15 = fraction10.equals((java.lang.Object) locale13);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction10.abs();
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale17);
        boolean boolean19 = fraction16.equals((java.lang.Object) locale17);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale17);
        java.lang.String str21 = locale17.getVariant();
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.PRC;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.util.Set<java.lang.Character> charSet25 = locale22.getExtensionKeys();
        java.util.Locale locale28 = new java.util.Locale("Overflow trying to convert {0} to fraction ({1}/{2})", "anglais");
        java.lang.String str29 = locale22.getDisplayName(locale28);
        java.lang.String str30 = locale17.getDisplayName(locale28);
        java.lang.String str31 = locale28.getDisplayLanguage();
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale28);
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = locale34.getDisplayScript();
        java.lang.String str36 = locale33.getDisplayCountry(locale34);
        java.util.Set<java.lang.String> strSet37 = locale34.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale34);
        boolean boolean39 = locale34.hasExtensions();
        java.util.Locale locale42 = new java.util.Locale("anglais", "kor");
        java.lang.String str43 = locale34.getDisplayLanguage(locale42);
        java.lang.String str44 = locale28.getDisplayVariant(locale42);
        java.lang.String str45 = locale0.getDisplayName(locale28);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "1,000%");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str24, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertEquals(locale28.toString(), "overflow trying to convert {0} to fraction ({1}/{2})_ANGLAIS");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "English (Canada)" + "'", str29, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese (China)" + "'", str30, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "overflow trying to convert {0} to fraction ({1}/{2})" + "'", str31, "overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Japan" + "'", str36, "Japan");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals(locale42.toString(), "anglais_KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Italian" + "'", str45, "Italian");
    }

    @Test
    public void test08239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08239");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        java.util.Set<java.lang.Character> charSet9 = locale7.getExtensionKeys();
        java.util.Locale.Builder builder10 = builder5.setLocale(locale7);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.lang.String str12 = locale11.getDisplayCountry();
        java.lang.String str13 = locale7.getDisplayCountry(locale11);
        java.lang.String str14 = locale4.getDisplayVariant(locale7);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        int int21 = numberFormat20.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20);
        boolean boolean23 = numberFormat20.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat24.getWholeFormat();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        numberFormat27.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25, numberFormat27);
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getInstance(locale32);
        boolean boolean34 = numberFormat33.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.text.NumberFormat numberFormat36 = properFractionFormat35.getWholeFormat();
        numberFormat36.setMinimumFractionDigits((int) (byte) 0);
        numberFormat36.setMinimumFractionDigits(60);
        numberFormat36.setMaximumFractionDigits((int) (byte) 1);
        java.math.RoundingMode roundingMode43 = numberFormat36.getRoundingMode();
        numberFormat25.setRoundingMode(roundingMode43);
        numberFormat20.setRoundingMode(roundingMode43);
        numberFormat15.setRoundingMode(roundingMode43);
        java.lang.StringBuffer stringBuffer48 = null;
        java.text.NumberFormat.Field field49 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition50 = new java.text.FieldPosition((java.text.Format.Field) field49);
        java.lang.String str51 = fieldPosition50.toString();
        java.util.Locale locale52 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.lang.String str54 = locale53.getDisplayScript();
        java.lang.String str55 = locale52.getDisplayName(locale53);
        boolean boolean56 = fieldPosition50.equals((java.lang.Object) locale53);
        java.text.NumberFormat.Field field57 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition58 = new java.text.FieldPosition((java.text.Format.Field) field57);
        java.text.FieldPosition fieldPosition60 = new java.text.FieldPosition((java.text.Format.Field) field57, (int) (byte) 10);
        boolean boolean61 = fieldPosition50.equals((java.lang.Object) field57);
        int int62 = fieldPosition50.getField();
        fieldPosition50.setEndIndex(0);
        java.text.Format.Field field65 = fieldPosition50.getFieldAttribute();
        java.lang.Object obj66 = null;
        boolean boolean67 = field65.equals(obj66);
        java.text.FieldPosition fieldPosition69 = new java.text.FieldPosition(field65, 1);
        java.text.FieldPosition fieldPosition70 = new java.text.FieldPosition(field65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer71 = numberFormat15.format((double) 'a', stringBuffer48, fieldPosition70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ub300\ub9cc" + "'", str12, "\ub300\ub9cc");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + roundingMode43 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode43.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(field49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str51, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Chinese (Taiwan)" + "'", str55, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(field57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(field65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test08240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08240");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.lang.String str12 = locale11.getISO3Country();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale11);
        java.util.Locale.setDefault(category0, locale11);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getNumberInstance(locale11);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale11);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18, numberFormat20);
        java.util.Locale locale22 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getInstance(locale24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25, numberFormat27);
        boolean boolean29 = numberFormat27.isGroupingUsed();
        boolean boolean30 = numberFormat27.isGroupingUsed();
        fractionFormat23.setNumeratorFormat(numberFormat27);
        java.lang.Object obj32 = numberFormat27.clone();
        java.lang.Object obj33 = numberFormat27.clone();
        boolean boolean34 = numberFormat27.isParseIntegerOnly();
        boolean boolean35 = numberFormat27.isGroupingUsed();
        java.lang.Object obj36 = null;
        boolean boolean37 = numberFormat27.equals(obj36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18, numberFormat27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16, numberFormat18);
        numberFormat16.setGroupingUsed(true);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test08241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08241");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale3.toLanguageTag();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getISO3Language();
        java.lang.String str9 = locale3.getDisplayScript(locale6);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale3.getDisplayCountry(locale10);
        java.util.Locale.Builder builder12 = builder0.setLocale(locale10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale10);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction16.multiply(fraction20);
        java.lang.String str22 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction16);
        java.lang.String str23 = numberFormat13.format((java.lang.Object) fraction16);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction16.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.abs();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction28.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction34.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction28.add(fraction34);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.negate();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction37.divide(fraction40);
        int int43 = fraction37.intValue();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction37.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction37.abs();
        int int46 = fraction37.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction16.subtract(fraction37);
        int int48 = fraction47.getDenominator();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str4, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Taiwan" + "'", str11, "Taiwan");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "20 / 7" + "'", str22, "20 / 7");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2,857" + "'", str23, "2,857");
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 60 + "'", int46 == 60);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 420 + "'", int48 == 420);
    }

    @Test
    public void test08242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08242");
        java.util.Locale locale2 = new java.util.Locale("100%", "zh-TW");
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder3.setScript("");
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.lang.String str9 = locale6.getDisplayLanguage(locale8);
        java.util.Locale.Builder builder10 = builder5.setLocale(locale6);
        java.lang.String str11 = locale2.getDisplayScript(locale6);
        java.lang.String str12 = locale2.getDisplayName();
        boolean boolean13 = locale2.hasExtensions();
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale.Builder builder17 = builder14.setVariant("");
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.getDefault(category19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale21);
        java.util.Locale.setDefault(category19, locale21);
        java.util.Locale locale24 = java.util.Locale.getDefault(category19);
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder26 = builder17.setLocale(locale24);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale24);
        java.lang.String str28 = locale2.getDisplayLanguage(locale24);
        boolean boolean29 = locale2.hasExtensions();
        java.util.Set<java.lang.Character> charSet30 = locale2.getExtensionKeys();
        java.util.Locale.setDefault(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "100%_ZH-TW");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinesisch" + "'", str9, "Chinesisch");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100% (ZH-TW)" + "'", str12, "100% (ZH-TW)");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.FORMAT + "'", category19.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "100%" + "'", str28, "100%");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charSet30);
    }

    @Test
    public void test08243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08243");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumFractionDigits((int) (short) -1);
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        java.util.Currency currency15 = numberFormat13.getCurrency();
        numberFormat10.setCurrency(currency15);
        java.util.Currency currency17 = numberFormat10.getCurrency();
        numberFormat2.setCurrency(currency17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        java.lang.String str25 = numberFormat20.format((long) 100);
        int int26 = numberFormat20.getMaximumFractionDigits();
        numberFormat20.setMinimumFractionDigits((int) (short) 0);
        int int29 = numberFormat20.getMaximumFractionDigits();
        java.math.RoundingMode roundingMode30 = numberFormat20.getRoundingMode();
        numberFormat20.setGroupingUsed(false);
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getCurrencyInstance(locale33);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction39 = properFractionFormat35.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition38);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale43);
        boolean boolean45 = numberFormat44.isGroupingUsed();
        properFractionFormat42.setWholeFormat(numberFormat44);
        java.text.NumberFormat numberFormat47 = properFractionFormat42.getWholeFormat();
        properFractionFormat35.setWholeFormat(numberFormat47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat20, numberFormat47);
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.util.Locale locale51 = locale50.stripExtensions();
        java.util.Locale locale53 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale53);
        java.lang.String str55 = locale53.getDisplayCountry();
        java.lang.String str56 = locale50.getDisplayName(locale53);
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.lang.String str58 = locale57.getDisplayScript();
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale59.getISO3Language();
        java.lang.String str61 = locale57.getDisplayScript(locale59);
        java.lang.String str62 = locale50.getDisplayLanguage(locale59);
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getNumberInstance(locale50);
        java.util.Currency currency64 = numberFormat63.getCurrency();
        properFractionFormat49.setWholeFormat(numberFormat63);
        java.text.NumberFormat numberFormat66 = properFractionFormat49.getDenominatorFormat();
        java.lang.Object obj67 = properFractionFormat49.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "10,000%" + "'", str25, "10,000%");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + roundingMode30 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode30.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNull(fraction39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "100%_ZH-TW");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "100%_ZH-TW");
        org.junit.Assert.assertEquals(locale53.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "100% (ZH-TW)" + "'", str56, "100% (ZH-TW)");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "kor" + "'", str60, "kor");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "100%" + "'", str62, "100%");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(currency64);
        org.junit.Assert.assertEquals(currency64.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(obj67);
    }

    @Test
    public void test08244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08244");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale3.toLanguageTag();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getISO3Language();
        java.lang.String str9 = locale3.getDisplayScript(locale6);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale3.getDisplayCountry(locale10);
        java.util.Locale.Builder builder12 = builder0.setLocale(locale10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale10);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction16.multiply(fraction20);
        java.lang.String str22 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction16);
        java.lang.String str23 = numberFormat13.format((java.lang.Object) fraction16);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction16.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.abs();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction28.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction34.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction28.add(fraction34);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.negate();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction37.divide(fraction40);
        int int43 = fraction37.intValue();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction37.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction37.abs();
        int int46 = fraction37.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction16.subtract(fraction37);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException51 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException55 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str56 = fractionConversionException55.getPattern();
        java.lang.Throwable[] throwableArray57 = fractionConversionException55.getSuppressed();
        fractionConversionException51.addSuppressed((java.lang.Throwable) fractionConversionException55);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException62 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException66 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str67 = fractionConversionException66.getPattern();
        java.lang.Throwable[] throwableArray68 = fractionConversionException66.getSuppressed();
        fractionConversionException62.addSuppressed((java.lang.Throwable) fractionConversionException66);
        fractionConversionException55.addSuppressed((java.lang.Throwable) fractionConversionException66);
        java.lang.String str71 = fractionConversionException66.getPattern();
        java.lang.Throwable[] throwableArray72 = fractionConversionException66.getSuppressed();
        boolean boolean73 = fraction37.equals((java.lang.Object) fractionConversionException66);
        java.lang.Throwable[] throwableArray74 = fractionConversionException66.getSuppressed();
        java.lang.String str75 = fractionConversionException66.getPattern();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Chinese" + "'", str4, "Chinese");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Taiwan" + "'", str11, "Taiwan");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "20 / 7" + "'", str22, "20 / 7");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2,857" + "'", str23, "2,857");
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 60 + "'", int46 == 60);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str56, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str67, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str71, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str75, "Overflow trying to convert {0} to fraction ({1}/{2})");
    }

    @Test
    public void test08245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08245");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str3 = locale0.getISO3Language();
        java.text.NumberFormat.Field field4 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field4);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        boolean boolean7 = field4.equals((java.lang.Object) locale6);
        java.lang.String str8 = locale6.getCountry();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str12 = locale9.getDisplayScript(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.lang.String str14 = locale6.getDisplayVariant(locale9);
        java.lang.String str15 = locale0.getDisplayCountry(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale17);
        java.util.Locale locale19 = locale17.stripExtensions();
        java.lang.String str20 = locale17.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.lang.String str22 = locale21.toLanguageTag();
        java.lang.String str23 = locale21.getDisplayLanguage();
        java.lang.String str24 = locale21.getISO3Country();
        java.lang.String str25 = locale17.getDisplayScript(locale21);
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale26);
        java.util.Locale locale28 = locale26.stripExtensions();
        java.util.Locale locale29 = locale26.stripExtensions();
        java.lang.String str30 = locale17.getDisplayVariant(locale29);
        java.util.Locale locale33 = new java.util.Locale("1,396,801 / 14,400", "java.text.FieldPosition[field=100,attribute=null,beginIndex=117,endIndex=0]");
        java.lang.String str34 = locale29.getDisplayLanguage(locale33);
        java.util.Locale.Category category35 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale36 = java.util.Locale.getDefault(category35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale37);
        java.util.Locale.setDefault(category35, locale37);
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.lang.String str42 = locale40.getDisplayScript(locale41);
        java.util.Locale.setDefault(category35, locale40);
        java.util.Locale locale47 = new java.util.Locale("Japanese (Japan)", "chinois", "-1 / 120");
        java.util.Locale.setDefault(category35, locale47);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale49.getISO3Language();
        java.lang.String str51 = locale49.getDisplayCountry();
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleAttributes();
        java.lang.String str54 = locale52.getISO3Language();
        java.lang.String str55 = locale49.getDisplayScript(locale52);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance(locale52);
        java.util.Locale.setDefault(category35, locale52);
        java.util.Locale locale60 = new java.util.Locale("0 / 1", "\u53f0\u6e7e");
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.lang.String str62 = locale61.getScript();
        java.util.Locale locale66 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str67 = locale61.getDisplayScript(locale66);
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale61);
        java.lang.String str69 = locale61.getCountry();
        java.util.Locale locale70 = java.util.Locale.ITALIAN;
        java.lang.String str71 = locale70.getDisplayCountry();
        java.util.Locale locale72 = java.util.Locale.CANADA;
        java.util.Locale locale73 = java.util.Locale.PRC;
        java.lang.String str74 = locale72.getDisplayName(locale73);
        java.lang.String str75 = locale70.getDisplayCountry(locale72);
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.lang.String str77 = locale76.getISO3Language();
        java.util.Set<java.lang.String> strSet78 = locale76.getUnicodeLocaleKeys();
        java.lang.String str79 = locale76.getDisplayLanguage();
        java.lang.String str80 = locale70.getDisplayScript(locale76);
        java.lang.String str81 = locale61.getDisplayScript(locale70);
        java.lang.String str82 = locale60.getDisplayName(locale61);
        java.util.Locale.setDefault(category35, locale60);
        java.text.NumberFormat numberFormat84 = java.text.NumberFormat.getCurrencyInstance(locale60);
        java.lang.String str85 = locale29.getDisplayScript(locale60);
        java.lang.String str86 = locale9.getDisplayLanguage(locale60);
        java.lang.String str87 = locale9.getScript();
        java.lang.String str88 = locale9.getScript();
        java.text.NumberFormat numberFormat89 = java.text.NumberFormat.getIntegerInstance(locale9);
        java.text.NumberFormat numberFormat90 = java.text.NumberFormat.getIntegerInstance(locale9);
        numberFormat90.setMaximumIntegerDigits(0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zho" + "'", str3, "zho");
        org.junit.Assert.assertNotNull(field4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CN" + "'", str8, "CN");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u53f0\u7063" + "'", str15, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Chinese (China)" + "'", str20, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh-TW" + "'", str22, "zh-TW");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Chinese" + "'", str23, "Chinese");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "TWN" + "'", str24, "TWN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals(locale33.toString(), "1,396,801 / 14,400_JAVA.TEXT.FIELDPOSITION[FIELD=100,ATTRIBUTE=NULL,BEGININDEX=117,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese" + "'", str34, "Chinese");
        org.junit.Assert.assertTrue("'" + category35 + "' != '" + java.util.Locale.Category.FORMAT + "'", category35.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "100%_ZH-TW");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "100%_ZH-TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals(locale47.toString(), "japanese (japan)_CHINOIS_-1 / 120");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "kor" + "'", str50, "kor");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "zho" + "'", str54, "zho");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(numberFormat56);
// flaky:         org.junit.Assert.assertEquals(locale60.toString(), "\u53f0\u6e7e");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals(locale66.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(fractionFormat68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str74, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "kor" + "'", str77, "kor");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Korean" + "'", str79, "Korean");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\u53f0\u6e7e)" + "'", str82, "\u53f0\u6e7e)");
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Chinese" + "'", str86, "Chinese");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(numberFormat89);
        org.junit.Assert.assertNotNull(numberFormat90);
    }

    @Test
    public void test08246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08246");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode6 = numberFormat4.getRoundingMode();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str10 = locale8.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale8);
        numberFormat11.setMinimumIntegerDigits(0);
        int int14 = numberFormat11.getMaximumFractionDigits();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        numberFormat16.setMaximumFractionDigits(100);
        java.lang.String str21 = numberFormat16.format((long) 100);
        int int22 = numberFormat16.getMaximumFractionDigits();
        numberFormat16.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = new org.apache.commons.math.fraction.FractionFormat(numberFormat26);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale32);
        boolean boolean34 = numberFormat33.isGroupingUsed();
        properFractionFormat31.setWholeFormat(numberFormat33);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16, numberFormat26, numberFormat33);
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.util.Locale locale38 = locale37.stripExtensions();
        java.util.Locale locale40 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale40);
        java.lang.String str42 = locale40.getDisplayCountry();
        java.lang.String str43 = locale37.getDisplayName(locale40);
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.lang.String str45 = locale44.getDisplayScript();
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale46.getISO3Language();
        java.lang.String str48 = locale44.getDisplayScript(locale46);
        java.lang.String str49 = locale37.getDisplayLanguage(locale46);
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getNumberInstance(locale37);
        java.util.Currency currency51 = numberFormat50.getCurrency();
        java.util.Locale locale55 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance(locale55);
        int int57 = numberFormat56.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = new org.apache.commons.math.fraction.FractionFormat(numberFormat56);
        numberFormat56.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode61 = numberFormat56.getRoundingMode();
        numberFormat50.setRoundingMode(roundingMode61);
        numberFormat16.setRoundingMode(roundingMode61);
        numberFormat11.setRoundingMode(roundingMode61);
        numberFormat4.setRoundingMode(roundingMode61);
        java.util.Locale locale66 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str67 = locale66.getDisplayLanguage();
        java.util.Locale.setDefault(locale66);
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getIntegerInstance(locale66);
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getInstance(locale66);
        java.lang.Object obj71 = numberFormat70.clone();
        java.lang.StringBuffer stringBuffer72 = null;
        java.text.FieldPosition fieldPosition74 = new java.text.FieldPosition((int) (byte) 0);
        int int75 = fieldPosition74.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer76 = numberFormat4.format(obj71, stringBuffer72, fieldPosition74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode6 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode6.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "10,000%" + "'", str21, "10,000%");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale38);
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinese (Taiwan)" + "'", str43, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "kor" + "'", str47, "kor");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str49, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(currency51);
// flaky:         org.junit.Assert.assertEquals(currency51.toString(), "TWD");
        org.junit.Assert.assertEquals(locale55.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode61 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode61.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u4e2d\u6587" + "'", str67, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test08247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08247");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        numberFormat5.setGroupingUsed(true);
        numberFormat5.setMaximumIntegerDigits((int) (short) 100);
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale14);
        java.util.Currency currency17 = numberFormat16.getCurrency();
        numberFormat16.setMinimumIntegerDigits(1);
        numberFormat16.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj25 = numberFormat16.parseObject("Japan", parsePosition24);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException29 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str30 = fractionConversionException29.getPattern();
        java.lang.Throwable[] throwableArray31 = fractionConversionException29.getSuppressed();
        java.lang.Object[] objArray32 = fractionConversionException29.getArguments();
        boolean boolean33 = parsePosition24.equals((java.lang.Object) objArray32);
        int int34 = parsePosition24.getIndex();
        int int35 = parsePosition24.getIndex();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        boolean boolean41 = numberFormat40.isGroupingUsed();
        properFractionFormat38.setWholeFormat(numberFormat40);
        java.text.NumberFormat numberFormat43 = properFractionFormat38.getWholeFormat();
        java.util.Currency currency44 = numberFormat43.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = new org.apache.commons.math.fraction.FractionFormat(numberFormat43);
        boolean boolean46 = parsePosition24.equals((java.lang.Object) numberFormat43);
        int int47 = numberFormat43.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat43);
        java.util.Currency currency49 = numberFormat5.getCurrency();
        numberFormat5.setGroupingUsed(false);
        java.lang.Object obj52 = numberFormat5.clone();
        numberFormat5.setMaximumIntegerDigits(88);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "TWD");
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str30, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj52);
    }

    @Test
    public void test08248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08248");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        boolean boolean4 = numberFormat3.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        boolean boolean6 = numberFormat3.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        numberFormat1.setParseIntegerOnly(false);
        numberFormat1.setParseIntegerOnly(true);
        java.lang.String str13 = numberFormat1.format((double) 0.016666668f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder15.setScript("");
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.util.Locale locale19 = locale18.stripExtensions();
        java.util.Locale locale20 = locale19.stripExtensions();
        java.util.Locale.Builder builder21 = builder15.setLocale(locale20);
        java.util.Locale.Builder builder22 = builder21.clearExtensions();
        java.util.Locale.Builder builder23 = builder21.clearExtensions();
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        java.lang.String str27 = locale26.getISO3Country();
        java.util.Locale.setDefault(category24, locale26);
        java.util.Locale locale29 = java.util.Locale.getDefault(category24);
        java.util.Locale.Builder builder30 = builder23.setLocale(locale29);
        boolean boolean31 = numberFormat1.equals((java.lang.Object) builder30);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test08249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08249");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category10, locale15);
        java.lang.String str17 = locale9.getDisplayLanguage(locale15);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale9);
        int int19 = numberFormat18.getMinimumIntegerDigits();
        properFractionFormat8.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat21 = properFractionFormat8.getDenominatorFormat();
        boolean boolean22 = numberFormat21.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.lang.Object obj24 = null;
        boolean boolean25 = numberFormat21.equals(obj24);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u4e2d\u6587" + "'", str1, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "anglais" + "'", str17, "anglais");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test08250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08250");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        boolean boolean4 = locale0.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test08251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08251");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale7 = new java.util.Locale("hi!", "org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (0/-1)");
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Locale locale11 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale8.getDisplayName(locale11);
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getISO3Language();
        java.lang.String str19 = locale15.getDisplayScript(locale17);
        java.lang.String str20 = locale8.getDisplayLanguage(locale17);
        java.util.Locale locale23 = new java.util.Locale("hi!", "org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (0/-1)");
        java.lang.String str24 = locale17.getDisplayVariant(locale23);
        java.lang.String str25 = locale7.getDisplayName(locale23);
        java.lang.String str26 = locale0.getDisplayLanguage(locale7);
        java.lang.String str27 = locale0.getScript();
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance(locale0);
        int int29 = numberFormat28.getMinimumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!_ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1)");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese (Taiwan)" + "'", str14, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str20, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals(locale23.toString(), "hi!_ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi! (ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1))" + "'", str25, "hi! (ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1))");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Japanese" + "'", str26, "Japanese");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test08252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08252");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        java.math.RoundingMode roundingMode12 = numberFormat4.getRoundingMode();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        boolean boolean19 = numberFormat17.isGroupingUsed();
        boolean boolean20 = numberFormat17.isGroupingUsed();
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj24 = numberFormat17.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition23);
        numberFormat17.setParseIntegerOnly(false);
        properFractionFormat13.setWholeFormat(numberFormat17);
        java.text.NumberFormat numberFormat28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properFractionFormat13.setWholeFormat(numberFormat28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: whole format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode12 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode12.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test08253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08253");
        java.util.Locale locale2 = new java.util.Locale("France", "CHINESE (TAIWAN)");
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str7 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction6);
        float float8 = fraction6.floatValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction6.negate();
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        int int15 = numberFormat14.getMaximumIntegerDigits();
        int int16 = numberFormat14.getMaximumFractionDigits();
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18, numberFormat20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat18);
        boolean boolean23 = fraction9.equals((java.lang.Object) fractionFormat22);
        java.text.NumberFormat numberFormat24 = fractionFormat22.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24);
        fractionFormat3.setNumeratorFormat(numberFormat24);
        numberFormat24.setMinimumIntegerDigits((int) (byte) 87);
        numberFormat24.setGroupingUsed(false);
        java.lang.String str32 = numberFormat24.format((double) (byte) 10);
        java.lang.Object obj33 = numberFormat24.clone();
        int int34 = numberFormat24.getMaximumFractionDigits();
        org.junit.Assert.assertEquals(locale2.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1 / 1" + "'", str7, "1 / 1");
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 1.0f + "'", float8 == 1.0f);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000%" + "'", str32, "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000%");
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test08254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08254");
        java.util.Locale locale2 = new java.util.Locale("anglais", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]");
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getCurrencyInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        boolean boolean6 = numberFormat5.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        numberFormat5.setMaximumFractionDigits((int) (byte) -120);
        boolean boolean10 = numberFormat3.equals((java.lang.Object) (byte) -120);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str14 = locale13.getDisplayLanguage();
        java.lang.String str15 = locale13.toLanguageTag();
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale16.getISO3Language();
        java.lang.String str19 = locale13.getDisplayScript(locale16);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale16);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale16);
        numberFormat21.setMinimumFractionDigits(119);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayScript();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale27.getISO3Language();
        java.lang.String str29 = locale25.getDisplayScript(locale27);
        java.lang.String str30 = locale25.toLanguageTag();
        java.util.Set<java.lang.String> strSet31 = locale25.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getCurrencyInstance(locale25);
        java.lang.Object obj33 = numberFormat32.clone();
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getInstance(locale35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = new org.apache.commons.math.fraction.FractionFormat(numberFormat36, numberFormat38);
        numberFormat38.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field43 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition44 = new java.text.FieldPosition((java.text.Format.Field) field43);
        java.lang.String str45 = fieldPosition44.toString();
        java.util.Locale locale46 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale47 = java.util.Locale.ROOT;
        java.lang.String str48 = locale47.getDisplayScript();
        java.lang.String str49 = locale46.getDisplayName(locale47);
        boolean boolean50 = fieldPosition44.equals((java.lang.Object) locale47);
        fieldPosition44.setEndIndex((int) '#');
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getCurrencyInstance(locale53);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.text.ParsePosition parsePosition58 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction59 = properFractionFormat55.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition58);
        boolean boolean60 = fieldPosition44.equals((java.lang.Object) parsePosition58);
        java.lang.Number number61 = numberFormat38.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition58);
        java.lang.Object obj62 = numberFormat32.parseObject("\ud55c\uad6d\uc5b4", parsePosition58);
        parsePosition58.setIndex(10);
        java.lang.Number number65 = numberFormat21.parse("HI!", parsePosition58);
        org.apache.commons.math.fraction.Fraction fraction66 = properFractionFormat11.parse("-4,400 / 1", parsePosition58);
        org.apache.commons.math.fraction.Fraction fraction68 = new org.apache.commons.math.fraction.Fraction((double) 10.0f);
        org.apache.commons.math.fraction.Fraction fraction69 = fraction68.abs();
        org.apache.commons.math.fraction.Fraction fraction72 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction73 = fraction72.negate();
        double double74 = fraction72.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction75 = fraction69.subtract(fraction72);
        org.apache.commons.math.fraction.Fraction fraction76 = fraction69.negate();
        org.apache.commons.math.fraction.Fraction fraction77 = fraction76.abs();
        java.lang.StringBuffer stringBuffer78 = null;
        java.text.Format.Field field79 = null;
        java.text.FieldPosition fieldPosition80 = new java.text.FieldPosition(field79);
        java.text.Format.Field field81 = fieldPosition80.getFieldAttribute();
        int int82 = fieldPosition80.getField();
        java.util.Locale locale83 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet84 = locale83.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat85 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale83);
        org.apache.commons.math.fraction.FractionFormat fractionFormat86 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale83);
        java.util.Locale locale88 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str89 = locale83.getDisplayScript(locale88);
        java.util.Set<java.lang.String> strSet90 = locale83.getUnicodeLocaleKeys();
        boolean boolean91 = fieldPosition80.equals((java.lang.Object) strSet90);
        java.lang.String str92 = fieldPosition80.toString();
        java.lang.String str93 = fieldPosition80.toString();
        fieldPosition80.setEndIndex((-59));
        java.lang.String str96 = fieldPosition80.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer97 = properFractionFormat11.format(fraction76, stringBuffer78, fieldPosition80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "anglais_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u4e2d\u6587" + "'", str14, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh-TW" + "'", str15, "zh-TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zho" + "'", str18, "zho");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "kor" + "'", str28, "kor");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "und" + "'", str30, "und");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(field43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str45, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinese (Taiwan)" + "'", str49, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNull(fraction59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(number61);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(number65);
        org.junit.Assert.assertNull(fraction66);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-0.008333333333333333d) + "'", double74 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNull(field81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNotNull(fractionFormat85);
        org.junit.Assert.assertNotNull(fractionFormat86);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]" + "'", str92, "java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]" + "'", str93, "java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=-59]" + "'", str96, "java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=-59]");
    }

    @Test
    public void test08255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08255");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.setRegion("");
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = locale9.getDisplayCountry();
        java.util.Locale.Builder builder11 = builder6.setLocale(locale9);
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        java.util.Locale locale14 = locale12.stripExtensions();
        java.lang.String str15 = locale12.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.lang.String str17 = locale16.toLanguageTag();
        java.lang.String str18 = locale16.getDisplayLanguage();
        java.lang.String str19 = locale16.getISO3Country();
        java.lang.String str20 = locale12.getDisplayScript(locale16);
        java.lang.String str21 = locale9.getDisplayScript(locale16);
        java.lang.String str22 = locale9.getDisplayVariant();
        java.lang.String str23 = locale9.getISO3Language();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str15, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh-TW" + "'", str17, "zh-TW");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u4e2d\u6587" + "'", str18, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "TWN" + "'", str19, "TWN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ita" + "'", str23, "ita");
    }

    @Test
    public void test08256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08256");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(numberFormat9);
    }

    @Test
    public void test08257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08257");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder11 = builder8.setVariant("");
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        boolean boolean13 = numberFormat1.equals((java.lang.Object) builder11);
        java.util.Locale.Builder builder15 = builder11.setRegion("");
        java.util.Locale.Builder builder16 = builder11.clearExtensions();
        java.lang.Class<?> wildcardClass17 = builder16.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test08258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08258");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat4 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat2.getWholeFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
    }

    @Test
    public void test08259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08259");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        java.text.NumberFormat numberFormat2 = fractionFormat0.getNumeratorFormat();
        java.text.NumberFormat numberFormat3 = fractionFormat0.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction5 = fractionFormat0.parse("java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
    }

    @Test
    public void test08260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08260");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category10, locale15);
        java.lang.String str17 = locale9.getDisplayLanguage(locale15);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale9);
        int int19 = numberFormat18.getMinimumIntegerDigits();
        properFractionFormat8.setWholeFormat(numberFormat18);
        int int21 = numberFormat18.getMinimumFractionDigits();
        java.text.NumberFormat.Field field23 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition24 = new java.text.FieldPosition((java.text.Format.Field) field23);
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale25);
        boolean boolean27 = field23.equals((java.lang.Object) locale25);
        java.util.Set<java.lang.String> strSet28 = locale25.getUnicodeLocaleAttributes();
        java.lang.String str29 = locale25.getISO3Country();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale25);
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) '4');
        parsePosition33.setErrorIndex(600);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        java.util.Locale locale39 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale39);
        java.lang.String str41 = locale39.getDisplayCountry();
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getIntegerInstance(locale39);
        java.lang.String str43 = locale36.getDisplayCountry(locale39);
        java.lang.String str44 = locale36.getISO3Language();
        java.lang.String str45 = locale36.getDisplayName();
        java.lang.String str47 = locale36.getExtension('x');
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.negate();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.abs();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction51.abs();
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getInstance(locale54);
        java.util.Locale locale56 = java.util.Locale.getDefault();
        boolean boolean57 = numberFormat55.equals((java.lang.Object) locale56);
        boolean boolean58 = fraction53.equals((java.lang.Object) locale56);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction53.abs();
        java.util.Locale locale60 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale60);
        boolean boolean62 = fraction59.equals((java.lang.Object) locale60);
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance(locale60);
        java.lang.String str64 = locale36.getDisplayScript(locale60);
        boolean boolean65 = parsePosition33.equals((java.lang.Object) str64);
        java.lang.Object obj66 = fractionFormat30.parseObject("60,000%", parsePosition33);
        java.util.Locale.Builder builder67 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder68 = builder67.clearExtensions();
        java.util.Locale.Builder builder69 = builder67.clear();
        java.util.Locale.Builder builder70 = builder69.clearExtensions();
        java.util.Locale.Builder builder71 = builder70.clear();
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.lang.String str73 = locale72.getISO3Language();
        java.util.Set<java.lang.String> strSet74 = locale72.getUnicodeLocaleKeys();
        java.lang.String str75 = locale72.getISO3Country();
        java.util.Locale.Builder builder76 = builder70.setLocale(locale72);
        java.util.Locale locale77 = java.util.Locale.TAIWAN;
        java.lang.String str78 = locale77.toLanguageTag();
        java.lang.String str79 = locale77.getISO3Country();
        java.lang.String str80 = locale72.getDisplayCountry(locale77);
        boolean boolean81 = parsePosition33.equals((java.lang.Object) str80);
        java.lang.Number number82 = numberFormat18.parse("java.text.ParsePosition[index=97,errorIndex=-1]", parsePosition33);
        numberFormat18.setMaximumFractionDigits((int) (byte) 60);
        int int85 = numberFormat18.getMaximumIntegerDigits();
        int int86 = numberFormat18.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "anglais" + "'", str17, "anglais");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(field23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "France" + "'", str43, "France");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fra" + "'", str44, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "French (France)" + "'", str45, "French (France)");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "kor" + "'", str73, "kor");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "zh-TW" + "'", str78, "zh-TW");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "TWN" + "'", str79, "TWN");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(number82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2147483647 + "'", int85 == 2147483647);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test08261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08261");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale0.getDisplayName(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale0);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getNumberInstance(locale0);
        numberFormat5.setMinimumFractionDigits(119);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "francese (Francia)" + "'", str3, "francese (Francia)");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
    }

    @Test
    public void test08262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08262");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("");
        java.lang.String str2 = locale1.getCountry();
        java.lang.String str3 = locale1.getDisplayScript();
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale1.getDisplayVariant();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.clear();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale11.getISO3Language();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.lang.String str14 = locale11.getISO3Country();
        java.util.Locale.Builder builder15 = builder9.setLocale(locale11);
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale locale17 = builder16.build();
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale1.getDisplayCountry(locale17);
        java.util.Set<java.lang.Character> charSet20 = locale17.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "kor" + "'", str12, "kor");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(fractionFormat21);
    }

    @Test
    public void test08263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08263");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        java.lang.String str7 = numberFormat1.format((double) 0.5f);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "50%" + "'", str7, "50%");
    }

    @Test
    public void test08264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08264");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.util.Locale locale11 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        int int13 = numberFormat12.getMaximumIntegerDigits();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        boolean boolean16 = numberFormat15.isGroupingUsed();
        java.util.Currency currency17 = numberFormat15.getCurrency();
        numberFormat12.setCurrency(currency17);
        java.util.Currency currency19 = numberFormat12.getCurrency();
        java.math.RoundingMode roundingMode20 = numberFormat12.getRoundingMode();
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) 'a');
        java.lang.String str24 = parsePosition23.toString();
        java.lang.String str25 = parsePosition23.toString();
        java.lang.Object obj26 = numberFormat12.parseObject("zho", parsePosition23);
        java.lang.Object obj27 = fractionFormat6.parseObject("java.text.NumberFormat$Field(currency)", parsePosition23);
        org.apache.commons.math.fraction.Fraction fraction29 = new org.apache.commons.math.fraction.Fraction((-1.0d));
        int int30 = fraction29.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        long long36 = fraction34.longValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction31.divide(fraction34);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.negate();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.abs();
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.negate();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.abs();
        long long48 = fraction46.longValue();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction42.multiply(fraction46);
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.negate();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.abs();
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.negate();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.abs();
        long long60 = fraction58.longValue();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction54.multiply(fraction58);
        org.apache.commons.math.fraction.Fraction fraction62 = fraction46.subtract(fraction61);
        org.apache.commons.math.fraction.Fraction fraction63 = fraction61.negate();
        org.apache.commons.math.fraction.Fraction fraction64 = fraction31.divide(fraction61);
        org.apache.commons.math.fraction.Fraction fraction65 = fraction29.add(fraction31);
        java.lang.String str66 = fractionFormat6.format((java.lang.Object) fraction29);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertEquals(locale11.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency19);
        org.junit.Assert.assertEquals(currency19.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode20 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode20.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str24, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str25, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "-100% / 100%" + "'", str66, "-100% / 100%");
    }

    @Test
    public void test08265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08265");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat7.parse("java.text.ParseException: zh_TW", parsePosition16);
        java.text.NumberFormat numberFormat22 = properFractionFormat7.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.abs();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction28.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction24.add(fraction30);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        int int34 = fraction32.intValue();
        int int35 = fraction32.getNumerator();
        java.lang.StringBuffer stringBuffer36 = null;
        java.text.FieldPosition fieldPosition37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer38 = properFractionFormat7.format(fraction32, stringBuffer36, fieldPosition37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(fraction21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 119 + "'", int35 == 119);
    }

    @Test
    public void test08266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08266");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        int int14 = numberFormat4.getMinimumFractionDigits();
        numberFormat4.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        int int20 = fraction18.intValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction18.reciprocal();
        java.text.AttributedCharacterIterator attributedCharacterIterator22 = properFractionFormat17.formatToCharacterIterator((java.lang.Object) fraction18);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction18.negate();
        java.lang.String str24 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction18);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(attributedCharacterIterator22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1 / 1" + "'", str24, "1 / 1");
    }

    @Test
    public void test08267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08267");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        int int9 = numberFormat8.getMinimumIntegerDigits();
        java.util.Locale locale11 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str13 = locale11.getDisplayCountry();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance(locale11);
        java.lang.String str15 = locale11.toLanguageTag();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale locale18 = builder16.build();
        java.lang.String str19 = locale18.getScript();
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.lang.String str22 = locale20.toLanguageTag();
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.lang.String str25 = locale23.getISO3Language();
        java.lang.String str26 = locale20.getDisplayScript(locale23);
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.lang.String str28 = locale20.getDisplayCountry(locale27);
        java.util.Locale locale30 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str31 = locale27.getDisplayLanguage(locale30);
        java.lang.String str32 = locale18.getDisplayCountry(locale30);
        java.lang.String str33 = locale11.getDisplayVariant(locale18);
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale35.getDisplayScript();
        java.lang.String str37 = locale34.getDisplayCountry(locale35);
        java.util.Set<java.lang.String> strSet38 = locale35.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getIntegerInstance(locale35);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getInstance(locale35);
        java.util.Set<java.lang.Character> charSet41 = locale35.getExtensionKeys();
        java.lang.String str42 = locale18.getDisplayVariant(locale35);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getNumberInstance(locale18);
        java.util.Locale locale44 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getInstance(locale44);
        java.util.Currency currency47 = numberFormat46.getCurrency();
        numberFormat46.setMinimumIntegerDigits(1);
        int int50 = numberFormat46.getMinimumIntegerDigits();
        java.util.Currency currency51 = numberFormat46.getCurrency();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8, numberFormat43, numberFormat46);
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.lang.String str54 = locale53.getScript();
        java.util.Locale locale58 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str59 = locale53.getDisplayScript(locale58);
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getNumberInstance(locale58);
        java.util.Set<java.lang.String> strSet61 = locale58.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet62 = locale58.getExtensionKeys();
        java.util.Locale locale63 = java.util.Locale.CANADA;
        java.util.Locale locale64 = java.util.Locale.PRC;
        java.lang.String str65 = locale63.getDisplayName(locale64);
        java.lang.String str66 = locale58.getDisplayName(locale63);
        java.util.Locale locale67 = locale63.stripExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale67);
        java.lang.String str69 = locale67.toLanguageTag();
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getIntegerInstance(locale67);
        properFractionFormat52.setWholeFormat(numberFormat70);
        java.text.NumberFormat numberFormat72 = properFractionFormat52.getDenominatorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "und" + "'", str15, "und");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Chinese" + "'", str21, "Chinese");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh-TW" + "'", str22, "zh-TW");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zho" + "'", str25, "zho");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Taiwan" + "'", str28, "Taiwan");
        org.junit.Assert.assertEquals(locale30.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Italian" + "'", str31, "Italian");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Japan" + "'", str37, "Japan");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(currency51);
        org.junit.Assert.assertEquals(currency51.toString(), "TWD");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals(locale58.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(charSet62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str65, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str66, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_CA");
        org.junit.Assert.assertNotNull(fractionFormat68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "en-CA" + "'", str69, "en-CA");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(numberFormat72);
    }

    @Test
    public void test08268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08268");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = numberFormat1.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        boolean boolean4 = numberFormat1.isGroupingUsed();
        java.lang.String str6 = numberFormat1.format((double) 10L);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getCurrencyInstance(locale7);
        boolean boolean11 = numberFormat10.isParseIntegerOnly();
        java.math.RoundingMode roundingMode12 = numberFormat10.getRoundingMode();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat10);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        numberFormat16.setMaximumFractionDigits(100);
        java.lang.String str21 = numberFormat16.format((long) 100);
        int int22 = numberFormat16.getMaximumFractionDigits();
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder23.clearExtensions();
        java.util.Locale.Builder builder26 = builder23.setVariant("");
        java.util.Locale.Builder builder27 = builder26.clearExtensions();
        boolean boolean28 = numberFormat16.equals((java.lang.Object) builder26);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale29.getISO3Language();
        java.util.Set<java.lang.String> strSet31 = locale29.getUnicodeLocaleKeys();
        java.lang.String str32 = locale29.getISO3Country();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getNumberInstance(locale29);
        java.util.Locale locale37 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale37);
        int int39 = numberFormat38.getMaximumIntegerDigits();
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        boolean boolean42 = numberFormat41.isGroupingUsed();
        java.util.Currency currency43 = numberFormat41.getCurrency();
        numberFormat38.setCurrency(currency43);
        java.util.Currency currency45 = numberFormat38.getCurrency();
        int int46 = numberFormat38.getMaximumFractionDigits();
        java.lang.Object obj47 = numberFormat38.clone();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        numberFormat49.setMaximumFractionDigits(100);
        numberFormat49.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str56 = numberFormat49.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33, numberFormat38, numberFormat49);
        int int58 = numberFormat38.getMaximumIntegerDigits();
        boolean boolean59 = numberFormat38.isGroupingUsed();
        java.util.Currency currency60 = numberFormat38.getCurrency();
        numberFormat16.setCurrency(currency60);
        numberFormat16.setMinimumFractionDigits(97);
        fractionFormat14.setNumeratorFormat(numberFormat16);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance(locale66);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        numberFormat67.setMaximumFractionDigits(100);
        java.lang.String str72 = numberFormat67.format((long) 100);
        properFractionFormat65.setWholeFormat(numberFormat67);
        org.apache.commons.math.fraction.FractionFormat fractionFormat74 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16, numberFormat67);
        java.lang.Object obj75 = numberFormat67.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1,000%" + "'", str6, "1,000%");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + roundingMode12 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode12.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "10,000%" + "'", str21, "10,000%");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "kor" + "'", str30, "kor");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals(locale37.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(currency43);
        org.junit.Assert.assertEquals(currency43.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency45);
        org.junit.Assert.assertEquals(currency45.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "100%" + "'", str56, "100%");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(currency60);
        org.junit.Assert.assertEquals(currency60.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "10,000%" + "'", str72, "10,000%");
        org.junit.Assert.assertNotNull(obj75);
    }

    @Test
    public void test08269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08269");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder8 = builder5.clear();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("9,700%");
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.util.Locale.Builder builder12 = builder8.setLocale(locale10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str18 = locale14.getISO3Language();
        boolean boolean19 = numberFormat13.equals((java.lang.Object) locale14);
        java.util.Locale.Builder builder20 = builder8.setLocale(locale14);
        java.util.Locale.Builder builder22 = builder20.addUnicodeLocaleAttribute("Korean");
        java.util.Locale.Builder builder24 = builder20.setRegion("FR");
        java.util.Locale.Builder builder25 = builder20.clearExtensions();
        java.util.Locale locale26 = builder20.build();
        java.util.Locale.Builder builder27 = builder20.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "_FR");
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test08270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08270");
        java.util.Locale locale2 = new java.util.Locale("java.text.parseexception: zh_tw", "60,000%");
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayCountry(locale4);
        java.util.Set<java.lang.String> strSet7 = locale4.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        boolean boolean9 = locale4.hasExtensions();
        java.util.Locale locale12 = new java.util.Locale("anglais", "kor");
        java.lang.String str13 = locale4.getDisplayLanguage(locale12);
        java.lang.String str14 = locale2.getDisplayName(locale4);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale2);
        java.lang.String str16 = locale2.getDisplayScript();
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.parseexception: zh_tw_60,000%");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Japan" + "'", str6, "Japan");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals(locale12.toString(), "anglais_KOR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.text.parseexception: zh_tw (60,000%)" + "'", str14, "java.text.parseexception: zh_tw (60,000%)");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test08271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08271");
        java.util.Locale locale2 = new java.util.Locale("java.text.FieldPosition[field=100,attribute=null,beginIndex=0,endIndex=0]", "US");
        java.lang.String str3 = locale2.getCountry();
        java.text.NumberFormat.Field field4 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition((java.text.Format.Field) field4, (int) '#');
        java.text.Format.Field field7 = fieldPosition6.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction13.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction19 = fraction10.add(fraction17);
        boolean boolean20 = field7.equals((java.lang.Object) fraction10);
        int int21 = fraction10.intValue();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.negate();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction25.add(fraction31);
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction34.divide(fraction37);
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.negate();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.abs();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction43.abs();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction34.subtract(fraction45);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction10.add(fraction45);
        org.apache.commons.math.fraction.Fraction fraction48 = fraction10.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.negate();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.abs();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction52.abs();
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.negate();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction52.add(fraction58);
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.negate();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction61.divide(fraction64);
        org.apache.commons.math.fraction.Fraction fraction69 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction70 = fraction69.negate();
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.abs();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction70.abs();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction61.subtract(fraction72);
        org.apache.commons.math.fraction.Fraction fraction74 = fraction61.reciprocal();
        float float75 = fraction61.floatValue();
        org.apache.commons.math.fraction.Fraction fraction78 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction79 = fraction78.negate();
        org.apache.commons.math.fraction.Fraction fraction80 = fraction79.abs();
        org.apache.commons.math.fraction.Fraction fraction83 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction84 = fraction83.negate();
        org.apache.commons.math.fraction.Fraction fraction85 = fraction84.abs();
        long long86 = fraction84.longValue();
        org.apache.commons.math.fraction.Fraction fraction87 = fraction80.multiply(fraction84);
        org.apache.commons.math.fraction.Fraction fraction90 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str91 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction90);
        long long92 = fraction90.longValue();
        org.apache.commons.math.fraction.Fraction fraction93 = fraction90.abs();
        org.apache.commons.math.fraction.Fraction fraction94 = fraction80.add(fraction90);
        org.apache.commons.math.fraction.Fraction fraction95 = fraction61.subtract(fraction80);
        org.apache.commons.math.fraction.Fraction fraction96 = fraction80.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction97 = fraction48.divide(fraction80);
        boolean boolean98 = locale2.equals((java.lang.Object) fraction48);
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.fieldposition[field=100,attribute=null,beginindex=0,endindex=0]_US");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "US" + "'", str3, "US");
        org.junit.Assert.assertNotNull(field4);
        org.junit.Assert.assertNotNull(field7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + 0.016666668f + "'", float75 == 0.016666668f);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(fraction87);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "-1 / 100" + "'", str91, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertNotNull(fraction93);
        org.junit.Assert.assertNotNull(fraction94);
        org.junit.Assert.assertNotNull(fraction95);
        org.junit.Assert.assertNotNull(fraction96);
        org.junit.Assert.assertNotNull(fraction97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test08272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08272");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale3.toLanguageTag();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getISO3Language();
        java.lang.String str9 = locale3.getDisplayScript(locale6);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale3.getDisplayCountry(locale10);
        java.util.Locale.Builder builder12 = builder0.setLocale(locale10);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale13.toLanguageTag();
        java.lang.String str19 = locale13.getDisplayVariant();
        java.lang.String str20 = locale13.getVariant();
        java.util.Locale.Builder builder21 = builder12.setLocale(locale13);
        java.util.Locale locale22 = locale13.stripExtensions();
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getInstance(locale23);
        java.util.Locale locale26 = locale23.stripExtensions();
        java.lang.String str27 = locale22.getDisplayName(locale26);
        java.lang.String str28 = locale26.getISO3Country();
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Chinese" + "'", str4, "Chinese");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Taiwan" + "'", str11, "Taiwan");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "TWN" + "'", str28, "TWN");
        org.junit.Assert.assertNotNull(fractionFormat29);
    }

    @Test
    public void test08273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08273");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 1000L);
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction(10000.0d);
        org.apache.commons.math.fraction.Fraction fraction4 = fraction1.multiply(fraction3);
        java.lang.String str5 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction4);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "10,000,000 / 1" + "'", str5, "10,000,000 / 1");
    }

    @Test
    public void test08274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08274");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        boolean boolean5 = numberFormat3.isGroupingUsed();
        boolean boolean6 = numberFormat3.isGroupingUsed();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj10 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat13 = properFractionFormat12.getDenominatorFormat();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        boolean boolean20 = numberFormat19.isGroupingUsed();
        properFractionFormat17.setWholeFormat(numberFormat19);
        java.text.NumberFormat numberFormat22 = properFractionFormat17.getWholeFormat();
        java.lang.String str24 = numberFormat22.format((double) 1.0f);
        numberFormat22.setMaximumIntegerDigits((int) (byte) 100);
        numberFormat22.setParseIntegerOnly(false);
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale32 = java.util.Locale.getDefault(category31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale33);
        java.util.Locale.setDefault(category31, locale33);
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category31, locale36);
        java.lang.String str38 = locale30.getDisplayLanguage(locale36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getCurrencyInstance(locale41);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.text.ParsePosition parsePosition46 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction47 = properFractionFormat43.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition46);
        java.lang.Object obj48 = fractionFormat39.parseObject("214,748,364,700%", parsePosition46);
        java.lang.String str49 = parsePosition46.toString();
        java.lang.Object obj50 = numberFormat22.parseObject("600", parsePosition46);
        org.apache.commons.math.fraction.Fraction fraction51 = properFractionFormat12.parse("\uc911\uad6d\uc5b4", parsePosition46);
        java.lang.Object obj52 = numberFormat3.parseObject("10,000%", parsePosition46);
        int int53 = parsePosition46.getIndex();
        int int54 = parsePosition46.getErrorIndex();
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayScript();
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.lang.String str58 = locale57.getISO3Language();
        java.lang.String str59 = locale55.getDisplayScript(locale57);
        java.lang.String str60 = locale57.getScript();
        java.util.Locale.setDefault(locale57);
        boolean boolean62 = parsePosition46.equals((java.lang.Object) locale57);
        java.lang.String str63 = locale57.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100%" + "'", str24, "100%");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "anglais" + "'", str38, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNull(fraction47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=3]" + "'", str49, "java.text.ParsePosition[index=1,errorIndex=3]");
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(fraction51);
        org.junit.Assert.assertEquals("'" + obj52 + "' != '" + 0L + "'", obj52, 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 7 + "'", int53 == 7);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "kor" + "'", str58, "kor");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str63, "\ud55c\uad6d\uc5b4");
    }

    @Test
    public void test08275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08275");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getCurrencyInstance(locale9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.util.Currency currency12 = numberFormat10.getCurrency();
        properFractionFormat8.setNumeratorFormat(numberFormat10);
        java.util.Locale locale17 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        int int19 = numberFormat18.getMaximumIntegerDigits();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        boolean boolean22 = numberFormat21.isGroupingUsed();
        java.util.Currency currency23 = numberFormat21.getCurrency();
        numberFormat18.setCurrency(currency23);
        java.util.Currency currency25 = numberFormat18.getCurrency();
        int int26 = numberFormat18.getMaximumFractionDigits();
        java.lang.Object obj27 = numberFormat18.clone();
        numberFormat18.setMinimumFractionDigits((int) (short) 1);
        boolean boolean30 = numberFormat18.isGroupingUsed();
        boolean boolean31 = numberFormat18.isParseIntegerOnly();
        boolean boolean32 = numberFormat18.isParseIntegerOnly();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        boolean boolean35 = numberFormat34.isGroupingUsed();
        numberFormat34.setGroupingUsed(true);
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        boolean boolean46 = numberFormat45.isGroupingUsed();
        java.util.Currency currency47 = numberFormat45.getCurrency();
        numberFormat42.setCurrency(currency47);
        java.util.Currency currency49 = numberFormat42.getCurrency();
        java.math.RoundingMode roundingMode50 = numberFormat42.getRoundingMode();
        numberFormat34.setRoundingMode(roundingMode50);
        java.util.Locale locale55 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance(locale55);
        int int57 = numberFormat56.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode58 = numberFormat56.getRoundingMode();
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = new org.apache.commons.math.fraction.FractionFormat(numberFormat56);
        numberFormat56.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat34, numberFormat56);
        java.util.Locale locale66 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance(locale66);
        numberFormat67.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str71 = numberFormat67.format((double) 0.0f);
        int int72 = numberFormat67.getMaximumIntegerDigits();
        java.util.Locale locale73 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet74 = locale73.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getInstance(locale73);
        java.util.Currency currency76 = numberFormat75.getCurrency();
        numberFormat75.setMinimumIntegerDigits(1);
        java.text.NumberFormat numberFormat79 = null;
        java.util.Locale locale83 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat84 = java.text.NumberFormat.getPercentInstance(locale83);
        numberFormat84.setMinimumIntegerDigits((int) (short) -1);
        boolean boolean87 = numberFormat84.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat88 = new org.apache.commons.math.fraction.FractionFormat(numberFormat79, numberFormat84);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat89 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67, numberFormat75, numberFormat79);
        java.text.NumberFormat numberFormat90 = properFractionFormat89.getWholeFormat();
        boolean boolean91 = numberFormat90.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat92 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat34, numberFormat90);
        numberFormat34.setGroupingUsed(true);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str1, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "XXX");
        org.junit.Assert.assertEquals(locale17.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode50 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode50.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals(locale55.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode58 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode58.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals(locale66.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0%" + "'", str71, "0%");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(currency76);
        org.junit.Assert.assertEquals(currency76.toString(), "TWD");
        org.junit.Assert.assertEquals(locale83.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(numberFormat90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test08276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08276");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.util.Set<java.lang.String> strSet7 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale8 = locale0.stripExtensions();
        java.lang.String str9 = locale8.getDisplayScript();
        org.apache.commons.math.fraction.Fraction fraction12 = new org.apache.commons.math.fraction.Fraction((int) (short) -16165, (-14399));
        double double13 = fraction12.doubleValue();
        boolean boolean14 = locale8.equals((java.lang.Object) fraction12);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.122647406069866d + "'", double13 == 1.122647406069866d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08277");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale locale17 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.lang.String str20 = locale14.getDisplayName(locale17);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale14.getDisplayLanguage(locale23);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale14);
        fractionFormat10.setNumeratorFormat(numberFormat27);
        properFractionFormat7.setWholeFormat(numberFormat27);
        fractionFormat4.setNumeratorFormat(numberFormat27);
        java.text.NumberFormat numberFormat31 = fractionFormat4.getNumeratorFormat();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean36 = numberFormat34.equals((java.lang.Object) numberFormat35);
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        boolean boolean46 = numberFormat45.isGroupingUsed();
        java.util.Currency currency47 = numberFormat45.getCurrency();
        numberFormat42.setCurrency(currency47);
        java.util.Currency currency49 = numberFormat42.getCurrency();
        java.math.RoundingMode roundingMode50 = numberFormat42.getRoundingMode();
        java.text.ParsePosition parsePosition53 = new java.text.ParsePosition((int) 'a');
        java.lang.String str54 = parsePosition53.toString();
        java.lang.String str55 = parsePosition53.toString();
        java.lang.Object obj56 = numberFormat42.parseObject("zho", parsePosition53);
        java.lang.String str57 = parsePosition53.toString();
        java.lang.Number number58 = numberFormat35.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition53);
        int int59 = parsePosition53.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction60 = fractionFormat4.parse("ZH_TW", parsePosition53);
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getInstance();
        numberFormat61.setParseIntegerOnly(true);
        java.math.RoundingMode roundingMode64 = numberFormat61.getRoundingMode();
        boolean boolean65 = numberFormat61.isGroupingUsed();
        java.lang.Object obj66 = numberFormat61.clone();
        fractionFormat4.setDenominatorFormat(numberFormat61);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Korean" + "'", str20, "Korean");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str26, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode50 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode50.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str54, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str55, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str57, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 97 + "'", int59 == 97);
        org.junit.Assert.assertNull(fraction60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertTrue("'" + roundingMode64 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode64.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(obj66);
    }

    @Test
    public void test08278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08278");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        boolean boolean6 = numberFormat4.equals((java.lang.Object) strArray5);
        java.util.Locale locale10 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        int int12 = numberFormat11.getMaximumIntegerDigits();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        boolean boolean15 = numberFormat14.isGroupingUsed();
        java.util.Currency currency16 = numberFormat14.getCurrency();
        numberFormat11.setCurrency(currency16);
        java.util.Currency currency18 = numberFormat11.getCurrency();
        java.math.RoundingMode roundingMode19 = numberFormat11.getRoundingMode();
        numberFormat4.setRoundingMode(roundingMode19);
        boolean boolean21 = numberFormat4.isParseIntegerOnly();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale22.getISO3Language();
        java.util.Set<java.lang.Character> charSet24 = locale22.getExtensionKeys();
        java.util.Locale locale25 = java.util.Locale.US;
        java.lang.String str26 = locale25.getDisplayScript();
        java.lang.String str27 = locale22.getDisplayVariant(locale25);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getCurrencyInstance(locale22);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getInstance(locale31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = new org.apache.commons.math.fraction.FractionFormat(numberFormat32, numberFormat34);
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj39 = numberFormat34.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition38);
        java.lang.String str40 = parsePosition38.toString();
        boolean boolean42 = parsePosition38.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction43 = properFractionFormat29.parse("java.text.ParseException: zh_TW", parsePosition38);
        java.text.NumberFormat numberFormat44 = properFractionFormat29.getWholeFormat();
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        numberFormat45.setMaximumIntegerDigits(2147483647);
        int int48 = numberFormat45.getMaximumIntegerDigits();
        java.text.NumberFormat.Field field49 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition50 = new java.text.FieldPosition((java.text.Format.Field) field49);
        int int51 = fieldPosition50.getBeginIndex();
        boolean boolean52 = numberFormat45.equals((java.lang.Object) int51);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat44, numberFormat45);
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getIntegerInstance(locale54);
        java.lang.String str57 = numberFormat55.format(0.0d);
        properFractionFormat53.setNumeratorFormat(numberFormat55);
        java.text.NumberFormat numberFormat59 = properFractionFormat53.getWholeFormat();
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getPercentInstance(locale60);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance(locale63);
        boolean boolean65 = numberFormat64.isGroupingUsed();
        properFractionFormat62.setWholeFormat(numberFormat64);
        java.text.NumberFormat numberFormat67 = properFractionFormat62.getWholeFormat();
        java.util.Currency currency68 = numberFormat67.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat69 = new org.apache.commons.math.fraction.FractionFormat(numberFormat67);
        java.text.NumberFormat numberFormat70 = fractionFormat69.getDenominatorFormat();
        properFractionFormat53.setNumeratorFormat(numberFormat70);
        java.text.NumberFormat numberFormat72 = properFractionFormat53.getDenominatorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number74 = numberFormat72.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 10 to fraction (117/120)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 10 to fraction (117/120)\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode19 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode19.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "kor" + "'", str23, "kor");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str40, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertNotNull(field49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0" + "'", str57, "0");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(currency68);
        org.junit.Assert.assertEquals(currency68.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(numberFormat72);
    }

    @Test
    public void test08279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08279");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        numberFormat1.setMaximumFractionDigits((int) (byte) 100);
        numberFormat1.setMaximumFractionDigits((int) (byte) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        numberFormat14.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str18 = numberFormat14.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14);
        java.text.NumberFormat numberFormat20 = fractionFormat19.getNumeratorFormat();
        properFractionFormat9.setDenominatorFormat(numberFormat20);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale23.getISO3Country();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale23);
        java.util.Locale locale31 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        int int33 = numberFormat32.getMaximumIntegerDigits();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        boolean boolean36 = numberFormat35.isGroupingUsed();
        java.util.Currency currency37 = numberFormat35.getCurrency();
        numberFormat32.setCurrency(currency37);
        java.util.Currency currency39 = numberFormat32.getCurrency();
        int int40 = numberFormat32.getMaximumFractionDigits();
        java.lang.Object obj41 = numberFormat32.clone();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        numberFormat43.setMaximumFractionDigits(100);
        numberFormat43.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str50 = numberFormat43.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27, numberFormat32, numberFormat43);
        java.util.Locale locale53 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale53);
        java.lang.String str56 = fractionFormat54.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat57 = fractionFormat54.getNumeratorFormat();
        java.text.NumberFormat numberFormat58 = fractionFormat54.getNumeratorFormat();
        java.text.NumberFormat numberFormat59 = fractionFormat54.getNumeratorFormat();
        java.lang.String str61 = numberFormat59.format((long) 2147483647);
        properFractionFormat51.setDenominatorFormat(numberFormat59);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getPercentInstance(locale64);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65);
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getPercentInstance(locale67);
        boolean boolean69 = numberFormat68.isGroupingUsed();
        properFractionFormat66.setWholeFormat(numberFormat68);
        java.text.NumberFormat numberFormat71 = properFractionFormat66.getWholeFormat();
        java.text.ParsePosition parsePosition74 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number75 = numberFormat71.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition74);
        parsePosition74.setErrorIndex(0);
        parsePosition74.setErrorIndex(1728000);
        java.lang.Object obj80 = properFractionFormat51.parseObject("\u97d3\u6587", parsePosition74);
        parsePosition74.setIndex((int) (byte) 119);
        java.lang.Object obj83 = properFractionFormat9.parseObject("chinese (java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0]) (Canada)", parsePosition74);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0%" + "'", str18, "0%");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals(locale31.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(currency37);
        org.junit.Assert.assertEquals(currency37.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "100%" + "'", str50, "100%");
        org.junit.Assert.assertEquals(locale53.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "100 0 / 1" + "'", str56, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2,147,483,647" + "'", str61, "2,147,483,647");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNull(number75);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertNull(obj83);
    }

    @Test
    public void test08280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08280");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale1);
        numberFormat4.setGroupingUsed(true);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        boolean boolean9 = numberFormat8.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12, numberFormat14);
        java.text.ParsePosition parsePosition18 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj19 = numberFormat14.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition18);
        properFractionFormat10.setNumeratorFormat(numberFormat14);
        java.lang.Object obj21 = numberFormat14.clone();
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale22);
        java.util.Currency currency25 = numberFormat24.getCurrency();
        numberFormat24.setMinimumIntegerDigits(1);
        java.util.Currency currency28 = numberFormat24.getCurrency();
        numberFormat14.setCurrency(currency28);
        numberFormat4.setCurrency(currency28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str38 = locale37.getDisplayLanguage();
        java.lang.String str39 = locale37.toLanguageTag();
        java.util.Locale locale40 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        java.lang.String str42 = locale40.getISO3Language();
        java.lang.String str43 = locale37.getDisplayScript(locale40);
        java.util.Locale locale44 = java.util.Locale.ITALIAN;
        java.lang.String str45 = locale37.getDisplayCountry(locale44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale37);
        java.text.NumberFormat numberFormat47 = fractionFormat46.getDenominatorFormat();
        java.math.RoundingMode roundingMode48 = numberFormat47.getRoundingMode();
        numberFormat36.setRoundingMode(roundingMode48);
        fractionFormat31.setDenominatorFormat(numberFormat36);
        numberFormat36.setMinimumFractionDigits(0);
        java.util.Locale.Category category53 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale54.getISO3Language();
        java.util.Locale.setDefault(category53, locale54);
        java.util.Locale locale57 = java.util.Locale.getDefault(category53);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = locale58.getISO3Language();
        java.util.Locale.setDefault(locale58);
        java.util.Locale locale61 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleAttributes();
        java.lang.String str63 = locale58.getDisplayName(locale61);
        java.util.Locale.setDefault(category53, locale58);
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("chinois");
        java.util.Locale.setDefault(category53, locale66);
        java.lang.String str68 = locale66.getDisplayScript();
        java.lang.String str69 = locale66.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = numberFormat36.format((java.lang.Object) locale66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "TWD");
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "TWD");
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str38, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "zh-TW" + "'", str39, "zh-TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zho" + "'", str42, "zho");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Taiwan" + "'", str45, "Taiwan");
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + roundingMode48 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode48.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + category53 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category53.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "kor" + "'", str55, "kor");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "kor" + "'", str59, "kor");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "cor\351en" + "'", str63, "cor\351en");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "chinois");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
    }

    @Test
    public void test08281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08281");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        numberFormat1.setMaximumFractionDigits((int) (byte) 100);
        java.util.Locale locale8 = new java.util.Locale("3,500.0000000000000000000000000000000000000000000000000000%");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.text.NumberFormat.Field field10 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field10);
        int int12 = fieldPosition11.getField();
        java.text.Format.Field field13 = fieldPosition11.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.ZERO;
        boolean boolean15 = field13.equals((java.lang.Object) fraction14);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        numberFormat16.setMaximumIntegerDigits(2147483647);
        int int19 = numberFormat16.getMaximumIntegerDigits();
        numberFormat16.setMaximumIntegerDigits((int) (short) 32);
        boolean boolean22 = fraction14.equals((java.lang.Object) numberFormat16);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getCurrencyInstance(locale23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        java.text.ParsePosition parsePosition28 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction29 = properFractionFormat25.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        boolean boolean35 = numberFormat34.isGroupingUsed();
        properFractionFormat32.setWholeFormat(numberFormat34);
        java.text.NumberFormat numberFormat37 = properFractionFormat32.getWholeFormat();
        properFractionFormat25.setWholeFormat(numberFormat37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        boolean boolean44 = numberFormat43.isGroupingUsed();
        properFractionFormat41.setWholeFormat(numberFormat43);
        java.text.NumberFormat numberFormat46 = properFractionFormat41.getWholeFormat();
        java.util.Currency currency47 = numberFormat46.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = new org.apache.commons.math.fraction.FractionFormat(numberFormat46);
        java.lang.Object obj49 = numberFormat46.clone();
        boolean boolean50 = numberFormat46.isParseIntegerOnly();
        properFractionFormat25.setWholeFormat(numberFormat46);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance(locale52);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        numberFormat53.setMaximumFractionDigits(100);
        java.lang.String str58 = numberFormat53.format((long) 100);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16, numberFormat46, numberFormat53);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat9, numberFormat46);
        java.lang.String str62 = numberFormat1.format((double) (short) 10);
        java.math.RoundingMode roundingMode63 = numberFormat1.getRoundingMode();
        numberFormat1.setMaximumFractionDigits(6);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals(locale8.toString(), "3,500.0000000000000000000000000000000000000000000000000000%");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(field13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNull(fraction29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "10,000%" + "'", str58, "10,000%");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1,000%" + "'", str62, "1,000%");
        org.junit.Assert.assertTrue("'" + roundingMode63 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode63.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test08282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08282");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction4.abs();
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        long long23 = fraction21.longValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction17.multiply(fraction21);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction4.multiply(fraction24);
        org.apache.commons.math.fraction.Fraction fraction29 = new org.apache.commons.math.fraction.Fraction((double) (-1.0f), (double) 10, (int) (byte) -1);
        int int30 = fraction29.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction25.subtract(fraction29);
        int int32 = fraction25.intValue();
        int int33 = fraction25.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction37 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction37.divide(fraction41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale43);
        boolean boolean45 = numberFormat44.isGroupingUsed();
        java.util.Currency currency46 = numberFormat44.getCurrency();
        int int47 = numberFormat44.getMinimumFractionDigits();
        int int48 = numberFormat44.getMinimumIntegerDigits();
        java.lang.Object obj49 = numberFormat44.clone();
        java.text.NumberFormat numberFormat50 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = new org.apache.commons.math.fraction.FractionFormat(numberFormat44, numberFormat50);
        boolean boolean52 = fraction41.equals((java.lang.Object) numberFormat44);
        org.apache.commons.math.fraction.Fraction fraction53 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str54 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction53);
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.negate();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.abs();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction64.abs();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction58.add(fraction64);
        org.apache.commons.math.fraction.Fraction fraction68 = fraction53.multiply(fraction64);
        float float69 = fraction64.floatValue();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction41.subtract(fraction64);
        org.apache.commons.math.fraction.Fraction fraction71 = fraction25.subtract(fraction64);
        org.apache.commons.math.fraction.Fraction fraction74 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction77 = org.apache.commons.math.fraction.Fraction.getReducedFraction(35, 2);
        org.apache.commons.math.fraction.Fraction fraction78 = fraction74.multiply(fraction77);
        int int79 = fraction77.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction80 = fraction71.add(fraction77);
        int int81 = fraction77.getDenominator();
        java.util.Locale.Builder builder82 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder83 = builder82.clearExtensions();
        java.util.Locale.Builder builder85 = builder82.setVariant("");
        java.util.Locale.Builder builder87 = builder82.setScript("");
        java.util.Locale.Builder builder88 = builder82.clearExtensions();
        java.util.Locale.Builder builder90 = builder88.setRegion("");
        java.util.Locale locale91 = java.util.Locale.ITALIAN;
        java.lang.String str92 = locale91.getDisplayCountry();
        java.util.Locale.Builder builder93 = builder88.setLocale(locale91);
        // The following exception was thrown during execution in test generation
        try {
            int int94 = fraction77.compareTo((java.lang.Object) locale91);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Locale cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1728000 + "'", int33 == 1728000);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1 / 1" + "'", str54, "1 / 1");
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + 0.008333334f + "'", float69 == 0.008333334f);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "it");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test08283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08283");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleKeys();
        java.lang.String str10 = locale7.getISO3Country();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale7);
        java.util.Locale locale15 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        int int17 = numberFormat16.getMaximumIntegerDigits();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        boolean boolean20 = numberFormat19.isGroupingUsed();
        java.util.Currency currency21 = numberFormat19.getCurrency();
        numberFormat16.setCurrency(currency21);
        java.util.Currency currency23 = numberFormat16.getCurrency();
        int int24 = numberFormat16.getMaximumFractionDigits();
        java.lang.Object obj25 = numberFormat16.clone();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        numberFormat27.setMaximumFractionDigits(100);
        numberFormat27.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str34 = numberFormat27.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11, numberFormat16, numberFormat27);
        java.text.NumberFormat.Field field37 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition38 = new java.text.FieldPosition((java.text.Format.Field) field37);
        java.lang.String str39 = fieldPosition38.toString();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale41.getDisplayScript();
        java.lang.String str43 = locale40.getDisplayName(locale41);
        boolean boolean44 = fieldPosition38.equals((java.lang.Object) locale41);
        fieldPosition38.setEndIndex((int) '#');
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getCurrencyInstance(locale47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.text.ParsePosition parsePosition52 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction53 = properFractionFormat49.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition52);
        boolean boolean54 = fieldPosition38.equals((java.lang.Object) parsePosition52);
        int int55 = parsePosition52.getIndex();
        org.apache.commons.math.fraction.Fraction fraction56 = properFractionFormat35.parse("hi!", parsePosition52);
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getInstance(locale57);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = new org.apache.commons.math.fraction.FractionFormat(numberFormat58, numberFormat60);
        boolean boolean62 = numberFormat60.isGroupingUsed();
        boolean boolean63 = numberFormat60.isGroupingUsed();
        java.text.ParsePosition parsePosition66 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj67 = numberFormat60.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition66);
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = new org.apache.commons.math.fraction.FractionFormat(numberFormat60);
        java.text.NumberFormat numberFormat69 = fractionFormat68.getNumeratorFormat();
        properFractionFormat35.setWholeFormat(numberFormat69);
        properFractionFormat2.setNumeratorFormat(numberFormat69);
        java.text.NumberFormat numberFormat72 = properFractionFormat2.getDenominatorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100%" + "'", str34, "100%");
        org.junit.Assert.assertNotNull(field37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str39, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinese (Taiwan)" + "'", str43, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNull(fraction53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNull(fraction56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(numberFormat72);
    }

    @Test
    public void test08284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08284");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str3 = locale0.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.util.Locale locale7 = locale5.stripExtensions();
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale7.getDisplayVariant();
        java.lang.String str10 = locale7.getDisplayVariant();
        java.lang.String str11 = locale0.getDisplayName(locale7);
        java.lang.String str12 = locale0.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zho" + "'", str3, "zho");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str11, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test08285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08285");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getCurrencyInstance(locale9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.util.Currency currency12 = numberFormat10.getCurrency();
        properFractionFormat8.setNumeratorFormat(numberFormat10);
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getInstance(locale15);
        java.util.Currency currency18 = numberFormat17.getCurrency();
        boolean boolean19 = numberFormat17.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition(2);
        java.lang.Object obj24 = properFractionFormat20.parseObject("java.text.ParsePosition[index=97,errorIndex=97]", parsePosition23);
        java.lang.Object obj25 = properFractionFormat8.parseObject("\uc911\uad6d\uc5b4\uc911\uad6d)", parsePosition23);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test08286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08286");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (byte) 10);
        fieldPosition3.setBeginIndex(10);
        int int6 = fieldPosition3.getBeginIndex();
        java.text.Format.Field field7 = fieldPosition3.getFieldAttribute();
        java.util.Locale locale11 = new java.util.Locale("\uc911\uad6d\uc5b4", "", "Taiwan");
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getNumberInstance(locale11);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj22 = numberFormat17.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition21);
        java.lang.String str23 = parsePosition21.toString();
        boolean boolean25 = parsePosition21.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        java.lang.Object obj26 = numberFormat12.parseObject("\u6cd5\u6587\u6cd5\u570b)", parsePosition21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        boolean boolean28 = field7.equals((java.lang.Object) properFractionFormat27);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(field7);
        org.junit.Assert.assertEquals(locale11.toString(), "\uc911\uad6d\uc5b4__Taiwan");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str23, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test08287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08287");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getEndIndex();
        fieldPosition1.setBeginIndex((int) (byte) 100);
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str9 = fractionFormat7.format((java.lang.Object) 100);
        boolean boolean10 = fieldPosition1.equals((java.lang.Object) fractionFormat7);
        int int11 = fieldPosition1.getBeginIndex();
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale12);
        boolean boolean14 = numberFormat13.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.text.ParsePosition parsePosition18 = new java.text.ParsePosition((int) '4');
        org.apache.commons.math.fraction.Fraction fraction19 = properFractionFormat15.parse("0%", parsePosition18);
        boolean boolean20 = fieldPosition1.equals((java.lang.Object) fraction19);
        java.text.Format.Field field21 = fieldPosition1.getFieldAttribute();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale22);
        java.lang.String str24 = locale22.getISO3Language();
        java.util.Locale.Category category25 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale26 = java.util.Locale.getDefault(category25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale27);
        java.util.Locale.setDefault(category25, locale27);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        java.util.Locale locale33 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.lang.String str35 = locale33.getDisplayCountry();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getIntegerInstance(locale33);
        java.lang.String str37 = locale30.getDisplayCountry(locale33);
        java.lang.String str38 = locale30.getISO3Language();
        java.lang.String str39 = locale30.getDisplayName();
        java.util.Locale.setDefault(category25, locale30);
        java.lang.String str41 = locale22.getDisplayLanguage(locale30);
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getIntegerInstance(locale22);
        boolean boolean43 = fieldPosition1.equals((java.lang.Object) numberFormat42);
        int int44 = fieldPosition1.getBeginIndex();
        int int45 = fieldPosition1.getBeginIndex();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100 0 / 1" + "'", str9, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(fraction19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(field21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.FORMAT + "'", category25.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "France" + "'", str37, "France");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fra" + "'", str38, "fra");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "French (France)" + "'", str39, "French (France)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
    }

    @Test
    public void test08288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08288");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction6 = properFractionFormat2.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        boolean boolean12 = numberFormat11.isGroupingUsed();
        properFractionFormat9.setWholeFormat(numberFormat11);
        java.text.NumberFormat numberFormat14 = properFractionFormat9.getWholeFormat();
        properFractionFormat2.setWholeFormat(numberFormat14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        boolean boolean21 = numberFormat20.isGroupingUsed();
        properFractionFormat18.setWholeFormat(numberFormat20);
        java.text.NumberFormat numberFormat23 = properFractionFormat18.getWholeFormat();
        java.util.Currency currency24 = numberFormat23.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23);
        java.lang.Object obj26 = numberFormat23.clone();
        boolean boolean27 = numberFormat23.isParseIntegerOnly();
        properFractionFormat2.setWholeFormat(numberFormat23);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        boolean boolean35 = numberFormat34.isGroupingUsed();
        properFractionFormat32.setWholeFormat(numberFormat34);
        java.text.NumberFormat numberFormat37 = properFractionFormat32.getWholeFormat();
        java.text.ParsePosition parsePosition40 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number41 = numberFormat37.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition40);
        int int42 = parsePosition40.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction43 = properFractionFormat2.parse("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]", parsePosition40);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.text.ParsePosition parsePosition50 = new java.text.ParsePosition((int) '#');
        parsePosition50.setErrorIndex(600);
        java.lang.String str53 = parsePosition50.toString();
        parsePosition50.setErrorIndex((int) 'u');
        parsePosition50.setErrorIndex((int) 'u');
        java.lang.Object obj58 = properFractionFormat47.parseObject("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition50);
        java.lang.Object obj59 = properFractionFormat2.parseObject("87 %", parsePosition50);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNull(fraction6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(currency24);
        org.junit.Assert.assertEquals(currency24.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNull(number41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "java.text.ParsePosition[index=35,errorIndex=600]" + "'", str53, "java.text.ParsePosition[index=35,errorIndex=600]");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj59);
    }

    @Test
    public void test08289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08289");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat5);
        boolean boolean7 = numberFormat5.isGroupingUsed();
        boolean boolean8 = numberFormat5.isGroupingUsed();
        fractionFormat1.setNumeratorFormat(numberFormat5);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale10);
        java.lang.String str13 = numberFormat11.format(0.0d);
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        boolean boolean16 = numberFormat11.equals((java.lang.Object) strSet15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category21 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale22 = java.util.Locale.getDefault(category21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale23);
        java.util.Locale.setDefault(category21, locale23);
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category21, locale26);
        java.lang.String str28 = locale20.getDisplayLanguage(locale26);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getCurrencyInstance(locale31);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction37 = properFractionFormat33.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition36);
        java.lang.Object obj38 = fractionFormat29.parseObject("214,748,364,700%", parsePosition36);
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str41 = locale40.getDisplayLanguage();
        java.lang.String str42 = locale40.toLanguageTag();
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.lang.String str45 = locale43.getISO3Language();
        java.lang.String str46 = locale40.getDisplayScript(locale43);
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance(locale43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.text.NumberFormat numberFormat49 = properFractionFormat48.getWholeFormat();
        java.util.Currency currency50 = numberFormat49.getCurrency();
        java.util.Locale locale52 = java.util.Locale.US;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale53.getScript();
        java.lang.String str55 = locale52.getDisplayName(locale53);
        java.lang.String str56 = locale52.getScript();
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance(locale52);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat60);
        numberFormat60.setMaximumFractionDigits(100);
        java.util.Locale locale65 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getCurrencyInstance(locale65);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat66);
        java.text.ParsePosition parsePosition70 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction71 = properFractionFormat67.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition70);
        int int72 = parsePosition70.getIndex();
        java.lang.Object obj73 = numberFormat60.parseObject("0%", parsePosition70);
        java.lang.Object obj74 = numberFormat57.parseObject("ZH_TW", parsePosition70);
        int int75 = parsePosition70.getErrorIndex();
        parsePosition70.setErrorIndex(0);
        java.lang.Object obj78 = numberFormat49.parseObject("\ub300\ub9cc", parsePosition70);
        org.apache.commons.math.fraction.Fraction fraction79 = fractionFormat29.parse("de_DE", parsePosition70);
        org.apache.commons.math.fraction.Fraction fraction80 = properFractionFormat18.parse("117", parsePosition70);
        java.text.ParsePosition parsePosition83 = new java.text.ParsePosition(11);
        parsePosition83.setIndex(8654399);
        java.lang.Object obj86 = properFractionFormat18.parseObject("JAVA.TEXT.FIELDPOSITION[FIELD=100,ATTRIBUTE=NULL,BEGININDEX=0,ENDINDEX=0]", parsePosition83);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.FORMAT + "'", category21.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "anglais" + "'", str28, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNull(fraction37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Chinese" + "'", str41, "Chinese");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zh-TW" + "'", str42, "zh-TW");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "zho" + "'", str45, "zho");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(currency50);
        org.junit.Assert.assertEquals(currency50.toString(), "TWD");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\uc601\uc5b4\ubbf8\uad6d)" + "'", str55, "\uc601\uc5b4\ubbf8\uad6d)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNull(fraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNull(obj86);
    }

    @Test
    public void test08290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08290");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale3.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder7 = builder2.setLocale(locale3);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("100%");
        java.lang.String str10 = locale3.getDisplayScript(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.util.Locale locale13 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.lang.String str16 = fractionFormat14.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat17 = fractionFormat14.getNumeratorFormat();
        numberFormat17.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency20 = numberFormat17.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17);
        java.text.NumberFormat numberFormat22 = fractionFormat21.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24, numberFormat26);
        int int28 = numberFormat24.getMaximumIntegerDigits();
        numberFormat24.setGroupingUsed(true);
        java.lang.String str32 = numberFormat24.format((long) 119);
        fractionFormat21.setNumeratorFormat(numberFormat24);
        java.lang.Object obj34 = numberFormat24.clone();
        boolean boolean35 = numberFormat24.isGroupingUsed();
        fractionFormat11.setDenominatorFormat(numberFormat24);
        java.text.NumberFormat.Field field37 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition38 = new java.text.FieldPosition((java.text.Format.Field) field37);
        java.lang.String str39 = fieldPosition38.toString();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale41.getDisplayScript();
        java.lang.String str43 = locale40.getDisplayName(locale41);
        boolean boolean44 = fieldPosition38.equals((java.lang.Object) locale41);
        java.text.NumberFormat.Field field45 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition46 = new java.text.FieldPosition((java.text.Format.Field) field45);
        java.text.FieldPosition fieldPosition48 = new java.text.FieldPosition((java.text.Format.Field) field45, (int) (byte) 10);
        boolean boolean49 = fieldPosition38.equals((java.lang.Object) field45);
        java.text.FieldPosition fieldPosition50 = new java.text.FieldPosition((java.text.Format.Field) field45);
        java.text.Format.Field field51 = fieldPosition50.getFieldAttribute();
        int int52 = fieldPosition50.getField();
        java.util.Locale locale53 = java.util.Locale.JAPAN;
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = locale54.getDisplayScript();
        java.lang.String str56 = locale53.getDisplayCountry(locale54);
        java.util.Locale locale57 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.lang.String str59 = locale58.getDisplayScript();
        java.lang.String str60 = locale57.getDisplayName(locale58);
        java.lang.String str61 = locale53.getDisplayLanguage(locale57);
        java.util.Set<java.lang.String> strSet62 = locale57.getUnicodeLocaleKeys();
        java.util.Locale locale66 = new java.util.Locale("taiwan (ZH_TW,10,000%)", "java.text.AttributedCharacterIterator$Attribute(reading)", "Chinesisch");
        java.util.Locale locale68 = new java.util.Locale("3,500.0000000000000000000000000000000000000000000000000000%");
        java.lang.String str69 = locale66.getDisplayVariant(locale68);
        java.lang.String str70 = locale57.getDisplayScript(locale68);
        java.util.Locale locale71 = locale68.stripExtensions();
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getInstance(locale68);
        boolean boolean73 = fieldPosition50.equals((java.lang.Object) numberFormat72);
        java.lang.StringBuffer stringBuffer74 = null;
        java.text.NumberFormat.Field field75 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition77 = new java.text.FieldPosition((java.text.Format.Field) field75, (int) '#');
        java.text.Format.Field field78 = fieldPosition77.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction81 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction84 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction87 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction88 = fraction87.negate();
        org.apache.commons.math.fraction.Fraction fraction89 = fraction84.multiply(fraction88);
        org.apache.commons.math.fraction.Fraction fraction90 = fraction81.add(fraction88);
        boolean boolean91 = field78.equals((java.lang.Object) fraction81);
        java.text.FieldPosition fieldPosition92 = new java.text.FieldPosition(field78);
        java.lang.Object obj93 = null;
        boolean boolean94 = field78.equals(obj93);
        java.text.FieldPosition fieldPosition95 = new java.text.FieldPosition(field78);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer96 = numberFormat24.format((java.lang.Object) numberFormat72, stringBuffer74, fieldPosition95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "100 0 / 1" + "'", str16, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "119" + "'", str32, "119");
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(field37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str39, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinese (Taiwan)" + "'", str43, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(field45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(field51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Japan" + "'", str56, "Japan");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Chinese (Taiwan)" + "'", str60, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u65e5\u6587" + "'", str61, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertEquals(locale66.toString(), "taiwan (zh_tw,10,000%)_JAVA.TEXT.ATTRIBUTEDCHARACTERITERATOR$ATTRIBUTE(READING)_Chinesisch");
        org.junit.Assert.assertEquals(locale68.toString(), "3,500.0000000000000000000000000000000000000000000000000000%");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Chinesisch" + "'", str69, "Chinesisch");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "3,500.0000000000000000000000000000000000000000000000000000%");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(field75);
        org.junit.Assert.assertNotNull(field78);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction87);
        org.junit.Assert.assertNotNull(fraction88);
        org.junit.Assert.assertNotNull(fraction89);
        org.junit.Assert.assertNotNull(fraction90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test08291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08291");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction6 = properFractionFormat2.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition5);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9, numberFormat11);
        boolean boolean13 = numberFormat11.isGroupingUsed();
        boolean boolean14 = numberFormat11.isGroupingUsed();
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj18 = numberFormat11.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.text.NumberFormat numberFormat20 = fractionFormat19.getNumeratorFormat();
        properFractionFormat2.setNumeratorFormat(numberFormat20);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale23.getISO3Country();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale23);
        java.util.Locale locale31 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        int int33 = numberFormat32.getMaximumIntegerDigits();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        boolean boolean36 = numberFormat35.isGroupingUsed();
        java.util.Currency currency37 = numberFormat35.getCurrency();
        numberFormat32.setCurrency(currency37);
        java.util.Currency currency39 = numberFormat32.getCurrency();
        int int40 = numberFormat32.getMaximumFractionDigits();
        java.lang.Object obj41 = numberFormat32.clone();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        numberFormat43.setMaximumFractionDigits(100);
        numberFormat43.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str50 = numberFormat43.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27, numberFormat32, numberFormat43);
        java.text.NumberFormat numberFormat52 = properFractionFormat51.getWholeFormat();
        java.util.Locale locale56 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance(locale56);
        int int58 = numberFormat57.getMaximumIntegerDigits();
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        boolean boolean61 = numberFormat60.isGroupingUsed();
        java.util.Currency currency62 = numberFormat60.getCurrency();
        numberFormat57.setCurrency(currency62);
        java.util.Currency currency64 = numberFormat57.getCurrency();
        java.math.RoundingMode roundingMode65 = numberFormat57.getRoundingMode();
        properFractionFormat51.setWholeFormat(numberFormat57);
        java.text.NumberFormat numberFormat67 = properFractionFormat51.getWholeFormat();
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getInstance(locale69);
        boolean boolean71 = numberFormat70.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat70);
        java.text.ParsePosition parsePosition75 = new java.text.ParsePosition((int) '4');
        org.apache.commons.math.fraction.Fraction fraction76 = properFractionFormat72.parse("0%", parsePosition75);
        java.lang.Object obj77 = properFractionFormat51.parseObject("", parsePosition75);
        org.apache.commons.math.fraction.Fraction fraction78 = properFractionFormat2.parse("60,000%", parsePosition75);
        int int79 = parsePosition75.getErrorIndex();
        parsePosition75.setIndex((int) (byte) -1);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException84 = new org.apache.commons.math.fraction.FractionConversionException((double) 120L, 88);
        java.lang.Object[] objArray85 = fractionConversionException84.getArguments();
        boolean boolean86 = parsePosition75.equals((java.lang.Object) objArray85);
        java.lang.Class<?> wildcardClass87 = objArray85.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNull(fraction6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals(locale31.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(currency37);
        org.junit.Assert.assertEquals(currency37.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "100%" + "'", str50, "100%");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals(locale56.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(currency62);
        org.junit.Assert.assertEquals(currency62.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency64);
        org.junit.Assert.assertEquals(currency64.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode65 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode65.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(fraction76);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNull(fraction78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 51 + "'", int79 == 51);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[120.0, 88]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[120.0, 88]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test08292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08292");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale14 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale14);
        java.util.Locale locale17 = java.util.Locale.getDefault(category0);
        java.util.Locale locale18 = java.util.Locale.getDefault(category0);
        java.util.Locale locale20 = new java.util.Locale("java.text.fieldposition[field=100,attribute=null,beginindex=0,endindex=0]_US");
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance(locale20);
        java.util.Locale.setDefault(category0, locale20);
        java.util.Locale locale23 = java.util.Locale.getDefault(category0);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getCurrencyInstance(locale23);
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str28 = locale25.getDisplayCountry(locale27);
        java.util.Locale.Category category29 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale30 = java.util.Locale.getDefault(category29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale31);
        java.util.Locale.setDefault(category29, locale31);
        java.util.Locale locale34 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category29, locale34);
        java.lang.String str36 = locale34.getISO3Language();
        java.lang.String str37 = locale25.getDisplayLanguage(locale34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale34);
        java.util.Locale locale39 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getIntegerInstance(locale39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        boolean boolean43 = numberFormat42.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        boolean boolean45 = numberFormat42.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = new org.apache.commons.math.fraction.FractionFormat(numberFormat40, numberFormat42);
        fractionFormat38.setDenominatorFormat(numberFormat42);
        java.util.Currency currency48 = numberFormat42.getCurrency();
        numberFormat24.setCurrency(currency48);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals(locale14.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertEquals(locale20.toString(), "java.text.fieldposition[field=100,attribute=null,beginindex=0,endindex=0]_us");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "java.text.fieldposition[field=100,attribute=null,beginindex=0,endindex=0]_us");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str26, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Taiwan" + "'", str28, "Taiwan");
        org.junit.Assert.assertTrue("'" + category29 + "' != '" + java.util.Locale.Category.FORMAT + "'", category29.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "java.text.fieldposition[field=100,attribute=null,beginindex=0,endindex=0]_us");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fra" + "'", str36, "fra");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "chinois" + "'", str37, "chinois");
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
    }

    @Test
    public void test08293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08293");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        boolean boolean5 = numberFormat3.isGroupingUsed();
        boolean boolean6 = numberFormat3.isGroupingUsed();
        numberFormat3.setMinimumFractionDigits(1);
        java.util.Currency currency9 = numberFormat3.getCurrency();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
    }

    @Test
    public void test08294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08294");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        numberFormat6.setMinimumIntegerDigits(0);
        java.lang.String str10 = numberFormat6.format(1.0d);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale locale14 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str16 = locale14.getDisplayCountry();
        java.lang.String str17 = locale11.getDisplayName(locale14);
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayScript();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.lang.String str22 = locale18.getDisplayScript(locale20);
        java.lang.String str23 = locale11.getDisplayLanguage(locale20);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale11);
        java.util.Currency currency25 = numberFormat24.getCurrency();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        long long36 = fraction34.longValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction34);
        boolean boolean38 = numberFormat24.equals((java.lang.Object) fraction30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat6, numberFormat24);
        java.text.NumberFormat numberFormat40 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat41 = properFractionFormat39.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Korean" + "'", str17, "Korean");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str23, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
    }

    @Test
    public void test08295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08295");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.PRC;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale locale6 = new java.util.Locale("Overflow trying to convert {0} to fraction ({1}/{2})", "anglais");
        java.lang.String str7 = locale0.getDisplayName(locale6);
        boolean boolean8 = locale0.hasExtensions();
        java.util.Set<java.lang.Character> charSet9 = locale0.getExtensionKeys();
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.util.Locale locale14 = new java.util.Locale("zho", "Chinese (Taiwan)", "Overflow trying to convert {0} to fraction ({1}/{2})");
        java.lang.String str15 = locale10.getDisplayLanguage(locale14);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale14);
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayScript();
        java.lang.String str20 = locale17.getDisplayCountry(locale18);
        java.util.Set<java.lang.String> strSet21 = locale18.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getIntegerInstance(locale18);
        java.util.Locale locale23 = locale18.stripExtensions();
        java.util.Locale.setDefault(locale23);
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.util.Locale.Category category26 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale27 = java.util.Locale.getDefault(category26);
        java.lang.String str28 = locale25.getDisplayScript(locale27);
        java.lang.String str29 = locale27.getDisplayCountry();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale30);
        java.lang.String str32 = locale27.getDisplayScript(locale30);
        java.lang.String str33 = locale23.getDisplayCountry(locale30);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getNumberInstance(locale30);
        java.lang.String str35 = locale14.getDisplayLanguage(locale30);
        java.lang.String str36 = locale14.getCountry();
        java.lang.String str37 = locale0.getDisplayScript(locale14);
        java.lang.String str38 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str2, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertEquals(locale6.toString(), "overflow trying to convert {0} to fraction ({1}/{2})_ANGLAIS");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English (Canada)" + "'", str7, "English (Canada)");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale14.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Japanese" + "'", str15, "Japanese");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Japan" + "'", str20, "Japan");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.FORMAT + "'", category26.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "zho" + "'", str35, "zho");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "CHINESE (TAIWAN)" + "'", str36, "CHINESE (TAIWAN)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Canada" + "'", str38, "Canada");
    }

    @Test
    public void test08296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08296");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.util.Locale locale6 = new java.util.Locale("119", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", "");
        java.lang.String str7 = locale1.getDisplayVariant(locale6);
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.lang.String str10 = locale9.getDisplayScript();
        java.lang.String str11 = locale8.getDisplayCountry(locale9);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getNumberInstance(locale8);
        java.lang.String str13 = locale8.getDisplayCountry();
        java.lang.String str14 = locale8.getDisplayCountry();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale16);
        java.lang.String str19 = locale8.getDisplayName(locale16);
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale24 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.lang.String str25 = locale24.getDisplayName();
        java.util.Locale.setDefault(category20, locale24);
        java.lang.String str27 = locale8.getDisplayName(locale24);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.lang.String str29 = locale1.getDisplayLanguage(locale8);
        java.util.Locale locale30 = locale8.stripExtensions();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals(locale6.toString(), "119_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=100,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Japan" + "'", str11, "Japan");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Japan" + "'", str13, "Japan");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Japan" + "'", str14, "Japan");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Japanese (Japan)" + "'", str19, "Japanese (Japan)");
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale24.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1 / 1 (zh-tw)" + "'", str25, "1 / 1 (zh-tw)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Japanese (Japan)" + "'", str27, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
    }

    @Test
    public void test08297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08297");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) 100, 1);
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.abs();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        numberFormat4.setMaximumIntegerDigits(2147483647);
        int int7 = numberFormat4.getMinimumFractionDigits();
        numberFormat4.setParseIntegerOnly(true);
        boolean boolean10 = fraction2.equals((java.lang.Object) numberFormat4);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean15 = numberFormat13.equals((java.lang.Object) numberFormat14);
        java.lang.Object obj16 = numberFormat14.clone();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean21 = numberFormat19.equals((java.lang.Object) numberFormat20);
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        int int28 = numberFormat27.getMaximumIntegerDigits();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        boolean boolean31 = numberFormat30.isGroupingUsed();
        java.util.Currency currency32 = numberFormat30.getCurrency();
        numberFormat27.setCurrency(currency32);
        java.util.Currency currency34 = numberFormat27.getCurrency();
        java.math.RoundingMode roundingMode35 = numberFormat27.getRoundingMode();
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) 'a');
        java.lang.String str39 = parsePosition38.toString();
        java.lang.String str40 = parsePosition38.toString();
        java.lang.Object obj41 = numberFormat27.parseObject("zho", parsePosition38);
        java.lang.String str42 = parsePosition38.toString();
        java.lang.Number number43 = numberFormat20.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition38);
        java.lang.Object obj44 = numberFormat14.parseObject("cor\351en", parsePosition38);
        int int45 = parsePosition38.getErrorIndex();
        java.lang.Object obj46 = numberFormat4.parseObject("11,700%", parsePosition38);
        java.util.Locale locale47 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale47);
        java.util.Locale locale50 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getInstance(locale50);
        java.util.Currency currency53 = numberFormat52.getCurrency();
        numberFormat52.setMinimumIntegerDigits(1);
        numberFormat52.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition60 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj61 = numberFormat52.parseObject("Japan", parsePosition60);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException65 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str66 = fractionConversionException65.getPattern();
        java.lang.Throwable[] throwableArray67 = fractionConversionException65.getSuppressed();
        java.lang.Object[] objArray68 = fractionConversionException65.getArguments();
        boolean boolean69 = parsePosition60.equals((java.lang.Object) objArray68);
        int int70 = parsePosition60.getIndex();
        int int71 = parsePosition60.getIndex();
        java.lang.Object obj72 = fractionFormat48.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]", parsePosition60);
        int int73 = parsePosition60.getIndex();
        java.lang.String str74 = parsePosition60.toString();
        java.text.ParseException parseException77 = new java.text.ParseException("\uc911\uad6d\uc5b4", 0);
        int int78 = parseException77.getErrorOffset();
        java.lang.Throwable[] throwableArray79 = parseException77.getSuppressed();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException83 = new org.apache.commons.math.fraction.FractionConversionException((double) 'x', (long) 117, (long) 0);
        parseException77.addSuppressed((java.lang.Throwable) fractionConversionException83);
        boolean boolean85 = parsePosition60.equals((java.lang.Object) parseException77);
        boolean boolean86 = parsePosition38.equals((java.lang.Object) parsePosition60);
        int int87 = parsePosition38.getErrorIndex();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(currency32);
        org.junit.Assert.assertEquals(currency32.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode35 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode35.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str39, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str40, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str42, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "TWD");
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str66, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str74, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
    }

    @Test
    public void test08298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08298");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str1 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction0);
        long long2 = fraction0.longValue();
        org.apache.commons.math.fraction.Fraction fraction3 = fraction0.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.negate();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction6.multiply(fraction10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        boolean boolean16 = fraction10.equals((java.lang.Object) properFractionFormat15);
        org.apache.commons.math.fraction.Fraction fraction17 = fraction0.subtract(fraction10);
        org.apache.commons.math.fraction.Fraction fraction21 = new org.apache.commons.math.fraction.Fraction((double) (short) 1, (double) (byte) 100, 117);
        int int22 = fraction21.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction25 = new org.apache.commons.math.fraction.Fraction(11, (int) (byte) 87);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction21.subtract(fraction25);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction10.add(fraction21);
        int int29 = fraction28.getDenominator();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1 / 1" + "'", str1, "1 / 1");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 120 + "'", int29 == 120);
    }

    @Test
    public void test08299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08299");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category0, locale5);
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str8 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction7);
        long long9 = fraction7.longValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction7.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction13.multiply(fraction17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        boolean boolean21 = numberFormat20.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        boolean boolean23 = fraction17.equals((java.lang.Object) properFractionFormat22);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction7.subtract(fraction17);
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder25.setScript("");
        java.util.Locale locale28 = builder25.build();
        java.util.Locale.Builder builder30 = builder25.setRegion("en");
        java.util.Locale locale31 = builder30.build();
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str33 = locale32.getDisplayLanguage();
        java.util.Locale locale34 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str35 = locale32.getDisplayCountry(locale34);
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getInstance(locale36);
        java.lang.String str39 = locale36.getDisplayScript();
        java.lang.String str40 = locale32.getDisplayVariant(locale36);
        java.lang.String str42 = locale32.getExtension('a');
        java.lang.String str43 = locale31.getDisplayCountry(locale32);
        java.util.Set<java.lang.String> strSet44 = locale31.getUnicodeLocaleKeys();
        boolean boolean45 = fraction24.equals((java.lang.Object) locale31);
        java.lang.String str46 = locale31.getLanguage();
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance(locale31);
        java.util.Locale.setDefault(category0, locale31);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1 / 1" + "'", str8, "1 / 1");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "_EN");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Chinese" + "'", str33, "Chinese");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Taiwan" + "'", str35, "Taiwan");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "EN" + "'", str43, "EN");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(numberFormat47);
    }

    @Test
    public void test08300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08300");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getWholeFormat();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        numberFormat3.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getISO3Language();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale12);
        java.util.Currency currency15 = numberFormat14.getCurrency();
        numberFormat14.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat14);
        fractionFormat7.setDenominatorFormat(numberFormat14);
        java.text.NumberFormat numberFormat21 = fractionFormat7.getDenominatorFormat();
        java.lang.Number number23 = numberFormat21.parse("-100%");
        numberFormat21.setMaximumIntegerDigits(34);
        numberFormat21.setParseIntegerOnly(false);
        java.lang.Class<?> wildcardClass28 = numberFormat21.getClass();
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zho" + "'", str10, "zho");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "TWD");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + number23 + "' != '" + (-100L) + "'", number23, (-100L));
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test08301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08301");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.DECIMAL_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = field0.toString();
        java.text.ParseException parseException5 = new java.text.ParseException("\uc911\uad6d\uc5b4", 0);
        int int6 = parseException5.getErrorOffset();
        java.lang.Throwable[] throwableArray7 = parseException5.getSuppressed();
        int int8 = parseException5.getErrorOffset();
        boolean boolean9 = field0.equals((java.lang.Object) int8);
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getCurrencyInstance(locale12);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction18 = properFractionFormat14.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition17);
        java.text.NumberFormat numberFormat19 = properFractionFormat14.getWholeFormat();
        java.util.Locale locale24 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        numberFormat25.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str29 = numberFormat25.format((double) 0.0f);
        java.util.Locale locale33 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        int int35 = numberFormat34.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat34);
        java.text.NumberFormat numberFormat37 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25, numberFormat34, numberFormat37);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException41 = new org.apache.commons.math.fraction.FractionConversionException(0.0d, 10);
        boolean boolean42 = numberFormat34.equals((java.lang.Object) 10);
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getInstance(locale43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = new org.apache.commons.math.fraction.FractionFormat(numberFormat44, numberFormat46);
        int int48 = numberFormat44.getMaximumIntegerDigits();
        java.util.Locale locale49 = java.util.Locale.JAPAN;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayScript();
        java.lang.String str52 = locale49.getDisplayCountry(locale50);
        java.util.Set<java.lang.String> strSet53 = locale50.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getIntegerInstance(locale50);
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getInstance(locale50);
        java.util.Set<java.lang.Character> charSet56 = locale50.getExtensionKeys();
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getIntegerInstance(locale50);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34, numberFormat44, numberFormat57);
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getCurrencyInstance(locale60);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        java.text.ParsePosition parsePosition65 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction66 = properFractionFormat62.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition65);
        org.apache.commons.math.fraction.Fraction fraction67 = properFractionFormat58.parse("java.text.NumberFormat$Field(exponent symbol)", parsePosition65);
        org.apache.commons.math.fraction.Fraction fraction68 = properFractionFormat14.parse("\uc77c\ubcf8,1 / 1)", parsePosition65);
        boolean boolean69 = fieldPosition11.equals((java.lang.Object) properFractionFormat14);
        java.text.NumberFormat numberFormat70 = properFractionFormat14.getWholeFormat();
        boolean boolean71 = numberFormat70.isGroupingUsed();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.NumberFormat$Field(decimal separator)" + "'", str2, "java.text.NumberFormat$Field(decimal separator)");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNull(fraction18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals(locale24.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0%" + "'", str29, "0%");
        org.junit.Assert.assertEquals(locale33.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Japan" + "'", str52, "Japan");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(charSet56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNull(fraction66);
        org.junit.Assert.assertNull(fraction67);
        org.junit.Assert.assertNull(fraction68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test08302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08302");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getInstance();
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str5 = locale1.getISO3Language();
        boolean boolean6 = numberFormat0.equals((java.lang.Object) locale1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance(locale8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction14 = properFractionFormat10.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition13);
        java.text.NumberFormat numberFormat15 = properFractionFormat10.getWholeFormat();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getInstance(locale16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17, numberFormat19);
        boolean boolean21 = numberFormat19.isGroupingUsed();
        boolean boolean22 = numberFormat19.isGroupingUsed();
        java.text.ParsePosition parsePosition25 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj26 = numberFormat19.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19);
        java.text.NumberFormat numberFormat28 = fractionFormat27.getNumeratorFormat();
        properFractionFormat10.setNumeratorFormat(numberFormat28);
        int int30 = numberFormat28.getMinimumFractionDigits();
        properFractionFormat7.setWholeFormat(numberFormat28);
        java.lang.Object obj32 = null;
        java.lang.StringBuffer stringBuffer33 = null;
        java.text.FieldPosition fieldPosition35 = new java.text.FieldPosition((int) (short) 99);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer36 = properFractionFormat7.format(obj32, stringBuffer33, fieldPosition35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNull(fraction14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test08303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08303");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        boolean boolean47 = numberFormat45.equals((java.lang.Object) strArray46);
        java.lang.String str49 = numberFormat45.format((double) (byte) -1);
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale50.getDisplayCountry(locale51);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getNumberInstance(locale50);
        numberFormat54.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36, numberFormat45, numberFormat54);
        java.text.NumberFormat numberFormat58 = properFractionFormat57.getWholeFormat();
        java.util.Locale locale62 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance(locale62);
        int int64 = numberFormat63.getMaximumIntegerDigits();
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance(locale65);
        boolean boolean67 = numberFormat66.isGroupingUsed();
        java.util.Currency currency68 = numberFormat66.getCurrency();
        numberFormat63.setCurrency(currency68);
        java.util.Currency currency70 = numberFormat63.getCurrency();
        int int71 = numberFormat63.getMaximumFractionDigits();
        numberFormat63.setMinimumFractionDigits((int) 'a');
        properFractionFormat57.setWholeFormat(numberFormat63);
        java.text.NumberFormat numberFormat75 = properFractionFormat57.getDenominatorFormat();
        java.util.Locale locale76 = java.util.Locale.ROOT;
        java.lang.String str77 = locale76.getDisplayScript();
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.lang.String str79 = locale78.getISO3Language();
        java.lang.String str80 = locale76.getDisplayScript(locale78);
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getPercentInstance(locale76);
        numberFormat81.setParseIntegerOnly(false);
        java.util.Locale locale84 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat85 = java.text.NumberFormat.getPercentInstance(locale84);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat86 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat85);
        java.text.NumberFormat numberFormat87 = properFractionFormat86.getWholeFormat();
        java.util.Locale locale88 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat89 = java.text.NumberFormat.getPercentInstance(locale88);
        java.text.NumberFormat numberFormat90 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean91 = numberFormat89.equals((java.lang.Object) numberFormat90);
        properFractionFormat86.setWholeFormat(numberFormat89);
        boolean boolean93 = numberFormat81.equals((java.lang.Object) properFractionFormat86);
        java.text.NumberFormat numberFormat94 = properFractionFormat86.getDenominatorFormat();
        properFractionFormat57.setWholeFormat(numberFormat94);
        java.lang.String str97 = numberFormat94.format((double) 600L);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-100%" + "'", str49, "-100%");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Japan" + "'", str53, "Japan");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertEquals(locale62.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(currency68);
        org.junit.Assert.assertEquals(currency68.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency70);
        org.junit.Assert.assertEquals(currency70.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "kor" + "'", str79, "kor");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat89);
        org.junit.Assert.assertNotNull(numberFormat90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(numberFormat94);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "60,000%" + "'", str97, "60,000%");
    }

    @Test
    public void test08304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08304");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getWholeFormat();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        numberFormat3.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getISO3Language();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale12);
        java.util.Currency currency15 = numberFormat14.getCurrency();
        numberFormat14.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat14);
        fractionFormat7.setDenominatorFormat(numberFormat14);
        java.text.NumberFormat numberFormat21 = fractionFormat7.getDenominatorFormat();
        java.lang.Number number23 = numberFormat21.parse("-100%");
        java.lang.StringBuffer stringBuffer25 = null;
        java.text.FieldPosition fieldPosition27 = new java.text.FieldPosition((int) (short) 0);
        int int28 = fieldPosition27.getEndIndex();
        java.lang.String str29 = fieldPosition27.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer30 = numberFormat21.format((double) 8, stringBuffer25, fieldPosition27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zho" + "'", str10, "zho");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "TWD");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + number23 + "' != '" + (-100L) + "'", number23, (-100L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]" + "'", str29, "java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]");
    }

    @Test
    public void test08305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08305");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str4 = locale0.getISO3Language();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getISO3Language();
        java.lang.String str7 = locale5.getDisplayCountry();
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getISO3Language();
        java.lang.String str11 = locale5.getDisplayScript(locale8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getCurrencyInstance(locale5);
        java.lang.String str14 = locale5.getDisplayName();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale5);
        java.lang.String str16 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.negate();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.abs();
        long long28 = fraction26.longValue();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction22.multiply(fraction26);
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.abs();
        long long40 = fraction38.longValue();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction34.multiply(fraction38);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction22.divide(fraction41);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction22.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction45 = new org.apache.commons.math.fraction.Fraction((double) 1L);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction43.divide(fraction45);
        double double47 = fraction45.doubleValue();
        int int48 = fraction45.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction45.abs();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.negate();
        java.lang.String str51 = numberFormat17.format((java.lang.Object) fraction49);
        org.apache.commons.math.fraction.Fraction fraction52 = fraction49.negate();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zho" + "'", str10, "zho");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Korean" + "'", str14, "Korean");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\244 1.00" + "'", str51, "\244 1.00");
        org.junit.Assert.assertNotNull(fraction52);
    }

    @Test
    public void test08306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08306");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("java.text.FieldPosition[field=52,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=0,endIndex=0]");
        java.util.Locale locale3 = new java.util.Locale("00,000,000,000,000,000,000,000,002,147,483,647");
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.lang.String str6 = locale4.getISO3Language();
        java.util.Locale locale10 = new java.util.Locale("en", "11,700%", "zho");
        java.lang.String str11 = locale4.getDisplayScript(locale10);
        java.lang.String str12 = locale3.getDisplayScript(locale10);
        java.lang.String str13 = locale1.getDisplayCountry(locale10);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = locale14.getScript();
        java.util.Locale locale19 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str20 = locale14.getDisplayScript(locale19);
        java.lang.String str21 = locale19.getCountry();
        java.lang.String str22 = locale10.getDisplayName(locale19);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals(locale3.toString(), "00,000,000,000,000,000,000,000,002,147,483,647");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertEquals(locale10.toString(), "en_11,700%_zho");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals(locale19.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZH_TW" + "'", str21, "ZH_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English (11,700%,zho)" + "'", str22, "English (11,700%,zho)");
    }

    @Test
    public void test08307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08307");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Language();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale4);
        java.util.Currency currency7 = numberFormat6.getCurrency();
        numberFormat6.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat6);
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.getDefault(category12);
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.util.Locale locale16 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str17 = locale14.getDisplayScript(locale16);
        java.util.Locale.setDefault(category12, locale16);
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.lang.String str20 = locale19.getScript();
        java.util.Locale locale24 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str25 = locale19.getDisplayScript(locale24);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getNumberInstance(locale24);
        java.util.Set<java.lang.String> strSet27 = locale24.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet28 = locale24.getExtensionKeys();
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale locale30 = java.util.Locale.PRC;
        java.lang.String str31 = locale29.getDisplayName(locale30);
        java.lang.String str32 = locale24.getDisplayName(locale29);
        java.util.Locale locale33 = locale29.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale35.getDisplayScript();
        java.lang.String str37 = locale34.getDisplayCountry(locale35);
        java.util.Set<java.lang.String> strSet38 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str39 = locale33.getDisplayVariant(locale35);
        java.lang.String str41 = locale33.getExtension('a');
        java.lang.String str42 = locale16.getDisplayCountry(locale33);
        java.lang.String str43 = locale33.getVariant();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getCurrencyInstance(locale33);
        java.lang.String str45 = locale33.getLanguage();
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getInstance(locale33);
        java.util.Locale locale47 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale47);
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getInstance(locale49);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = new org.apache.commons.math.fraction.FractionFormat(numberFormat50, numberFormat52);
        boolean boolean54 = numberFormat52.isGroupingUsed();
        boolean boolean55 = numberFormat52.isGroupingUsed();
        fractionFormat48.setNumeratorFormat(numberFormat52);
        java.lang.Object obj57 = numberFormat52.clone();
        java.lang.Object obj58 = numberFormat52.clone();
        java.util.Currency currency59 = numberFormat52.getCurrency();
        java.util.Locale locale63 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance(locale63);
        int int65 = numberFormat64.getMaximumIntegerDigits();
        java.util.Locale locale69 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getPercentInstance(locale69);
        numberFormat70.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency73 = numberFormat70.getCurrency();
        numberFormat64.setCurrency(currency73);
        numberFormat52.setCurrency(currency73);
        numberFormat46.setCurrency(currency73);
        numberFormat6.setCurrency(currency73);
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat79 = java.text.NumberFormat.getPercentInstance(locale78);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat79);
        numberFormat79.setMaximumFractionDigits(100);
        numberFormat79.setMaximumFractionDigits((int) (byte) 100);
        numberFormat79.setMaximumFractionDigits((int) (byte) -1);
        java.lang.String str88 = numberFormat79.format(9700L);
        numberFormat79.setMaximumIntegerDigits(60);
        java.lang.StringBuffer stringBuffer91 = null;
        java.text.FieldPosition fieldPosition93 = new java.text.FieldPosition(97);
        java.text.Format.Field field94 = fieldPosition93.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer95 = numberFormat6.format((java.lang.Object) numberFormat79, stringBuffer91, fieldPosition93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "_EN");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals(locale24.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str31, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str32, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Japan" + "'", str37, "Japan");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Canada" + "'", str42, "Canada");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "en" + "'", str45, "en");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(currency59);
        org.junit.Assert.assertEquals(currency59.toString(), "XXX");
        org.junit.Assert.assertEquals(locale63.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertEquals(locale69.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(currency73);
        org.junit.Assert.assertEquals(currency73.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "970,000%" + "'", str88, "970,000%");
        org.junit.Assert.assertNull(field94);
    }

    @Test
    public void test08308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08308");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str9 = locale3.getDisplayScript(locale8);
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str12 = locale10.getISO3Language();
        java.lang.String str13 = locale10.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale10);
        java.lang.String str16 = locale3.getDisplayScript(locale10);
        java.lang.String str17 = locale0.getDisplayName(locale10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.lang.String str20 = locale19.getScript();
        java.util.Locale locale24 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str25 = locale19.getDisplayScript(locale24);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getNumberInstance(locale24);
        java.util.Set<java.lang.String> strSet27 = locale24.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet28 = locale24.getExtensionKeys();
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale locale30 = java.util.Locale.PRC;
        java.lang.String str31 = locale29.getDisplayName(locale30);
        java.lang.String str32 = locale24.getDisplayName(locale29);
        java.util.Locale locale33 = locale29.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale35.getDisplayScript();
        java.lang.String str37 = locale34.getDisplayCountry(locale35);
        java.util.Set<java.lang.String> strSet38 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str39 = locale33.getDisplayVariant(locale35);
        java.lang.String str40 = locale35.toLanguageTag();
        java.lang.String str41 = locale35.getDisplayVariant();
        java.lang.String str42 = locale10.getDisplayLanguage(locale35);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jpn" + "'", str1, "jpn");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zho" + "'", str12, "zho");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zho" + "'", str13, "zho");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str17, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals(locale24.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str31, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str32, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Japan" + "'", str37, "Japan");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "und" + "'", str40, "und");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Chinese" + "'", str42, "Chinese");
    }

    @Test
    public void test08309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08309");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits(2147483647);
        java.lang.String str4 = numberFormat0.format((long) 'a');
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale6.getISO3Language();
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        java.lang.String str9 = locale6.getISO3Country();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getNumberInstance(locale6);
        java.util.Locale locale14 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        int int16 = numberFormat15.getMaximumIntegerDigits();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        boolean boolean19 = numberFormat18.isGroupingUsed();
        java.util.Currency currency20 = numberFormat18.getCurrency();
        numberFormat15.setCurrency(currency20);
        java.util.Currency currency22 = numberFormat15.getCurrency();
        int int23 = numberFormat15.getMaximumFractionDigits();
        java.lang.Object obj24 = numberFormat15.clone();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        numberFormat26.setMaximumFractionDigits(100);
        numberFormat26.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str33 = numberFormat26.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat15, numberFormat26);
        java.util.Locale locale36 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        java.lang.String str39 = fractionFormat37.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat40 = fractionFormat37.getNumeratorFormat();
        java.text.NumberFormat numberFormat41 = fractionFormat37.getNumeratorFormat();
        java.text.NumberFormat numberFormat42 = fractionFormat37.getNumeratorFormat();
        java.lang.String str44 = numberFormat42.format((long) 2147483647);
        properFractionFormat34.setDenominatorFormat(numberFormat42);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale50);
        boolean boolean52 = numberFormat51.isGroupingUsed();
        properFractionFormat49.setWholeFormat(numberFormat51);
        java.text.NumberFormat numberFormat54 = properFractionFormat49.getWholeFormat();
        java.text.ParsePosition parsePosition57 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number58 = numberFormat54.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition57);
        parsePosition57.setErrorIndex(0);
        parsePosition57.setErrorIndex(1728000);
        java.lang.Object obj63 = properFractionFormat34.parseObject("\u97d3\u6587", parsePosition57);
        java.lang.Number number64 = numberFormat0.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert -0 to fraction (2,147,483,647/-1)", parsePosition57);
        int int65 = parsePosition57.getIndex();
        parsePosition57.setErrorIndex(14400);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "9\240700 %" + "'", str4, "9\240700 %");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "100%" + "'", str33, "100%");
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "100 0 / 1" + "'", str39, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2,147,483,647" + "'", str44, "2,147,483,647");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNull(number58);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(number64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test08310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08310");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.lang.String str3 = locale0.getDisplayScript();
        java.lang.String str4 = locale0.getDisplayLanguage();
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Locale locale6 = locale5.stripExtensions();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str10 = locale8.getDisplayCountry();
        java.lang.String str11 = locale5.getDisplayName(locale8);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayScript();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale14.getISO3Language();
        java.lang.String str16 = locale12.getDisplayScript(locale14);
        java.lang.String str17 = locale5.getDisplayLanguage(locale14);
        java.lang.String str18 = locale5.toLanguageTag();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str20 = locale0.getDisplayLanguage(locale5);
        java.lang.String str21 = locale5.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str4, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Chinese" + "'", str20, "Chinese");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test08311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08311");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat4 = properFractionFormat3.getWholeFormat();
        numberFormat4.setMinimumFractionDigits((int) (byte) 0);
        numberFormat4.setMinimumFractionDigits(60);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.lang.String str11 = numberFormat4.format((double) (short) 0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0.000000000000000000000000000000000000000000000000000000000000" + "'", str11, "0.000000000000000000000000000000000000000000000000000000000000");
    }

    @Test
    public void test08312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08312");
        java.util.Locale locale2 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        numberFormat5.setMaximumFractionDigits(100);
        numberFormat5.setMaximumFractionDigits((int) (byte) 100);
        numberFormat5.setMaximumFractionDigits((int) (byte) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.math.RoundingMode roundingMode14 = numberFormat5.getRoundingMode();
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (short) 1);
        int int18 = parsePosition17.getErrorIndex();
        java.lang.String str19 = parsePosition17.toString();
        java.util.Locale locale23 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        int int25 = numberFormat24.getMaximumIntegerDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        boolean boolean28 = numberFormat27.isGroupingUsed();
        java.util.Currency currency29 = numberFormat27.getCurrency();
        numberFormat24.setCurrency(currency29);
        java.util.Currency currency31 = numberFormat24.getCurrency();
        int int32 = numberFormat24.getMaximumFractionDigits();
        java.lang.Object obj33 = numberFormat24.clone();
        java.lang.Object obj34 = numberFormat24.clone();
        int int35 = numberFormat24.getMaximumIntegerDigits();
        int int36 = numberFormat24.getMinimumIntegerDigits();
        java.lang.Object obj37 = numberFormat24.clone();
        numberFormat24.setGroupingUsed(false);
        java.util.Locale locale41 = new java.util.Locale("Chinese (Taiwan)");
        java.util.Locale locale44 = new java.util.Locale("Chinese", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.util.Locale locale47 = new java.util.Locale("hi!");
        java.lang.String str48 = locale47.getDisplayLanguage();
        java.lang.String str49 = locale41.getDisplayLanguage(locale47);
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getCurrencyInstance(locale41);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale51);
        java.text.NumberFormat numberFormat53 = fractionFormat52.getDenominatorFormat();
        numberFormat53.setMinimumIntegerDigits(1728000);
        java.util.Currency currency56 = numberFormat53.getCurrency();
        numberFormat50.setCurrency(currency56);
        numberFormat24.setCurrency(currency56);
        boolean boolean59 = parsePosition17.equals((java.lang.Object) currency56);
        int int60 = parsePosition17.getErrorIndex();
        java.lang.Object obj61 = numberFormat5.parseObject("-.019841270113829523000000000000000000000000000000000000000000%", parsePosition17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat5);
        java.lang.StringBuffer stringBuffer64 = null;
        java.text.FieldPosition fieldPosition66 = new java.text.FieldPosition(7);
        java.lang.String str67 = fieldPosition66.toString();
        fieldPosition66.setEndIndex((int) (byte) -51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer70 = numberFormat3.format((long) 35, stringBuffer64, fieldPosition66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + roundingMode14 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode14.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=-1]" + "'", str19, "java.text.ParsePosition[index=1,errorIndex=-1]");
        org.junit.Assert.assertEquals(locale23.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(currency29);
        org.junit.Assert.assertEquals(currency29.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency31);
        org.junit.Assert.assertEquals(currency31.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(locale41.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals(locale44.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals(locale47.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "chinese (taiwan)" + "'", str49, "chinese (taiwan)");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(currency56);
        org.junit.Assert.assertEquals(currency56.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertEquals("'" + obj61 + "' != '" + 1.9841270113829523E-4d + "'", obj61, 1.9841270113829523E-4d);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=0]" + "'", str67, "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=0]");
    }

    @Test
    public void test08313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08313");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.util.Set<java.lang.String> strSet7 = locale0.getUnicodeLocaleKeys();
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale10);
        java.util.Locale.setDefault(category8, locale10);
        java.util.Locale locale13 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category8, locale13);
        java.lang.String str15 = locale13.getISO3Language();
        java.util.Locale locale18 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getIntegerInstance(locale18);
        java.lang.String str20 = locale13.getDisplayScript(locale18);
        java.lang.String str21 = locale0.getDisplayLanguage(locale13);
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.util.Locale locale23 = locale22.stripExtensions();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale25 = locale23.stripExtensions();
        boolean boolean26 = locale23.hasExtensions();
        java.lang.String str27 = locale13.getDisplayScript(locale23);
        java.lang.String str28 = locale23.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fra" + "'", str15, "fra");
        org.junit.Assert.assertEquals(locale18.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test08314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08314");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        numberFormat3.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field8);
        java.lang.String str10 = fieldPosition9.toString();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayScript();
        java.lang.String str14 = locale11.getDisplayName(locale12);
        boolean boolean15 = fieldPosition9.equals((java.lang.Object) locale12);
        fieldPosition9.setEndIndex((int) '#');
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction24 = properFractionFormat20.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition23);
        boolean boolean25 = fieldPosition9.equals((java.lang.Object) parsePosition23);
        java.lang.Number number26 = numberFormat3.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition23);
        boolean boolean27 = numberFormat3.isGroupingUsed();
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale32 = new java.util.Locale("zho", "Chinese (Taiwan)", "Overflow trying to convert {0} to fraction ({1}/{2})");
        java.lang.String str33 = locale28.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale32);
        int int35 = numberFormat34.getMaximumFractionDigits();
        numberFormat34.setParseIntegerOnly(false);
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.lang.String str39 = locale38.getScript();
        java.util.Locale locale43 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str44 = locale38.getDisplayScript(locale43);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getNumberInstance(locale43);
        java.util.Set<java.lang.String> strSet46 = locale43.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet47 = locale43.getExtensionKeys();
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.util.Locale locale49 = java.util.Locale.PRC;
        java.lang.String str50 = locale48.getDisplayName(locale49);
        java.lang.String str51 = locale43.getDisplayName(locale48);
        java.util.Locale locale52 = locale48.stripExtensions();
        java.util.Locale locale53 = java.util.Locale.JAPAN;
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = locale54.getDisplayScript();
        java.lang.String str56 = locale53.getDisplayCountry(locale54);
        java.util.Set<java.lang.String> strSet57 = locale54.getUnicodeLocaleAttributes();
        java.lang.String str58 = locale52.getDisplayVariant(locale54);
        java.lang.String str60 = locale52.getExtension('a');
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getIntegerInstance(locale52);
        java.lang.Object obj62 = locale52.clone();
        boolean boolean63 = numberFormat34.equals(obj62);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getInstance();
        numberFormat64.setParseIntegerOnly(true);
        java.lang.Object obj67 = numberFormat64.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3, numberFormat34, numberFormat64);
        int int69 = numberFormat64.getMaximumIntegerDigits();
        java.util.Locale locale70 = java.util.Locale.JAPAN;
        java.util.Locale locale71 = java.util.Locale.ROOT;
        java.lang.String str72 = locale71.getDisplayScript();
        java.lang.String str73 = locale70.getDisplayCountry(locale71);
        java.util.Set<java.lang.String> strSet74 = locale71.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getIntegerInstance(locale71);
        int int76 = numberFormat75.getMaximumIntegerDigits();
        numberFormat75.setMinimumFractionDigits(2147483647);
        java.util.Locale locale79 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat80 = java.text.NumberFormat.getIntegerInstance(locale79);
        boolean boolean81 = numberFormat75.equals((java.lang.Object) locale79);
        java.lang.String str83 = numberFormat75.format(2.147483647E9d);
        org.apache.commons.math.fraction.FractionFormat fractionFormat84 = new org.apache.commons.math.fraction.FractionFormat(numberFormat64, numberFormat75);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str10, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese (Taiwan)" + "'", str14, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNull(fraction24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(number26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale32.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Japanese" + "'", str33, "Japanese");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals(locale43.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str50, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str51, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Japan" + "'", str56, "Japan");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "en_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "en_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Japan" + "'", str73, "Japan");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "2,147,483,647.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" + "'", str83, "2,147,483,647.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    }

    @Test
    public void test08315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08315");
        java.util.Locale locale2 = new java.util.Locale("", "1,000%");
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        int int9 = numberFormat8.getMaximumIntegerDigits();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        boolean boolean12 = numberFormat11.isGroupingUsed();
        java.util.Currency currency13 = numberFormat11.getCurrency();
        numberFormat8.setCurrency(currency13);
        java.util.Currency currency15 = numberFormat8.getCurrency();
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18, numberFormat20);
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj25 = numberFormat20.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition24);
        java.lang.String str26 = parsePosition24.toString();
        java.lang.Number number27 = numberFormat8.parse("Chinese", parsePosition24);
        java.lang.String str29 = numberFormat8.format((double) (short) 10);
        boolean boolean30 = numberFormat8.isGroupingUsed();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        boolean boolean33 = numberFormat32.isGroupingUsed();
        numberFormat32.setGroupingUsed(true);
        int int36 = numberFormat32.getMaximumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8, numberFormat32);
        fractionFormat3.setDenominatorFormat(numberFormat8);
        org.junit.Assert.assertEquals(locale2.toString(), "_1,000%");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str26, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1,000%" + "'", str29, "1,000%");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test08316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08316");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale0.getDisplayCountry(locale3);
        java.util.Set<java.lang.String> strSet8 = locale0.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet9 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getNumberInstance(locale0);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition((int) '4');
        parsePosition12.setIndex(0);
        java.text.FieldPosition fieldPosition16 = new java.text.FieldPosition(1);
        boolean boolean17 = parsePosition12.equals((java.lang.Object) fieldPosition16);
        parsePosition12.setIndex((int) (byte) 16);
        java.text.AttributedCharacterIterator attributedCharacterIterator20 = numberFormat10.formatToCharacterIterator((java.lang.Object) (byte) 16);
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance(locale21);
        boolean boolean23 = numberFormat22.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat(numberFormat26, numberFormat28);
        java.text.ParsePosition parsePosition32 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj33 = numberFormat28.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition32);
        properFractionFormat24.setNumeratorFormat(numberFormat28);
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getInstance(locale35);
        boolean boolean37 = numberFormat36.isParseIntegerOnly();
        numberFormat36.setGroupingUsed(false);
        properFractionFormat24.setWholeFormat(numberFormat36);
        numberFormat36.setMinimumFractionDigits((int) 'u');
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency44 = numberFormat43.getCurrency();
        java.lang.String str46 = numberFormat43.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.util.Locale locale51 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        java.lang.String[] strArray53 = java.util.Locale.getISOCountries();
        boolean boolean54 = numberFormat52.equals((java.lang.Object) strArray53);
        java.util.Locale locale58 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance(locale58);
        int int60 = numberFormat59.getMaximumIntegerDigits();
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance(locale61);
        boolean boolean63 = numberFormat62.isGroupingUsed();
        java.util.Currency currency64 = numberFormat62.getCurrency();
        numberFormat59.setCurrency(currency64);
        java.util.Currency currency66 = numberFormat59.getCurrency();
        java.math.RoundingMode roundingMode67 = numberFormat59.getRoundingMode();
        numberFormat52.setRoundingMode(roundingMode67);
        boolean boolean69 = numberFormat52.isParseIntegerOnly();
        properFractionFormat47.setWholeFormat(numberFormat52);
        java.text.NumberFormat numberFormat71 = properFractionFormat47.getDenominatorFormat();
        java.text.NumberFormat numberFormat72 = properFractionFormat47.getNumeratorFormat();
        java.lang.String str74 = numberFormat72.format(599.9916666666667d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat76 = properFractionFormat75.getWholeFormat();
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat78 = java.text.NumberFormat.getPercentInstance(locale77);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat78);
        numberFormat78.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat82 = new org.apache.commons.math.fraction.FractionFormat(numberFormat76, numberFormat78);
        java.util.Locale locale83 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat84 = java.text.NumberFormat.getInstance(locale83);
        boolean boolean85 = numberFormat84.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat86 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat84);
        java.text.NumberFormat numberFormat87 = properFractionFormat86.getWholeFormat();
        numberFormat87.setMinimumFractionDigits((int) (byte) 0);
        numberFormat87.setMinimumFractionDigits(60);
        numberFormat87.setMaximumFractionDigits((int) (byte) 1);
        java.math.RoundingMode roundingMode94 = numberFormat87.getRoundingMode();
        numberFormat76.setRoundingMode(roundingMode94);
        numberFormat72.setRoundingMode(roundingMode94);
        numberFormat36.setRoundingMode(roundingMode94);
        numberFormat10.setRoundingMode(roundingMode94);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "France" + "'", str7, "France");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(attributedCharacterIterator20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100 %" + "'", str46, "100 %");
        org.junit.Assert.assertEquals(locale51.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals(locale58.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(currency64);
        org.junit.Assert.assertEquals(currency64.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency66);
        org.junit.Assert.assertEquals(currency66.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode67 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode67.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "59\240999 %" + "'", str74, "59\240999 %");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertTrue("'" + roundingMode94 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode94.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test08317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08317");
        java.util.Locale locale3 = new java.util.Locale("Japanese (Japan)", "java.text.NumberFormat$Field(currency)", "\uc911\uad6d\uc5b4");
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str5 = locale3.getScript();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale6.getScript();
        java.util.Locale locale11 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str12 = locale6.getDisplayScript(locale11);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getNumberInstance(locale11);
        java.util.Set<java.lang.String> strSet14 = locale11.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet15 = locale11.getExtensionKeys();
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.PRC;
        java.lang.String str18 = locale16.getDisplayName(locale17);
        java.lang.String str19 = locale11.getDisplayName(locale16);
        java.util.Locale locale20 = locale16.stripExtensions();
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayScript();
        java.lang.String str24 = locale21.getDisplayCountry(locale22);
        java.util.Set<java.lang.String> strSet25 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale20.getDisplayVariant(locale22);
        java.lang.String str28 = locale20.getExtension('a');
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getIntegerInstance(locale20);
        java.util.Locale locale31 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale31);
        java.lang.String str33 = locale31.getDisplayCountry();
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getIntegerInstance(locale31);
        java.lang.String str35 = locale31.toLanguageTag();
        java.lang.String str36 = locale20.getDisplayCountry(locale31);
        java.util.Set<java.lang.Character> charSet37 = locale31.getExtensionKeys();
        java.lang.String str38 = locale31.getDisplayCountry();
        java.lang.String str39 = locale3.getDisplayLanguage(locale31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = locale3.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY)");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals(locale11.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str18, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str19, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Japan" + "'", str24, "Japan");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "und" + "'", str35, "und");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Canada" + "'", str36, "Canada");
        org.junit.Assert.assertNotNull(charSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "japanese (japan)" + "'", str39, "japanese (japan)");
    }

    @Test
    public void test08318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08318");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction8.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str28 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction8.subtract(fraction27);
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.abs();
        long long40 = fraction38.longValue();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction34.multiply(fraction38);
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.negate();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.abs();
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.negate();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.abs();
        long long52 = fraction50.longValue();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction46.multiply(fraction50);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction38.subtract(fraction53);
        org.apache.commons.math.fraction.Fraction fraction57 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str58 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction57);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction38.subtract(fraction57);
        org.apache.commons.math.fraction.Fraction fraction60 = fraction27.divide(fraction59);
        int int61 = fraction59.intValue();
        long long62 = fraction59.longValue();
        int int63 = fraction59.getNumerator();
        int int64 = fraction59.intValue();
        java.lang.Object obj65 = null;
        boolean boolean66 = fraction59.equals(obj65);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 / 100" + "'", str28, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "-1 / 100" + "'", str58, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 11 + "'", int63 == 11);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test08319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08319");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale locale17 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.lang.String str20 = locale14.getDisplayName(locale17);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale14.getDisplayLanguage(locale23);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale14);
        fractionFormat10.setNumeratorFormat(numberFormat27);
        properFractionFormat7.setWholeFormat(numberFormat27);
        fractionFormat4.setNumeratorFormat(numberFormat27);
        java.util.Locale locale34 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str37 = locale36.getDisplayLanguage();
        java.lang.String str38 = locale36.toLanguageTag();
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        java.lang.String str41 = locale39.getISO3Language();
        java.lang.String str42 = locale36.getDisplayScript(locale39);
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.lang.String str44 = locale36.getDisplayCountry(locale43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        java.text.NumberFormat numberFormat46 = fractionFormat45.getDenominatorFormat();
        java.math.RoundingMode roundingMode47 = numberFormat46.getRoundingMode();
        numberFormat35.setRoundingMode(roundingMode47);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27, numberFormat35);
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -32, (int) (short) 599);
        java.lang.String str53 = fractionFormat49.format((java.lang.Object) fraction52);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals(locale34.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str37, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zh-TW" + "'", str38, "zh-TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zho" + "'", str41, "zho");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Taiwan" + "'", str44, "Taiwan");
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + roundingMode47 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode47.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-32 / 59,900%" + "'", str53, "-32 / 59,900%");
    }

    @Test
    public void test08320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08320");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayName(locale3);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale9.getISO3Language();
        java.lang.String str11 = locale7.getDisplayScript(locale9);
        java.lang.String str12 = locale0.getDisplayLanguage(locale9);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Currency currency14 = numberFormat13.getCurrency();
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        long long25 = fraction23.longValue();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.multiply(fraction23);
        boolean boolean27 = numberFormat13.equals((java.lang.Object) fraction19);
        numberFormat13.setGroupingUsed(false);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean34 = numberFormat32.equals((java.lang.Object) numberFormat33);
        java.lang.Object obj35 = numberFormat33.clone();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale37);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean40 = numberFormat38.equals((java.lang.Object) numberFormat39);
        java.util.Locale locale45 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale45);
        int int47 = numberFormat46.getMaximumIntegerDigits();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        boolean boolean50 = numberFormat49.isGroupingUsed();
        java.util.Currency currency51 = numberFormat49.getCurrency();
        numberFormat46.setCurrency(currency51);
        java.util.Currency currency53 = numberFormat46.getCurrency();
        java.math.RoundingMode roundingMode54 = numberFormat46.getRoundingMode();
        java.text.ParsePosition parsePosition57 = new java.text.ParsePosition((int) 'a');
        java.lang.String str58 = parsePosition57.toString();
        java.lang.String str59 = parsePosition57.toString();
        java.lang.Object obj60 = numberFormat46.parseObject("zho", parsePosition57);
        java.lang.String str61 = parsePosition57.toString();
        java.lang.Number number62 = numberFormat39.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition57);
        java.lang.Object obj63 = numberFormat33.parseObject("cor\351en", parsePosition57);
        int int64 = parsePosition57.getErrorIndex();
        java.lang.Number number65 = numberFormat13.parse("Taiwan", parsePosition57);
        java.util.Currency currency66 = numberFormat13.getCurrency();
        numberFormat13.setGroupingUsed(false);
        java.lang.StringBuffer stringBuffer70 = null;
        java.text.NumberFormat.Field field71 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition72 = new java.text.FieldPosition((java.text.Format.Field) field71);
        int int73 = fieldPosition72.getEndIndex();
        int int74 = fieldPosition72.getField();
        java.lang.String str75 = fieldPosition72.toString();
        java.text.Format.Field field76 = fieldPosition72.getFieldAttribute();
        java.text.FieldPosition fieldPosition77 = new java.text.FieldPosition(field76);
        java.text.Format.Field field78 = fieldPosition77.getFieldAttribute();
        int int79 = fieldPosition77.getBeginIndex();
        java.text.Format.Field field80 = fieldPosition77.getFieldAttribute();
        java.text.FieldPosition fieldPosition81 = new java.text.FieldPosition(field80);
        int int82 = fieldPosition81.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer83 = numberFormat13.format((double) (-148L), stringBuffer70, fieldPosition81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals(locale45.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(currency51);
        org.junit.Assert.assertEquals(currency51.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode54 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode54.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str58, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str59, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str61, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number62);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertNull(number65);
        org.junit.Assert.assertNotNull(currency66);
        org.junit.Assert.assertEquals(currency66.toString(), "XXX");
        org.junit.Assert.assertNotNull(field71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str75, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(field76);
        org.junit.Assert.assertNotNull(field78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(field80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test08321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08321");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str3 = locale0.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str6 = locale0.getDisplayName();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.setDefault(locale7);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str12 = locale7.getDisplayName(locale10);
        java.lang.String str14 = locale7.getExtension('x');
        java.lang.String str15 = locale0.getDisplayCountry(locale7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction24 = properFractionFormat20.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition23);
        int int25 = parsePosition23.getIndex();
        parsePosition23.setErrorIndex(2147483647);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale28);
        java.text.NumberFormat numberFormat30 = fractionFormat29.getDenominatorFormat();
        numberFormat30.setMinimumIntegerDigits(1728000);
        boolean boolean33 = numberFormat30.isGroupingUsed();
        numberFormat30.setMaximumIntegerDigits((int) (short) 1);
        int int36 = numberFormat30.getMaximumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = new org.apache.commons.math.fraction.FractionFormat(numberFormat30);
        java.text.ParsePosition parsePosition40 = new java.text.ParsePosition(119);
        int int41 = parsePosition40.getIndex();
        org.apache.commons.math.fraction.Fraction fraction42 = fractionFormat37.parse("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]", parsePosition40);
        boolean boolean43 = parsePosition23.equals((java.lang.Object) parsePosition40);
        java.text.NumberFormat.Field field44 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition46 = new java.text.FieldPosition((java.text.Format.Field) field44, 117);
        java.text.FieldPosition fieldPosition47 = new java.text.FieldPosition((java.text.Format.Field) field44);
        boolean boolean48 = parsePosition40.equals((java.lang.Object) field44);
        org.apache.commons.math.fraction.Fraction fraction49 = fractionFormat16.parse("java.text.ParsePosition[index=52,errorIndex=600]", parsePosition40);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zho" + "'", str3, "zho");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(fractionFormat5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str6, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en" + "'", str12, "cor\351en");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ub300\ub9cc" + "'", str15, "\ub300\ub9cc");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNull(fraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 119 + "'", int41 == 119);
        org.junit.Assert.assertNull(fraction42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(field44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(fraction49);
    }

    @Test
    public void test08322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08322");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = numberFormat1.isGroupingUsed();
        java.util.Currency currency3 = numberFormat1.getCurrency();
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        numberFormat8.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str12 = numberFormat8.format((double) 0.0f);
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        int int18 = numberFormat17.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17);
        java.text.NumberFormat numberFormat20 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8, numberFormat17, numberFormat20);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.lang.String str25 = locale23.getDisplayCountry();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getIntegerInstance(locale23);
        numberFormat26.setMinimumIntegerDigits(0);
        numberFormat26.setMinimumIntegerDigits(0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat20, numberFormat26);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.lang.String str33 = locale32.getDisplayScript();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale34.getISO3Language();
        java.lang.String str36 = locale32.getDisplayScript(locale34);
        java.lang.String str37 = locale32.toLanguageTag();
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale32);
        java.text.ParsePosition parsePosition41 = new java.text.ParsePosition((int) (short) 100);
        int int42 = parsePosition41.getErrorIndex();
        java.lang.Object obj43 = numberFormat38.parseObject("java.text.FieldPosition[field=1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=10,endIndex=0]", parsePosition41);
        properFractionFormat31.setWholeFormat(numberFormat38);
        java.util.Locale locale46 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale46);
        java.lang.String str49 = fractionFormat47.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat50 = fractionFormat47.getNumeratorFormat();
        numberFormat50.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency53 = numberFormat50.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = new org.apache.commons.math.fraction.FractionFormat(numberFormat50);
        java.util.Locale locale58 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance(locale58);
        java.lang.String[] strArray60 = java.util.Locale.getISOCountries();
        boolean boolean61 = numberFormat59.equals((java.lang.Object) strArray60);
        java.util.Locale locale65 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance(locale65);
        int int67 = numberFormat66.getMaximumIntegerDigits();
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getPercentInstance(locale68);
        boolean boolean70 = numberFormat69.isGroupingUsed();
        java.util.Currency currency71 = numberFormat69.getCurrency();
        numberFormat66.setCurrency(currency71);
        java.util.Currency currency73 = numberFormat66.getCurrency();
        java.math.RoundingMode roundingMode74 = numberFormat66.getRoundingMode();
        numberFormat59.setRoundingMode(roundingMode74);
        numberFormat50.setRoundingMode(roundingMode74);
        numberFormat50.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode79 = numberFormat50.getRoundingMode();
        numberFormat38.setRoundingMode(roundingMode79);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "XXX");
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0%" + "'", str12, "0%");
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "kor" + "'", str35, "kor");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "und" + "'", str37, "und");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertEquals(locale46.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "100 0 / 1" + "'", str49, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "XXX");
        org.junit.Assert.assertEquals(locale58.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals(locale65.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(currency71);
        org.junit.Assert.assertEquals(currency71.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency73);
        org.junit.Assert.assertEquals(currency73.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode74 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode74.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + roundingMode79 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode79.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test08323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08323");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getInstance();
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str5 = locale1.getISO3Language();
        boolean boolean6 = numberFormat0.equals((java.lang.Object) locale1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat10 = properFractionFormat9.getDenominatorFormat();
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13, numberFormat15);
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj20 = numberFormat15.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition19);
        java.lang.String str21 = parsePosition19.toString();
        boolean boolean23 = parsePosition19.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        parsePosition19.setErrorIndex(2147483647);
        java.lang.Object obj26 = numberFormat10.parseObject("\u4e2d\u6587\u4e2d\u570b)", parsePosition19);
        parsePosition19.setIndex(10);
        org.apache.commons.math.fraction.Fraction fraction29 = properFractionFormat7.parse("2,147,483,647", parsePosition19);
        java.text.NumberFormat numberFormat30 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat.Field field31 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition((java.text.Format.Field) field31, (int) '#');
        java.text.Format.Field field34 = fieldPosition33.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.negate();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction40.multiply(fraction44);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction37.add(fraction44);
        boolean boolean47 = field34.equals((java.lang.Object) fraction37);
        int int48 = fraction37.intValue();
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.negate();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.abs();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction52.abs();
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.negate();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction52.add(fraction58);
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.negate();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction61.divide(fraction64);
        org.apache.commons.math.fraction.Fraction fraction69 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction70 = fraction69.negate();
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.abs();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction70.abs();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction61.subtract(fraction72);
        org.apache.commons.math.fraction.Fraction fraction74 = fraction37.add(fraction72);
        org.apache.commons.math.fraction.Fraction fraction75 = fraction72.negate();
        java.text.NumberFormat numberFormat76 = null;
        java.text.NumberFormat numberFormat77 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat78 = new org.apache.commons.math.fraction.FractionFormat(numberFormat76, numberFormat77);
        boolean boolean79 = fraction72.equals((java.lang.Object) numberFormat77);
        org.apache.commons.math.fraction.Fraction fraction82 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 100, 20);
        org.apache.commons.math.fraction.Fraction fraction83 = fraction72.multiply(fraction82);
        java.lang.StringBuffer stringBuffer84 = null;
        java.text.NumberFormat.Field field85 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition87 = new java.text.FieldPosition((java.text.Format.Field) field85, (int) '#');
        java.text.Format.Field field88 = fieldPosition87.getFieldAttribute();
        java.text.Format.Field field89 = fieldPosition87.getFieldAttribute();
        fieldPosition87.setBeginIndex(52);
        fieldPosition87.setBeginIndex(600);
        int int94 = fieldPosition87.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer95 = properFractionFormat7.format(fraction72, stringBuffer84, fieldPosition87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str21, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(field31);
        org.junit.Assert.assertNotNull(field34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(field85);
        org.junit.Assert.assertNotNull(field88);
        org.junit.Assert.assertNotNull(field89);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 600 + "'", int94 == 600);
    }

    @Test
    public void test08324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08324");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) '#');
        java.text.Format.Field field3 = fieldPosition2.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction9.multiply(fraction13);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.add(fraction13);
        boolean boolean16 = field3.equals((java.lang.Object) fraction6);
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition(field3);
        int int18 = fieldPosition17.getField();
        fieldPosition17.setBeginIndex((int) 'a');
        int int21 = fieldPosition17.getBeginIndex();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        long long32 = fraction30.longValue();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction26.multiply(fraction30);
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.abs();
        long long44 = fraction42.longValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction38.multiply(fraction42);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction30.subtract(fraction45);
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.negate();
        double double51 = fraction49.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction55 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction56 = fraction49.multiply(fraction55);
        boolean boolean57 = fraction46.equals((java.lang.Object) fraction49);
        java.util.Locale locale58 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str59 = locale58.getDisplayLanguage();
        java.lang.String str60 = locale58.toLanguageTag();
        java.util.Locale locale61 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleAttributes();
        java.lang.String str63 = locale61.getISO3Language();
        java.lang.String str64 = locale58.getDisplayScript(locale61);
        java.util.Locale locale65 = java.util.Locale.ITALIAN;
        java.lang.String str66 = locale58.getDisplayCountry(locale65);
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance(locale58);
        boolean boolean68 = fraction49.equals((java.lang.Object) locale58);
        org.apache.commons.math.fraction.FractionFormat fractionFormat69 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale58);
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale58);
        boolean boolean71 = fieldPosition17.equals((java.lang.Object) fractionFormat70);
        int int72 = fieldPosition17.getEndIndex();
        java.text.Format.Field field73 = fieldPosition17.getFieldAttribute();
        fieldPosition17.setBeginIndex((-74));
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-0.008333333333333333d) + "'", double51 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str59, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "zh-TW" + "'", str60, "zh-TW");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "zho" + "'", str63, "zho");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Taiwan" + "'", str66, "Taiwan");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(fractionFormat69);
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(field73);
    }

    @Test
    public void test08325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08325");
        java.util.Locale locale1 = new java.util.Locale("English");
        java.lang.String str2 = locale1.getDisplayVariant();
        java.lang.String str3 = locale1.toLanguageTag();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale1);
        boolean boolean5 = numberFormat4.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        org.junit.Assert.assertEquals(locale1.toString(), "english");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "english" + "'", str3, "english");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test08326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08326");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.lang.String str7 = locale0.toLanguageTag();
        java.lang.String str8 = locale0.getScript();
        java.util.Locale locale10 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str12 = locale10.getDisplayCountry();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale10);
        java.lang.String str14 = locale10.toLanguageTag();
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder15.clearExtensions();
        java.util.Locale locale17 = builder15.build();
        java.lang.String str18 = locale17.getScript();
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str20 = locale19.getDisplayLanguage();
        java.lang.String str21 = locale19.toLanguageTag();
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str24 = locale22.getISO3Language();
        java.lang.String str25 = locale19.getDisplayScript(locale22);
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        java.lang.String str27 = locale19.getDisplayCountry(locale26);
        java.util.Locale locale29 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str30 = locale26.getDisplayLanguage(locale29);
        java.lang.String str31 = locale17.getDisplayCountry(locale29);
        java.lang.String str32 = locale10.getDisplayVariant(locale17);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getInstance(locale10);
        java.util.Locale locale34 = locale10.stripExtensions();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale10);
        java.lang.String str36 = locale0.getDisplayVariant(locale10);
        java.lang.String str37 = locale0.getISO3Country();
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale39 = locale0.stripExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str1, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-TW" + "'", str7, "zh-TW");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "und" + "'", str14, "und");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str20, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh-TW" + "'", str21, "zh-TW");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zho" + "'", str24, "zho");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Taiwan" + "'", str27, "Taiwan");
        org.junit.Assert.assertEquals(locale29.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Italian" + "'", str30, "Italian");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "TWN" + "'", str37, "TWN");
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
    }

    @Test
    public void test08327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08327");
        java.util.Locale locale3 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str4 = locale3.getDisplayVariant();
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale locale10 = locale8.stripExtensions();
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale11);
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        boolean boolean14 = locale11.hasExtensions();
        java.lang.String str15 = locale8.getDisplayScript(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale11);
        java.lang.String str17 = locale3.getDisplayScript(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.util.Locale locale20 = locale19.stripExtensions();
        java.util.Locale locale22 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        java.lang.String str24 = locale22.getDisplayCountry();
        java.lang.String str25 = locale19.getDisplayName(locale22);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale28.getISO3Language();
        java.lang.String str30 = locale26.getDisplayScript(locale28);
        java.lang.String str31 = locale19.getDisplayLanguage(locale28);
        java.lang.String str32 = locale19.toLanguageTag();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance(locale19);
        int int34 = numberFormat33.getMinimumFractionDigits();
        java.util.Locale locale39 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        int int41 = numberFormat40.getMaximumIntegerDigits();
        java.util.Locale locale45 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale45);
        numberFormat46.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency49 = numberFormat46.getCurrency();
        numberFormat40.setCurrency(currency49);
        numberFormat40.setGroupingUsed(false);
        java.lang.String str54 = numberFormat40.format((double) (short) 2);
        java.text.ParsePosition parsePosition57 = new java.text.ParsePosition((int) (byte) 0);
        java.lang.Object obj58 = numberFormat40.parseObject("1%", parsePosition57);
        java.lang.Number number59 = numberFormat33.parse("TAIWAN", parsePosition57);
        fractionFormat18.setDenominatorFormat(numberFormat33);
        int int61 = numberFormat33.getMinimumFractionDigits();
        numberFormat33.setMaximumFractionDigits((int) ' ');
        org.junit.Assert.assertEquals(locale3.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "10,000%" + "'", str4, "10,000%");
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Korean" + "'", str25, "Korean");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "kor" + "'", str29, "kor");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str31, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ko" + "'", str32, "ko");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals(locale39.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertEquals(locale45.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "200%" + "'", str54, "200%");
        org.junit.Assert.assertEquals("'" + obj58 + "' != '" + 0.01d + "'", obj58, 0.01d);
        org.junit.Assert.assertNull(number59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test08328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08328");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        boolean boolean4 = numberFormat3.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        boolean boolean6 = numberFormat3.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance(locale8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.util.Currency currency11 = numberFormat9.getCurrency();
        fractionFormat7.setNumeratorFormat(numberFormat9);
        java.text.NumberFormat numberFormat13 = fractionFormat7.getDenominatorFormat();
        java.util.Locale locale15 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        java.lang.String str18 = fractionFormat16.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat19 = fractionFormat16.getNumeratorFormat();
        numberFormat19.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency22 = numberFormat19.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19);
        java.lang.Number number25 = numberFormat19.parse("9,700%");
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str29 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction28);
        float float30 = fraction28.floatValue();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction28.negate();
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        int int37 = numberFormat36.getMaximumIntegerDigits();
        int int38 = numberFormat36.getMaximumFractionDigits();
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getInstance(locale39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = new org.apache.commons.math.fraction.FractionFormat(numberFormat40, numberFormat42);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = new org.apache.commons.math.fraction.FractionFormat(numberFormat36, numberFormat40);
        boolean boolean45 = fraction31.equals((java.lang.Object) fractionFormat44);
        java.text.NumberFormat numberFormat46 = fractionFormat44.getNumeratorFormat();
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getInstance(locale48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = new org.apache.commons.math.fraction.FractionFormat(numberFormat49, numberFormat51);
        numberFormat51.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field56 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition57 = new java.text.FieldPosition((java.text.Format.Field) field56);
        java.lang.String str58 = fieldPosition57.toString();
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale60 = java.util.Locale.ROOT;
        java.lang.String str61 = locale60.getDisplayScript();
        java.lang.String str62 = locale59.getDisplayName(locale60);
        boolean boolean63 = fieldPosition57.equals((java.lang.Object) locale60);
        fieldPosition57.setEndIndex((int) '#');
        java.util.Locale locale66 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getCurrencyInstance(locale66);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        java.text.ParsePosition parsePosition71 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction72 = properFractionFormat68.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition71);
        boolean boolean73 = fieldPosition57.equals((java.lang.Object) parsePosition71);
        java.lang.Number number74 = numberFormat51.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition71);
        int int75 = parsePosition71.getIndex();
        java.lang.String str76 = parsePosition71.toString();
        java.lang.Object obj77 = null;
        boolean boolean78 = parsePosition71.equals(obj77);
        java.lang.Object obj79 = numberFormat46.parseObject("java.text.ParsePosition[index=1,errorIndex=1]", parsePosition71);
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getPercentInstance(locale80);
        boolean boolean82 = numberFormat81.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        numberFormat81.setMaximumFractionDigits((int) (byte) -120);
        org.apache.commons.math.fraction.FractionFormat fractionFormat86 = new org.apache.commons.math.fraction.FractionFormat(numberFormat46, numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat87 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat19, numberFormat46);
        java.math.RoundingMode roundingMode88 = numberFormat46.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number90 = numberFormat46.parse("\u6cd5\u6587");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"??\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "100 0 / 1" + "'", str18, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + 9700L + "'", number25, 9700L);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1 / 1" + "'", str29, "1 / 1");
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 1.0f + "'", float30 == 1.0f);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(field56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str58, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Chinese (Taiwan)" + "'", str62, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNull(fraction72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(number74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str76, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + roundingMode88 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode88.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test08329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08329");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = numberFormat1.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str5 = numberFormat1.format(0.008333333333333333d);
        boolean boolean6 = numberFormat1.isParseIntegerOnly();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) '4');
        parsePosition9.setErrorIndex(600);
        java.lang.String str12 = parsePosition9.toString();
        java.lang.Object obj13 = numberFormat1.parseObject("java.text.NumberFormat$Field(exponent)", parsePosition9);
        int int14 = numberFormat1.getMaximumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1%" + "'", str5, "1%");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.text.ParsePosition[index=52,errorIndex=600]" + "'", str12, "java.text.ParsePosition[index=52,errorIndex=600]");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
    }

    @Test
    public void test08330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08330");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        java.math.RoundingMode roundingMode12 = numberFormat4.getRoundingMode();
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) 'a');
        java.lang.String str16 = parsePosition15.toString();
        java.lang.String str17 = parsePosition15.toString();
        java.lang.Object obj18 = numberFormat4.parseObject("zho", parsePosition15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode12 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode12.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str16, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str17, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test08331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08331");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        numberFormat5.setGroupingUsed(true);
        java.util.Currency currency12 = numberFormat5.getCurrency();
        numberFormat5.setMaximumFractionDigits((int) (byte) 100);
        numberFormat5.setMinimumFractionDigits(0);
        java.util.Locale locale20 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        int int22 = numberFormat21.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21);
        numberFormat21.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode26 = numberFormat21.getRoundingMode();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency28 = numberFormat27.getCurrency();
        numberFormat21.setCurrency(currency28);
        numberFormat21.setGroupingUsed(false);
        java.lang.String str33 = numberFormat21.format((double) 1L);
        numberFormat21.setMinimumFractionDigits(1);
        java.lang.String str36 = numberFormat5.format((java.lang.Object) 1);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "XXX");
        org.junit.Assert.assertEquals(locale20.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode26 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode26.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "100%" + "'", str33, "100%");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
    }

    @Test
    public void test08332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08332");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale1.stripExtensions();
        java.lang.String str4 = locale3.getDisplayScript();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getNumberInstance(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getIntegerInstance(locale3);
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "kor");
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "kor");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "kor");
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
    }

    @Test
    public void test08333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08333");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, 1);
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 100);
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str7 = field0.toString();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency9 = numberFormat8.getCurrency();
        java.lang.String str11 = numberFormat8.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.NumberFormat numberFormat13 = properFractionFormat12.getWholeFormat();
        java.text.NumberFormat numberFormat14 = properFractionFormat12.getWholeFormat();
        boolean boolean15 = field0.equals((java.lang.Object) numberFormat14);
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition((java.text.Format.Field) field0, 119);
        java.text.FieldPosition fieldPosition19 = new java.text.FieldPosition((java.text.Format.Field) field0, 51);
        java.text.Format.Field field20 = fieldPosition19.getFieldAttribute();
        java.lang.String str21 = field20.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.text.NumberFormat$Field(grouping separator)" + "'", str7, "java.text.NumberFormat$Field(grouping separator)");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100%" + "'", str11, "100%");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(field20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.text.NumberFormat$Field(grouping separator)" + "'", str21, "java.text.NumberFormat$Field(grouping separator)");
    }

    @Test
    public void test08334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08334");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale2 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.lang.String str4 = locale0.getISO3Language();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale0);
        java.lang.StringBuffer stringBuffer7 = null;
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field8);
        int int10 = fieldPosition9.getEndIndex();
        fieldPosition9.setBeginIndex((int) (byte) 100);
        java.util.Locale locale14 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str17 = fractionFormat15.format((java.lang.Object) 100);
        boolean boolean18 = fieldPosition9.equals((java.lang.Object) fractionFormat15);
        java.text.Format.Field field19 = fieldPosition9.getFieldAttribute();
        int int20 = fieldPosition9.getField();
        java.text.Format.Field field21 = fieldPosition9.getFieldAttribute();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23, numberFormat25);
        numberFormat25.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field30 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition31 = new java.text.FieldPosition((java.text.Format.Field) field30);
        java.lang.String str32 = fieldPosition31.toString();
        java.util.Locale locale33 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = locale34.getDisplayScript();
        java.lang.String str36 = locale33.getDisplayName(locale34);
        boolean boolean37 = fieldPosition31.equals((java.lang.Object) locale34);
        fieldPosition31.setEndIndex((int) '#');
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getCurrencyInstance(locale40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        java.text.ParsePosition parsePosition45 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction46 = properFractionFormat42.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition45);
        boolean boolean47 = fieldPosition31.equals((java.lang.Object) parsePosition45);
        java.lang.Number number48 = numberFormat25.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition45);
        java.lang.Object obj49 = numberFormat25.clone();
        boolean boolean50 = field21.equals(obj49);
        java.text.FieldPosition fieldPosition52 = new java.text.FieldPosition(field21, 8654399);
        java.text.FieldPosition fieldPosition53 = new java.text.FieldPosition(field21);
        java.text.FieldPosition fieldPosition54 = new java.text.FieldPosition(field21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer55 = numberFormat5.format((double) 32L, stringBuffer7, fieldPosition54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zho" + "'", str4, "zho");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "100 0 / 1" + "'", str17, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(field19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(field21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(field30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str32, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese (Taiwan)" + "'", str36, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNull(fraction46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(number48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test08335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08335");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str5 = locale0.getCountry();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale13 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category6, locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.PRC;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.util.Locale.setDefault(category6, locale15);
        java.util.Locale locale19 = java.util.Locale.getDefault(category6);
        java.lang.String str20 = locale0.getDisplayCountry(locale19);
        java.lang.String str21 = locale0.getDisplayScript();
        java.util.Locale locale23 = new java.util.Locale("0%");
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        boolean boolean25 = locale0.equals((java.lang.Object) locale23);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "kor");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals(locale13.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str17, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals(locale23.toString(), "0%");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test08336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08336");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale.setDefault(locale0);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale0);
        int int4 = numberFormat3.getMaximumFractionDigits();
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale5);
        boolean boolean7 = numberFormat6.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.text.NumberFormat numberFormat9 = properFractionFormat8.getWholeFormat();
        java.math.RoundingMode roundingMode10 = numberFormat9.getRoundingMode();
        numberFormat3.setRoundingMode(roundingMode10);
        numberFormat3.setMinimumFractionDigits(50112000);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + roundingMode10 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode10.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test08337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08337");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat14 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat15 = properFractionFormat3.getWholeFormat();
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        int int21 = numberFormat20.getMinimumIntegerDigits();
        java.lang.String str23 = numberFormat20.format((long) 1);
        int int24 = numberFormat20.getMaximumIntegerDigits();
        java.text.NumberFormat.Field field26 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition27 = new java.text.FieldPosition((java.text.Format.Field) field26);
        java.lang.String str28 = fieldPosition27.toString();
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = locale29.getDisplayName(locale30);
        boolean boolean33 = fieldPosition27.equals((java.lang.Object) locale30);
        fieldPosition27.setEndIndex((int) '#');
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getCurrencyInstance(locale36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.text.ParsePosition parsePosition41 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction42 = properFractionFormat38.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition41);
        boolean boolean43 = fieldPosition27.equals((java.lang.Object) parsePosition41);
        int int44 = parsePosition41.getIndex();
        java.lang.Number number45 = numberFormat20.parse("", parsePosition41);
        properFractionFormat3.setWholeFormat(numberFormat20);
        java.text.NumberFormat numberFormat47 = properFractionFormat3.getWholeFormat();
        java.lang.StringBuffer stringBuffer49 = null;
        java.text.NumberFormat.Field field50 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition52 = new java.text.FieldPosition((java.text.Format.Field) field50, (int) '#');
        java.text.Format.Field field53 = fieldPosition52.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction59 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction62 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction63 = fraction62.negate();
        org.apache.commons.math.fraction.Fraction fraction64 = fraction59.multiply(fraction63);
        org.apache.commons.math.fraction.Fraction fraction65 = fraction56.add(fraction63);
        boolean boolean66 = field53.equals((java.lang.Object) fraction56);
        java.text.FieldPosition fieldPosition67 = new java.text.FieldPosition(field53);
        java.text.Format.Field field68 = fieldPosition67.getFieldAttribute();
        int int69 = fieldPosition67.getEndIndex();
        java.text.Format.Field field70 = fieldPosition67.getFieldAttribute();
        fieldPosition67.setBeginIndex((int) 'u');
        java.lang.String str73 = fieldPosition67.toString();
        int int74 = fieldPosition67.getField();
        java.text.Format.Field field75 = fieldPosition67.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer76 = numberFormat47.format((long) (short) 35, stringBuffer49, fieldPosition67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "100%" + "'", str23, "100%");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(field26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str28, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (Taiwan)" + "'", str32, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNull(fraction42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNull(number45);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(field50);
        org.junit.Assert.assertNotNull(field53);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(field68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(field70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=117,endIndex=0]" + "'", str73, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=117,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(field75);
    }

    @Test
    public void test08338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08338");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        java.lang.Object obj14 = numberFormat4.clone();
        java.lang.Object obj16 = numberFormat4.parseObject("-100%");
        numberFormat4.setMaximumFractionDigits(3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale21.getISO3Language();
        java.util.Locale.setDefault(category20, locale21);
        java.lang.String str24 = locale21.getDisplayVariant();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getIntegerInstance(locale21);
        numberFormat25.setMaximumIntegerDigits((int) (byte) 0);
        properFractionFormat19.setDenominatorFormat(numberFormat25);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        java.lang.Object obj33 = properFractionFormat32.clone();
        java.text.NumberFormat numberFormat34 = properFractionFormat32.getWholeFormat();
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale35.getDisplayScript();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale37.getISO3Language();
        java.lang.String str39 = locale35.getDisplayScript(locale37);
        java.lang.String str40 = locale35.toLanguageTag();
        java.util.Set<java.lang.String> strSet41 = locale35.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getCurrencyInstance(locale35);
        java.lang.Object obj43 = numberFormat42.clone();
        java.util.Locale locale47 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        int int49 = numberFormat48.getMaximumIntegerDigits();
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale50);
        boolean boolean52 = numberFormat51.isGroupingUsed();
        java.util.Currency currency53 = numberFormat51.getCurrency();
        numberFormat48.setCurrency(currency53);
        java.util.Currency currency55 = numberFormat48.getCurrency();
        numberFormat42.setCurrency(currency55);
        properFractionFormat32.setWholeFormat(numberFormat42);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale59.getISO3Language();
        java.util.Set<java.lang.Character> charSet61 = locale59.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale59);
        java.text.ParsePosition parsePosition66 = new java.text.ParsePosition(599);
        org.apache.commons.math.fraction.Fraction fraction67 = fractionFormat63.parse("english", parsePosition66);
        int int68 = parsePosition66.getIndex();
        org.apache.commons.math.fraction.Fraction fraction69 = properFractionFormat32.parse("1%", parsePosition66);
        org.apache.commons.math.fraction.Fraction fraction70 = properFractionFormat19.parse("\244 64.00", parsePosition66);
        java.lang.Object obj71 = null;
        java.lang.StringBuffer stringBuffer72 = null;
        java.text.NumberFormat.Field field73 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition74 = new java.text.FieldPosition((java.text.Format.Field) field73);
        java.text.FieldPosition fieldPosition76 = new java.text.FieldPosition((java.text.Format.Field) field73, 1);
        java.text.FieldPosition fieldPosition78 = new java.text.FieldPosition((java.text.Format.Field) field73, (int) (short) 100);
        java.util.Locale.Builder builder79 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder80 = builder79.clearExtensions();
        java.util.Locale.Builder builder81 = builder79.clear();
        java.util.Locale.Builder builder82 = builder79.clear();
        java.util.Locale.Builder builder85 = builder82.setExtension('a', "TWN");
        java.util.Locale.Builder builder87 = builder85.setLanguageTag("Canada");
        boolean boolean88 = field73.equals((java.lang.Object) builder85);
        java.text.FieldPosition fieldPosition89 = new java.text.FieldPosition((java.text.Format.Field) field73);
        fieldPosition89.setEndIndex(17);
        int int92 = fieldPosition89.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer93 = properFractionFormat19.format(obj71, stringBuffer72, fieldPosition89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + (-1L) + "'", obj16, (-1L));
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "kor" + "'", str38, "kor");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "und" + "'", str40, "und");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(locale47.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency55);
        org.junit.Assert.assertEquals(currency55.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "kor" + "'", str60, "kor");
        org.junit.Assert.assertNotNull(charSet61);
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertNotNull(fractionFormat63);
        org.junit.Assert.assertNull(fraction67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 599 + "'", int68 == 599);
        org.junit.Assert.assertNull(fraction69);
        org.junit.Assert.assertNull(fraction70);
        org.junit.Assert.assertNotNull(field73);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 17 + "'", int92 == 17);
    }

    @Test
    public void test08339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08339");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        java.math.RoundingMode roundingMode12 = numberFormat4.getRoundingMode();
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) 'a');
        java.lang.String str16 = parsePosition15.toString();
        java.lang.String str17 = parsePosition15.toString();
        java.lang.Object obj18 = numberFormat4.parseObject("zho", parsePosition15);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getCurrencyInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.text.ParsePosition parsePosition25 = new java.text.ParsePosition((int) '#');
        java.lang.Object obj26 = properFractionFormat22.parseObject("", parsePosition25);
        parsePosition25.setErrorIndex((-1));
        parsePosition25.setIndex(120);
        java.lang.Object obj31 = numberFormat4.parseObject("", parsePosition25);
        numberFormat4.setMaximumFractionDigits(51);
        java.lang.StringBuffer stringBuffer35 = null;
        java.text.FieldPosition fieldPosition37 = new java.text.FieldPosition(96);
        int int38 = fieldPosition37.getField();
        fieldPosition37.setEndIndex((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer41 = numberFormat4.format((java.lang.Object) "Chinese (China)", stringBuffer35, fieldPosition37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode12 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode12.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str16, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str17, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 96 + "'", int38 == 96);
    }

    @Test
    public void test08340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08340");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.lang.String str9 = locale6.getDisplayCountry(locale7);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getNumberInstance(locale6);
        java.lang.String str11 = locale5.getDisplayCountry(locale6);
        java.lang.String str12 = locale5.getScript();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale5);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) '4');
        parsePosition15.setErrorIndex(600);
        boolean boolean18 = numberFormat13.equals((java.lang.Object) parsePosition15);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08341");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale6.getISO3Language();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale4);
        numberFormat9.setParseIntegerOnly(false);
        numberFormat9.setMaximumFractionDigits((int) (byte) 0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance();
        int int16 = numberFormat15.getMaximumFractionDigits();
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.util.Locale locale18 = locale17.stripExtensions();
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        java.lang.String str23 = locale17.getDisplayName(locale20);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale24.getDisplayScript();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale26.getISO3Language();
        java.lang.String str28 = locale24.getDisplayScript(locale26);
        java.lang.String str29 = locale17.getDisplayLanguage(locale26);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getNumberInstance(locale17);
        java.util.Currency currency31 = numberFormat30.getCurrency();
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        long long42 = fraction40.longValue();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction36.multiply(fraction40);
        boolean boolean44 = numberFormat30.equals((java.lang.Object) fraction36);
        numberFormat30.setGroupingUsed(false);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean51 = numberFormat49.equals((java.lang.Object) numberFormat50);
        java.lang.Object obj52 = numberFormat50.clone();
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean57 = numberFormat55.equals((java.lang.Object) numberFormat56);
        java.util.Locale locale62 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance(locale62);
        int int64 = numberFormat63.getMaximumIntegerDigits();
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance(locale65);
        boolean boolean67 = numberFormat66.isGroupingUsed();
        java.util.Currency currency68 = numberFormat66.getCurrency();
        numberFormat63.setCurrency(currency68);
        java.util.Currency currency70 = numberFormat63.getCurrency();
        java.math.RoundingMode roundingMode71 = numberFormat63.getRoundingMode();
        java.text.ParsePosition parsePosition74 = new java.text.ParsePosition((int) 'a');
        java.lang.String str75 = parsePosition74.toString();
        java.lang.String str76 = parsePosition74.toString();
        java.lang.Object obj77 = numberFormat63.parseObject("zho", parsePosition74);
        java.lang.String str78 = parsePosition74.toString();
        java.lang.Number number79 = numberFormat56.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition74);
        java.lang.Object obj80 = numberFormat50.parseObject("cor\351en", parsePosition74);
        int int81 = parsePosition74.getErrorIndex();
        java.lang.Number number82 = numberFormat30.parse("Taiwan", parsePosition74);
        java.util.Currency currency83 = numberFormat30.getCurrency();
        numberFormat15.setCurrency(currency83);
        numberFormat9.setCurrency(currency83);
        java.util.Locale locale86 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet87 = locale86.getUnicodeLocaleAttributes();
        java.util.Locale locale88 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str89 = locale86.getDisplayScript(locale88);
        java.lang.String str90 = locale86.getISO3Language();
        java.text.NumberFormat numberFormat91 = java.text.NumberFormat.getInstance(locale86);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat92 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3, numberFormat9, numberFormat91);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Chinese (Taiwan)" + "'", str23, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "kor" + "'", str27, "kor");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str29, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(currency31);
        org.junit.Assert.assertEquals(currency31.toString(), "TWD");
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals(locale62.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(currency68);
        org.junit.Assert.assertEquals(currency68.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency70);
        org.junit.Assert.assertEquals(currency70.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode71 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode71.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str75, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str76, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str78, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number79);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 97 + "'", int81 == 97);
        org.junit.Assert.assertNull(number82);
        org.junit.Assert.assertNotNull(currency83);
        org.junit.Assert.assertEquals(currency83.toString(), "TWD");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "zho" + "'", str90, "zho");
        org.junit.Assert.assertNotNull(numberFormat91);
    }

    @Test
    public void test08342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08342");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale0);
        numberFormat5.setMaximumIntegerDigits(3);
        java.math.RoundingMode roundingMode8 = numberFormat5.getRoundingMode();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        long long19 = fraction17.longValue();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction13.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction23 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str24 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction23);
        long long25 = fraction23.longValue();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction13.add(fraction23);
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance(locale28);
        boolean boolean30 = numberFormat29.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getInstance(locale32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33, numberFormat35);
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj40 = numberFormat35.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition39);
        properFractionFormat31.setNumeratorFormat(numberFormat35);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getInstance(locale42);
        boolean boolean44 = numberFormat43.isParseIntegerOnly();
        numberFormat43.setGroupingUsed(false);
        properFractionFormat31.setWholeFormat(numberFormat43);
        numberFormat43.setMinimumFractionDigits((int) 'u');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.util.Locale locale52 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getInstance(locale52);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = new org.apache.commons.math.fraction.FractionFormat(numberFormat53, numberFormat55);
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj60 = numberFormat55.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition59);
        org.apache.commons.math.fraction.Fraction fraction61 = properFractionFormat50.parse("214,748,364,700%", parsePosition59);
        boolean boolean62 = fraction23.equals((java.lang.Object) properFractionFormat50);
        java.text.NumberFormat numberFormat63 = properFractionFormat50.getWholeFormat();
        boolean boolean64 = numberFormat63.isGroupingUsed();
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance(locale65);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat66);
        java.lang.Object obj68 = numberFormat66.clone();
        java.lang.String str70 = numberFormat66.format((double) 0.016666668f);
        java.util.Currency currency71 = numberFormat66.getCurrency();
        numberFormat63.setCurrency(currency71);
        numberFormat5.setCurrency(currency71);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode8.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1 / 100" + "'", str24, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(fraction61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2%" + "'", str70, "2%");
        org.junit.Assert.assertNotNull(currency71);
        org.junit.Assert.assertEquals(currency71.toString(), "XXX");
    }

    @Test
    public void test08343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08343");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction13 = properFractionFormat9.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition12);
        java.lang.Object obj14 = numberFormat1.parseObject("zh-TW", parsePosition12);
        numberFormat1.setMinimumIntegerDigits((int) (byte) 0);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        boolean boolean19 = numberFormat18.isParseIntegerOnly();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.lang.String str23 = locale20.getISO3Country();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale20);
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        int int30 = numberFormat29.getMaximumIntegerDigits();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        boolean boolean33 = numberFormat32.isGroupingUsed();
        java.util.Currency currency34 = numberFormat32.getCurrency();
        numberFormat29.setCurrency(currency34);
        java.util.Currency currency36 = numberFormat29.getCurrency();
        int int37 = numberFormat29.getMaximumFractionDigits();
        java.lang.Object obj38 = numberFormat29.clone();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        numberFormat40.setMaximumFractionDigits(100);
        numberFormat40.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str47 = numberFormat40.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat29, numberFormat40);
        numberFormat40.setMinimumIntegerDigits(600);
        numberFormat40.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat18, numberFormat40);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance();
        numberFormat54.setMaximumIntegerDigits(2147483647);
        java.lang.String str58 = numberFormat54.format((long) 2147483647);
        java.util.Locale locale59 = java.util.Locale.getDefault();
        java.util.Locale locale60 = locale59.stripExtensions();
        java.util.Locale locale62 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale62);
        java.lang.String str64 = locale62.getDisplayCountry();
        java.lang.String str65 = locale59.getDisplayName(locale62);
        java.util.Locale locale66 = java.util.Locale.ROOT;
        java.lang.String str67 = locale66.getDisplayScript();
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.lang.String str69 = locale68.getISO3Language();
        java.lang.String str70 = locale66.getDisplayScript(locale68);
        java.lang.String str71 = locale59.getDisplayLanguage(locale68);
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getNumberInstance(locale59);
        java.util.Currency currency73 = numberFormat72.getCurrency();
        numberFormat54.setCurrency(currency73);
        org.apache.commons.math.fraction.FractionFormat fractionFormat75 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat54);
        numberFormat54.setMaximumFractionDigits((-5));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNull(fraction13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100%" + "'", str47, "100%");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "214,748,364,700%" + "'", str58, "214,748,364,700%");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale62.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Chinese (Taiwan)" + "'", str65, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "kor" + "'", str69, "kor");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str71, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(currency73);
        org.junit.Assert.assertEquals(currency73.toString(), "TWD");
    }

    @Test
    public void test08344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08344");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat6 = fractionFormat2.getNumeratorFormat();
        java.util.Locale locale7 = java.util.Locale.ITALY;
        boolean boolean8 = numberFormat6.equals((java.lang.Object) locale7);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.setScript("");
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.lang.String str14 = locale12.toLanguageTag();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale15.getISO3Language();
        java.lang.String str18 = locale12.getDisplayScript(locale15);
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str20 = locale12.getDisplayCountry(locale19);
        java.util.Locale.Builder builder21 = builder9.setLocale(locale19);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance(locale19);
        java.lang.String str23 = locale7.getDisplayVariant(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale19);
        java.util.Locale.setDefault(locale19);
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance(locale26);
        java.lang.String str29 = locale26.getDisplayScript();
        java.util.Locale locale32 = new java.util.Locale("Chinese", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.lang.String str34 = locale26.getDisplayScript(locale32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str36 = locale19.getDisplayCountry(locale26);
        java.lang.String str37 = locale19.getVariant();
        java.lang.Object obj38 = locale19.clone();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Chinese" + "'", str13, "Chinese");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh-TW" + "'", str14, "zh-TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zho" + "'", str17, "zho");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Taiwan" + "'", str20, "Taiwan");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals(locale32.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "it");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "it");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "it");
    }

    @Test
    public void test08345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08345");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.lang.Object obj6 = numberFormat4.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance(locale8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str15 = fractionFormat13.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat16 = fractionFormat13.getNumeratorFormat();
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.util.Locale locale18 = locale17.stripExtensions();
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        java.lang.String str23 = locale17.getDisplayName(locale20);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale24.getDisplayScript();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale26.getISO3Language();
        java.lang.String str28 = locale24.getDisplayScript(locale26);
        java.lang.String str29 = locale17.getDisplayLanguage(locale26);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getNumberInstance(locale17);
        fractionFormat13.setNumeratorFormat(numberFormat30);
        properFractionFormat10.setWholeFormat(numberFormat30);
        fractionFormat7.setNumeratorFormat(numberFormat30);
        fractionFormat1.setNumeratorFormat(numberFormat30);
        java.text.NumberFormat numberFormat35 = fractionFormat1.getNumeratorFormat();
        java.util.Locale locale37 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale37);
        java.lang.String str39 = locale37.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale37);
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        int int46 = numberFormat45.getMaximumIntegerDigits();
        fractionFormat40.setDenominatorFormat(numberFormat45);
        fractionFormat1.setNumeratorFormat(numberFormat45);
        numberFormat45.setGroupingUsed(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj52 = numberFormat45.parseObject("-2,100.0%");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "100 0 / 1" + "'", str15, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Italian" + "'", str23, "Italian");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "kor" + "'", str27, "kor");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str29, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals(locale37.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
    }

    @Test
    public void test08346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08346");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        numberFormat2.setMinimumIntegerDigits(1728000);
        boolean boolean5 = numberFormat2.isGroupingUsed();
        numberFormat2.setMaximumIntegerDigits((int) (short) 1);
        int int8 = numberFormat2.getMaximumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2);
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale10.getDisplayCountry(locale11);
        java.util.Set<java.lang.String> strSet14 = locale11.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale11);
        int int16 = numberFormat15.getMaximumIntegerDigits();
        boolean boolean17 = numberFormat15.isParseIntegerOnly();
        int int18 = numberFormat15.getMaximumFractionDigits();
        numberFormat15.setMinimumIntegerDigits(52);
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance(locale21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat22, numberFormat24);
        numberFormat24.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field29 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition30 = new java.text.FieldPosition((java.text.Format.Field) field29);
        java.lang.String str31 = fieldPosition30.toString();
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.lang.String str34 = locale33.getDisplayScript();
        java.lang.String str35 = locale32.getDisplayName(locale33);
        boolean boolean36 = fieldPosition30.equals((java.lang.Object) locale33);
        fieldPosition30.setEndIndex((int) '#');
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getCurrencyInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.text.ParsePosition parsePosition44 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction45 = properFractionFormat41.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition44);
        boolean boolean46 = fieldPosition30.equals((java.lang.Object) parsePosition44);
        java.lang.Number number47 = numberFormat24.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition44);
        java.lang.String str49 = numberFormat24.format((long) '#');
        java.util.Locale locale50 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.lang.String str52 = locale50.toLanguageTag();
        java.util.Locale locale53 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleAttributes();
        java.lang.String str55 = locale53.getISO3Language();
        java.lang.String str56 = locale50.getDisplayScript(locale53);
        java.util.Locale locale57 = java.util.Locale.ITALIAN;
        java.lang.String str58 = locale50.getDisplayCountry(locale57);
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale50);
        java.text.NumberFormat numberFormat60 = fractionFormat59.getDenominatorFormat();
        java.math.RoundingMode roundingMode61 = numberFormat60.getRoundingMode();
        numberFormat24.setRoundingMode(roundingMode61);
        numberFormat15.setRoundingMode(roundingMode61);
        numberFormat15.setMaximumFractionDigits((-1));
        fractionFormat9.setNumeratorFormat(numberFormat15);
        java.text.NumberFormat.Field field68 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition69 = new java.text.FieldPosition((java.text.Format.Field) field68);
        java.lang.String str70 = fieldPosition69.toString();
        java.util.Locale locale71 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale72 = java.util.Locale.ROOT;
        java.lang.String str73 = locale72.getDisplayScript();
        java.lang.String str74 = locale71.getDisplayName(locale72);
        boolean boolean75 = fieldPosition69.equals((java.lang.Object) locale72);
        fieldPosition69.setEndIndex((int) '#');
        java.util.Locale locale78 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat79 = java.text.NumberFormat.getCurrencyInstance(locale78);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat79);
        java.text.ParsePosition parsePosition83 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction84 = properFractionFormat80.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition83);
        boolean boolean85 = fieldPosition69.equals((java.lang.Object) parsePosition83);
        java.lang.String str86 = parsePosition83.toString();
        int int87 = parsePosition83.getIndex();
        int int88 = parsePosition83.getIndex();
        java.lang.Object obj89 = numberFormat15.parseObject("java.text.ParsePosition[index=0,errorIndex=3]", parsePosition83);
        java.lang.String str90 = parsePosition83.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Japan" + "'", str13, "Japan");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(field29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str31, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Chinese (Taiwan)" + "'", str35, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNull(fraction45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(number47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "3,500.0000000000000000000000000000000000000000000000000000%" + "'", str49, "3,500.0000000000000000000000000000000000000000000000000000%");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "cinese" + "'", str51, "cinese");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "zh-TW" + "'", str52, "zh-TW");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "zho" + "'", str55, "zho");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Taiwan" + "'", str58, "Taiwan");
        org.junit.Assert.assertNotNull(fractionFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + roundingMode61 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode61.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(field68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str70, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Chinese (Taiwan)" + "'", str74, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNull(fraction84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str86, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str90, "java.text.ParsePosition[index=1,errorIndex=1]");
    }

    @Test
    public void test08347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08347");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale11.getScript();
        java.lang.String str13 = locale11.getDisplayName();
        java.util.Locale locale14 = locale11.stripExtensions();
        java.lang.String str15 = locale14.getCountry();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder16.setScript("");
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.lang.String str22 = locale19.getDisplayLanguage(locale21);
        java.util.Locale.Builder builder23 = builder18.setLocale(locale19);
        java.util.Locale.Builder builder24 = builder23.clearExtensions();
        java.util.Locale locale25 = builder23.build();
        java.util.Locale.Builder builder27 = builder23.removeUnicodeLocaleAttribute("eng");
        java.util.Locale locale28 = builder23.build();
        java.lang.String str29 = locale14.getDisplayLanguage(locale28);
        java.util.Locale.setDefault(category0, locale14);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinesisch" + "'", str22, "Chinesisch");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u97d3\u6587" + "'", str29, "\u97d3\u6587");
    }

    @Test
    public void test08348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08348");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Set<java.lang.Character> charSet6 = locale4.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.lang.String str8 = locale1.getDisplayVariant(locale4);
        java.util.Locale.setDefault(locale4);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kor" + "'", str5, "kor");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test08349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08349");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale3.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder7 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale locale9 = builder7.build();
        java.lang.String str10 = locale9.toLanguageTag();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        java.util.Locale locale18 = new java.util.Locale("Chinese (China)", "cor\351en", "100%");
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction22.abs();
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale25);
        java.util.Locale locale27 = java.util.Locale.getDefault();
        boolean boolean28 = numberFormat26.equals((java.lang.Object) locale27);
        boolean boolean29 = fraction24.equals((java.lang.Object) locale27);
        java.lang.String str30 = locale18.getDisplayVariant(locale27);
        boolean boolean31 = locale27.hasExtensions();
        java.lang.String str32 = locale9.getDisplayName(locale27);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh-TW" + "'", str10, "zh-TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese" + "'", str14, "Chinese");
        org.junit.Assert.assertEquals(locale18.toString(), "chinese (china)_COR\351EN_100%");
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100%" + "'", str30, "100%");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str32, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
    }

    @Test
    public void test08350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08350");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        float float4 = fraction2.floatValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.negate();
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        int int12 = numberFormat10.getMaximumFractionDigits();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat14);
        boolean boolean19 = fraction5.equals((java.lang.Object) fractionFormat18);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction21.add(fraction27);
        double double29 = fraction27.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction5.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction33 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str34 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction33);
        long long35 = fraction33.longValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction41 = fraction36.divide(fraction40);
        double double42 = fraction36.doubleValue();
        int int43 = fraction36.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction27.multiply(fraction36);
        org.apache.commons.math.fraction.Fraction fraction48 = new org.apache.commons.math.fraction.Fraction((double) 120L, (double) 35, 2);
        int int49 = fraction48.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction27.add(fraction48);
        float float51 = fraction48.floatValue();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction48.negate();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.negate();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1 / 1" + "'", str3, "1 / 1");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.008333333333333333d + "'", double29 == 0.008333333333333333d);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1 / 100" + "'", str34, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.01d + "'", double42 == 0.01d);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 120 + "'", int49 == 120);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 120.0f + "'", float51 == 120.0f);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
    }

    @Test
    public void test08351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08351");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        long long4 = fraction2.longValue();
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale14 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        numberFormat15.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency18 = numberFormat15.getCurrency();
        numberFormat9.setCurrency(currency18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        boolean boolean21 = fraction2.equals((java.lang.Object) properFractionFormat20);
        java.text.NumberFormat numberFormat22 = properFractionFormat20.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.lang.String str24 = locale23.toLanguageTag();
        java.lang.String str26 = locale23.getExtension('x');
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale23);
        java.text.NumberFormat.Field field29 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition30 = new java.text.FieldPosition((java.text.Format.Field) field29);
        java.lang.String str31 = fieldPosition30.toString();
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.lang.String str34 = locale33.getDisplayScript();
        java.lang.String str35 = locale32.getDisplayName(locale33);
        boolean boolean36 = fieldPosition30.equals((java.lang.Object) locale33);
        fieldPosition30.setEndIndex((int) '#');
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getCurrencyInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.text.ParsePosition parsePosition44 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction45 = properFractionFormat41.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition44);
        boolean boolean46 = fieldPosition30.equals((java.lang.Object) parsePosition44);
        java.lang.String str47 = parsePosition44.toString();
        parsePosition44.setErrorIndex((int) (short) 10);
        java.lang.Object obj50 = numberFormat27.parseObject("java.text.ParseException: zh_TW", parsePosition44);
        java.util.Locale locale54 = new java.util.Locale("anglais", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]");
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getCurrencyInstance(locale54);
        java.text.ParsePosition parsePosition58 = new java.text.ParsePosition((int) '#');
        parsePosition58.setErrorIndex(600);
        java.lang.String str61 = parsePosition58.toString();
        int int62 = parsePosition58.getErrorIndex();
        java.lang.Object obj63 = numberFormat55.parseObject("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)", parsePosition58);
        java.lang.Object obj64 = numberFormat27.parseObject("java.text.parseexception: zh_tw", parsePosition58);
        properFractionFormat20.setWholeFormat(numberFormat27);
        java.text.NumberFormat numberFormat66 = properFractionFormat20.getNumeratorFormat();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1 / 100" + "'", str3, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh-TW" + "'", str24, "zh-TW");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(field29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str31, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Chinese (Taiwan)" + "'", str35, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNull(fraction45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str47, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertEquals(locale54.toString(), "anglais_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.text.ParsePosition[index=35,errorIndex=600]" + "'", str61, "java.text.ParsePosition[index=35,errorIndex=600]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 600 + "'", int62 == 600);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNotNull(numberFormat66);
    }

    @Test
    public void test08352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08352");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (-1.0f), (double) 10, (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.negate();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        long long14 = fraction12.longValue();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction8.multiply(fraction12);
        long long16 = fraction12.longValue();
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.lang.String str18 = locale17.getDisplayScript();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale19.getISO3Language();
        java.lang.String str21 = locale17.getDisplayScript(locale19);
        java.lang.String str22 = locale17.toLanguageTag();
        java.lang.String str23 = locale17.getDisplayVariant();
        java.lang.String str24 = locale17.getVariant();
        boolean boolean25 = fraction12.equals((java.lang.Object) str24);
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        long long36 = fraction34.longValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction34);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.negate();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.abs();
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.negate();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.abs();
        long long48 = fraction46.longValue();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction42.multiply(fraction46);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction34.subtract(fraction49);
        org.apache.commons.math.fraction.Fraction fraction53 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str54 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction53);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction34.subtract(fraction53);
        org.apache.commons.math.fraction.Fraction fraction56 = fraction12.divide(fraction34);
        org.apache.commons.math.fraction.Fraction fraction59 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.abs();
        org.apache.commons.math.fraction.Fraction fraction68 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction69 = fraction68.negate();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction69.abs();
        long long71 = fraction69.longValue();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction65.multiply(fraction69);
        org.apache.commons.math.fraction.Fraction fraction75 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction76 = fraction75.negate();
        org.apache.commons.math.fraction.Fraction fraction77 = fraction76.abs();
        org.apache.commons.math.fraction.Fraction fraction80 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction81 = fraction80.negate();
        org.apache.commons.math.fraction.Fraction fraction82 = fraction81.abs();
        long long83 = fraction81.longValue();
        org.apache.commons.math.fraction.Fraction fraction84 = fraction77.multiply(fraction81);
        org.apache.commons.math.fraction.Fraction fraction85 = fraction69.subtract(fraction84);
        org.apache.commons.math.fraction.Fraction fraction88 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str89 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction88);
        org.apache.commons.math.fraction.Fraction fraction90 = fraction69.subtract(fraction88);
        long long91 = fraction88.longValue();
        org.apache.commons.math.fraction.Fraction fraction92 = fraction60.divide(fraction88);
        org.apache.commons.math.fraction.Fraction fraction93 = fraction60.negate();
        org.apache.commons.math.fraction.Fraction fraction94 = fraction34.divide(fraction60);
        boolean boolean95 = fraction3.equals((java.lang.Object) fraction60);
        double double96 = fraction3.doubleValue();
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "kor" + "'", str20, "kor");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "und" + "'", str22, "und");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-1 / 100" + "'", str54, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "-1 / 100" + "'", str89, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNotNull(fraction92);
        org.junit.Assert.assertNotNull(fraction93);
        org.junit.Assert.assertNotNull(fraction94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + (-1.0d) + "'", double96 == (-1.0d));
    }

    @Test
    public void test08353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08353");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (-120.0f));
        java.lang.String str2 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction1);
        int int3 = fraction1.getDenominator();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-120 / 1" + "'", str2, "-120 / 1");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test08354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08354");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.util.Locale locale30 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.lang.String str33 = fractionFormat31.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat34 = fractionFormat31.getNumeratorFormat();
        java.text.NumberFormat numberFormat35 = fractionFormat31.getNumeratorFormat();
        java.text.NumberFormat numberFormat36 = fractionFormat31.getNumeratorFormat();
        java.lang.String str38 = numberFormat36.format((long) 2147483647);
        properFractionFormat28.setDenominatorFormat(numberFormat36);
        int int40 = numberFormat36.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode41 = numberFormat36.getRoundingMode();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "100 0 / 1" + "'", str33, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2,147,483,647" + "'", str38, "2,147,483,647");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode41 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode41.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test08355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08355");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.util.Locale locale3 = new java.util.Locale("English");
        java.lang.String str4 = locale0.getDisplayCountry(locale3);
        java.util.Locale locale8 = new java.util.Locale("\ud55c\uad6d\uc5b4", "", "CHINESE (TAIWAN)");
        java.lang.String str9 = locale8.getScript();
        java.lang.String str10 = locale0.getDisplayLanguage(locale8);
        java.lang.String str11 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale0);
        java.util.Locale.setDefault(locale0);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale0);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder15.clearExtensions();
        java.util.Locale.Builder builder18 = builder15.setVariant("");
        java.util.Locale.Builder builder20 = builder18.setLanguage("Japan");
        java.util.Locale.Builder builder23 = builder18.setExtension('a', "TWN");
        java.util.Locale.Builder builder25 = builder18.removeUnicodeLocaleAttribute("zho");
        java.util.Locale.Builder builder27 = builder18.setRegion("fr");
        java.util.Locale locale29 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale29);
        java.lang.String str31 = locale29.getDisplayCountry();
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getIntegerInstance(locale29);
        java.lang.String str33 = locale29.toLanguageTag();
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder34.clearExtensions();
        java.util.Locale locale36 = builder34.build();
        java.lang.String str37 = locale36.getScript();
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str39 = locale38.getDisplayLanguage();
        java.lang.String str40 = locale38.toLanguageTag();
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        java.lang.String str43 = locale41.getISO3Language();
        java.lang.String str44 = locale38.getDisplayScript(locale41);
        java.util.Locale locale45 = java.util.Locale.ITALIAN;
        java.lang.String str46 = locale38.getDisplayCountry(locale45);
        java.util.Locale locale48 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str49 = locale45.getDisplayLanguage(locale48);
        java.lang.String str50 = locale36.getDisplayCountry(locale48);
        java.lang.String str51 = locale29.getDisplayVariant(locale36);
        java.util.Locale locale52 = java.util.Locale.JAPAN;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.lang.String str54 = locale53.getDisplayScript();
        java.lang.String str55 = locale52.getDisplayCountry(locale53);
        java.util.Set<java.lang.String> strSet56 = locale53.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getIntegerInstance(locale53);
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getInstance(locale53);
        java.util.Set<java.lang.Character> charSet59 = locale53.getExtensionKeys();
        java.lang.String str60 = locale36.getDisplayVariant(locale53);
        java.lang.String str61 = locale53.getDisplayCountry();
        java.util.Locale.Builder builder62 = builder27.setLocale(locale53);
        java.lang.String str63 = locale0.getDisplayCountry(locale53);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\ub3c5\uc77c" + "'", str1, "\ub3c5\uc77c");
        org.junit.Assert.assertEquals(locale3.toString(), "english");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Germany" + "'", str4, "Germany");
        org.junit.Assert.assertEquals(locale8.toString(), "\ud55c\uad6d\uc5b4__CHINESE (TAIWAN)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "German" + "'", str10, "German");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DEU" + "'", str11, "DEU");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "und" + "'", str33, "und");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Chinesisch" + "'", str39, "Chinesisch");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "zh-TW" + "'", str40, "zh-TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "zho" + "'", str43, "zho");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Taiwan" + "'", str46, "Taiwan");
        org.junit.Assert.assertEquals(locale48.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Italian" + "'", str49, "Italian");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Japan" + "'", str55, "Japan");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(charSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Germany" + "'", str63, "Germany");
    }

    @Test
    public void test08356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08356");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.lang.String str2 = locale0.getISO3Language();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale locale4 = locale0.stripExtensions();
        java.util.Locale.setDefault(locale4);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
    }

    @Test
    public void test08357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08357");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder8 = builder5.clear();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("9,700%");
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.util.Locale.Builder builder12 = builder8.setLocale(locale10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str18 = locale14.getISO3Language();
        boolean boolean19 = numberFormat13.equals((java.lang.Object) locale14);
        java.util.Locale.Builder builder20 = builder8.setLocale(locale14);
        java.util.Locale.Builder builder22 = builder20.addUnicodeLocaleAttribute("Korean");
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.lang.String str24 = locale23.getDisplayCountry();
        java.util.Locale locale26 = new java.util.Locale("English");
        java.lang.String str27 = locale23.getDisplayCountry(locale26);
        java.util.Locale locale31 = new java.util.Locale("\ud55c\uad6d\uc5b4", "", "CHINESE (TAIWAN)");
        java.lang.String str32 = locale31.getScript();
        java.lang.String str33 = locale23.getDisplayLanguage(locale31);
        java.lang.String str34 = locale23.getISO3Country();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale23);
        java.util.Locale.Builder builder36 = builder20.setLocale(locale23);
        java.util.Locale.Builder builder37 = builder20.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder40 = builder20.setExtension('a', "\u4e2d\u6587\u4e2d\u570b)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: ?? (??) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ub3c5\uc77c" + "'", str24, "\ub3c5\uc77c");
        org.junit.Assert.assertEquals(locale26.toString(), "english");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Germany" + "'", str27, "Germany");
        org.junit.Assert.assertEquals(locale31.toString(), "\ud55c\uad6d\uc5b4__CHINESE (TAIWAN)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "German" + "'", str33, "German");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DEU" + "'", str34, "DEU");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test08358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08358");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        numberFormat1.setMaximumFractionDigits((int) (byte) 100);
        numberFormat1.setMaximumFractionDigits((int) (byte) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        int int10 = numberFormat1.getMinimumIntegerDigits();
        java.util.Locale locale12 = new java.util.Locale("Chinese (Taiwan)");
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        java.lang.String str15 = numberFormat13.format((long) 60);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList21);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList25 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, strMap24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, strMap26);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap28 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, strMap28);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList29, strMap30);
        boolean boolean32 = numberFormat13.equals((java.lang.Object) languageRangeList29);
        java.lang.StringBuffer stringBuffer33 = null;
        java.text.NumberFormat.Field field34 = java.text.NumberFormat.Field.CURRENCY;
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder37 = builder35.setScript("");
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str39 = locale38.getDisplayLanguage();
        java.lang.String str40 = locale38.toLanguageTag();
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        java.lang.String str43 = locale41.getISO3Language();
        java.lang.String str44 = locale38.getDisplayScript(locale41);
        java.util.Locale locale45 = java.util.Locale.ITALIAN;
        java.lang.String str46 = locale38.getDisplayCountry(locale45);
        java.util.Locale.Builder builder47 = builder35.setLocale(locale45);
        java.lang.String str48 = locale45.getDisplayScript();
        boolean boolean49 = field34.equals((java.lang.Object) locale45);
        java.text.FieldPosition fieldPosition51 = new java.text.FieldPosition((java.text.Format.Field) field34, 0);
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.lang.String str53 = locale52.toLanguageTag();
        java.util.Set<java.lang.String> strSet54 = locale52.getUnicodeLocaleAttributes();
        java.lang.String str55 = locale52.getDisplayCountry();
        java.lang.String str56 = locale52.getISO3Country();
        java.util.Locale locale57 = locale52.stripExtensions();
        boolean boolean58 = field34.equals((java.lang.Object) locale57);
        java.text.FieldPosition fieldPosition60 = new java.text.FieldPosition((java.text.Format.Field) field34, 120);
        int int61 = fieldPosition60.getBeginIndex();
        int int62 = fieldPosition60.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer63 = numberFormat1.format((java.lang.Object) languageRangeList29, stringBuffer33, fieldPosition60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals(locale12.toString(), "chinese (taiwan)");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "6,000%" + "'", str15, "6,000%");
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(languageRangeList25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(field34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str39, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "zh-TW" + "'", str40, "zh-TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "zho" + "'", str43, "zho");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Taiwan" + "'", str46, "Taiwan");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "zh-TW" + "'", str53, "zh-TW");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\ub300\ub9cc" + "'", str55, "\ub300\ub9cc");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "TWN" + "'", str56, "TWN");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 120 + "'", int62 == 120);
    }

    @Test
    public void test08359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08359");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayScript();
        java.lang.String str20 = locale18.getScript();
        boolean boolean21 = fraction17.equals((java.lang.Object) locale18);
        java.text.NumberFormat.Field field22 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field22);
        int int24 = fieldPosition23.getEndIndex();
        fieldPosition23.setBeginIndex((int) (byte) 100);
        java.util.Locale locale28 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale28);
        java.lang.String str31 = fractionFormat29.format((java.lang.Object) 100);
        boolean boolean32 = fieldPosition23.equals((java.lang.Object) fractionFormat29);
        java.text.Format.Field field33 = fieldPosition23.getFieldAttribute();
        int int34 = fieldPosition23.getEndIndex();
        org.apache.commons.math.fraction.Fraction fraction38 = new org.apache.commons.math.fraction.Fraction((double) 2147483647, (double) 'a', 117);
        int int39 = fraction38.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction38.reciprocal();
        boolean boolean41 = fieldPosition23.equals((java.lang.Object) fraction38);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction17.divide(fraction38);
        int int43 = fraction42.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction42.reciprocal();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100 0 / 1" + "'", str31, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(field33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-2) + "'", int43 == (-2));
        org.junit.Assert.assertNotNull(fraction44);
    }

    @Test
    public void test08360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08360");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.util.Currency currency8 = numberFormat7.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        java.text.NumberFormat numberFormat10 = fractionFormat9.getDenominatorFormat();
        java.text.NumberFormat numberFormat11 = fractionFormat9.getNumeratorFormat();
        java.util.Locale locale13 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.lang.String str15 = locale13.getDisplayCountry();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getIntegerInstance(locale13);
        java.lang.String str17 = locale13.toLanguageTag();
        java.lang.String str18 = locale13.getDisplayScript();
        java.lang.String str19 = locale13.getDisplayCountry();
        java.util.Locale locale22 = new java.util.Locale("", "Chinese (Taiwan)");
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.lang.String str24 = locale13.getDisplayCountry(locale22);
        java.lang.String str25 = locale13.getLanguage();
        java.lang.StringBuffer stringBuffer26 = null;
        java.text.FieldPosition fieldPosition28 = new java.text.FieldPosition((int) (byte) 100);
        java.text.Format.Field field29 = fieldPosition28.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer30 = fractionFormat9.format((java.lang.Object) locale13, stringBuffer26, fieldPosition28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "und" + "'", str17, "und");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals(locale22.toString(), "_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(field29);
    }

    @Test
    public void test08361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08361");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        numberFormat6.setMinimumIntegerDigits(0);
        java.lang.String str10 = numberFormat6.format(1.0d);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale locale14 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str16 = locale14.getDisplayCountry();
        java.lang.String str17 = locale11.getDisplayName(locale14);
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayScript();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.lang.String str22 = locale18.getDisplayScript(locale20);
        java.lang.String str23 = locale11.getDisplayLanguage(locale20);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale11);
        java.util.Currency currency25 = numberFormat24.getCurrency();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        long long36 = fraction34.longValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction34);
        boolean boolean38 = numberFormat24.equals((java.lang.Object) fraction30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat6, numberFormat24);
        java.text.NumberFormat numberFormat40 = properFractionFormat39.getNumeratorFormat();
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        int int46 = numberFormat45.getMaximumIntegerDigits();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        boolean boolean49 = numberFormat48.isGroupingUsed();
        java.util.Currency currency50 = numberFormat48.getCurrency();
        numberFormat45.setCurrency(currency50);
        java.util.Currency currency52 = numberFormat45.getCurrency();
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getInstance(locale54);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance(locale56);
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = new org.apache.commons.math.fraction.FractionFormat(numberFormat55, numberFormat57);
        java.text.ParsePosition parsePosition61 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj62 = numberFormat57.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition61);
        java.lang.String str63 = parsePosition61.toString();
        java.lang.Number number64 = numberFormat45.parse("Chinese", parsePosition61);
        java.lang.String str66 = numberFormat45.format((double) (short) 10);
        java.util.Locale locale71 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getPercentInstance(locale71);
        int int73 = numberFormat72.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat74 = new org.apache.commons.math.fraction.FractionFormat(numberFormat72);
        java.util.Locale locale79 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat80 = java.text.NumberFormat.getPercentInstance(locale79);
        int int81 = numberFormat80.getMaximumIntegerDigits();
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat83 = java.text.NumberFormat.getPercentInstance(locale82);
        boolean boolean84 = numberFormat83.isGroupingUsed();
        java.util.Currency currency85 = numberFormat83.getCurrency();
        numberFormat80.setCurrency(currency85);
        java.util.Currency currency87 = numberFormat80.getCurrency();
        java.math.RoundingMode roundingMode88 = numberFormat80.getRoundingMode();
        java.text.ParsePosition parsePosition91 = new java.text.ParsePosition((int) 'a');
        java.lang.String str92 = parsePosition91.toString();
        java.lang.String str93 = parsePosition91.toString();
        java.lang.Object obj94 = numberFormat80.parseObject("zho", parsePosition91);
        java.lang.Object obj95 = fractionFormat74.parseObject("java.text.NumberFormat$Field(currency)", parsePosition91);
        java.lang.Object obj96 = numberFormat45.parseObject("java.text.ParsePosition[index=1,errorIndex=0]", parsePosition91);
        properFractionFormat39.setWholeFormat(numberFormat45);
        boolean boolean98 = numberFormat45.isGroupingUsed();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Korean" + "'", str17, "Korean");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str23, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(currency50);
        org.junit.Assert.assertEquals(currency50.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str63, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1,000%" + "'", str66, "1,000%");
        org.junit.Assert.assertEquals(locale71.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertEquals(locale79.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2147483647 + "'", int81 == 2147483647);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(currency85);
        org.junit.Assert.assertEquals(currency85.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency87);
        org.junit.Assert.assertEquals(currency87.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode88 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode88.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str92, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str93, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNull(obj95);
        org.junit.Assert.assertNull(obj96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test08362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08362");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        numberFormat4.setMinimumIntegerDigits(0);
        numberFormat4.setMinimumIntegerDigits(0);
        org.apache.commons.math.fraction.Fraction fraction12 = new org.apache.commons.math.fraction.Fraction((double) 2147483647, (double) 100.0f, (int) 'u');
        java.lang.String str13 = numberFormat4.format((java.lang.Object) 100.0f);
        int int14 = numberFormat4.getMaximumIntegerDigits();
        numberFormat4.setMaximumIntegerDigits(0);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "100" + "'", str13, "100");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
    }

    @Test
    public void test08363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08363");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale5.getISO3Country();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        java.util.Locale locale14 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str16 = locale14.getDisplayCountry();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance(locale14);
        java.lang.String str18 = locale11.getDisplayCountry(locale14);
        java.lang.String str19 = locale11.getISO3Language();
        java.lang.String str20 = locale11.getDisplayName();
        java.util.Locale.Builder builder21 = builder10.setLocale(locale11);
        java.util.Locale.Builder builder22 = builder21.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "France" + "'", str18, "France");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "fra" + "'", str19, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str20, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test08364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08364");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        java.lang.String str3 = numberFormat0.format(1.0d);
        int int4 = numberFormat0.getMinimumIntegerDigits();
        int int5 = numberFormat0.getMinimumFractionDigits();
        java.lang.String str7 = numberFormat0.format((long) (byte) -101);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        properFractionFormat11.setWholeFormat(numberFormat13);
        java.text.NumberFormat numberFormat16 = properFractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat19 = properFractionFormat18.getWholeFormat();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        numberFormat21.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19, numberFormat21);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale27.getISO3Language();
        java.util.Set<java.lang.Character> charSet29 = locale27.getExtensionKeys();
        java.util.Locale locale30 = java.util.Locale.US;
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = locale27.getDisplayVariant(locale30);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance(locale27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getInstance(locale36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat37, numberFormat39);
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj44 = numberFormat39.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition43);
        java.lang.String str45 = parsePosition43.toString();
        boolean boolean47 = parsePosition43.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction48 = properFractionFormat34.parse("java.text.ParseException: zh_TW", parsePosition43);
        java.lang.Object obj49 = fractionFormat25.parseObject("Italian", parsePosition43);
        org.apache.commons.math.fraction.Fraction fraction50 = properFractionFormat11.parse("9,700%", parsePosition43);
        int int51 = parsePosition43.getErrorIndex();
        java.lang.Object obj52 = numberFormat0.parseObject("org.apache.commons.math.fraction.FractionConversionException: Unable to convert 120 to fraction after 1 iterations", parsePosition43);
        parsePosition43.setIndex(0);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
        org.junit.Assert.assertEquals(currency1.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100%" + "'", str3, "100%");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-10,100%" + "'", str7, "-10,100%");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "kor" + "'", str28, "kor");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str45, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(fraction48);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNull(obj52);
    }

    @Test
    public void test08365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08365");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        boolean boolean47 = numberFormat45.equals((java.lang.Object) strArray46);
        java.lang.String str49 = numberFormat45.format((double) (byte) -1);
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale50.getDisplayCountry(locale51);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getNumberInstance(locale50);
        numberFormat54.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36, numberFormat45, numberFormat54);
        java.text.NumberFormat numberFormat58 = properFractionFormat57.getWholeFormat();
        numberFormat58.setMinimumFractionDigits(1);
        java.math.RoundingMode roundingMode61 = numberFormat58.getRoundingMode();
        numberFormat58.setMinimumFractionDigits(420);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Korean" + "'", str29, "Korean");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-100%" + "'", str49, "-100%");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Japan" + "'", str53, "Japan");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + roundingMode61 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode61.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test08366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08366");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("");
        java.lang.String str2 = locale1.getCountry();
        java.lang.String str3 = locale1.getDisplayScript();
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale1.getDisplayVariant();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getNumberInstance(locale1);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale8.getISO3Language();
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleKeys();
        java.lang.String str11 = locale8.getISO3Country();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getNumberInstance(locale8);
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        int int18 = numberFormat17.getMaximumIntegerDigits();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        boolean boolean21 = numberFormat20.isGroupingUsed();
        java.util.Currency currency22 = numberFormat20.getCurrency();
        numberFormat17.setCurrency(currency22);
        java.util.Currency currency24 = numberFormat17.getCurrency();
        int int25 = numberFormat17.getMaximumFractionDigits();
        java.lang.Object obj26 = numberFormat17.clone();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        numberFormat28.setMaximumFractionDigits(100);
        numberFormat28.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str35 = numberFormat28.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12, numberFormat17, numberFormat28);
        java.util.Locale locale38 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale38);
        java.lang.String str41 = fractionFormat39.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat42 = fractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat43 = fractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = fractionFormat39.getNumeratorFormat();
        java.lang.String str46 = numberFormat44.format((long) 2147483647);
        properFractionFormat36.setDenominatorFormat(numberFormat44);
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getInstance(locale49);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = new org.apache.commons.math.fraction.FractionFormat(numberFormat50, numberFormat52);
        java.text.ParsePosition parsePosition56 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj57 = numberFormat52.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition56);
        java.lang.String str58 = parsePosition56.toString();
        java.lang.String str59 = parsePosition56.toString();
        int int60 = parsePosition56.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction61 = properFractionFormat36.parse("214,748,364,700%", parsePosition56);
        parsePosition56.setErrorIndex((int) (short) -2);
        parsePosition56.setIndex(52);
        java.lang.Object obj66 = numberFormat6.parseObject("\u6cd5\u6587\u52a0\u62ff\u5927)", parsePosition56);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency24);
        org.junit.Assert.assertEquals(currency24.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "100%" + "'", str35, "100%");
        org.junit.Assert.assertEquals(locale38.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "100 0 / 1" + "'", str41, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2,147,483,647" + "'", str46, "2,147,483,647");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str58, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str59, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNull(obj66);
    }

    @Test
    public void test08367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08367");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale5);
        numberFormat7.setMaximumIntegerDigits((int) 'x');
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.text.NumberFormat numberFormat13 = properFractionFormat12.getWholeFormat();
        numberFormat13.setGroupingUsed(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7, numberFormat13);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        boolean boolean23 = numberFormat22.isGroupingUsed();
        properFractionFormat20.setWholeFormat(numberFormat22);
        java.text.NumberFormat numberFormat25 = properFractionFormat20.getWholeFormat();
        java.text.ParsePosition parsePosition28 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number29 = numberFormat25.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition28);
        parsePosition28.setErrorIndex(0);
        parsePosition28.setErrorIndex(1728000);
        java.lang.Object obj34 = numberFormat13.parseObject("\ub300\ub9cc", parsePosition28);
        int int35 = parsePosition28.getIndex();
        int int36 = parsePosition28.getErrorIndex();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale37.getISO3Language();
        java.util.Set<java.lang.String> strSet39 = locale37.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getCurrencyInstance(locale37);
        boolean boolean41 = numberFormat40.isParseIntegerOnly();
        java.math.RoundingMode roundingMode42 = numberFormat40.getRoundingMode();
        boolean boolean44 = numberFormat40.equals((java.lang.Object) "coreano");
        boolean boolean45 = numberFormat40.isGroupingUsed();
        boolean boolean46 = parsePosition28.equals((java.lang.Object) numberFormat40);
        java.util.Locale locale47 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale47);
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getInstance(locale49);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = new org.apache.commons.math.fraction.FractionFormat(numberFormat50, numberFormat52);
        boolean boolean54 = numberFormat52.isGroupingUsed();
        boolean boolean55 = numberFormat52.isGroupingUsed();
        fractionFormat48.setNumeratorFormat(numberFormat52);
        java.lang.Object obj57 = numberFormat52.clone();
        java.lang.Object obj58 = numberFormat52.clone();
        boolean boolean59 = numberFormat52.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = new org.apache.commons.math.fraction.FractionFormat(numberFormat52);
        boolean boolean61 = numberFormat52.isGroupingUsed();
        boolean boolean62 = numberFormat52.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = new org.apache.commons.math.fraction.FractionFormat(numberFormat40, numberFormat52);
        java.lang.StringBuffer stringBuffer65 = null;
        java.text.NumberFormat.Field field66 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition67 = new java.text.FieldPosition((java.text.Format.Field) field66);
        java.text.FieldPosition fieldPosition69 = new java.text.FieldPosition((java.text.Format.Field) field66, (int) (short) 100);
        java.text.FieldPosition fieldPosition70 = new java.text.FieldPosition((java.text.Format.Field) field66);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer71 = numberFormat52.format(2L, stringBuffer65, fieldPosition70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNull(number29);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "kor" + "'", str38, "kor");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + roundingMode42 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode42.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(field66);
    }

    @Test
    public void test08368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08368");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat14 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat15 = properFractionFormat3.getWholeFormat();
        int int16 = numberFormat15.getMaximumFractionDigits();
        java.lang.Object obj17 = numberFormat15.clone();
        int int18 = numberFormat15.getMinimumIntegerDigits();
        java.lang.StringBuffer stringBuffer20 = null;
        java.text.NumberFormat.Field field21 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition22 = new java.text.FieldPosition((java.text.Format.Field) field21);
        java.lang.String str23 = fieldPosition22.toString();
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayScript();
        java.lang.String str27 = locale24.getDisplayName(locale25);
        boolean boolean28 = fieldPosition22.equals((java.lang.Object) locale25);
        fieldPosition22.setEndIndex((int) '#');
        java.text.Format.Field field31 = fieldPosition22.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer32 = numberFormat15.format((double) 32, stringBuffer20, fieldPosition22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(field21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str23, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Chinese (Taiwan)" + "'", str27, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(field31);
    }

    @Test
    public void test08369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08369");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        java.util.Currency currency15 = numberFormat13.getCurrency();
        numberFormat10.setCurrency(currency15);
        java.util.Currency currency17 = numberFormat10.getCurrency();
        numberFormat2.setCurrency(currency17);
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        fractionFormat23.setDenominatorFormat(numberFormat28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2, numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = locale34.getDisplayScript();
        java.lang.String str36 = locale33.getDisplayCountry(locale34);
        java.util.Set<java.lang.String> strSet37 = locale34.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getIntegerInstance(locale34);
        int int39 = numberFormat38.getMaximumIntegerDigits();
        properFractionFormat32.setWholeFormat(numberFormat38);
        java.text.NumberFormat numberFormat41 = properFractionFormat32.getDenominatorFormat();
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        java.util.Locale locale45 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale45);
        java.lang.String str47 = locale45.getDisplayCountry();
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getIntegerInstance(locale45);
        java.lang.String str49 = locale42.getDisplayCountry(locale45);
        java.lang.String str50 = locale42.getLanguage();
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getIntegerInstance(locale42);
        properFractionFormat32.setDenominatorFormat(numberFormat51);
        numberFormat51.setMinimumFractionDigits((int) (byte) -16);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Japan" + "'", str36, "Japan");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals(locale45.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "France" + "'", str49, "France");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "fr" + "'", str50, "fr");
        org.junit.Assert.assertNotNull(numberFormat51);
    }

    @Test
    public void test08370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08370");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction6 = properFractionFormat2.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition5);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        numberFormat13.setMaximumFractionDigits((int) (short) -1);
        int int16 = numberFormat13.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        numberFormat13.setGroupingUsed(true);
        java.util.Currency currency20 = numberFormat13.getCurrency();
        java.text.NumberFormat.Field field22 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field22);
        java.lang.String str24 = fieldPosition23.toString();
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = locale25.getDisplayName(locale26);
        boolean boolean29 = fieldPosition23.equals((java.lang.Object) locale26);
        fieldPosition23.setEndIndex((int) '#');
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction38 = properFractionFormat34.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition37);
        boolean boolean39 = fieldPosition23.equals((java.lang.Object) parsePosition37);
        parsePosition37.setErrorIndex((int) '#');
        java.lang.Object obj42 = numberFormat13.parseObject("ja-JP", parsePosition37);
        org.apache.commons.math.fraction.Fraction fraction43 = properFractionFormat2.parse("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]", parsePosition37);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        boolean boolean46 = numberFormat45.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        java.lang.String str49 = numberFormat45.format(0.008333333333333333d);
        java.math.RoundingMode roundingMode50 = numberFormat45.getRoundingMode();
        properFractionFormat2.setWholeFormat(numberFormat45);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance();
        numberFormat52.setMaximumIntegerDigits(2147483647);
        java.lang.String str56 = numberFormat52.format((long) 2147483647);
        properFractionFormat2.setNumeratorFormat(numberFormat52);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52);
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getCurrencyInstance();
        int int60 = numberFormat59.getMaximumFractionDigits();
        boolean boolean61 = numberFormat59.isParseIntegerOnly();
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getIntegerInstance();
        java.util.Locale locale64 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale64);
        java.lang.String str67 = fractionFormat65.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat68 = fractionFormat65.getNumeratorFormat();
        numberFormat68.setMaximumFractionDigits((int) (short) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat71 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59, numberFormat62, numberFormat68);
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getPercentInstance(locale72);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat73);
        numberFormat73.setMaximumFractionDigits(100);
        java.lang.String str78 = numberFormat73.format((long) 100);
        int int79 = numberFormat73.getMaximumFractionDigits();
        numberFormat73.setMinimumFractionDigits((int) (short) 0);
        int int82 = numberFormat73.getMaximumFractionDigits();
        java.math.RoundingMode roundingMode83 = numberFormat73.getRoundingMode();
        numberFormat73.setGroupingUsed(false);
        java.lang.Object obj86 = numberFormat73.clone();
        properFractionFormat71.setNumeratorFormat(numberFormat73);
        java.text.NumberFormat numberFormat88 = properFractionFormat71.getDenominatorFormat();
        java.text.NumberFormat numberFormat89 = properFractionFormat71.getDenominatorFormat();
        java.text.NumberFormat numberFormat90 = properFractionFormat71.getNumeratorFormat();
        java.text.NumberFormat numberFormat91 = properFractionFormat71.getWholeFormat();
        properFractionFormat58.setNumeratorFormat(numberFormat91);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNull(fraction6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str24, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Chinese (Taiwan)" + "'", str28, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNull(fraction38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1%" + "'", str49, "1%");
        org.junit.Assert.assertTrue("'" + roundingMode50 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode50.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "214,748,364,700%" + "'", str56, "214,748,364,700%");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals(locale64.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "100 0 / 1" + "'", str67, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "10,000%" + "'", str78, "10,000%");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 100 + "'", int79 == 100);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 100 + "'", int82 == 100);
        org.junit.Assert.assertTrue("'" + roundingMode83 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode83.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertNotNull(numberFormat89);
        org.junit.Assert.assertNotNull(numberFormat90);
        org.junit.Assert.assertNotNull(numberFormat91);
    }

    @Test
    public void test08371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08371");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setGroupingUsed(true);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
    }

    @Test
    public void test08372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08372");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction8.add(fraction14);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction3.multiply(fraction14);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ONE;
        long long20 = fraction19.longValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction3.multiply(fraction19);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction2.subtract(fraction21);
        java.lang.String str23 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction21);
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.negate();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.abs();
        long long34 = fraction32.longValue();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction28.multiply(fraction32);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction28.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.negate();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.abs();
        long long47 = fraction45.longValue();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction41.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction28.multiply(fraction48);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction21.add(fraction49);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.negate();
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.negate();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.abs();
        org.apache.commons.math.fraction.Fraction fraction59 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.negate();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.abs();
        long long62 = fraction60.longValue();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction56.multiply(fraction60);
        org.apache.commons.math.fraction.Fraction fraction66 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction67 = fraction66.negate();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction67.abs();
        org.apache.commons.math.fraction.Fraction fraction71 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction72 = fraction71.negate();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction72.abs();
        long long74 = fraction72.longValue();
        org.apache.commons.math.fraction.Fraction fraction75 = fraction68.multiply(fraction72);
        org.apache.commons.math.fraction.Fraction fraction76 = fraction56.divide(fraction75);
        org.apache.commons.math.fraction.Fraction fraction77 = fraction76.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction78 = fraction51.divide(fraction77);
        java.lang.String str79 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction77);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1 / 1" + "'", str4, "1 / 1");
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1 / 1" + "'", str23, "1 / 1");
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1 / 120" + "'", str79, "1 / 120");
    }

    @Test
    public void test08373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08373");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat4 = properFractionFormat3.getWholeFormat();
        java.lang.String str6 = numberFormat4.format((long) 52);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        numberFormat8.setMaximumFractionDigits(100);
        numberFormat8.setMaximumFractionDigits((int) (byte) 100);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean17 = numberFormat15.equals((java.lang.Object) numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        boolean boolean19 = numberFormat15.equals((java.lang.Object) fractionFormat18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15);
        java.util.Locale locale24 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        java.lang.String[] strArray26 = java.util.Locale.getISOCountries();
        boolean boolean27 = numberFormat25.equals((java.lang.Object) strArray26);
        java.util.Locale locale31 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        int int33 = numberFormat32.getMaximumIntegerDigits();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        boolean boolean36 = numberFormat35.isGroupingUsed();
        java.util.Currency currency37 = numberFormat35.getCurrency();
        numberFormat32.setCurrency(currency37);
        java.util.Currency currency39 = numberFormat32.getCurrency();
        java.math.RoundingMode roundingMode40 = numberFormat32.getRoundingMode();
        numberFormat25.setRoundingMode(roundingMode40);
        boolean boolean42 = numberFormat25.isParseIntegerOnly();
        java.lang.Object obj43 = numberFormat25.clone();
        java.util.Locale locale45 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale45);
        java.lang.String str48 = fractionFormat46.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat49 = fractionFormat46.getNumeratorFormat();
        java.text.NumberFormat numberFormat50 = fractionFormat46.getNumeratorFormat();
        java.text.NumberFormat numberFormat51 = fractionFormat46.getNumeratorFormat();
        java.lang.String str53 = numberFormat51.format((long) 2147483647);
        java.math.RoundingMode roundingMode54 = numberFormat51.getRoundingMode();
        numberFormat25.setRoundingMode(roundingMode54);
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8, numberFormat15, numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat8);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "52" + "'", str6, "52");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals(locale24.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals(locale31.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(currency37);
        org.junit.Assert.assertEquals(currency37.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode40 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode40.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(locale45.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "100 0 / 1" + "'", str48, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2,147,483,647" + "'", str53, "2,147,483,647");
        org.junit.Assert.assertTrue("'" + roundingMode54 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode54.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test08374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08374");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) numberFormat2);
        java.lang.Object obj4 = numberFormat2.clone();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean9 = numberFormat7.equals((java.lang.Object) numberFormat8);
        java.util.Locale locale14 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        int int16 = numberFormat15.getMaximumIntegerDigits();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        boolean boolean19 = numberFormat18.isGroupingUsed();
        java.util.Currency currency20 = numberFormat18.getCurrency();
        numberFormat15.setCurrency(currency20);
        java.util.Currency currency22 = numberFormat15.getCurrency();
        java.math.RoundingMode roundingMode23 = numberFormat15.getRoundingMode();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) 'a');
        java.lang.String str27 = parsePosition26.toString();
        java.lang.String str28 = parsePosition26.toString();
        java.lang.Object obj29 = numberFormat15.parseObject("zho", parsePosition26);
        java.lang.String str30 = parsePosition26.toString();
        java.lang.Number number31 = numberFormat8.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition26);
        java.lang.Object obj32 = numberFormat2.parseObject("cor\351en", parsePosition26);
        java.util.Locale.Category category33 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale34 = java.util.Locale.getDefault(category33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale35);
        java.util.Locale.setDefault(category33, locale35);
        java.util.Locale locale38 = java.util.Locale.getDefault(category33);
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale38);
        numberFormat40.setMaximumIntegerDigits((int) 'x');
        java.util.Locale locale46 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance(locale46);
        int int48 = numberFormat47.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode49 = numberFormat47.getRoundingMode();
        java.lang.String str51 = numberFormat47.format((long) (-2));
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat40, numberFormat47);
        java.lang.StringBuffer stringBuffer54 = null;
        java.text.FieldPosition fieldPosition55 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer56 = numberFormat47.format(0.01d, stringBuffer54, fieldPosition55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode23 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode23.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str27, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str28, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str30, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.FORMAT + "'", category33.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals(locale46.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode49 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode49.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-200%" + "'", str51, "-200%");
    }

    @Test
    public void test08375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08375");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        int int6 = numberFormat5.getMaximumIntegerDigits();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        boolean boolean9 = numberFormat8.isGroupingUsed();
        java.util.Currency currency10 = numberFormat8.getCurrency();
        numberFormat5.setCurrency(currency10);
        properFractionFormat0.setWholeFormat(numberFormat5);
        java.util.Locale locale14 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18, numberFormat20);
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj25 = numberFormat20.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition24);
        java.lang.String str26 = parsePosition24.toString();
        java.lang.Object obj27 = fractionFormat15.parseObject("\uc911\uad6d\uc5b4", parsePosition24);
        org.apache.commons.math.fraction.Fraction fraction28 = properFractionFormat0.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (10/97)", parsePosition24);
        java.text.NumberFormat numberFormat29 = properFractionFormat0.getNumeratorFormat();
        java.util.Locale locale30 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.util.Locale locale33 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance(locale33);
        java.util.Currency currency36 = numberFormat35.getCurrency();
        numberFormat35.setMinimumIntegerDigits(1);
        numberFormat35.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj44 = numberFormat35.parseObject("Japan", parsePosition43);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException48 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str49 = fractionConversionException48.getPattern();
        java.lang.Throwable[] throwableArray50 = fractionConversionException48.getSuppressed();
        java.lang.Object[] objArray51 = fractionConversionException48.getArguments();
        boolean boolean52 = parsePosition43.equals((java.lang.Object) objArray51);
        int int53 = parsePosition43.getIndex();
        int int54 = parsePosition43.getIndex();
        java.lang.Object obj55 = fractionFormat31.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]", parsePosition43);
        java.text.NumberFormat numberFormat56 = fractionFormat31.getNumeratorFormat();
        int int57 = numberFormat56.getMaximumIntegerDigits();
        numberFormat56.setMinimumIntegerDigits((int) (byte) -119);
        numberFormat56.setMinimumFractionDigits(2147483647);
        properFractionFormat0.setNumeratorFormat(numberFormat56);
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency64 = numberFormat63.getCurrency();
        java.lang.String str66 = numberFormat63.format(1.0d);
        int int67 = numberFormat63.getMinimumIntegerDigits();
        numberFormat63.setMaximumIntegerDigits(2147483647);
        int int70 = numberFormat63.getMaximumIntegerDigits();
        properFractionFormat0.setDenominatorFormat(numberFormat63);
        numberFormat63.setMinimumIntegerDigits((int) (short) 121);
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str26, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(fraction28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "TWD");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str49, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(currency64);
        org.junit.Assert.assertEquals(currency64.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "100%" + "'", str66, "100%");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
    }

    @Test
    public void test08376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08376");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        long long13 = fraction11.longValue();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction7.multiply(fraction11);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        long long25 = fraction23.longValue();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.multiply(fraction23);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction7.divide(fraction26);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction7.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction30 = new org.apache.commons.math.fraction.Fraction((double) 1L);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction28.divide(fraction30);
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        long long42 = fraction40.longValue();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction36.multiply(fraction40);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction36.abs();
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.negate();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.negate();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.abs();
        long long55 = fraction53.longValue();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction49.multiply(fraction53);
        org.apache.commons.math.fraction.Fraction fraction57 = fraction36.multiply(fraction56);
        org.apache.commons.math.fraction.Fraction fraction61 = new org.apache.commons.math.fraction.Fraction((double) (-1.0f), (double) 10, (int) (byte) -1);
        int int62 = fraction61.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction57.subtract(fraction61);
        int int64 = fraction57.intValue();
        int int65 = fraction57.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction28.multiply(fraction57);
        org.apache.commons.math.fraction.Fraction fraction67 = fraction66.abs();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction66.negate();
        java.lang.String str69 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction68);
        org.apache.commons.math.fraction.Fraction fraction70 = fraction2.divide(fraction68);
        int int71 = fraction2.intValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1728000 + "'", int65 == 1728000);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "-1 / 14,400" + "'", str69, "-1 / 14,400");
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test08377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08377");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.EXPONENT;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.Object obj2 = null;
        boolean boolean3 = field0.equals(obj2);
        java.util.Locale locale5 = new java.util.Locale("Japan");
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        boolean boolean9 = numberFormat7.equals((java.lang.Object) locale8);
        java.util.Locale locale11 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str13 = locale11.getDisplayCountry();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance(locale11);
        java.lang.String str15 = locale8.getDisplayVariant(locale11);
        java.lang.String str16 = locale5.getDisplayScript(locale8);
        java.lang.String str17 = locale5.getLanguage();
        java.util.Locale locale18 = locale5.stripExtensions();
        boolean boolean19 = field0.equals((java.lang.Object) locale5);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "japan");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "japan" + "'", str17, "japan");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "japan");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08378");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.util.Locale locale12 = java.util.Locale.getDefault(category0);
        java.util.Locale locale13 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale13);
        java.util.Locale.Category category16 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale17 = java.util.Locale.getDefault(category16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale18);
        java.util.Locale.setDefault(category16, locale18);
        java.util.Locale locale21 = java.util.Locale.getDefault(category16);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.util.Locale.setDefault(category22, locale23);
        java.util.Locale.setDefault(category16, locale23);
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.lang.String str28 = locale27.getISO3Country();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getIntegerInstance(locale27);
        java.util.Locale.setDefault(category16, locale27);
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.util.Locale locale32 = locale31.stripExtensions();
        java.util.Locale.setDefault(category16, locale31);
        java.util.Locale.setDefault(category0, locale31);
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 52 to fraction (-1/0)");
        java.util.Locale.setDefault(category0, locale36);
        java.util.Locale locale38 = java.util.Locale.getDefault(category0);
        java.util.Locale locale39 = java.util.Locale.getDefault(category0);
        java.lang.String str40 = locale39.getLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.FORMAT + "'", category16.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test08379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08379");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction6 = properFractionFormat2.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition5);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        numberFormat13.setMaximumFractionDigits((int) (short) -1);
        int int16 = numberFormat13.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        numberFormat13.setGroupingUsed(true);
        java.util.Currency currency20 = numberFormat13.getCurrency();
        java.text.NumberFormat.Field field22 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field22);
        java.lang.String str24 = fieldPosition23.toString();
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = locale25.getDisplayName(locale26);
        boolean boolean29 = fieldPosition23.equals((java.lang.Object) locale26);
        fieldPosition23.setEndIndex((int) '#');
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction38 = properFractionFormat34.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition37);
        boolean boolean39 = fieldPosition23.equals((java.lang.Object) parsePosition37);
        parsePosition37.setErrorIndex((int) '#');
        java.lang.Object obj42 = numberFormat13.parseObject("ja-JP", parsePosition37);
        org.apache.commons.math.fraction.Fraction fraction43 = properFractionFormat2.parse("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]", parsePosition37);
        java.util.Locale locale48 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        int int50 = numberFormat49.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = new org.apache.commons.math.fraction.FractionFormat(numberFormat49);
        java.util.Locale locale56 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance(locale56);
        int int58 = numberFormat57.getMaximumIntegerDigits();
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        boolean boolean61 = numberFormat60.isGroupingUsed();
        java.util.Currency currency62 = numberFormat60.getCurrency();
        numberFormat57.setCurrency(currency62);
        java.util.Currency currency64 = numberFormat57.getCurrency();
        java.math.RoundingMode roundingMode65 = numberFormat57.getRoundingMode();
        java.text.ParsePosition parsePosition68 = new java.text.ParsePosition((int) 'a');
        java.lang.String str69 = parsePosition68.toString();
        java.lang.String str70 = parsePosition68.toString();
        java.lang.Object obj71 = numberFormat57.parseObject("zho", parsePosition68);
        java.lang.Object obj72 = fractionFormat51.parseObject("java.text.NumberFormat$Field(currency)", parsePosition68);
        org.apache.commons.math.fraction.Fraction fraction73 = properFractionFormat2.parse("", parsePosition68);
        java.text.NumberFormat numberFormat74 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat75 = properFractionFormat2.getNumeratorFormat();
        numberFormat75.setMaximumFractionDigits((int) (short) 100);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNull(fraction6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str24, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Chinese (Taiwan)" + "'", str28, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNull(fraction38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertEquals(locale48.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertEquals(locale56.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(currency62);
        org.junit.Assert.assertEquals(currency62.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency64);
        org.junit.Assert.assertEquals(currency64.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode65 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode65.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str69, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str70, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNull(fraction73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(numberFormat75);
    }

    @Test
    public void test08380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08380");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.util.Currency currency8 = numberFormat7.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        java.text.NumberFormat numberFormat10 = fractionFormat9.getDenominatorFormat();
        java.text.NumberFormat numberFormat11 = fractionFormat9.getNumeratorFormat();
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition(599);
        parsePosition14.setErrorIndex(100);
        java.lang.Object obj17 = fractionFormat9.parseObject("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 11 to fraction (0/32)", parsePosition14);
        java.text.NumberFormat.Field field19 = java.text.NumberFormat.Field.CURRENCY;
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder20.setScript("");
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str24 = locale23.getDisplayLanguage();
        java.lang.String str25 = locale23.toLanguageTag();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.lang.String str28 = locale26.getISO3Language();
        java.lang.String str29 = locale23.getDisplayScript(locale26);
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.lang.String str31 = locale23.getDisplayCountry(locale30);
        java.util.Locale.Builder builder32 = builder20.setLocale(locale30);
        java.lang.String str33 = locale30.getDisplayScript();
        boolean boolean34 = field19.equals((java.lang.Object) locale30);
        java.text.FieldPosition fieldPosition36 = new java.text.FieldPosition((java.text.Format.Field) field19, 0);
        java.util.Locale locale37 = java.util.Locale.TAIWAN;
        java.lang.String str38 = locale37.toLanguageTag();
        java.util.Set<java.lang.String> strSet39 = locale37.getUnicodeLocaleAttributes();
        java.lang.String str40 = locale37.getDisplayCountry();
        java.lang.String str41 = locale37.getISO3Country();
        java.util.Locale locale42 = locale37.stripExtensions();
        boolean boolean43 = field19.equals((java.lang.Object) locale42);
        java.text.NumberFormat.Field field44 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition45 = new java.text.FieldPosition((java.text.Format.Field) field44);
        java.lang.String str46 = fieldPosition45.toString();
        java.util.Locale locale47 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.lang.String str49 = locale48.getDisplayScript();
        java.lang.String str50 = locale47.getDisplayName(locale48);
        boolean boolean51 = fieldPosition45.equals((java.lang.Object) locale48);
        fieldPosition45.setEndIndex((int) '#');
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getCurrencyInstance(locale54);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction60 = properFractionFormat56.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition59);
        boolean boolean61 = fieldPosition45.equals((java.lang.Object) parsePosition59);
        boolean boolean62 = field19.equals((java.lang.Object) parsePosition59);
        java.lang.Object obj63 = fractionFormat9.parseObject("english (-119 / 120)", parsePosition59);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(field19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str24, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh-TW" + "'", str25, "zh-TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "zho" + "'", str28, "zho");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Taiwan" + "'", str31, "Taiwan");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zh-TW" + "'", str38, "zh-TW");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\ub300\ub9cc" + "'", str40, "\ub300\ub9cc");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "TWN" + "'", str41, "TWN");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(field44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str46, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Chinese (Taiwan)" + "'", str50, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNull(fraction60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj63);
    }

    @Test
    public void test08381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08381");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        java.lang.String str3 = numberFormat0.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        java.lang.String[] strArray10 = java.util.Locale.getISOCountries();
        boolean boolean11 = numberFormat9.equals((java.lang.Object) strArray10);
        java.util.Locale locale15 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        int int17 = numberFormat16.getMaximumIntegerDigits();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        boolean boolean20 = numberFormat19.isGroupingUsed();
        java.util.Currency currency21 = numberFormat19.getCurrency();
        numberFormat16.setCurrency(currency21);
        java.util.Currency currency23 = numberFormat16.getCurrency();
        java.math.RoundingMode roundingMode24 = numberFormat16.getRoundingMode();
        numberFormat9.setRoundingMode(roundingMode24);
        boolean boolean26 = numberFormat9.isParseIntegerOnly();
        properFractionFormat4.setWholeFormat(numberFormat9);
        java.text.NumberFormat numberFormat28 = properFractionFormat4.getDenominatorFormat();
        java.text.NumberFormat numberFormat29 = properFractionFormat4.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj31 = numberFormat29.parseObject("de_DE");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
        org.junit.Assert.assertEquals(currency1.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100%" + "'", str3, "100%");
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode24 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode24.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
    }

    @Test
    public void test08382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08382");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        numberFormat4.setParseIntegerOnly(false);
        numberFormat4.setMaximumIntegerDigits(3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getNumeratorFormat();
        java.util.Locale locale13 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.lang.String str15 = locale13.getDisplayCountry();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getIntegerInstance(locale13);
        numberFormat16.setMinimumIntegerDigits(0);
        java.lang.String str20 = numberFormat16.format(1.0d);
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Locale locale22 = locale21.stripExtensions();
        java.util.Locale locale24 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale24);
        java.lang.String str26 = locale24.getDisplayCountry();
        java.lang.String str27 = locale21.getDisplayName(locale24);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.lang.String str29 = locale28.getDisplayScript();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale30.getISO3Language();
        java.lang.String str32 = locale28.getDisplayScript(locale30);
        java.lang.String str33 = locale21.getDisplayLanguage(locale30);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getNumberInstance(locale21);
        java.util.Currency currency35 = numberFormat34.getCurrency();
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.abs();
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.negate();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.abs();
        long long46 = fraction44.longValue();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction40.multiply(fraction44);
        boolean boolean48 = numberFormat34.equals((java.lang.Object) fraction40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11, numberFormat16, numberFormat34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.util.Locale.Builder builder52 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder53 = builder52.clearExtensions();
        java.util.Locale locale54 = builder52.build();
        java.lang.String str55 = locale54.getScript();
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str57 = locale56.getDisplayLanguage();
        java.lang.String str58 = locale56.toLanguageTag();
        java.util.Locale locale59 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleAttributes();
        java.lang.String str61 = locale59.getISO3Language();
        java.lang.String str62 = locale56.getDisplayScript(locale59);
        java.util.Locale locale63 = java.util.Locale.ITALIAN;
        java.lang.String str64 = locale56.getDisplayCountry(locale63);
        java.util.Locale locale66 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str67 = locale63.getDisplayLanguage(locale66);
        java.lang.String str68 = locale54.getDisplayCountry(locale66);
        java.lang.String str69 = locale54.getDisplayLanguage();
        boolean boolean70 = numberFormat4.equals((java.lang.Object) locale54);
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getPercentInstance(locale54);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Korean" + "'", str27, "Korean");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "kor" + "'", str31, "kor");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str33, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str57, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "zh-TW" + "'", str58, "zh-TW");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "zho" + "'", str61, "zho");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Taiwan" + "'", str64, "Taiwan");
        org.junit.Assert.assertEquals(locale66.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Italian" + "'", str67, "Italian");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(numberFormat71);
    }

    @Test
    public void test08383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08383");
        java.util.Locale locale2 = new java.util.Locale("java.text.ParsePosition[index=1,errorIndex=0]", "cinese");
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.util.Locale.setDefault(category3, locale5);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = locale8.getDisplayScript(locale9);
        java.util.Locale.setDefault(category3, locale8);
        java.util.Locale locale15 = new java.util.Locale("Japanese (Japan)", "chinois", "-1 / 120");
        java.util.Locale.setDefault(category3, locale15);
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale17);
        java.util.Locale locale20 = locale17.stripExtensions();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        java.lang.String str23 = locale20.getDisplayName(locale21);
        java.util.Locale.setDefault(category3, locale20);
        java.lang.String str25 = locale2.getDisplayCountry(locale20);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getNumberInstance(locale20);
        java.lang.String str27 = locale20.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = locale20.getUnicodeLocaleType("java.text.ParseException: zh_TW");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: java.text.ParseException: zh_TW");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.parseposition[index=1,errorindex=0]_CINESE");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals(locale15.toString(), "japanese (japan)_CHINOIS_-1 / 120");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str23, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CINESE" + "'", str25, "CINESE");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ub300\ub9cc" + "'", str27, "\ub300\ub9cc");
    }

    @Test
    public void test08384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08384");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number11 = numberFormat7.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition10);
        parsePosition10.setErrorIndex(0);
        parsePosition10.setIndex(1);
        parsePosition10.setErrorIndex(32);
        parsePosition10.setErrorIndex(1440000);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(number11);
    }

    @Test
    public void test08385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08385");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency8 = numberFormat5.getCurrency();
        java.lang.String str10 = numberFormat5.format((double) 9600L);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "9,600" + "'", str10, "9,600");
    }

    @Test
    public void test08386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08386");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction12.add(fraction18);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction21.divide(fraction24);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = locale27.getScript();
        boolean boolean30 = fraction26.equals((java.lang.Object) locale27);
        java.util.Locale.setDefault(category0, locale27);
        java.util.Locale locale32 = java.util.Locale.getDefault(category0);
        java.util.Locale locale33 = java.util.Locale.getDefault(category0);
        java.util.Locale locale34 = java.util.Locale.getDefault(category0);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleKeys();
        java.lang.String str37 = locale35.getDisplayScript();
        java.util.Locale.setDefault(category0, locale35);
        java.lang.String str39 = locale35.getISO3Country();
        java.lang.String str40 = locale35.getLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test08387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08387");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.util.Locale locale6 = locale1.stripExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.lang.String str10 = locale8.getScript();
        boolean boolean11 = locale8.hasExtensions();
        java.lang.String str12 = locale6.getDisplayScript(locale8);
        java.lang.String str14 = locale8.getExtension('u');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test08388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08388");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        int int5 = numberFormat1.getMaximumIntegerDigits();
        numberFormat1.setGroupingUsed(true);
        numberFormat1.setMinimumFractionDigits((-100));
        int int10 = numberFormat1.getMinimumIntegerDigits();
        java.text.NumberFormat numberFormat12 = null;
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        numberFormat17.setMinimumIntegerDigits((int) (short) -1);
        boolean boolean20 = numberFormat17.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12, numberFormat17);
        java.util.Currency currency22 = numberFormat17.getCurrency();
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        boolean boolean32 = numberFormat31.isGroupingUsed();
        java.util.Currency currency33 = numberFormat31.getCurrency();
        numberFormat28.setCurrency(currency33);
        java.util.Currency currency35 = numberFormat28.getCurrency();
        java.math.RoundingMode roundingMode36 = numberFormat28.getRoundingMode();
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) 'a');
        java.lang.String str40 = parsePosition39.toString();
        java.lang.String str41 = parsePosition39.toString();
        java.lang.Object obj42 = numberFormat28.parseObject("zho", parsePosition39);
        java.lang.String str43 = parsePosition39.toString();
        java.lang.Object obj44 = numberFormat17.parseObject("ko", parsePosition39);
        int int45 = parsePosition39.getErrorIndex();
        java.lang.Object obj46 = numberFormat1.parseObject("French (Canada)", parsePosition39);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.text.NumberFormat numberFormat50 = properFractionFormat49.getWholeFormat();
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean54 = numberFormat52.equals((java.lang.Object) numberFormat53);
        properFractionFormat49.setWholeFormat(numberFormat52);
        boolean boolean56 = parsePosition39.equals((java.lang.Object) numberFormat52);
        java.lang.String str58 = numberFormat52.format((double) 11);
        numberFormat52.setMinimumIntegerDigits((int) (short) 32);
        java.text.ParsePosition parsePosition63 = new java.text.ParsePosition(0);
        int int64 = parsePosition63.getIndex();
        java.lang.Object obj65 = numberFormat52.parseObject("19", parsePosition63);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(currency33);
        org.junit.Assert.assertEquals(currency33.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode36.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str40, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str41, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str43, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1,100%" + "'", str58, "1,100%");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNull(obj65);
    }

    @Test
    public void test08389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08389");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.String str6 = numberFormat4.format((double) 10L);
        java.util.Currency currency7 = numberFormat4.getCurrency();
        numberFormat4.setMaximumIntegerDigits((int) (short) 0);
        java.lang.String str11 = numberFormat4.format((long) 2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        org.apache.commons.math.fraction.Fraction fraction14 = properFractionFormat12.parse("50%");
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1,000%" + "'", str6, "1,000%");
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0%" + "'", str11, "0%");
        org.junit.Assert.assertNotNull(fraction14);
    }

    @Test
    public void test08390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08390");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat5 = properFractionFormat4.getWholeFormat();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale6.getISO3Language();
        java.lang.String str8 = locale6.getDisplayCountry();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str11 = locale9.getISO3Language();
        java.lang.String str12 = locale6.getDisplayScript(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.util.Locale locale18 = new java.util.Locale("zho", "Chinese (Taiwan)", "Overflow trying to convert {0} to fraction ({1}/{2})");
        java.lang.String str19 = locale14.getDisplayLanguage(locale18);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale18);
        int int21 = numberFormat20.getMaximumFractionDigits();
        numberFormat20.setParseIntegerOnly(false);
        numberFormat20.setMinimumIntegerDigits(34);
        fractionFormat13.setDenominatorFormat(numberFormat20);
        java.text.NumberFormat.Field field27 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition28 = new java.text.FieldPosition((java.text.Format.Field) field27);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale29);
        boolean boolean31 = field27.equals((java.lang.Object) locale29);
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.lang.String str33 = locale32.getDisplayCountry();
        java.lang.String str34 = locale29.getDisplayVariant(locale32);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getIntegerInstance(locale32);
        int int36 = numberFormat35.getMaximumFractionDigits();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.Object obj40 = numberFormat38.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = new org.apache.commons.math.fraction.FractionFormat(numberFormat38);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getCurrencyInstance(locale42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.util.Locale locale46 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale46);
        java.lang.String str49 = fractionFormat47.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat50 = fractionFormat47.getNumeratorFormat();
        java.util.Locale locale51 = java.util.Locale.getDefault();
        java.util.Locale locale52 = locale51.stripExtensions();
        java.util.Locale locale54 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale54);
        java.lang.String str56 = locale54.getDisplayCountry();
        java.lang.String str57 = locale51.getDisplayName(locale54);
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.lang.String str59 = locale58.getDisplayScript();
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale60.getISO3Language();
        java.lang.String str62 = locale58.getDisplayScript(locale60);
        java.lang.String str63 = locale51.getDisplayLanguage(locale60);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getNumberInstance(locale51);
        fractionFormat47.setNumeratorFormat(numberFormat64);
        properFractionFormat44.setWholeFormat(numberFormat64);
        fractionFormat41.setNumeratorFormat(numberFormat64);
        java.text.NumberFormat numberFormat68 = fractionFormat41.getNumeratorFormat();
        java.text.NumberFormat numberFormat69 = fractionFormat41.getDenominatorFormat();
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getPercentInstance();
        numberFormat70.setMaximumIntegerDigits(2147483647);
        java.lang.String str74 = numberFormat70.format((long) 'a');
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale75);
        java.text.NumberFormat numberFormat77 = fractionFormat76.getDenominatorFormat();
        numberFormat77.setMinimumIntegerDigits(1728000);
        numberFormat77.setMaximumIntegerDigits(600);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat69, numberFormat70, numberFormat77);
        java.lang.Object obj83 = numberFormat77.clone();
        java.util.Locale locale84 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat85 = java.text.NumberFormat.getInstance(locale84);
        java.util.Locale locale86 = java.util.Locale.getDefault();
        boolean boolean87 = numberFormat85.equals((java.lang.Object) locale86);
        boolean boolean88 = numberFormat85.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat89 = new org.apache.commons.math.fraction.FractionFormat(numberFormat85);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat90 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35, numberFormat77, numberFormat85);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat91 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat20, numberFormat77);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zho" + "'", str11, "zho");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale18.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Japanese" + "'", str19, "Japanese");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(field27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals(locale46.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "100 0 / 1" + "'", str49, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals(locale54.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Korean" + "'", str57, "Korean");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "kor" + "'", str61, "kor");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str63, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "9,700%" + "'", str74, "9,700%");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat76);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test08391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08391");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Italian");
        java.lang.String str2 = languageRange1.getRange();
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance(locale5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat6);
        numberFormat6.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field11 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition((java.text.Format.Field) field11);
        java.lang.String str13 = fieldPosition12.toString();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayScript();
        java.lang.String str17 = locale14.getDisplayName(locale15);
        boolean boolean18 = fieldPosition12.equals((java.lang.Object) locale15);
        fieldPosition12.setEndIndex((int) '#');
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getCurrencyInstance(locale21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction27 = properFractionFormat23.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition26);
        boolean boolean28 = fieldPosition12.equals((java.lang.Object) parsePosition26);
        java.lang.Number number29 = numberFormat6.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition26);
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction33.abs();
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getInstance(locale36);
        java.util.Locale locale38 = java.util.Locale.getDefault();
        boolean boolean39 = numberFormat37.equals((java.lang.Object) locale38);
        boolean boolean40 = fraction35.equals((java.lang.Object) locale38);
        boolean boolean41 = parsePosition26.equals((java.lang.Object) locale38);
        java.lang.String str42 = locale38.toLanguageTag();
        boolean boolean43 = languageRange1.equals((java.lang.Object) str42);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "italian" + "'", str2, "italian");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str13, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese (Taiwan)" + "'", str17, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNull(fraction27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(number29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ko" + "'", str42, "ko");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test08392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08392");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat14 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat15 = properFractionFormat3.getWholeFormat();
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        int int21 = numberFormat20.getMinimumIntegerDigits();
        java.lang.String str23 = numberFormat20.format((long) 1);
        int int24 = numberFormat20.getMaximumIntegerDigits();
        java.text.NumberFormat.Field field26 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition27 = new java.text.FieldPosition((java.text.Format.Field) field26);
        java.lang.String str28 = fieldPosition27.toString();
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = locale29.getDisplayName(locale30);
        boolean boolean33 = fieldPosition27.equals((java.lang.Object) locale30);
        fieldPosition27.setEndIndex((int) '#');
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getCurrencyInstance(locale36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.text.ParsePosition parsePosition41 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction42 = properFractionFormat38.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition41);
        boolean boolean43 = fieldPosition27.equals((java.lang.Object) parsePosition41);
        int int44 = parsePosition41.getIndex();
        java.lang.Number number45 = numberFormat20.parse("", parsePosition41);
        properFractionFormat3.setWholeFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getInstance(locale48);
        boolean boolean50 = numberFormat49.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        java.text.NumberFormat numberFormat52 = properFractionFormat51.getWholeFormat();
        numberFormat52.setMinimumFractionDigits((int) (byte) 0);
        numberFormat52.setMinimumFractionDigits(60);
        numberFormat52.setParseIntegerOnly(true);
        java.util.Locale locale59 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale59);
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getInstance(locale61);
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance(locale63);
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = new org.apache.commons.math.fraction.FractionFormat(numberFormat62, numberFormat64);
        boolean boolean66 = numberFormat64.isGroupingUsed();
        boolean boolean67 = numberFormat64.isGroupingUsed();
        fractionFormat60.setNumeratorFormat(numberFormat64);
        java.lang.Object obj69 = numberFormat64.clone();
        java.text.ParseException parseException72 = new java.text.ParseException("Taiwan", (int) (byte) 100);
        boolean boolean73 = numberFormat64.equals((java.lang.Object) parseException72);
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getPercentInstance();
        numberFormat74.setMaximumIntegerDigits(2147483647);
        java.lang.String str78 = numberFormat74.format((long) 2147483647);
        java.util.Locale locale82 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat83 = java.text.NumberFormat.getPercentInstance(locale82);
        int int84 = numberFormat83.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat85 = new org.apache.commons.math.fraction.FractionFormat(numberFormat83);
        numberFormat83.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode88 = numberFormat83.getRoundingMode();
        numberFormat74.setRoundingMode(roundingMode88);
        numberFormat64.setRoundingMode(roundingMode88);
        numberFormat64.setMaximumIntegerDigits(120);
        org.apache.commons.math.fraction.FractionFormat fractionFormat93 = new org.apache.commons.math.fraction.FractionFormat(numberFormat64);
        java.util.Currency currency94 = numberFormat64.getCurrency();
        numberFormat52.setCurrency(currency94);
        numberFormat20.setCurrency(currency94);
        numberFormat20.setParseIntegerOnly(true);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "100%" + "'", str23, "100%");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(field26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str28, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (Taiwan)" + "'", str32, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNull(fraction42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNull(number45);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "214,748,364,700%" + "'", str78, "214,748,364,700%");
        org.junit.Assert.assertEquals(locale82.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2147483647 + "'", int84 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode88 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode88.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(currency94);
        org.junit.Assert.assertEquals(currency94.toString(), "XXX");
    }

    @Test
    public void test08393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08393");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale3.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder7 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale locale9 = builder7.build();
        java.lang.String str10 = locale9.toLanguageTag();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        java.util.Locale locale17 = new java.util.Locale("cor\351en", "en");
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleKeys();
        java.lang.String str19 = locale9.getDisplayScript(locale17);
        java.lang.String str20 = locale9.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh-TW" + "'", str10, "zh-TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese" + "'", str14, "Chinese");
        org.junit.Assert.assertEquals(locale17.toString(), "cor\351en_EN");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "TW" + "'", str20, "TW");
        org.junit.Assert.assertNotNull(fractionFormat21);
    }

    @Test
    public void test08394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08394");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault(category0);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = locale10.getScript();
        java.util.Locale locale15 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str16 = locale10.getDisplayScript(locale15);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getNumberInstance(locale15);
        java.util.Set<java.lang.String> strSet18 = locale15.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet19 = locale15.getExtensionKeys();
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale locale21 = java.util.Locale.PRC;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.lang.String str23 = locale15.getDisplayName(locale20);
        java.util.Locale locale24 = locale20.stripExtensions();
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = locale25.getDisplayCountry(locale26);
        java.util.Set<java.lang.String> strSet29 = locale26.getUnicodeLocaleAttributes();
        java.lang.String str30 = locale24.getDisplayVariant(locale26);
        java.lang.String str31 = locale24.getDisplayCountry();
        java.lang.String str32 = locale24.getScript();
        java.lang.String str33 = locale24.getLanguage();
        java.util.Locale locale37 = new java.util.Locale("zho", "Chinese (Taiwan)", "Overflow trying to convert {0} to fraction ({1}/{2})");
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleKeys();
        java.lang.String str39 = locale24.getDisplayVariant(locale37);
        java.util.Locale.setDefault(category0, locale37);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getInstance(locale37);
        java.util.Currency currency42 = numberFormat41.getCurrency();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals(locale15.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str22, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str23, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Japan" + "'", str28, "Japan");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\uce90\ub098\ub2e4" + "'", str31, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "en" + "'", str33, "en");
        org.junit.Assert.assertEquals(locale37.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(currency42);
        org.junit.Assert.assertEquals(currency42.toString(), "XXX");
    }

    @Test
    public void test08395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08395");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat4 = properFractionFormat3.getWholeFormat();
        numberFormat4.setMinimumFractionDigits((int) (byte) 0);
        numberFormat4.setMinimumFractionDigits(60);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.util.Locale locale13 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.lang.String str15 = locale13.getDisplayCountry();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getIntegerInstance(locale13);
        java.lang.String str17 = locale10.getDisplayCountry(locale13);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18);
        java.text.ParsePosition parsePosition22 = new java.text.ParsePosition((int) '4');
        parsePosition22.setErrorIndex(600);
        int int25 = parsePosition22.getIndex();
        java.lang.Object obj26 = fractionFormat19.parseObject("it", parsePosition22);
        java.lang.String str27 = parsePosition22.toString();
        java.lang.Object obj28 = numberFormat4.parseObject("\u65e5\u672c,-1 / 100)", parsePosition22);
        numberFormat4.setMaximumIntegerDigits(87);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "France" + "'", str17, "France");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.text.ParsePosition[index=52,errorIndex=51]" + "'", str27, "java.text.ParsePosition[index=52,errorIndex=51]");
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test08396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08396");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj8 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition7);
        parsePosition7.setIndex(119);
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale13 = java.util.Locale.getDefault(category11);
        boolean boolean14 = parsePosition7.equals((java.lang.Object) category11);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str20 = locale18.getDisplayCountry();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance(locale18);
        java.lang.String str22 = locale15.getDisplayCountry(locale18);
        java.util.Locale.setDefault(category11, locale18);
        java.util.Set<java.lang.String> strSet24 = locale18.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getNumberInstance(locale18);
        numberFormat25.setMinimumFractionDigits(11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj29 = numberFormat25.parseObject("ko-KR");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "France" + "'", str22, "France");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(numberFormat25);
    }

    @Test
    public void test08397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08397");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        java.lang.String str14 = locale12.getDisplayCountry();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale15.getISO3Language();
        java.lang.String str18 = locale12.getDisplayScript(locale15);
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale20 = java.util.Locale.getDefault();
        java.util.Locale locale21 = locale20.stripExtensions();
        java.util.Locale.setDefault(category0, locale21);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getNumberInstance(locale21);
        java.util.Locale.setDefault(locale21);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zho" + "'", str17, "zho");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
    }

    @Test
    public void test08398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08398");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        int int6 = numberFormat2.getMaximumFractionDigits();
        numberFormat2.setParseIntegerOnly(true);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2);
        numberFormat2.setMaximumIntegerDigits(60);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        boolean boolean15 = numberFormat14.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        java.lang.String str18 = numberFormat14.format(0.008333333333333333d);
        boolean boolean19 = numberFormat14.isParseIntegerOnly();
        java.text.ParsePosition parsePosition22 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj23 = numberFormat14.parseObject("\u65e5\u6587", parsePosition22);
        int int24 = parsePosition22.getErrorIndex();
        java.lang.String str25 = parsePosition22.toString();
        parsePosition22.setErrorIndex((-2));
        java.lang.Number number28 = numberFormat2.parse("\ub300\ub9cc)", parsePosition22);
        int int29 = parsePosition22.getErrorIndex();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale30.getISO3Language();
        java.util.Set<java.lang.Character> charSet32 = locale30.getExtensionKeys();
        java.util.Locale locale33 = java.util.Locale.US;
        java.lang.String str34 = locale33.getDisplayScript();
        java.lang.String str35 = locale30.getDisplayVariant(locale33);
        java.lang.String str36 = locale30.getDisplayCountry();
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale30);
        java.util.Locale locale38 = locale30.stripExtensions();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance(locale38);
        boolean boolean40 = parsePosition22.equals((java.lang.Object) numberFormat39);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number42 = numberFormat39.parse("\u53f0\u6e7e (Canada,zh,TW)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"?? (Canada,zh,TW)\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1%" + "'", str18, "1%");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str25, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "kor" + "'", str31, "kor");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test08399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08399");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder8 = builder5.clear();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("9,700%");
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.util.Locale.Builder builder12 = builder8.setLocale(locale10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str18 = locale14.getISO3Language();
        boolean boolean19 = numberFormat13.equals((java.lang.Object) locale14);
        java.util.Locale.Builder builder20 = builder8.setLocale(locale14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder20.addUnicodeLocaleAttribute("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08400");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.setRegion("");
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = locale9.getDisplayCountry();
        java.util.Locale.Builder builder11 = builder6.setLocale(locale9);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.lang.String str14 = locale12.toLanguageTag();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale15.getISO3Language();
        java.lang.String str18 = locale12.getDisplayScript(locale15);
        java.lang.String str19 = locale12.getDisplayName();
        java.lang.String str20 = locale9.getDisplayLanguage(locale12);
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale21);
        java.util.Locale locale23 = locale21.stripExtensions();
        java.lang.String str24 = locale21.getDisplayName();
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("0");
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = locale27.getScript();
        java.lang.String str30 = locale26.getDisplayCountry(locale27);
        java.lang.String str31 = locale21.getDisplayLanguage(locale26);
        java.lang.String str32 = locale26.getDisplayScript();
        java.lang.String str33 = locale9.getDisplayVariant(locale26);
        java.lang.String str34 = locale9.getLanguage();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str13, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh-TW" + "'", str14, "zh-TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zho" + "'", str17, "zho");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str19, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str20, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str24, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese" + "'", str31, "Chinese");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
    }

    @Test
    public void test08401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08401");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        int int18 = fraction12.intValue();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction12.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 100, (int) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction19.multiply(fraction22);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str30 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction29);
        float float31 = fraction29.floatValue();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction29.negate();
        java.lang.String str33 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction32);
        double double34 = fraction32.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction26.multiply(fraction32);
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 100, (int) (byte) 100);
        float float39 = fraction38.floatValue();
        org.apache.commons.math.fraction.Fraction fraction42 = new org.apache.commons.math.fraction.Fraction((-2), 20);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction38.multiply(fraction42);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction35.divide(fraction42);
        byte byte45 = fraction44.byteValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1 / 1" + "'", str30, "1 / 1");
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 1.0f + "'", float31 == 1.0f);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1 / 1" + "'", str33, "-1 / 1");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 1.0f + "'", float39 == 1.0f);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + byte45 + "' != '" + (byte) 88 + "'", byte45 == (byte) 88);
    }

    @Test
    public void test08402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08402");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.text.NumberFormat numberFormat7 = properFractionFormat6.getWholeFormat();
        numberFormat7.setGroupingUsed(false);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertNotNull(numberFormat7);
    }

    @Test
    public void test08403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08403");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction12.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction12.abs();
        long long26 = fraction12.longValue();
        org.apache.commons.math.fraction.Fraction fraction28 = new org.apache.commons.math.fraction.Fraction((double) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        long long39 = fraction37.longValue();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction33.multiply(fraction37);
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.negate();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.abs();
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.negate();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.abs();
        long long51 = fraction49.longValue();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction45.multiply(fraction49);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction37.subtract(fraction52);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction28.subtract(fraction53);
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.negate();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.abs();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction64.abs();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction58.add(fraction64);
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.negate();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction67.divide(fraction70);
        org.apache.commons.math.fraction.Fraction fraction75 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction76 = fraction75.negate();
        org.apache.commons.math.fraction.Fraction fraction77 = fraction76.abs();
        org.apache.commons.math.fraction.Fraction fraction78 = fraction76.abs();
        org.apache.commons.math.fraction.Fraction fraction79 = fraction67.subtract(fraction78);
        org.apache.commons.math.fraction.Fraction fraction80 = fraction67.reciprocal();
        java.lang.String str81 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction80);
        org.apache.commons.math.fraction.Fraction fraction82 = fraction28.subtract(fraction80);
        org.apache.commons.math.fraction.Fraction fraction83 = fraction12.divide(fraction28);
        org.apache.commons.math.fraction.Fraction fraction86 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 1, 119);
        org.apache.commons.math.fraction.Fraction fraction87 = fraction12.multiply(fraction86);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "60 / 1" + "'", str81, "60 / 1");
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertNotNull(fraction87);
    }

    @Test
    public void test08404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08404");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it-IT");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Locale locale11 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale8.getDisplayName(locale11);
        java.util.Locale.Builder builder15 = builder6.setLocale(locale8);
        java.util.Locale.Builder builder16 = builder15.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder16.removeUnicodeLocaleAttribute("java.text.ParseException: 172,800,000%");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: java.text.ParseException: 172,800,000% [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Korean" + "'", str14, "Korean");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08405");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str15 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction14);
        long long16 = fraction14.longValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction4.add(fraction14);
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance(locale19);
        boolean boolean21 = numberFormat20.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24, numberFormat26);
        java.text.ParsePosition parsePosition30 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj31 = numberFormat26.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition30);
        properFractionFormat22.setNumeratorFormat(numberFormat26);
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale33);
        boolean boolean35 = numberFormat34.isParseIntegerOnly();
        numberFormat34.setGroupingUsed(false);
        properFractionFormat22.setWholeFormat(numberFormat34);
        numberFormat34.setMinimumFractionDigits((int) 'u');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getInstance(locale43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = new org.apache.commons.math.fraction.FractionFormat(numberFormat44, numberFormat46);
        java.text.ParsePosition parsePosition50 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj51 = numberFormat46.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition50);
        org.apache.commons.math.fraction.Fraction fraction52 = properFractionFormat41.parse("214,748,364,700%", parsePosition50);
        boolean boolean53 = fraction14.equals((java.lang.Object) properFractionFormat41);
        java.text.NumberFormat numberFormat54 = properFractionFormat41.getWholeFormat();
        numberFormat54.setMaximumFractionDigits(0);
        numberFormat54.setMaximumIntegerDigits(0);
        java.lang.String str60 = numberFormat54.format((double) (byte) 100);
        java.util.Locale locale62 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale62);
        java.lang.String str64 = locale62.getDisplayCountry();
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getIntegerInstance(locale62);
        java.lang.String str66 = locale62.toLanguageTag();
        java.util.Locale.Builder builder67 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder68 = builder67.clearExtensions();
        java.util.Locale locale69 = builder67.build();
        java.lang.String str70 = locale69.getScript();
        java.util.Locale locale71 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str72 = locale71.getDisplayLanguage();
        java.lang.String str73 = locale71.toLanguageTag();
        java.util.Locale locale74 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet75 = locale74.getUnicodeLocaleAttributes();
        java.lang.String str76 = locale74.getISO3Language();
        java.lang.String str77 = locale71.getDisplayScript(locale74);
        java.util.Locale locale78 = java.util.Locale.ITALIAN;
        java.lang.String str79 = locale71.getDisplayCountry(locale78);
        java.util.Locale locale81 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str82 = locale78.getDisplayLanguage(locale81);
        java.lang.String str83 = locale69.getDisplayCountry(locale81);
        java.lang.String str84 = locale62.getDisplayVariant(locale69);
        java.text.NumberFormat numberFormat85 = java.text.NumberFormat.getInstance(locale62);
        java.util.Locale locale86 = locale62.stripExtensions();
        java.text.NumberFormat numberFormat87 = java.text.NumberFormat.getPercentInstance(locale62);
        boolean boolean88 = numberFormat87.isGroupingUsed();
        numberFormat87.setMinimumFractionDigits(117);
        java.util.Currency currency91 = numberFormat87.getCurrency();
        numberFormat54.setCurrency(currency91);
        int int93 = numberFormat54.getMaximumIntegerDigits();
        java.lang.Object obj94 = numberFormat54.clone();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-1 / 100" + "'", str15, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(fraction52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertEquals(locale62.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "und" + "'", str66, "und");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str72, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "zh-TW" + "'", str73, "zh-TW");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "zho" + "'", str76, "zho");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "it");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Taiwan" + "'", str79, "Taiwan");
        org.junit.Assert.assertEquals(locale81.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Italian" + "'", str82, "Italian");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "hi!");
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(currency91);
        org.junit.Assert.assertEquals(currency91.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(obj94);
    }

    @Test
    public void test08406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08406");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.getDisplayName();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale3.getCountry();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.setScript("");
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.lang.String str11 = locale8.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder12 = builder7.setLocale(locale8);
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale locale14 = builder12.build();
        java.util.Locale.Builder builder16 = builder12.removeUnicodeLocaleAttribute("eng");
        java.util.Locale locale17 = builder12.build();
        java.lang.String str18 = locale3.getDisplayLanguage(locale17);
        java.lang.String str19 = locale3.getDisplayVariant();
        java.lang.String str21 = locale3.getExtension('x');
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category23 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale24 = java.util.Locale.getDefault(category23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale25);
        java.util.Locale.setDefault(category23, locale25);
        java.util.Locale locale28 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category23, locale28);
        java.lang.String str30 = locale22.getDisplayLanguage(locale28);
        java.util.Set<java.lang.String> strSet31 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str32 = locale3.getDisplayVariant(locale22);
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("fran\347ais (France)");
        java.lang.String str35 = locale34.getLanguage();
        java.lang.String str36 = locale22.getDisplayCountry(locale34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale34);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinesisch" + "'", str11, "Chinesisch");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u97d3\u6587" + "'", str18, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.FORMAT + "'", category23.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "anglais" + "'", str30, "anglais");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(fractionFormat37);
    }

    @Test
    public void test08407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08407");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str3 = locale0.getISO3Language();
        java.text.NumberFormat.Field field4 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field4);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        boolean boolean7 = field4.equals((java.lang.Object) locale6);
        java.lang.String str8 = locale6.getCountry();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str12 = locale9.getDisplayScript(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.lang.String str14 = locale6.getDisplayVariant(locale9);
        java.lang.String str15 = locale0.getDisplayCountry(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale17);
        java.util.Locale locale19 = locale17.stripExtensions();
        java.lang.String str20 = locale17.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.lang.String str22 = locale21.toLanguageTag();
        java.lang.String str23 = locale21.getDisplayLanguage();
        java.lang.String str24 = locale21.getISO3Country();
        java.lang.String str25 = locale17.getDisplayScript(locale21);
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale26);
        java.util.Locale locale28 = locale26.stripExtensions();
        java.util.Locale locale29 = locale26.stripExtensions();
        java.lang.String str30 = locale17.getDisplayVariant(locale29);
        java.util.Locale locale33 = new java.util.Locale("1,396,801 / 14,400", "java.text.FieldPosition[field=100,attribute=null,beginIndex=117,endIndex=0]");
        java.lang.String str34 = locale29.getDisplayLanguage(locale33);
        java.util.Locale.Category category35 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale36 = java.util.Locale.getDefault(category35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale37);
        java.util.Locale.setDefault(category35, locale37);
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.lang.String str42 = locale40.getDisplayScript(locale41);
        java.util.Locale.setDefault(category35, locale40);
        java.util.Locale locale47 = new java.util.Locale("Japanese (Japan)", "chinois", "-1 / 120");
        java.util.Locale.setDefault(category35, locale47);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale49.getISO3Language();
        java.lang.String str51 = locale49.getDisplayCountry();
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleAttributes();
        java.lang.String str54 = locale52.getISO3Language();
        java.lang.String str55 = locale49.getDisplayScript(locale52);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance(locale52);
        java.util.Locale.setDefault(category35, locale52);
        java.util.Locale locale60 = new java.util.Locale("0 / 1", "\u53f0\u6e7e");
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.lang.String str62 = locale61.getScript();
        java.util.Locale locale66 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str67 = locale61.getDisplayScript(locale66);
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale61);
        java.lang.String str69 = locale61.getCountry();
        java.util.Locale locale70 = java.util.Locale.ITALIAN;
        java.lang.String str71 = locale70.getDisplayCountry();
        java.util.Locale locale72 = java.util.Locale.CANADA;
        java.util.Locale locale73 = java.util.Locale.PRC;
        java.lang.String str74 = locale72.getDisplayName(locale73);
        java.lang.String str75 = locale70.getDisplayCountry(locale72);
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.lang.String str77 = locale76.getISO3Language();
        java.util.Set<java.lang.String> strSet78 = locale76.getUnicodeLocaleKeys();
        java.lang.String str79 = locale76.getDisplayLanguage();
        java.lang.String str80 = locale70.getDisplayScript(locale76);
        java.lang.String str81 = locale61.getDisplayScript(locale70);
        java.lang.String str82 = locale60.getDisplayName(locale61);
        java.util.Locale.setDefault(category35, locale60);
        java.text.NumberFormat numberFormat84 = java.text.NumberFormat.getCurrencyInstance(locale60);
        java.lang.String str85 = locale29.getDisplayScript(locale60);
        java.lang.String str86 = locale9.getDisplayLanguage(locale60);
        java.lang.String str87 = locale9.getScript();
        java.lang.String str88 = locale9.getScript();
        java.text.NumberFormat numberFormat89 = java.text.NumberFormat.getIntegerInstance(locale9);
        java.util.Set<java.lang.String> strSet90 = locale9.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zho" + "'", str3, "zho");
        org.junit.Assert.assertNotNull(field4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CN" + "'", str8, "CN");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u53f0\u7063" + "'", str15, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str20, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh-TW" + "'", str22, "zh-TW");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str23, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "TWN" + "'", str24, "TWN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals(locale33.toString(), "1,396,801 / 14,400_JAVA.TEXT.FIELDPOSITION[FIELD=100,ATTRIBUTE=NULL,BEGININDEX=117,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese" + "'", str34, "Chinese");
        org.junit.Assert.assertTrue("'" + category35 + "' != '" + java.util.Locale.Category.FORMAT + "'", category35.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals(locale47.toString(), "japanese (japan)_CHINOIS_-1 / 120");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "kor" + "'", str50, "kor");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "zho" + "'", str54, "zho");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(numberFormat56);
// flaky:         org.junit.Assert.assertEquals(locale60.toString(), "\u53f0\u6e7e");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals(locale66.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(fractionFormat68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str74, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "kor" + "'", str77, "kor");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str79, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\u53f0\u6e7e)" + "'", str82, "\u53f0\u6e7e)");
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Chinese" + "'", str86, "Chinese");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(numberFormat89);
        org.junit.Assert.assertNotNull(strSet90);
    }

    @Test
    public void test08408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08408");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.util.Locale locale30 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.lang.String str33 = fractionFormat31.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat34 = fractionFormat31.getNumeratorFormat();
        java.text.NumberFormat numberFormat35 = fractionFormat31.getNumeratorFormat();
        java.text.NumberFormat numberFormat36 = fractionFormat31.getNumeratorFormat();
        java.lang.String str38 = numberFormat36.format((long) 2147483647);
        properFractionFormat28.setDenominatorFormat(numberFormat36);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        boolean boolean46 = numberFormat45.isGroupingUsed();
        properFractionFormat43.setWholeFormat(numberFormat45);
        java.text.NumberFormat numberFormat48 = properFractionFormat43.getWholeFormat();
        java.text.ParsePosition parsePosition51 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number52 = numberFormat48.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition51);
        parsePosition51.setErrorIndex(0);
        parsePosition51.setErrorIndex(1728000);
        java.lang.Object obj57 = properFractionFormat28.parseObject("\u97d3\u6587", parsePosition51);
        java.util.Locale locale58 = java.util.Locale.JAPAN;
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = locale59.getDisplayScript();
        java.lang.String str61 = locale58.getDisplayCountry(locale59);
        java.util.Locale locale62 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str63 = locale62.getDisplayLanguage();
        java.util.Locale locale64 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str65 = locale62.getDisplayCountry(locale64);
        java.lang.String str66 = locale59.getDisplayName(locale64);
        java.util.Set<java.lang.String> strSet67 = locale59.getUnicodeLocaleKeys();
        boolean boolean68 = parsePosition51.equals((java.lang.Object) locale59);
        java.util.Set<java.lang.Character> charSet69 = locale59.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "100 0 / 1" + "'", str33, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2,147,483,647" + "'", str38, "2,147,483,647");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNull(number52);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Japan" + "'", str61, "Japan");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str63, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Taiwan" + "'", str65, "Taiwan");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(charSet69);
    }

    @Test
    public void test08409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08409");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 100 to fraction (100/-1)");
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str3 = locale1.getDisplayCountry();
        java.util.Locale locale4 = locale1.stripExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.text.NumberFormat numberFormat6 = fractionFormat5.getNumeratorFormat();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
    }

    @Test
    public void test08410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08410");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (byte) 35);
        java.lang.String str2 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "35 / 1" + "'", str2, "35 / 1");
    }

    @Test
    public void test08411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08411");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.lang.String str1 = field0.toString();
        java.lang.String str2 = field0.toString();
        java.util.Locale locale4 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.lang.String str7 = fractionFormat5.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat8 = fractionFormat5.getNumeratorFormat();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.lang.String str15 = locale9.getDisplayName(locale12);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale16.getDisplayScript();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale18.getISO3Language();
        java.lang.String str20 = locale16.getDisplayScript(locale18);
        java.lang.String str21 = locale9.getDisplayLanguage(locale18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getNumberInstance(locale9);
        fractionFormat5.setNumeratorFormat(numberFormat22);
        numberFormat22.setMinimumIntegerDigits(2);
        boolean boolean26 = field0.equals((java.lang.Object) numberFormat22);
        java.text.FieldPosition fieldPosition27 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int28 = fieldPosition27.getEndIndex();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException32 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException36 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str37 = fractionConversionException36.getPattern();
        java.lang.Throwable[] throwableArray38 = fractionConversionException36.getSuppressed();
        fractionConversionException32.addSuppressed((java.lang.Throwable) fractionConversionException36);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException43 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException47 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str48 = fractionConversionException47.getPattern();
        java.lang.Throwable[] throwableArray49 = fractionConversionException47.getSuppressed();
        fractionConversionException43.addSuppressed((java.lang.Throwable) fractionConversionException47);
        fractionConversionException36.addSuppressed((java.lang.Throwable) fractionConversionException47);
        java.lang.String str52 = fractionConversionException47.getPattern();
        java.text.ParseException parseException55 = new java.text.ParseException("1 / 1", 52);
        int int56 = parseException55.getErrorOffset();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException60 = new org.apache.commons.math.fraction.FractionConversionException((double) 100L, 100L, (long) (byte) -1);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException64 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str65 = fractionConversionException64.getPattern();
        fractionConversionException60.addSuppressed((java.lang.Throwable) fractionConversionException64);
        parseException55.addSuppressed((java.lang.Throwable) fractionConversionException64);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException70 = new org.apache.commons.math.fraction.FractionConversionException((double) 100.0f, (int) (byte) 0);
        java.lang.Throwable[] throwableArray71 = fractionConversionException70.getSuppressed();
        fractionConversionException64.addSuppressed((java.lang.Throwable) fractionConversionException70);
        fractionConversionException47.addSuppressed((java.lang.Throwable) fractionConversionException64);
        boolean boolean74 = fieldPosition27.equals((java.lang.Object) fractionConversionException47);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str1, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str2, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100 0 / 1" + "'", str7, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Korean" + "'", str15, "Korean");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str37, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str48, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str52, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str65, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test08412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08412");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str11 = fractionFormat9.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat12 = fractionFormat9.getNumeratorFormat();
        numberFormat12.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency15 = numberFormat12.getCurrency();
        numberFormat6.setCurrency(currency15);
        java.lang.Object obj17 = numberFormat6.clone();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency20 = numberFormat19.getCurrency();
        java.lang.String str22 = numberFormat19.format(1.0d);
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale24);
        java.util.Currency currency27 = numberFormat26.getCurrency();
        numberFormat26.setMinimumIntegerDigits(1);
        numberFormat26.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition34 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj35 = numberFormat26.parseObject("Japan", parsePosition34);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException39 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str40 = fractionConversionException39.getPattern();
        java.lang.Throwable[] throwableArray41 = fractionConversionException39.getSuppressed();
        java.lang.Object[] objArray42 = fractionConversionException39.getArguments();
        boolean boolean43 = parsePosition34.equals((java.lang.Object) objArray42);
        int int44 = parsePosition34.getIndex();
        java.lang.String str45 = parsePosition34.toString();
        java.lang.Object obj46 = numberFormat19.parseObject("java.text.ParsePosition[index=52,errorIndex=-1]", parsePosition34);
        int int47 = parsePosition34.getIndex();
        java.lang.Number number48 = numberFormat6.parse("org.apache.commons.math.fraction.FractionConversionException: Unable to convert 97 to fraction after 0 iterations", parsePosition34);
        properFractionFormat4.setWholeFormat(numberFormat6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction51 = properFractionFormat4.parse("\u53f0\u6e7e");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"??\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100 0 / 1" + "'", str11, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "100%" + "'", str22, "100%");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "TWD");
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str40, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str45, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNull(number48);
    }

    @Test
    public void test08413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08413");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale3);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str14 = locale10.getISO3Language();
        boolean boolean15 = numberFormat9.equals((java.lang.Object) locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat19 = properFractionFormat18.getDenominatorFormat();
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance(locale21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat22, numberFormat24);
        java.text.ParsePosition parsePosition28 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj29 = numberFormat24.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition28);
        java.lang.String str30 = parsePosition28.toString();
        boolean boolean32 = parsePosition28.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        parsePosition28.setErrorIndex(2147483647);
        java.lang.Object obj35 = numberFormat19.parseObject("\u4e2d\u6587\u4e2d\u570b)", parsePosition28);
        parsePosition28.setIndex(10);
        org.apache.commons.math.fraction.Fraction fraction38 = properFractionFormat16.parse("2,147,483,647", parsePosition28);
        java.lang.Object obj39 = numberFormat7.parseObject("1,728,001 / 120", parsePosition28);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str30, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNull(obj39);
    }

    @Test
    public void test08414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08414");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale5);
        numberFormat7.setMaximumIntegerDigits((int) 'x');
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.text.NumberFormat numberFormat13 = properFractionFormat12.getWholeFormat();
        numberFormat13.setGroupingUsed(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7, numberFormat13);
        int int17 = numberFormat13.getMinimumIntegerDigits();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "\uc911\uad6d\uc5b4__Taiwan");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test08415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08415");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        boolean boolean5 = numberFormat3.isGroupingUsed();
        boolean boolean6 = numberFormat3.isGroupingUsed();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj10 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat13 = properFractionFormat12.getDenominatorFormat();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        boolean boolean20 = numberFormat19.isGroupingUsed();
        properFractionFormat17.setWholeFormat(numberFormat19);
        java.text.NumberFormat numberFormat22 = properFractionFormat17.getWholeFormat();
        java.lang.String str24 = numberFormat22.format((double) 1.0f);
        numberFormat22.setMaximumIntegerDigits((int) (byte) 100);
        numberFormat22.setParseIntegerOnly(false);
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale32 = java.util.Locale.getDefault(category31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale33);
        java.util.Locale.setDefault(category31, locale33);
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category31, locale36);
        java.lang.String str38 = locale30.getDisplayLanguage(locale36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getCurrencyInstance(locale41);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.text.ParsePosition parsePosition46 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction47 = properFractionFormat43.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition46);
        java.lang.Object obj48 = fractionFormat39.parseObject("214,748,364,700%", parsePosition46);
        java.lang.String str49 = parsePosition46.toString();
        java.lang.Object obj50 = numberFormat22.parseObject("600", parsePosition46);
        org.apache.commons.math.fraction.Fraction fraction51 = properFractionFormat12.parse("\uc911\uad6d\uc5b4", parsePosition46);
        java.lang.Object obj52 = numberFormat3.parseObject("10,000%", parsePosition46);
        int int53 = parsePosition46.getIndex();
        int int54 = parsePosition46.getErrorIndex();
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayScript();
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.lang.String str58 = locale57.getISO3Language();
        java.lang.String str59 = locale55.getDisplayScript(locale57);
        java.lang.String str60 = locale57.getScript();
        java.util.Locale.setDefault(locale57);
        boolean boolean62 = parsePosition46.equals((java.lang.Object) locale57);
        parsePosition46.setIndex(10000);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100%" + "'", str24, "100%");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale32);
// flaky:         org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "anglais" + "'", str38, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNull(fraction47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=3]" + "'", str49, "java.text.ParsePosition[index=1,errorIndex=3]");
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(fraction51);
        org.junit.Assert.assertEquals("'" + obj52 + "' != '" + 0L + "'", obj52, 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 7 + "'", int53 == 7);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "kor" + "'", str58, "kor");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test08416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08416");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder8 = builder3.setExtension('a', "TWN");
        java.util.Locale.Builder builder10 = builder3.removeUnicodeLocaleAttribute("zho");
        java.util.Locale locale11 = builder3.build();
        java.util.Locale.Builder builder12 = builder3.clear();
        java.text.NumberFormat.Field field13 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition((java.text.Format.Field) field13);
        java.util.Locale locale15 = java.util.Locale.CHINA;
        boolean boolean16 = field13.equals((java.lang.Object) locale15);
        java.lang.String str17 = locale15.getDisplayVariant();
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.getDefault(category19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale21);
        java.util.Locale.setDefault(category19, locale21);
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category19, locale24);
        java.lang.String str26 = locale18.getDisplayLanguage(locale24);
        java.util.Set<java.lang.String> strSet27 = locale18.getUnicodeLocaleKeys();
        java.lang.String str28 = locale15.getDisplayName(locale18);
        java.util.Locale.Builder builder29 = builder12.setLocale(locale15);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder31 = builder12.setLanguage("de_DE");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: de_DE [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "japan__#a-twn");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(field13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.FORMAT + "'", category19.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "anglais" + "'", str26, "anglais");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Chinese (China)" + "'", str28, "Chinese (China)");
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test08417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08417");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.multiply(fraction9);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction2.add(fraction9);
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.lang.String str13 = locale12.getScript();
        java.util.Locale locale17 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str18 = locale12.getDisplayScript(locale17);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance(locale17);
        int int20 = numberFormat19.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19);
        org.apache.commons.math.fraction.Fraction fraction23 = fractionFormat21.parse("100%");
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction29.multiply(fraction33);
        org.apache.commons.math.fraction.Fraction fraction35 = fraction26.add(fraction33);
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str37 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction36);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.negate();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.abs();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction41.abs();
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.negate();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.abs();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction47.abs();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction41.add(fraction47);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction36.multiply(fraction47);
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.ONE;
        long long53 = fraction52.longValue();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction36.multiply(fraction52);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction35.multiply(fraction54);
        int int56 = fraction35.intValue();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction23.add(fraction35);
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.abs();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction2.add(fraction57);
        java.lang.String str60 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals(locale17.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1 / 1" + "'", str37, "1 / 1");
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-1 / 120" + "'", str60, "-1 / 120");
    }

    @Test
    public void test08418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08418");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(32);
        java.lang.String str2 = parsePosition1.toString();
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        long long13 = fraction11.longValue();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction7.multiply(fraction11);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        long long25 = fraction23.longValue();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.multiply(fraction23);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction11.subtract(fraction26);
        org.apache.commons.math.fraction.Fraction fraction29 = new org.apache.commons.math.fraction.Fraction((double) 97);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction26.add(fraction29);
        java.lang.String str31 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction30);
        long long32 = fraction30.longValue();
        boolean boolean33 = parsePosition1.equals((java.lang.Object) long32);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.ParsePosition[index=32,errorIndex=-1]" + "'", str2, "java.text.ParsePosition[index=32,errorIndex=-1]");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1,396,801 / 14,400" + "'", str31, "1,396,801 / 14,400");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 97L + "'", long32 == 97L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test08419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08419");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        java.lang.Object obj5 = numberFormat3.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.util.Locale locale11 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str14 = fractionFormat12.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat15 = fractionFormat12.getNumeratorFormat();
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Locale locale17 = locale16.stripExtensions();
        java.util.Locale locale19 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale19);
        java.lang.String str21 = locale19.getDisplayCountry();
        java.lang.String str22 = locale16.getDisplayName(locale19);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale23.getDisplayScript();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale25.getISO3Language();
        java.lang.String str27 = locale23.getDisplayScript(locale25);
        java.lang.String str28 = locale16.getDisplayLanguage(locale25);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale16);
        fractionFormat12.setNumeratorFormat(numberFormat29);
        properFractionFormat9.setWholeFormat(numberFormat29);
        fractionFormat6.setNumeratorFormat(numberFormat29);
        java.lang.String str34 = numberFormat29.format((-1.0d));
        boolean boolean35 = numberFormat1.equals((java.lang.Object) numberFormat29);
        java.lang.Object obj36 = numberFormat1.clone();
        int int37 = numberFormat1.getMaximumIntegerDigits();
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Locale locale39 = locale38.stripExtensions();
        java.util.Locale locale41 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.lang.String str43 = locale41.getDisplayCountry();
        java.lang.String str44 = locale38.getDisplayName(locale41);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.lang.String str46 = locale45.getDisplayScript();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale47.getISO3Language();
        java.lang.String str49 = locale45.getDisplayScript(locale47);
        java.lang.String str50 = locale38.getDisplayLanguage(locale47);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getNumberInstance(locale38);
        java.util.Currency currency52 = numberFormat51.getCurrency();
        java.util.Locale locale56 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance(locale56);
        int int58 = numberFormat57.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = new org.apache.commons.math.fraction.FractionFormat(numberFormat57);
        numberFormat57.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode62 = numberFormat57.getRoundingMode();
        numberFormat51.setRoundingMode(roundingMode62);
        java.math.RoundingMode roundingMode64 = numberFormat51.getRoundingMode();
        java.util.Currency currency65 = numberFormat51.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat51);
        java.text.ParsePosition parsePosition68 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj69 = numberFormat51.parseObject("1 / 1,440", parsePosition68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "100 0 / 1" + "'", str14, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Korean" + "'", str22, "Korean");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1" + "'", str34, "-1");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals(locale41.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Korean" + "'", str44, "Korean");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "kor" + "'", str48, "kor");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str50, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "XXX");
        org.junit.Assert.assertEquals(locale56.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode62 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode62.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + roundingMode64 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode64.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(currency65);
        org.junit.Assert.assertEquals(currency65.toString(), "XXX");
    }

    @Test
    public void test08420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08420");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        java.util.Locale.setDefault(category0, locale5);
        java.lang.Object obj9 = locale5.clone();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "ko");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "ko");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "ko");
    }

    @Test
    public void test08421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08421");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        boolean boolean47 = numberFormat45.equals((java.lang.Object) strArray46);
        java.lang.String str49 = numberFormat45.format((double) (byte) -1);
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale50.getDisplayCountry(locale51);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getNumberInstance(locale50);
        numberFormat54.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36, numberFormat45, numberFormat54);
        java.text.NumberFormat numberFormat58 = properFractionFormat57.getWholeFormat();
        numberFormat58.setMinimumFractionDigits(1);
        java.math.RoundingMode roundingMode61 = numberFormat58.getRoundingMode();
        java.util.Locale locale63 = java.util.Locale.JAPAN;
        java.util.Locale locale64 = java.util.Locale.ROOT;
        java.lang.String str65 = locale64.getDisplayScript();
        java.lang.String str66 = locale63.getDisplayCountry(locale64);
        java.util.Set<java.lang.String> strSet67 = locale64.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getIntegerInstance(locale64);
        int int69 = numberFormat68.getMaximumIntegerDigits();
        numberFormat68.setMinimumFractionDigits(2147483647);
        java.util.Locale locale72 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getIntegerInstance(locale72);
        boolean boolean74 = numberFormat68.equals((java.lang.Object) locale72);
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat77 = java.text.NumberFormat.getPercentInstance(locale76);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat77);
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat80 = java.text.NumberFormat.getPercentInstance(locale79);
        boolean boolean81 = numberFormat80.isGroupingUsed();
        properFractionFormat78.setWholeFormat(numberFormat80);
        java.text.NumberFormat numberFormat83 = properFractionFormat78.getWholeFormat();
        java.text.ParsePosition parsePosition86 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number87 = numberFormat83.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition86);
        parsePosition86.setIndex((int) ' ');
        java.lang.Number number90 = numberFormat68.parse("English (Canada)", parsePosition86);
        java.lang.String str91 = parsePosition86.toString();
        java.lang.Object obj92 = numberFormat58.parseObject("", parsePosition86);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Korean" + "'", str29, "Korean");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-100%" + "'", str49, "-100%");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Japan" + "'", str53, "Japan");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + roundingMode61 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode61.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Japan" + "'", str66, "Japan");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertNull(number87);
        org.junit.Assert.assertNull(number90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "java.text.ParsePosition[index=32,errorIndex=32]" + "'", str91, "java.text.ParsePosition[index=32,errorIndex=32]");
        org.junit.Assert.assertNull(obj92);
    }

    @Test
    public void test08422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08422");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 52 to fraction (-1/0)");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        java.text.NumberFormat.Field field3 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition4 = new java.text.FieldPosition((java.text.Format.Field) field3);
        int int5 = fieldPosition4.getField();
        java.text.Format.Field field6 = fieldPosition4.getFieldAttribute();
        java.text.FieldPosition fieldPosition7 = new java.text.FieldPosition(field6);
        java.lang.String str8 = field6.toString();
        java.lang.StringBuffer stringBuffer9 = null;
        java.text.NumberFormat.Field field10 = java.text.NumberFormat.Field.DECIMAL_SEPARATOR;
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field10);
        java.text.Format.Field field12 = fieldPosition11.getFieldAttribute();
        int int13 = fieldPosition11.getBeginIndex();
        int int14 = fieldPosition11.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer15 = fractionFormat2.format((java.lang.Object) field6, stringBuffer9, fieldPosition11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(field6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.text.NumberFormat$Field(grouping separator)" + "'", str8, "java.text.NumberFormat$Field(grouping separator)");
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertNotNull(field12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test08423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08423");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str1 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction0);
        long long2 = fraction0.longValue();
        org.apache.commons.math.fraction.Fraction fraction3 = fraction0.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.negate();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction6.multiply(fraction10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        boolean boolean16 = fraction10.equals((java.lang.Object) properFractionFormat15);
        org.apache.commons.math.fraction.Fraction fraction17 = fraction0.subtract(fraction10);
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder18.setScript("");
        java.util.Locale locale21 = builder18.build();
        java.util.Locale.Builder builder23 = builder18.setRegion("en");
        java.util.Locale locale24 = builder23.build();
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str28 = locale25.getDisplayCountry(locale27);
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getInstance(locale29);
        java.lang.String str32 = locale29.getDisplayScript();
        java.lang.String str33 = locale25.getDisplayVariant(locale29);
        java.lang.String str35 = locale25.getExtension('a');
        java.lang.String str36 = locale24.getDisplayCountry(locale25);
        java.util.Set<java.lang.String> strSet37 = locale24.getUnicodeLocaleKeys();
        boolean boolean38 = fraction17.equals((java.lang.Object) locale24);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance(locale24);
        numberFormat39.setMaximumFractionDigits(1);
        int int42 = numberFormat39.getMaximumIntegerDigits();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1 / 1" + "'", str1, "1 / 1");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "_EN");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str26, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Taiwan" + "'", str28, "Taiwan");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "EN" + "'", str36, "EN");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
    }

    @Test
    public void test08424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08424");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        numberFormat4.setGroupingUsed(true);
        java.text.NumberFormat numberFormat14 = null;
        java.util.Locale locale18 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat14, numberFormat19);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertEquals(locale18.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat19);
    }

    @Test
    public void test08425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08425");
        java.util.Locale locale1 = new java.util.Locale("\u53f0\u6e7e");
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = locale2.getDisplayLanguage(locale4);
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleKeys();
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale9.getISO3Language();
        java.lang.String str11 = locale7.getDisplayScript(locale9);
        java.lang.String str12 = locale7.toLanguageTag();
        java.lang.String str13 = locale7.getDisplayVariant();
        boolean boolean14 = locale7.hasExtensions();
        java.lang.String str15 = locale4.getDisplayScript(locale7);
        java.lang.String str16 = locale4.getISO3Country();
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        java.util.Locale locale19 = java.util.Locale.getDefault();
        boolean boolean20 = numberFormat18.equals((java.lang.Object) locale19);
        java.util.Locale locale22 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        java.lang.String str24 = locale22.getDisplayCountry();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getIntegerInstance(locale22);
        java.lang.String str26 = locale19.getDisplayVariant(locale22);
        java.lang.String str27 = locale22.toLanguageTag();
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale22);
        java.lang.String str29 = locale4.getDisplayScript(locale22);
        java.lang.String str30 = locale1.getDisplayScript(locale22);
        java.lang.String str31 = locale22.getDisplayCountry();
        org.junit.Assert.assertEquals(locale1.toString(), "\u53f0\u6e7e");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Chinesisch" + "'", str5, "Chinesisch");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "und" + "'", str12, "und");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DEU" + "'", str16, "DEU");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "und" + "'", str27, "und");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test08426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08426");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat5);
        boolean boolean7 = numberFormat5.isGroupingUsed();
        boolean boolean8 = numberFormat5.isGroupingUsed();
        fractionFormat1.setNumeratorFormat(numberFormat5);
        java.lang.Object obj10 = numberFormat5.clone();
        int int11 = numberFormat5.getMaximumFractionDigits();
        java.util.Locale locale13 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale13);
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale16);
        java.util.Currency currency19 = numberFormat18.getCurrency();
        numberFormat18.setMinimumIntegerDigits(1);
        numberFormat18.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj27 = numberFormat18.parseObject("Japan", parsePosition26);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException31 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str32 = fractionConversionException31.getPattern();
        java.lang.Throwable[] throwableArray33 = fractionConversionException31.getSuppressed();
        java.lang.Object[] objArray34 = fractionConversionException31.getArguments();
        boolean boolean35 = parsePosition26.equals((java.lang.Object) objArray34);
        int int36 = parsePosition26.getIndex();
        int int37 = parsePosition26.getIndex();
        java.lang.Object obj38 = fractionFormat14.parseObject("\ud55c\uad6d\uc5b4", parsePosition26);
        int int39 = parsePosition26.getErrorIndex();
        java.lang.Number number40 = numberFormat5.parse("\u82f1\u6587\ub300\ub9cc)", parsePosition26);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getInstance(locale42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = new org.apache.commons.math.fraction.FractionFormat(numberFormat43, numberFormat45);
        java.text.ParsePosition parsePosition49 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj50 = numberFormat45.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition49);
        java.lang.String str51 = parsePosition49.toString();
        parsePosition49.setErrorIndex(2);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale54.getISO3Language();
        java.util.Set<java.lang.String> strSet56 = locale54.getUnicodeLocaleKeys();
        java.lang.String str57 = locale54.getISO3Country();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getNumberInstance(locale54);
        java.util.Locale locale62 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance(locale62);
        int int64 = numberFormat63.getMaximumIntegerDigits();
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance(locale65);
        boolean boolean67 = numberFormat66.isGroupingUsed();
        java.util.Currency currency68 = numberFormat66.getCurrency();
        numberFormat63.setCurrency(currency68);
        java.util.Currency currency70 = numberFormat63.getCurrency();
        int int71 = numberFormat63.getMaximumFractionDigits();
        java.lang.Object obj72 = numberFormat63.clone();
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getPercentInstance(locale73);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat74);
        numberFormat74.setMaximumFractionDigits(100);
        numberFormat74.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str81 = numberFormat74.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58, numberFormat63, numberFormat74);
        int int83 = numberFormat63.getMaximumIntegerDigits();
        boolean boolean84 = numberFormat63.isGroupingUsed();
        boolean boolean85 = parsePosition49.equals((java.lang.Object) boolean84);
        parsePosition49.setIndex((int) (byte) 16);
        java.lang.Number number88 = numberFormat5.parse("java.text.FieldPosition[field=-2,attribute=java.text.NumberFormat$Field(exponent),beginIndex=0,endIndex=0]", parsePosition49);
        parsePosition49.setIndex((-13));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(currency19);
        org.junit.Assert.assertEquals(currency19.toString(), "TWD");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str32, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNull(number40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str51, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "kor" + "'", str55, "kor");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertEquals(locale62.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(currency68);
        org.junit.Assert.assertEquals(currency68.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency70);
        org.junit.Assert.assertEquals(currency70.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "100%" + "'", str81, "100%");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2147483647 + "'", int83 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(number88);
    }

    @Test
    public void test08427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08427");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction8.subtract(fraction23);
        int int25 = fraction24.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str30 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction29);
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction34.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction40.abs();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction34.add(fraction40);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction29.multiply(fraction40);
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.ONE;
        long long46 = fraction45.longValue();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction29.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction48 = fraction28.subtract(fraction47);
        int int49 = fraction48.intValue();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction24.add(fraction48);
        java.text.NumberFormat.Field field51 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition52 = new java.text.FieldPosition((java.text.Format.Field) field51);
        java.util.Locale locale53 = java.util.Locale.CHINA;
        boolean boolean54 = field51.equals((java.lang.Object) locale53);
        java.lang.String str55 = locale53.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale53);
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.util.Locale locale58 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale58);
        java.lang.String str60 = locale57.getDisplayName(locale58);
        java.lang.String str61 = locale57.getDisplayCountry();
        java.lang.String str62 = locale53.getDisplayName(locale57);
        boolean boolean63 = fraction24.equals((java.lang.Object) locale53);
        short short64 = fraction24.shortValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 119 + "'", int25 == 119);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1 / 1" + "'", str30, "1 / 1");
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(field51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "CN" + "'", str55, "CN");
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "francese (Francia)" + "'", str60, "francese (Francia)");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\ud504\ub791\uc2a4" + "'", str61, "\ud504\ub791\uc2a4");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "chinois (Chine)" + "'", str62, "chinois (Chine)");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + short64 + "' != '" + (short) 0 + "'", short64 == (short) 0);
    }

    @Test
    public void test08428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08428");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (short) 0, (double) 10, (int) (short) 100);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        boolean boolean6 = numberFormat5.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9, numberFormat11);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj16 = numberFormat11.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition15);
        properFractionFormat7.setNumeratorFormat(numberFormat11);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale18);
        boolean boolean20 = numberFormat19.isParseIntegerOnly();
        numberFormat19.setGroupingUsed(false);
        properFractionFormat7.setWholeFormat(numberFormat19);
        numberFormat19.setMinimumFractionDigits((int) 'u');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        numberFormat19.setMinimumIntegerDigits(97);
        boolean boolean29 = fraction3.equals((java.lang.Object) numberFormat19);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction34.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction40.abs();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction34.add(fraction40);
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.negate();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction43.divide(fraction46);
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = locale49.getDisplayScript();
        java.lang.String str51 = locale49.getScript();
        boolean boolean52 = fraction48.equals((java.lang.Object) locale49);
        int int53 = fraction48.getNumerator();
        boolean boolean54 = fraction30.equals((java.lang.Object) fraction48);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-2) + "'", int53 == (-2));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test08429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08429");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.text.NumberFormat numberFormat6 = properFractionFormat5.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat5.getNumeratorFormat();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10);
        java.util.Locale locale14 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getInstance(locale16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17, numberFormat19);
        boolean boolean21 = numberFormat19.isGroupingUsed();
        boolean boolean22 = numberFormat19.isGroupingUsed();
        fractionFormat15.setNumeratorFormat(numberFormat19);
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        int int30 = numberFormat29.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat29);
        java.util.Locale locale36 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        int int38 = numberFormat37.getMaximumIntegerDigits();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        boolean boolean41 = numberFormat40.isGroupingUsed();
        java.util.Currency currency42 = numberFormat40.getCurrency();
        numberFormat37.setCurrency(currency42);
        java.util.Currency currency44 = numberFormat37.getCurrency();
        java.math.RoundingMode roundingMode45 = numberFormat37.getRoundingMode();
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition((int) 'a');
        java.lang.String str49 = parsePosition48.toString();
        java.lang.String str50 = parsePosition48.toString();
        java.lang.Object obj51 = numberFormat37.parseObject("zho", parsePosition48);
        java.lang.Object obj52 = fractionFormat31.parseObject("java.text.NumberFormat$Field(currency)", parsePosition48);
        java.lang.Object obj53 = numberFormat19.parseObject("Italian", parsePosition48);
        java.lang.Object obj54 = numberFormat10.parseObject("600", parsePosition48);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList56 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList62 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.lang.String>) strSet61);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags(languageRangeList56, (java.util.Collection<java.lang.String>) strSet61, filteringMode63);
        java.util.Locale.LanguageRange[] languageRangeArray65 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList66 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66, languageRangeArray65);
        java.lang.String[] strArray69 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, (java.util.Collection<java.lang.String>) strList70);
        java.util.List<java.lang.String> strList73 = java.util.Locale.filterTags(languageRangeList56, (java.util.Collection<java.lang.String>) strList70);
        boolean boolean74 = parsePosition48.equals((java.lang.Object) strList70);
        org.apache.commons.math.fraction.Fraction fraction75 = properFractionFormat5.parse("java.text.ParsePosition[index=100,errorIndex=99]", parsePosition48);
        java.util.Locale locale80 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getPercentInstance(locale80);
        numberFormat81.setMinimumIntegerDigits((int) (short) -1);
        boolean boolean84 = numberFormat81.isParseIntegerOnly();
        java.text.ParsePosition parsePosition87 = new java.text.ParsePosition((int) '#');
        parsePosition87.setErrorIndex(600);
        java.lang.String str90 = parsePosition87.toString();
        java.lang.Object obj91 = numberFormat81.parseObject("en_CA", parsePosition87);
        int int92 = parsePosition87.getIndex();
        java.lang.Object obj93 = properFractionFormat5.parseObject("2,147,483,647 / 1", parsePosition87);
        java.text.NumberFormat numberFormat94 = properFractionFormat5.getDenominatorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(currency42);
        org.junit.Assert.assertEquals(currency42.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode45 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode45.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str49, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str50, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(languageRangeList56);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(languageRangeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(fraction75);
        org.junit.Assert.assertEquals(locale80.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "java.text.ParsePosition[index=35,errorIndex=600]" + "'", str90, "java.text.ParsePosition[index=35,errorIndex=600]");
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertNotNull(numberFormat94);
    }

    @Test
    public void test08430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08430");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat14 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat15 = properFractionFormat3.getWholeFormat();
        int int16 = numberFormat15.getMaximumFractionDigits();
        numberFormat15.setGroupingUsed(false);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        boolean boolean25 = numberFormat24.isGroupingUsed();
        properFractionFormat22.setWholeFormat(numberFormat24);
        java.text.NumberFormat numberFormat27 = properFractionFormat22.getWholeFormat();
        java.text.ParsePosition parsePosition30 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number31 = numberFormat27.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition30);
        int int32 = parsePosition30.getIndex();
        int int33 = parsePosition30.getErrorIndex();
        int int34 = parsePosition30.getIndex();
        java.lang.Number number35 = numberFormat15.parse("france_CHINESE (TAIWAN)", parsePosition30);
        java.lang.Object obj36 = numberFormat15.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNull(number31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(number35);
        org.junit.Assert.assertNotNull(obj36);
    }

    @Test
    public void test08431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08431");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, 1);
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 100);
        fieldPosition5.setEndIndex(3);
        java.text.Format.Field field8 = fieldPosition5.getFieldAttribute();
        java.util.Locale.LanguageRange languageRange10 = new java.util.Locale.LanguageRange("eng");
        java.lang.String str11 = languageRange10.getRange();
        java.lang.String str12 = languageRange10.getRange();
        java.lang.String str13 = languageRange10.getRange();
        boolean boolean14 = field8.equals((java.lang.Object) str13);
        java.text.NumberFormat.Field field15 = java.text.NumberFormat.Field.CURRENCY;
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder16.setScript("");
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str20 = locale19.getDisplayLanguage();
        java.lang.String str21 = locale19.toLanguageTag();
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str24 = locale22.getISO3Language();
        java.lang.String str25 = locale19.getDisplayScript(locale22);
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        java.lang.String str27 = locale19.getDisplayCountry(locale26);
        java.util.Locale.Builder builder28 = builder16.setLocale(locale26);
        java.lang.String str29 = locale26.getDisplayScript();
        boolean boolean30 = field15.equals((java.lang.Object) locale26);
        java.text.FieldPosition fieldPosition32 = new java.text.FieldPosition((java.text.Format.Field) field15, 0);
        java.util.Locale locale33 = java.util.Locale.TAIWAN;
        java.lang.String str34 = locale33.toLanguageTag();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str36 = locale33.getDisplayCountry();
        java.lang.String str37 = locale33.getISO3Country();
        java.util.Locale locale38 = locale33.stripExtensions();
        boolean boolean39 = field15.equals((java.lang.Object) locale38);
        java.text.NumberFormat.Field field40 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition41 = new java.text.FieldPosition((java.text.Format.Field) field40);
        java.lang.String str42 = fieldPosition41.toString();
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.lang.String str45 = locale44.getDisplayScript();
        java.lang.String str46 = locale43.getDisplayName(locale44);
        boolean boolean47 = fieldPosition41.equals((java.lang.Object) locale44);
        fieldPosition41.setEndIndex((int) '#');
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getCurrencyInstance(locale50);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        java.text.ParsePosition parsePosition55 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction56 = properFractionFormat52.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition55);
        boolean boolean57 = fieldPosition41.equals((java.lang.Object) parsePosition55);
        boolean boolean58 = field15.equals((java.lang.Object) parsePosition55);
        boolean boolean59 = field8.equals((java.lang.Object) field15);
        java.lang.String str60 = field15.toString();
        java.text.FieldPosition fieldPosition62 = new java.text.FieldPosition((java.text.Format.Field) field15, (-14400));
        java.lang.String str63 = field15.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "eng" + "'", str11, "eng");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "eng" + "'", str13, "eng");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(field15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str20, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh-TW" + "'", str21, "zh-TW");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zho" + "'", str24, "zho");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Taiwan" + "'", str27, "Taiwan");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zh-TW" + "'", str34, "zh-TW");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ub300\ub9cc" + "'", str36, "\ub300\ub9cc");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "TWN" + "'", str37, "TWN");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(field40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str42, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Chinese (Taiwan)" + "'", str46, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNull(fraction56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str60, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str63, "java.text.NumberFormat$Field(currency)");
    }

    @Test
    public void test08432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08432");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Taiwan", strMap1);
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale5.getDisplayScript(locale7);
        java.util.Locale.setDefault(category3, locale7);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = locale10.getScript();
        java.util.Locale locale15 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str16 = locale10.getDisplayScript(locale15);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getNumberInstance(locale15);
        java.util.Set<java.lang.String> strSet18 = locale15.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet19 = locale15.getExtensionKeys();
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale locale21 = java.util.Locale.PRC;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.lang.String str23 = locale15.getDisplayName(locale20);
        java.util.Locale locale24 = locale20.stripExtensions();
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = locale25.getDisplayCountry(locale26);
        java.util.Set<java.lang.String> strSet29 = locale26.getUnicodeLocaleAttributes();
        java.lang.String str30 = locale24.getDisplayVariant(locale26);
        java.lang.String str32 = locale24.getExtension('a');
        java.lang.String str33 = locale7.getDisplayCountry(locale24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.lang.String str35 = locale7.getISO3Language();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale36.getISO3Language();
        java.util.Set<java.lang.Character> charSet38 = locale36.getExtensionKeys();
        java.util.Locale locale39 = java.util.Locale.US;
        java.lang.String str40 = locale39.getDisplayScript();
        java.lang.String str41 = locale36.getDisplayVariant(locale39);
        java.lang.String str42 = locale7.getDisplayVariant(locale39);
        java.lang.String str43 = locale39.getLanguage();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getNumberInstance(locale39);
        java.util.Set<java.lang.String> strSet45 = locale39.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet45);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals(locale15.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str22, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str23, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Japan" + "'", str28, "Japan");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Canada" + "'", str33, "Canada");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "fra" + "'", str35, "fra");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "kor" + "'", str37, "kor");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "en" + "'", str43, "en");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(strList46);
    }

    @Test
    public void test08433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08433");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        boolean boolean6 = numberFormat4.equals((java.lang.Object) strArray5);
        java.util.Locale locale10 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        int int12 = numberFormat11.getMaximumIntegerDigits();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        boolean boolean15 = numberFormat14.isGroupingUsed();
        java.util.Currency currency16 = numberFormat14.getCurrency();
        numberFormat11.setCurrency(currency16);
        java.util.Currency currency18 = numberFormat11.getCurrency();
        java.math.RoundingMode roundingMode19 = numberFormat11.getRoundingMode();
        numberFormat4.setRoundingMode(roundingMode19);
        boolean boolean21 = numberFormat4.isParseIntegerOnly();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale22.getISO3Language();
        java.util.Set<java.lang.Character> charSet24 = locale22.getExtensionKeys();
        java.util.Locale locale25 = java.util.Locale.US;
        java.lang.String str26 = locale25.getDisplayScript();
        java.lang.String str27 = locale22.getDisplayVariant(locale25);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getCurrencyInstance(locale22);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getInstance(locale31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = new org.apache.commons.math.fraction.FractionFormat(numberFormat32, numberFormat34);
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj39 = numberFormat34.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition38);
        java.lang.String str40 = parsePosition38.toString();
        boolean boolean42 = parsePosition38.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction43 = properFractionFormat29.parse("java.text.ParseException: zh_TW", parsePosition38);
        java.text.NumberFormat numberFormat44 = properFractionFormat29.getWholeFormat();
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        numberFormat45.setMaximumIntegerDigits(2147483647);
        int int48 = numberFormat45.getMaximumIntegerDigits();
        java.text.NumberFormat.Field field49 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition50 = new java.text.FieldPosition((java.text.Format.Field) field49);
        int int51 = fieldPosition50.getBeginIndex();
        boolean boolean52 = numberFormat45.equals((java.lang.Object) int51);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat44, numberFormat45);
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getIntegerInstance(locale54);
        java.lang.String str57 = numberFormat55.format(0.0d);
        properFractionFormat53.setNumeratorFormat(numberFormat55);
        java.text.NumberFormat numberFormat59 = properFractionFormat53.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat61 = fractionFormat60.getNumeratorFormat();
        java.text.NumberFormat numberFormat62 = fractionFormat60.getNumeratorFormat();
        properFractionFormat53.setDenominatorFormat(numberFormat62);
        java.text.NumberFormat numberFormat64 = properFractionFormat53.getWholeFormat();
        int int65 = numberFormat64.getMinimumIntegerDigits();
        numberFormat64.setGroupingUsed(false);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode19 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode19.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "kor" + "'", str23, "kor");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str40, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertNotNull(field49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0" + "'", str57, "0");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test08434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08434");
        java.util.Locale locale2 = new java.util.Locale("\uc774\ud0c8\ub9ac\uc544\uc5b4", "JAVA.TEXT.PARSEPOSITION[INDEX=-2,ERRORINDEX=3]");
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.lang.String str4 = locale2.getDisplayName();
        org.junit.Assert.assertEquals(locale2.toString(), "\uc774\ud0c8\ub9ac\uc544\uc5b4_JAVA.TEXT.PARSEPOSITION[INDEX=-2,ERRORINDEX=3]");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4 (JAVA.TEXT.PARSEPOSITION[INDEX=-2,ERRORINDEX=3])" + "'", str4, "\uc774\ud0c8\ub9ac\uc544\uc5b4 (JAVA.TEXT.PARSEPOSITION[INDEX=-2,ERRORINDEX=3])");
    }

    @Test
    public void test08435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08435");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        boolean boolean7 = numberFormat6.isGroupingUsed();
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field8);
        java.util.Locale locale10 = java.util.Locale.CHINA;
        boolean boolean11 = field8.equals((java.lang.Object) locale10);
        java.lang.String str12 = locale10.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.text.NumberFormat numberFormat14 = fractionFormat13.getDenominatorFormat();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        numberFormat15.setMaximumIntegerDigits(2147483647);
        int int18 = numberFormat15.getMinimumFractionDigits();
        numberFormat15.setParseIntegerOnly(true);
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance(locale21);
        java.math.RoundingMode roundingMode23 = numberFormat22.getRoundingMode();
        numberFormat15.setRoundingMode(roundingMode23);
        numberFormat14.setRoundingMode(roundingMode23);
        numberFormat6.setRoundingMode(roundingMode23);
        int int27 = numberFormat6.getMinimumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc77c\ubcf8" + "'", str5, "\uc77c\ubcf8");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CN" + "'", str12, "CN");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + roundingMode23 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode23.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test08436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08436");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        fractionFormat4.setDenominatorFormat(numberFormat9);
        java.text.NumberFormat numberFormat12 = fractionFormat4.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        long long23 = fraction21.longValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction17.multiply(fraction21);
        double double25 = fraction24.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction24.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.abs();
        long long41 = fraction39.longValue();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction35.multiply(fraction39);
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.negate();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.abs();
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.negate();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.abs();
        long long53 = fraction51.longValue();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction47.multiply(fraction51);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction39.subtract(fraction54);
        org.apache.commons.math.fraction.Fraction fraction56 = fraction54.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.abs();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.negate();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction29.subtract(fraction58);
        org.apache.commons.math.fraction.Fraction fraction60 = fraction24.add(fraction59);
        long long61 = fraction60.longValue();
        int int62 = fraction60.getDenominator();
        int int63 = fraction60.getNumerator();
        java.lang.StringBuffer stringBuffer64 = null;
        java.text.NumberFormat.Field field65 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition66 = new java.text.FieldPosition((java.text.Format.Field) field65);
        int int67 = fieldPosition66.getEndIndex();
        int int68 = fieldPosition66.getField();
        java.lang.String str69 = fieldPosition66.toString();
        java.text.Format.Field field70 = fieldPosition66.getFieldAttribute();
        java.text.FieldPosition fieldPosition71 = new java.text.FieldPosition(field70);
        java.text.Format.Field field72 = fieldPosition71.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer73 = fractionFormat4.format(fraction60, stringBuffer64, fieldPosition71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 6.944444444444444E-5d + "'", double25 == 6.944444444444444E-5d);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 14399L + "'", long61 == 14399L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 14400 + "'", int62 == 14400);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 207359881 + "'", int63 == 207359881);
        org.junit.Assert.assertNotNull(field65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str69, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(field70);
        org.junit.Assert.assertNotNull(field72);
    }

    @Test
    public void test08437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08437");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale0.getDisplayCountry(locale3);
        java.util.Set<java.lang.String> strSet8 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale9 = locale0.stripExtensions();
        java.lang.String str10 = locale0.getLanguage();
        java.lang.String str11 = locale0.getScript();
        java.lang.String str12 = locale0.toLanguageTag();
        java.lang.String str13 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "France" + "'", str7, "France");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "fr" + "'", str10, "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "fr-FR" + "'", str12, "fr-FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud504\ub791\uc2a4" + "'", str13, "\ud504\ub791\uc2a4");
    }

    @Test
    public void test08438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08438");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.lang.String str10 = locale2.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale2);
        numberFormat11.setMaximumIntegerDigits((int) 'a');
        numberFormat11.setMinimumFractionDigits((int) (short) -14400);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getISO3Language();
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getCurrencyInstance(locale17);
        boolean boolean21 = numberFormat20.isParseIntegerOnly();
        java.math.RoundingMode roundingMode22 = numberFormat20.getRoundingMode();
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale24);
        java.util.Currency currency27 = numberFormat26.getCurrency();
        numberFormat26.setMinimumIntegerDigits(1);
        numberFormat26.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition34 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj35 = numberFormat26.parseObject("Japan", parsePosition34);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException39 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str40 = fractionConversionException39.getPattern();
        java.lang.Throwable[] throwableArray41 = fractionConversionException39.getSuppressed();
        java.lang.Object[] objArray42 = fractionConversionException39.getArguments();
        boolean boolean43 = parsePosition34.equals((java.lang.Object) objArray42);
        int int44 = parsePosition34.getIndex();
        int int45 = parsePosition34.getIndex();
        java.lang.Object obj46 = numberFormat20.parseObject("it", parsePosition34);
        properFractionFormat16.setWholeFormat(numberFormat20);
        org.apache.commons.math.fraction.Fraction fraction51 = new org.apache.commons.math.fraction.Fraction((double) (byte) 16, (double) 0.16666667f, (int) (byte) -120);
        java.lang.StringBuffer stringBuffer52 = null;
        java.text.FieldPosition fieldPosition54 = new java.text.FieldPosition(100);
        fieldPosition54.setBeginIndex((int) 'u');
        int int57 = fieldPosition54.getEndIndex();
        org.apache.commons.math.fraction.Fraction fraction60 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str61 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction60);
        long long62 = fraction60.longValue();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction60.abs();
        int int64 = fraction63.getDenominator();
        boolean boolean65 = fieldPosition54.equals((java.lang.Object) fraction63);
        fieldPosition54.setBeginIndex(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer68 = properFractionFormat16.format(fraction51, stringBuffer52, fieldPosition54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + roundingMode22 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode22.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "TWD");
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str40, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-1 / 100" + "'", str61, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test08439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08439");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str1 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction0);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction5.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction0.multiply(fraction11);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction0.negate();
        long long17 = fraction16.longValue();
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.negate();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.abs();
        long long28 = fraction26.longValue();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction22.multiply(fraction26);
        double double30 = fraction29.doubleValue();
        boolean boolean31 = fraction16.equals((java.lang.Object) double30);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction16.abs();
        org.apache.commons.math.fraction.Fraction fraction36 = new org.apache.commons.math.fraction.Fraction((double) 3, (double) 9700L, 599);
        int int37 = fraction36.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction39 = new org.apache.commons.math.fraction.Fraction((double) 0.016666668f);
        int int40 = fraction39.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.negate();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.abs();
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.negate();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.abs();
        long long51 = fraction49.longValue();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction45.multiply(fraction49);
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.negate();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.abs();
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.negate();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction61.abs();
        long long63 = fraction61.longValue();
        org.apache.commons.math.fraction.Fraction fraction64 = fraction57.multiply(fraction61);
        org.apache.commons.math.fraction.Fraction fraction65 = fraction49.subtract(fraction64);
        org.apache.commons.math.fraction.Fraction fraction66 = fraction64.negate();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction39.multiply(fraction66);
        org.apache.commons.math.fraction.Fraction fraction68 = fraction36.divide(fraction66);
        org.apache.commons.math.fraction.Fraction fraction69 = fraction32.subtract(fraction68);
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1 / 1" + "'", str1, "1 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 6.944444444444444E-5d + "'", double30 == 6.944444444444444E-5d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
    }

    @Test
    public void test08440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08440");
        java.util.Locale locale3 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str4 = locale3.getDisplayVariant();
        java.text.NumberFormat.Field field5 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition((java.text.Format.Field) field5);
        int int7 = fieldPosition6.getEndIndex();
        fieldPosition6.setBeginIndex((int) (byte) 100);
        java.util.Locale locale11 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str14 = fractionFormat12.format((java.lang.Object) 100);
        boolean boolean15 = fieldPosition6.equals((java.lang.Object) fractionFormat12);
        java.text.Format.Field field16 = fieldPosition6.getFieldAttribute();
        java.util.Locale locale20 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        boolean boolean22 = fieldPosition6.equals((java.lang.Object) locale20);
        java.lang.String str23 = locale3.getDisplayCountry(locale20);
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category25 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale26 = java.util.Locale.getDefault(category25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale27);
        java.util.Locale.setDefault(category25, locale27);
        java.util.Locale locale30 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category25, locale30);
        java.lang.String str32 = locale24.getDisplayLanguage(locale30);
        java.lang.String str33 = locale3.getDisplayName(locale30);
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str35 = locale3.getVariant();
        java.util.Set<java.lang.String> strSet36 = locale3.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.util.Locale.Builder builder38 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder40 = builder38.setScript("");
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.lang.String str44 = locale41.getDisplayLanguage(locale43);
        java.util.Locale.Builder builder45 = builder40.setLocale(locale41);
        java.util.Locale.Builder builder46 = builder45.clear();
        java.util.Locale.Builder builder48 = builder46.setLanguage("zh");
        java.util.Locale.Builder builder50 = builder48.setScript("");
        java.util.Locale.Builder builder51 = builder48.clear();
        java.util.Locale.Builder builder52 = builder48.clear();
        java.util.Locale locale53 = builder48.build();
        java.util.Locale locale54 = builder48.build();
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        java.lang.String str56 = locale3.getDisplayScript(locale54);
        org.junit.Assert.assertEquals(locale3.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "10,000%" + "'", str4, "10,000%");
        org.junit.Assert.assertNotNull(field5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "100 0 / 1" + "'", str14, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(field16);
        org.junit.Assert.assertEquals(locale20.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ZH_TW" + "'", str23, "ZH_TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.FORMAT + "'", category25.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "anglais" + "'", str32, "anglais");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str33, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "10,000%" + "'", str35, "10,000%");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Chinesisch" + "'", str44, "Chinesisch");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test08441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08441");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        int int5 = numberFormat4.getMinimumFractionDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        numberFormat7.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat7);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException15 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException19 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str20 = fractionConversionException19.getPattern();
        java.lang.Throwable[] throwableArray21 = fractionConversionException19.getSuppressed();
        fractionConversionException15.addSuppressed((java.lang.Throwable) fractionConversionException19);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException26 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException30 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str31 = fractionConversionException30.getPattern();
        java.lang.Throwable[] throwableArray32 = fractionConversionException30.getSuppressed();
        fractionConversionException26.addSuppressed((java.lang.Throwable) fractionConversionException30);
        fractionConversionException19.addSuppressed((java.lang.Throwable) fractionConversionException30);
        java.lang.Throwable[] throwableArray35 = fractionConversionException30.getSuppressed();
        java.lang.String str36 = fractionConversionException30.getPattern();
        boolean boolean37 = numberFormat4.equals((java.lang.Object) str36);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList39 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strSet44);
        java.util.Locale.FilteringMode filteringMode46 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags(languageRangeList39, (java.util.Collection<java.lang.String>) strSet44, filteringMode46);
        boolean boolean48 = numberFormat4.equals((java.lang.Object) strSet44);
        numberFormat4.setMinimumIntegerDigits(14400);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str20, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str31, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str36, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(languageRangeList39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + filteringMode46 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode46.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test08442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08442");
        java.util.Locale locale3 = new java.util.Locale("1 / 100", "france (CHINESE (TAIWAN))", "java.text.FieldPosition[field=10,attribute=java.text.NumberFormat$Field(currency),beginIndex=10,endIndex=0]");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayScript();
        org.junit.Assert.assertEquals(locale3.toString(), "1 / 100_FRANCE (CHINESE (TAIWAN))_java.text.FieldPosition[field=10,attribute=java.text.NumberFormat$Field(currency),beginIndex=10,endIndex=0]");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test08443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08443");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction8.add(fraction14);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction3.multiply(fraction14);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ONE;
        long long20 = fraction19.longValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction3.multiply(fraction19);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction2.subtract(fraction21);
        float float23 = fraction22.floatValue();
        double double24 = fraction22.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str28 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        long long29 = fraction27.longValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction30.divide(fraction34);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = new org.apache.commons.math.fraction.Fraction((double) 100);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction36.divide(fraction38);
        org.apache.commons.math.fraction.Fraction fraction40 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction22.multiply(fraction40);
        byte byte42 = fraction40.byteValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1 / 1" + "'", str4, "1 / 1");
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 / 100" + "'", str28, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + byte42 + "' != '" + (byte) 2 + "'", byte42 == (byte) 2);
    }

    @Test
    public void test08444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08444");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale locale17 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.lang.String str20 = locale14.getDisplayName(locale17);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale14.getDisplayLanguage(locale23);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale14);
        fractionFormat10.setNumeratorFormat(numberFormat27);
        properFractionFormat7.setWholeFormat(numberFormat27);
        fractionFormat4.setNumeratorFormat(numberFormat27);
        java.text.NumberFormat numberFormat31 = fractionFormat4.getNumeratorFormat();
        java.text.NumberFormat numberFormat32 = fractionFormat4.getDenominatorFormat();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        numberFormat33.setMaximumIntegerDigits(2147483647);
        java.lang.String str37 = numberFormat33.format((long) 'a');
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale38);
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        numberFormat40.setMinimumIntegerDigits(1728000);
        numberFormat40.setMaximumIntegerDigits(600);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32, numberFormat33, numberFormat40);
        numberFormat32.setGroupingUsed(true);
        java.text.NumberFormat.Field field48 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition49 = new java.text.FieldPosition((java.text.Format.Field) field48);
        java.lang.String str50 = fieldPosition49.toString();
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale52.getDisplayScript();
        java.lang.String str54 = locale51.getDisplayName(locale52);
        boolean boolean55 = fieldPosition49.equals((java.lang.Object) locale52);
        java.text.NumberFormat.Field field56 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition57 = new java.text.FieldPosition((java.text.Format.Field) field56);
        java.text.FieldPosition fieldPosition59 = new java.text.FieldPosition((java.text.Format.Field) field56, (int) (byte) 10);
        boolean boolean60 = fieldPosition49.equals((java.lang.Object) field56);
        java.text.NumberFormat.Field field61 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition63 = new java.text.FieldPosition((java.text.Format.Field) field61, (int) '#');
        java.text.Format.Field field64 = fieldPosition63.getFieldAttribute();
        boolean boolean65 = field56.equals((java.lang.Object) fieldPosition63);
        java.util.Locale.Builder builder66 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder68 = builder66.setScript("");
        java.util.Locale locale69 = java.util.Locale.getDefault();
        java.util.Locale locale70 = locale69.stripExtensions();
        java.util.Locale locale71 = locale70.stripExtensions();
        java.util.Locale.Builder builder72 = builder66.setLocale(locale71);
        boolean boolean73 = field56.equals((java.lang.Object) locale71);
        java.util.Locale.Builder builder74 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder75 = builder74.clearExtensions();
        java.util.Locale.Builder builder76 = builder74.clear();
        java.util.Locale.Builder builder77 = builder76.clearExtensions();
        java.util.Locale.Builder builder78 = builder77.clear();
        java.util.Locale locale79 = builder78.build();
        java.lang.String str80 = locale71.getDisplayName(locale79);
        boolean boolean81 = numberFormat32.equals((java.lang.Object) str80);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Korean" + "'", str20, "Korean");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str26, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "9\240700 %" + "'", str37, "9\240700 %");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(field48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str50, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Chinese (Taiwan)" + "'", str54, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(field56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(field61);
        org.junit.Assert.assertNotNull(field64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Korean" + "'", str80, "Korean");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test08445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08445");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumFractionDigits((int) (short) -1);
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        java.util.Currency currency15 = numberFormat13.getCurrency();
        numberFormat10.setCurrency(currency15);
        java.util.Currency currency17 = numberFormat10.getCurrency();
        numberFormat2.setCurrency(currency17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        java.lang.String str25 = numberFormat20.format((long) 100);
        int int26 = numberFormat20.getMaximumFractionDigits();
        numberFormat20.setMinimumFractionDigits((int) (short) 0);
        int int29 = numberFormat20.getMaximumFractionDigits();
        java.math.RoundingMode roundingMode30 = numberFormat20.getRoundingMode();
        numberFormat20.setGroupingUsed(false);
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getCurrencyInstance(locale33);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction39 = properFractionFormat35.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition38);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale43);
        boolean boolean45 = numberFormat44.isGroupingUsed();
        properFractionFormat42.setWholeFormat(numberFormat44);
        java.text.NumberFormat numberFormat47 = properFractionFormat42.getWholeFormat();
        properFractionFormat35.setWholeFormat(numberFormat47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat20, numberFormat47);
        int int50 = numberFormat2.getMinimumFractionDigits();
        numberFormat2.setMaximumFractionDigits((-100));
        boolean boolean53 = numberFormat2.isGroupingUsed();
        java.util.Locale locale55 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getInstance(locale55);
        java.util.Currency currency58 = numberFormat57.getCurrency();
        numberFormat57.setMinimumIntegerDigits(1);
        numberFormat57.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition65 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj66 = numberFormat57.parseObject("Japan", parsePosition65);
        java.lang.String str67 = parsePosition65.toString();
        java.lang.Object obj68 = numberFormat2.parseObject("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 11 to fraction (2/2,147,483,647)", parsePosition65);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "10,000%" + "'", str25, "10,000%");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + roundingMode30 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode30.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNull(fraction39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(currency58);
        org.junit.Assert.assertEquals(currency58.toString(), "TWD");
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str67, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj68);
    }

    @Test
    public void test08446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08446");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((-2));
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.util.List<java.lang.String> strList12 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList10);
        java.lang.String str13 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList12);
        java.util.Collection<java.lang.String> strCollection14 = null;
        java.util.Locale.FilteringMode filteringMode15 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList16 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strCollection14, filteringMode15);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str19 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet18);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strList30);
        java.lang.String str33 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList32);
        java.util.Collection<java.lang.String> strCollection34 = null;
        java.util.Locale.FilteringMode filteringMode35 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, strCollection34, filteringMode35);
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strSet38);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap40 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList41 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, strMap40);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList43 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale locale47 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strSet48);
        java.util.Locale.FilteringMode filteringMode50 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags(languageRangeList43, (java.util.Collection<java.lang.String>) strSet48, filteringMode50);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale52);
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale52);
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str58 = locale52.getDisplayScript(locale57);
        java.util.Set<java.lang.String> strSet59 = locale52.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags(languageRangeList43, (java.util.Collection<java.lang.String>) strSet59);
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags(languageRangeList41, (java.util.Collection<java.lang.String>) strSet59);
        java.lang.String str62 = java.util.Locale.lookupTag(languageRangeList21, (java.util.Collection<java.lang.String>) strList61);
        boolean boolean63 = parsePosition1.equals((java.lang.Object) strList61);
        parsePosition1.setErrorIndex((int) (byte) 120);
        java.lang.String str66 = parsePosition1.toString();
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + filteringMode15 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode15.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + filteringMode35 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode35.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(languageRangeList41);
        org.junit.Assert.assertNotNull(languageRangeList43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + filteringMode50 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode50.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.text.ParsePosition[index=-2,errorIndex=120]" + "'", str66, "java.text.ParsePosition[index=-2,errorIndex=120]");
    }

    @Test
    public void test08447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08447");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getCurrencyInstance(locale0);
        numberFormat3.setMaximumFractionDigits((int) (byte) 10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(numberFormat3);
    }

    @Test
    public void test08448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08448");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayName(locale4);
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale4);
        fieldPosition1.setEndIndex((int) '#');
        int int10 = fieldPosition1.getField();
        int int11 = fieldPosition1.getBeginIndex();
        java.lang.String str12 = fieldPosition1.toString();
        fieldPosition1.setEndIndex(11);
        java.text.Format.Field field15 = fieldPosition1.getFieldAttribute();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale.Builder builder19 = builder16.setVariant("");
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale20);
        java.util.Locale.Builder builder22 = builder16.setLocale(locale20);
        java.util.Locale locale23 = builder22.build();
        boolean boolean24 = field15.equals((java.lang.Object) builder22);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]" + "'", str12, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]");
        org.junit.Assert.assertNotNull(field15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test08449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08449");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale9 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.lang.String str16 = locale12.toLanguageTag();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale locale19 = builder17.build();
        java.lang.String str20 = locale19.getScript();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale21.toLanguageTag();
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale24.getISO3Language();
        java.lang.String str27 = locale21.getDisplayScript(locale24);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale21.getDisplayCountry(locale28);
        java.util.Locale locale31 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str32 = locale28.getDisplayLanguage(locale31);
        java.lang.String str33 = locale19.getDisplayCountry(locale31);
        java.lang.String str34 = locale12.getDisplayVariant(locale19);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance(locale12);
        java.util.Locale locale36 = locale12.stripExtensions();
        java.lang.String str37 = locale9.getDisplayLanguage(locale12);
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        java.util.Locale locale41 = java.util.Locale.GERMANY;
        java.lang.String str42 = locale39.getDisplayLanguage(locale41);
        java.util.Set<java.lang.String> strSet43 = locale41.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale41);
        java.util.Locale.setDefault(category0, locale41);
        java.util.Locale locale47 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals(locale9.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str22, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh-TW" + "'", str23, "zh-TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zho" + "'", str26, "zho");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Taiwan" + "'", str29, "Taiwan");
        org.junit.Assert.assertEquals(locale31.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Italian" + "'", str32, "Italian");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1 / 1" + "'", str37, "1 / 1");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Chinesisch" + "'", str42, "Chinesisch");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de_DE");
    }

    @Test
    public void test08450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08450");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction4.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.setScript("");
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.lang.String str19 = locale17.toLanguageTag();
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.String str22 = locale20.getISO3Language();
        java.lang.String str23 = locale17.getDisplayScript(locale20);
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.lang.String str25 = locale17.getDisplayCountry(locale24);
        java.util.Locale.Builder builder26 = builder14.setLocale(locale24);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getInstance(locale24);
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction30.multiply(fraction34);
        java.lang.String str36 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction30);
        java.lang.String str37 = numberFormat27.format((java.lang.Object) fraction30);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.abs();
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.negate();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.abs();
        long long49 = fraction47.longValue();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction43.multiply(fraction47);
        org.apache.commons.math.fraction.Fraction fraction53 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.negate();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.abs();
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.negate();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.abs();
        long long61 = fraction59.longValue();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction55.multiply(fraction59);
        org.apache.commons.math.fraction.Fraction fraction63 = fraction47.subtract(fraction62);
        org.apache.commons.math.fraction.Fraction fraction66 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction67 = fraction66.negate();
        double double68 = fraction66.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction72 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction73 = fraction66.multiply(fraction72);
        boolean boolean74 = fraction63.equals((java.lang.Object) fraction66);
        int int75 = fraction63.intValue();
        int int76 = fraction63.getDenominator();
        int int77 = fraction63.intValue();
        org.apache.commons.math.fraction.Fraction fraction78 = fraction30.divide(fraction63);
        org.apache.commons.math.fraction.Fraction fraction79 = fraction13.multiply(fraction63);
        long long80 = fraction63.longValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinesisch" + "'", str18, "Chinesisch");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh-TW" + "'", str19, "zh-TW");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zho" + "'", str22, "zho");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Taiwan" + "'", str25, "Taiwan");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "20 / 7" + "'", str36, "20 / 7");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2,857" + "'", str37, "2,857");
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-0.008333333333333333d) + "'", double68 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 14400 + "'", int76 == 14400);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
    }

    @Test
    public void test08451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08451");
        java.util.Locale locale1 = new java.util.Locale("eng");
        java.lang.String str2 = locale1.getDisplayVariant();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        numberFormat9.setMinimumIntegerDigits((int) (short) -1);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        boolean boolean18 = numberFormat17.isGroupingUsed();
        properFractionFormat15.setWholeFormat(numberFormat17);
        java.text.NumberFormat numberFormat20 = properFractionFormat15.getWholeFormat();
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number24 = numberFormat20.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition23);
        parsePosition23.setErrorIndex(0);
        parsePosition23.setIndex(1);
        parsePosition23.setErrorIndex(32);
        java.lang.Object obj31 = numberFormat9.parseObject("\u53f0\u6e7e\u5730\u533a", parsePosition23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale34.getISO3Language();
        java.util.Set<java.lang.String> strSet36 = locale34.getUnicodeLocaleKeys();
        java.lang.String str37 = locale34.getISO3Country();
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getNumberInstance(locale34);
        java.util.Locale locale42 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        int int44 = numberFormat43.getMaximumIntegerDigits();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale45);
        boolean boolean47 = numberFormat46.isGroupingUsed();
        java.util.Currency currency48 = numberFormat46.getCurrency();
        numberFormat43.setCurrency(currency48);
        java.util.Currency currency50 = numberFormat43.getCurrency();
        int int51 = numberFormat43.getMaximumFractionDigits();
        java.lang.Object obj52 = numberFormat43.clone();
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance(locale53);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        numberFormat54.setMaximumFractionDigits(100);
        numberFormat54.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str61 = numberFormat54.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38, numberFormat43, numberFormat54);
        java.text.NumberFormat.Field field64 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition65 = new java.text.FieldPosition((java.text.Format.Field) field64);
        java.lang.String str66 = fieldPosition65.toString();
        java.util.Locale locale67 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale68 = java.util.Locale.ROOT;
        java.lang.String str69 = locale68.getDisplayScript();
        java.lang.String str70 = locale67.getDisplayName(locale68);
        boolean boolean71 = fieldPosition65.equals((java.lang.Object) locale68);
        fieldPosition65.setEndIndex((int) '#');
        java.util.Locale locale74 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getCurrencyInstance(locale74);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat76 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat75);
        java.text.ParsePosition parsePosition79 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction80 = properFractionFormat76.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition79);
        boolean boolean81 = fieldPosition65.equals((java.lang.Object) parsePosition79);
        int int82 = parsePosition79.getIndex();
        org.apache.commons.math.fraction.Fraction fraction83 = properFractionFormat62.parse("hi!", parsePosition79);
        java.text.ParsePosition parsePosition86 = new java.text.ParsePosition(120);
        parsePosition86.setErrorIndex(119);
        org.apache.commons.math.fraction.Fraction fraction89 = properFractionFormat62.parse("java.text.ParsePosition[index=97,errorIndex=-1]", parsePosition86);
        java.lang.String str90 = parsePosition86.toString();
        java.lang.Object obj91 = fractionFormat32.parseObject("1 / 1", parsePosition86);
        java.lang.Object obj92 = fractionFormat3.parseObject("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(EXPONENT SIGN),BEGININDEX=0,ENDINDEX=0]", parsePosition86);
        org.junit.Assert.assertEquals(locale1.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNull(number24);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "kor" + "'", str35, "kor");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals(locale42.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency50);
        org.junit.Assert.assertEquals(currency50.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "100%" + "'", str61, "100%");
        org.junit.Assert.assertNotNull(field64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str66, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Chinese (Taiwan)" + "'", str70, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNull(fraction80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNull(fraction83);
        org.junit.Assert.assertNull(fraction89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "java.text.ParsePosition[index=120,errorIndex=119]" + "'", str90, "java.text.ParsePosition[index=120,errorIndex=119]");
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNull(obj92);
    }

    @Test
    public void test08452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08452");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it-IT");
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7, numberFormat9);
        numberFormat9.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field14 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition15 = new java.text.FieldPosition((java.text.Format.Field) field14);
        java.lang.String str16 = fieldPosition15.toString();
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayScript();
        java.lang.String str20 = locale17.getDisplayName(locale18);
        boolean boolean21 = fieldPosition15.equals((java.lang.Object) locale18);
        fieldPosition15.setEndIndex((int) '#');
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getCurrencyInstance(locale24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction30 = properFractionFormat26.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition29);
        boolean boolean31 = fieldPosition15.equals((java.lang.Object) parsePosition29);
        java.lang.Number number32 = numberFormat9.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition29);
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.negate();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction36.abs();
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getInstance(locale39);
        java.util.Locale locale41 = java.util.Locale.getDefault();
        boolean boolean42 = numberFormat40.equals((java.lang.Object) locale41);
        boolean boolean43 = fraction38.equals((java.lang.Object) locale41);
        boolean boolean44 = parsePosition29.equals((java.lang.Object) locale41);
        java.lang.String str45 = locale41.getDisplayVariant();
        java.util.Locale locale46 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale46);
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance(locale49);
        java.util.Currency currency52 = numberFormat51.getCurrency();
        numberFormat51.setMinimumIntegerDigits(1);
        numberFormat51.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj60 = numberFormat51.parseObject("Japan", parsePosition59);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException64 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str65 = fractionConversionException64.getPattern();
        java.lang.Throwable[] throwableArray66 = fractionConversionException64.getSuppressed();
        java.lang.Object[] objArray67 = fractionConversionException64.getArguments();
        boolean boolean68 = parsePosition59.equals((java.lang.Object) objArray67);
        int int69 = parsePosition59.getIndex();
        int int70 = parsePosition59.getIndex();
        java.lang.Object obj71 = fractionFormat47.parseObject("\ud55c\uad6d\uc5b4", parsePosition59);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat73 = properFractionFormat72.getWholeFormat();
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getPercentInstance(locale74);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat76 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat75);
        numberFormat75.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = new org.apache.commons.math.fraction.FractionFormat(numberFormat73, numberFormat75);
        java.text.NumberFormat numberFormat80 = fractionFormat79.getNumeratorFormat();
        boolean boolean81 = parsePosition59.equals((java.lang.Object) fractionFormat79);
        java.util.Locale locale82 = java.util.Locale.TAIWAN;
        java.lang.String str83 = locale82.toLanguageTag();
        java.lang.String str84 = locale82.getISO3Country();
        java.lang.String str85 = locale82.toLanguageTag();
        java.lang.String str86 = locale82.getDisplayVariant();
        java.text.NumberFormat numberFormat87 = java.text.NumberFormat.getInstance(locale82);
        boolean boolean88 = parsePosition59.equals((java.lang.Object) locale82);
        java.lang.String str89 = locale41.getDisplayName(locale82);
        java.util.Locale.Builder builder90 = builder5.setLocale(locale82);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder92 = builder5.setScript("java.text.FieldPosition[field=1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=10,endIndex=119]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: java.text.FieldPosition[field=1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=10,endIndex=119] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(field14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str16, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Chinese (Taiwan)" + "'", str20, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNull(fraction30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(number32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "TWD");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str65, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "zh-TW" + "'", str83, "zh-TW");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "TWN" + "'", str84, "TWN");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "zh-TW" + "'", str85, "zh-TW");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "\u97d3\u6587" + "'", str89, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test08453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08453");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet9 = locale5.getExtensionKeys();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = locale5.getDisplayName(locale10);
        java.util.Locale locale14 = locale10.stripExtensions();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale14);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str12, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str13, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fractionFormat16);
    }

    @Test
    public void test08454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08454");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) '#');
        java.text.Format.Field field3 = fieldPosition2.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction9.multiply(fraction13);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.add(fraction13);
        boolean boolean16 = field3.equals((java.lang.Object) fraction6);
        int int17 = fraction6.intValue();
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.negate();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction21.add(fraction27);
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction30.divide(fraction33);
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction39.abs();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction30.subtract(fraction41);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction6.add(fraction41);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction6.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.negate();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.abs();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction48.abs();
        org.apache.commons.math.fraction.Fraction fraction53 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.negate();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.abs();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction54.abs();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction48.add(fraction54);
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.negate();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction57.divide(fraction60);
        org.apache.commons.math.fraction.Fraction fraction65 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.negate();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction66.abs();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction66.abs();
        org.apache.commons.math.fraction.Fraction fraction69 = fraction57.subtract(fraction68);
        org.apache.commons.math.fraction.Fraction fraction70 = fraction57.reciprocal();
        float float71 = fraction57.floatValue();
        org.apache.commons.math.fraction.Fraction fraction74 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction75 = fraction74.negate();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction75.abs();
        org.apache.commons.math.fraction.Fraction fraction79 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction80 = fraction79.negate();
        org.apache.commons.math.fraction.Fraction fraction81 = fraction80.abs();
        long long82 = fraction80.longValue();
        org.apache.commons.math.fraction.Fraction fraction83 = fraction76.multiply(fraction80);
        org.apache.commons.math.fraction.Fraction fraction86 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str87 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction86);
        long long88 = fraction86.longValue();
        org.apache.commons.math.fraction.Fraction fraction89 = fraction86.abs();
        org.apache.commons.math.fraction.Fraction fraction90 = fraction76.add(fraction86);
        org.apache.commons.math.fraction.Fraction fraction91 = fraction57.subtract(fraction76);
        org.apache.commons.math.fraction.Fraction fraction92 = fraction76.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction93 = fraction44.divide(fraction76);
        java.lang.String str94 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction93);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + 0.016666668f + "'", float71 == 0.016666668f);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "-1 / 100" + "'", str87, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertNotNull(fraction89);
        org.junit.Assert.assertNotNull(fraction90);
        org.junit.Assert.assertNotNull(fraction91);
        org.junit.Assert.assertNotNull(fraction92);
        org.junit.Assert.assertNotNull(fraction93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "-14,400 / 1" + "'", str94, "-14,400 / 1");
    }

    @Test
    public void test08455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08455");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.text.NumberFormat numberFormat29 = properFractionFormat28.getWholeFormat();
        java.util.Locale locale33 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        int int35 = numberFormat34.getMaximumIntegerDigits();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        boolean boolean38 = numberFormat37.isGroupingUsed();
        java.util.Currency currency39 = numberFormat37.getCurrency();
        numberFormat34.setCurrency(currency39);
        java.util.Currency currency41 = numberFormat34.getCurrency();
        java.math.RoundingMode roundingMode42 = numberFormat34.getRoundingMode();
        properFractionFormat28.setWholeFormat(numberFormat34);
        java.text.NumberFormat numberFormat44 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat28.getNumeratorFormat();
        java.text.NumberFormat numberFormat46 = properFractionFormat28.getNumeratorFormat();
        java.text.NumberFormat numberFormat47 = properFractionFormat28.getNumeratorFormat();
        java.text.NumberFormat numberFormat48 = properFractionFormat28.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction52 = new org.apache.commons.math.fraction.Fraction((double) 2.857143f, (double) (byte) 52, (int) (short) 10);
        java.lang.StringBuffer stringBuffer53 = null;
        java.text.NumberFormat.Field field54 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition56 = new java.text.FieldPosition((java.text.Format.Field) field54, (int) '#');
        java.text.Format.Field field57 = fieldPosition56.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction66 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction67 = fraction66.negate();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction63.multiply(fraction67);
        org.apache.commons.math.fraction.Fraction fraction69 = fraction60.add(fraction67);
        boolean boolean70 = field57.equals((java.lang.Object) fraction60);
        java.text.FieldPosition fieldPosition71 = new java.text.FieldPosition(field57);
        java.text.Format.Field field72 = fieldPosition71.getFieldAttribute();
        int int73 = fieldPosition71.getEndIndex();
        java.text.Format.Field field74 = fieldPosition71.getFieldAttribute();
        fieldPosition71.setBeginIndex((int) 'u');
        fieldPosition71.setEndIndex((int) 'a');
        int int79 = fieldPosition71.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer80 = properFractionFormat28.format(fraction52, stringBuffer53, fieldPosition71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals(locale33.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency41);
        org.junit.Assert.assertEquals(currency41.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode42 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode42.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(field54);
        org.junit.Assert.assertNotNull(field57);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(field72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(field74);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 97 + "'", int79 == 97);
    }

    @Test
    public void test08456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08456");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.lang.String str5 = locale1.toLanguageTag();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = builder6.build();
        java.lang.String str9 = locale8.getScript();
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.lang.String str12 = locale10.toLanguageTag();
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale13.getISO3Language();
        java.lang.String str16 = locale10.getDisplayScript(locale13);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale10.getDisplayCountry(locale17);
        java.util.Locale locale20 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str21 = locale17.getDisplayLanguage(locale20);
        java.lang.String str22 = locale8.getDisplayCountry(locale20);
        java.lang.String str23 = locale1.getDisplayVariant(locale8);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale1);
        java.util.Locale locale25 = locale1.stripExtensions();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale1);
        java.util.Locale locale27 = locale1.stripExtensions();
        java.lang.String str28 = locale1.getISO3Country();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinesisch" + "'", str11, "Chinesisch");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh-TW" + "'", str12, "zh-TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zho" + "'", str15, "zho");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Taiwan" + "'", str18, "Taiwan");
        org.junit.Assert.assertEquals(locale20.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Italian" + "'", str21, "Italian");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test08457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08457");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        int int8 = numberFormat7.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayScript();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale13.getISO3Language();
        java.lang.String str15 = locale11.getDisplayScript(locale13);
        java.lang.String str16 = locale11.toLanguageTag();
        java.util.Set<java.lang.String> strSet17 = locale11.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale11);
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        fractionFormat9.setNumeratorFormat(numberFormat19);
        java.text.NumberFormat numberFormat21 = fractionFormat9.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat(numberFormat26, numberFormat28);
        boolean boolean30 = numberFormat28.isGroupingUsed();
        boolean boolean31 = numberFormat28.isGroupingUsed();
        fractionFormat24.setNumeratorFormat(numberFormat28);
        java.util.Locale locale37 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale37);
        int int39 = numberFormat38.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat38);
        java.util.Locale locale45 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale45);
        int int47 = numberFormat46.getMaximumIntegerDigits();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        boolean boolean50 = numberFormat49.isGroupingUsed();
        java.util.Currency currency51 = numberFormat49.getCurrency();
        numberFormat46.setCurrency(currency51);
        java.util.Currency currency53 = numberFormat46.getCurrency();
        java.math.RoundingMode roundingMode54 = numberFormat46.getRoundingMode();
        java.text.ParsePosition parsePosition57 = new java.text.ParsePosition((int) 'a');
        java.lang.String str58 = parsePosition57.toString();
        java.lang.String str59 = parsePosition57.toString();
        java.lang.Object obj60 = numberFormat46.parseObject("zho", parsePosition57);
        java.lang.Object obj61 = fractionFormat40.parseObject("java.text.NumberFormat$Field(currency)", parsePosition57);
        java.lang.Object obj62 = numberFormat28.parseObject("Italian", parsePosition57);
        org.apache.commons.math.fraction.Fraction fraction63 = fractionFormat9.parse("java.text.ParsePosition[index=59,errorIndex=-1]", parsePosition57);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "kor" + "'", str14, "kor");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals(locale37.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertEquals(locale45.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(currency51);
        org.junit.Assert.assertEquals(currency51.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode54 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode54.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str58, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str59, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(fraction63);
    }

    @Test
    public void test08458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08458");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale2 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.lang.String str4 = locale0.getISO3Language();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str12 = locale6.getDisplayScript(locale11);
        java.lang.String str14 = locale6.getExtension('a');
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale6);
        java.util.Set<java.lang.String> strSet16 = locale6.getUnicodeLocaleKeys();
        java.lang.String str17 = locale0.getDisplayName(locale6);
        java.util.Set<java.lang.String> strSet18 = locale0.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zho" + "'", str4, "zho");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese (Taiwan)" + "'", str17, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(strSet18);
    }

    @Test
    public void test08459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08459");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale3);
        java.util.Currency currency6 = numberFormat5.getCurrency();
        numberFormat5.setMinimumIntegerDigits(1);
        numberFormat5.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj14 = numberFormat5.parseObject("Japan", parsePosition13);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException18 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str19 = fractionConversionException18.getPattern();
        java.lang.Throwable[] throwableArray20 = fractionConversionException18.getSuppressed();
        java.lang.Object[] objArray21 = fractionConversionException18.getArguments();
        boolean boolean22 = parsePosition13.equals((java.lang.Object) objArray21);
        int int23 = parsePosition13.getIndex();
        int int24 = parsePosition13.getIndex();
        java.lang.Object obj25 = fractionFormat1.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]", parsePosition13);
        java.text.NumberFormat numberFormat26 = fractionFormat1.getNumeratorFormat();
        int int27 = numberFormat26.getMaximumIntegerDigits();
        numberFormat26.setMinimumIntegerDigits((int) (byte) -119);
        numberFormat26.setMinimumFractionDigits(2147483647);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency34 = numberFormat33.getCurrency();
        java.lang.String str36 = numberFormat33.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        java.lang.String[] strArray43 = java.util.Locale.getISOCountries();
        boolean boolean44 = numberFormat42.equals((java.lang.Object) strArray43);
        java.util.Locale locale48 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        int int50 = numberFormat49.getMaximumIntegerDigits();
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        boolean boolean53 = numberFormat52.isGroupingUsed();
        java.util.Currency currency54 = numberFormat52.getCurrency();
        numberFormat49.setCurrency(currency54);
        java.util.Currency currency56 = numberFormat49.getCurrency();
        java.math.RoundingMode roundingMode57 = numberFormat49.getRoundingMode();
        numberFormat42.setRoundingMode(roundingMode57);
        boolean boolean59 = numberFormat42.isParseIntegerOnly();
        properFractionFormat37.setWholeFormat(numberFormat42);
        java.text.NumberFormat numberFormat61 = properFractionFormat37.getDenominatorFormat();
        java.text.NumberFormat numberFormat62 = properFractionFormat37.getNumeratorFormat();
        java.util.Locale locale63 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getCurrencyInstance(locale63);
        numberFormat65.setGroupingUsed(false);
        properFractionFormat37.setDenominatorFormat(numberFormat65);
        int int69 = numberFormat65.getMaximumIntegerDigits();
        properFractionFormat32.setWholeFormat(numberFormat65);
        java.text.ParsePosition parsePosition73 = new java.text.ParsePosition((-120));
        int int74 = parsePosition73.getErrorIndex();
        parsePosition73.setErrorIndex(50112000);
        java.util.Locale locale78 = new java.util.Locale("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 100 to fraction (10/0)");
        java.util.Locale.Category category79 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale80 = java.util.Locale.getDefault(category79);
        java.util.Locale locale81 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet82 = locale81.getUnicodeLocaleAttributes();
        java.util.Locale locale83 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str84 = locale81.getDisplayScript(locale83);
        java.util.Locale.setDefault(category79, locale83);
        java.text.NumberFormat numberFormat86 = java.text.NumberFormat.getNumberInstance(locale83);
        java.text.NumberFormat numberFormat87 = java.text.NumberFormat.getInstance(locale83);
        java.lang.String str88 = locale78.getDisplayVariant(locale83);
        boolean boolean89 = parsePosition73.equals((java.lang.Object) locale78);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction90 = properFractionFormat32.parse("-600 / 1", parsePosition73);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -120");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "TWD");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str19, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "100 %" + "'", str36, "100 %");
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals(locale48.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(currency54);
        org.junit.Assert.assertEquals(currency54.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency56);
        org.junit.Assert.assertEquals(currency56.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode57 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode57.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertEquals(locale78.toString(), "org.apache.commons.math.fraction.fractionconversionexception: overflow trying to convert 100 to fraction (10/0)");
        org.junit.Assert.assertTrue("'" + category79 + "' != '" + java.util.Locale.Category.FORMAT + "'", category79.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test08460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08460");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.lang.String str10 = locale5.toLanguageTag();
        java.lang.String str11 = locale5.getDisplayScript();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getNumberInstance(locale5);
        boolean boolean13 = locale5.hasExtensions();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getNumberInstance(locale5);
        java.lang.String str15 = locale5.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "und" + "'", str10, "und");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "und" + "'", str15, "und");
    }

    @Test
    public void test08461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08461");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale7 = new java.util.Locale("java.text.parseexception: zh_tw");
        java.util.Locale.setDefault(category0, locale7);
        java.lang.String str9 = locale7.getScript();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals(locale7.toString(), "java.text.parseexception: zh_tw");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(fractionFormat10);
    }

    @Test
    public void test08462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08462");
        java.util.Locale locale3 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str4 = locale3.getDisplayVariant();
        java.text.NumberFormat.Field field5 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition((java.text.Format.Field) field5);
        int int7 = fieldPosition6.getEndIndex();
        fieldPosition6.setBeginIndex((int) (byte) 100);
        java.util.Locale locale11 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str14 = fractionFormat12.format((java.lang.Object) 100);
        boolean boolean15 = fieldPosition6.equals((java.lang.Object) fractionFormat12);
        java.text.Format.Field field16 = fieldPosition6.getFieldAttribute();
        java.util.Locale locale20 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        boolean boolean22 = fieldPosition6.equals((java.lang.Object) locale20);
        java.lang.String str23 = locale3.getDisplayCountry(locale20);
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category25 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale26 = java.util.Locale.getDefault(category25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale27);
        java.util.Locale.setDefault(category25, locale27);
        java.util.Locale locale30 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category25, locale30);
        java.lang.String str32 = locale24.getDisplayLanguage(locale30);
        java.lang.String str33 = locale3.getDisplayName(locale30);
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.util.Locale.setDefault(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "10,000%" + "'", str4, "10,000%");
        org.junit.Assert.assertNotNull(field5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "100 0 / 1" + "'", str14, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(field16);
        org.junit.Assert.assertEquals(locale20.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ZH_TW" + "'", str23, "ZH_TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.FORMAT + "'", category25.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "anglais" + "'", str32, "anglais");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str33, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(fractionFormat34);
    }

    @Test
    public void test08463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08463");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction8.add(fraction14);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction3.multiply(fraction14);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ONE;
        long long20 = fraction19.longValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction3.multiply(fraction19);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction2.subtract(fraction21);
        java.lang.String str23 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction21);
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.negate();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.abs();
        long long34 = fraction32.longValue();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction28.multiply(fraction32);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction28.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.negate();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.abs();
        long long47 = fraction45.longValue();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction41.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction28.multiply(fraction48);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction21.add(fraction49);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction21.negate();
        float float52 = fraction21.floatValue();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction21.reciprocal();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1 / 1" + "'", str4, "1 / 1");
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1 / 1" + "'", str23, "1 / 1");
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 1.0f + "'", float52 == 1.0f);
        org.junit.Assert.assertNotNull(fraction53);
    }

    @Test
    public void test08464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08464");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = numberFormat1.isGroupingUsed();
        numberFormat1.setGroupingUsed(true);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        java.math.RoundingMode roundingMode17 = numberFormat9.getRoundingMode();
        numberFormat1.setRoundingMode(roundingMode17);
        java.lang.String[] strArray19 = java.util.Locale.getISOLanguages();
        boolean boolean20 = numberFormat1.equals((java.lang.Object) strArray19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        java.util.Locale locale23 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat(numberFormat26, numberFormat28);
        boolean boolean30 = numberFormat28.isGroupingUsed();
        boolean boolean31 = numberFormat28.isGroupingUsed();
        fractionFormat24.setNumeratorFormat(numberFormat28);
        java.lang.Object obj33 = numberFormat28.clone();
        java.lang.Object obj34 = numberFormat28.clone();
        boolean boolean35 = numberFormat28.isParseIntegerOnly();
        fractionFormat21.setNumeratorFormat(numberFormat28);
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getInstance(locale37);
        boolean boolean39 = numberFormat38.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.text.NumberFormat numberFormat41 = properFractionFormat40.getWholeFormat();
        numberFormat41.setMinimumFractionDigits((int) (byte) 0);
        numberFormat41.setMinimumFractionDigits(60);
        numberFormat41.setMaximumFractionDigits((int) (byte) 1);
        java.math.RoundingMode roundingMode48 = numberFormat41.getRoundingMode();
        numberFormat41.setMaximumFractionDigits(6000);
        fractionFormat21.setDenominatorFormat(numberFormat41);
        java.lang.StringBuffer stringBuffer53 = null;
        java.text.NumberFormat.Field field54 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition56 = new java.text.FieldPosition((java.text.Format.Field) field54, (int) '#');
        java.text.Format.Field field57 = fieldPosition56.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction66 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction67 = fraction66.negate();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction63.multiply(fraction67);
        org.apache.commons.math.fraction.Fraction fraction69 = fraction60.add(fraction67);
        boolean boolean70 = field57.equals((java.lang.Object) fraction60);
        java.text.FieldPosition fieldPosition71 = new java.text.FieldPosition(field57);
        java.text.Format.Field field72 = fieldPosition71.getFieldAttribute();
        int int73 = fieldPosition71.getEndIndex();
        int int74 = fieldPosition71.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer75 = numberFormat41.format((long) 600, stringBuffer53, fieldPosition71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode17 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode17.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertTrue("'" + roundingMode48 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode48.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(field54);
        org.junit.Assert.assertNotNull(field57);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(field72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
    }

    @Test
    public void test08465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08465");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(120, 119);
        org.apache.commons.math.fraction.Fraction fraction6 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.negate();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'x', 117);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction7.subtract(fraction11);
        org.apache.commons.math.fraction.Fraction fraction13 = fraction2.subtract(fraction11);
        org.apache.commons.math.fraction.Fraction fraction14 = fraction11.negate();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.text.NumberFormat numberFormat18 = properFractionFormat17.getWholeFormat();
        int int19 = numberFormat18.getMinimumFractionDigits();
        int int20 = numberFormat18.getMinimumFractionDigits();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = fraction11.compareTo((java.lang.Object) numberFormat18);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.text.DecimalFormat cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test08466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08466");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.text.NumberFormat numberFormat41 = properFractionFormat40.getDenominatorFormat();
        java.text.NumberFormat numberFormat42 = properFractionFormat40.getNumeratorFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat40.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = properFractionFormat40.getNumeratorFormat();
        boolean boolean45 = numberFormat44.isParseIntegerOnly();
        java.lang.Object obj47 = numberFormat44.parseObject("14,400 / 1");
        int int48 = numberFormat44.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str29, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "taiwan" + "'", str35, "taiwan");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + obj47 + "' != '" + 14400L + "'", obj47, 14400L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test08467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08467");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.getDefault(category2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.util.Locale.setDefault(category2, locale4);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category2, locale7);
        java.lang.String str9 = locale7.getISO3Language();
        java.util.Locale locale12 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.lang.String str14 = locale7.getDisplayScript(locale12);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat15);
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        java.lang.String str19 = numberFormat17.format((double) 10.0f);
        java.lang.Object obj20 = numberFormat17.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fra" + "'", str9, "fra");
        org.junit.Assert.assertEquals(locale12.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "10,00 $" + "'", str19, "10,00 $");
        org.junit.Assert.assertNotNull(obj20);
    }

    @Test
    public void test08468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08468");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.lang.String str8 = locale0.getDisplayCountry(locale7);
        java.util.Locale locale10 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str11 = locale7.getDisplayLanguage(locale10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.text.NumberFormat numberFormat13 = fractionFormat12.getNumeratorFormat();
        java.lang.Object obj14 = fractionFormat12.clone();
        java.lang.Object obj15 = fractionFormat12.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Taiwan" + "'", str8, "Taiwan");
        org.junit.Assert.assertEquals(locale10.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Italian" + "'", str11, "Italian");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
    }

    @Test
    public void test08469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08469");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getCurrencyInstance(locale9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.util.Currency currency12 = numberFormat10.getCurrency();
        properFractionFormat8.setNumeratorFormat(numberFormat10);
        java.util.Locale locale17 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        int int19 = numberFormat18.getMaximumIntegerDigits();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        boolean boolean22 = numberFormat21.isGroupingUsed();
        java.util.Currency currency23 = numberFormat21.getCurrency();
        numberFormat18.setCurrency(currency23);
        java.util.Currency currency25 = numberFormat18.getCurrency();
        int int26 = numberFormat18.getMaximumFractionDigits();
        java.lang.Object obj27 = numberFormat18.clone();
        numberFormat18.setMinimumFractionDigits((int) (short) 1);
        boolean boolean30 = numberFormat18.isGroupingUsed();
        boolean boolean31 = numberFormat18.isParseIntegerOnly();
        boolean boolean32 = numberFormat18.isParseIntegerOnly();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        boolean boolean35 = numberFormat34.isGroupingUsed();
        numberFormat34.setGroupingUsed(true);
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        boolean boolean46 = numberFormat45.isGroupingUsed();
        java.util.Currency currency47 = numberFormat45.getCurrency();
        numberFormat42.setCurrency(currency47);
        java.util.Currency currency49 = numberFormat42.getCurrency();
        java.math.RoundingMode roundingMode50 = numberFormat42.getRoundingMode();
        numberFormat34.setRoundingMode(roundingMode50);
        java.util.Locale locale55 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance(locale55);
        int int57 = numberFormat56.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode58 = numberFormat56.getRoundingMode();
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = new org.apache.commons.math.fraction.FractionFormat(numberFormat56);
        numberFormat56.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat34, numberFormat56);
        java.util.Locale locale66 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance(locale66);
        numberFormat67.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str71 = numberFormat67.format((double) 0.0f);
        int int72 = numberFormat67.getMaximumIntegerDigits();
        java.util.Locale locale73 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet74 = locale73.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getInstance(locale73);
        java.util.Currency currency76 = numberFormat75.getCurrency();
        numberFormat75.setMinimumIntegerDigits(1);
        java.text.NumberFormat numberFormat79 = null;
        java.util.Locale locale83 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat84 = java.text.NumberFormat.getPercentInstance(locale83);
        numberFormat84.setMinimumIntegerDigits((int) (short) -1);
        boolean boolean87 = numberFormat84.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat88 = new org.apache.commons.math.fraction.FractionFormat(numberFormat79, numberFormat84);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat89 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67, numberFormat75, numberFormat79);
        java.text.NumberFormat numberFormat90 = properFractionFormat89.getWholeFormat();
        boolean boolean91 = numberFormat90.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat92 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat34, numberFormat90);
        java.text.NumberFormat numberFormat93 = properFractionFormat92.getNumeratorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "XXX");
        org.junit.Assert.assertEquals(locale17.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode50 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode50.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals(locale55.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode58 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode58.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals(locale66.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0%" + "'", str71, "0%");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(currency76);
        org.junit.Assert.assertEquals(currency76.toString(), "TWD");
        org.junit.Assert.assertEquals(locale83.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(numberFormat90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(numberFormat93);
    }

    @Test
    public void test08470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08470");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        numberFormat5.setMaximumIntegerDigits(0);
        numberFormat5.setMaximumIntegerDigits(5);
        int int12 = numberFormat5.getMaximumIntegerDigits();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
    }

    @Test
    public void test08471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08471");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.Fraction fraction4 = properFractionFormat2.parse("-1 / 120");
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = locale5.getDisplayCountry(locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        boolean boolean11 = locale6.hasExtensions();
        java.lang.String str12 = locale6.getDisplayLanguage();
        java.lang.String str13 = locale6.getDisplayScript();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale6);
        java.lang.Object obj15 = numberFormat14.clone();
        properFractionFormat2.setDenominatorFormat(numberFormat14);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Japan" + "'", str8, "Japan");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(obj15);
    }

    @Test
    public void test08472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08472");
        java.util.Locale locale2 = new java.util.Locale("79 / 39", "100.0%");
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Locale.setDefault(category4, locale6);
        java.util.Locale locale11 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category4, locale11);
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale locale14 = java.util.Locale.PRC;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.util.Locale.setDefault(category4, locale13);
        java.lang.String str17 = locale13.getISO3Language();
        java.lang.String str18 = locale2.getDisplayLanguage(locale13);
        boolean boolean19 = locale13.hasExtensions();
        org.junit.Assert.assertEquals(locale2.toString(), "79 / 39_100.0%");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals(locale11.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str15, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "eng" + "'", str17, "eng");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "79 / 39" + "'", str18, "79 / 39");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08473");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits(2147483647);
        int int3 = numberFormat0.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        numberFormat0.setMinimumIntegerDigits((int) (byte) -101);
        java.lang.Object obj8 = numberFormat0.parseObject("6.000%");
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 0.06d + "'", obj8, 0.06d);
    }

    @Test
    public void test08474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08474");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\u4e2d\u6587");
        java.lang.String str2 = locale1.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet3 = locale1.getExtensionKeys();
        java.lang.String str4 = locale1.getLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(fractionFormat5);
    }

    @Test
    public void test08475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08475");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (byte) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        boolean boolean6 = numberFormat5.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9, numberFormat11);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj16 = numberFormat11.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition15);
        properFractionFormat7.setNumeratorFormat(numberFormat11);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.util.Locale locale22 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        java.lang.String str25 = fractionFormat23.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat26 = fractionFormat23.getNumeratorFormat();
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.util.Locale locale28 = locale27.stripExtensions();
        java.util.Locale locale30 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.lang.String str32 = locale30.getDisplayCountry();
        java.lang.String str33 = locale27.getDisplayName(locale30);
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = locale34.getDisplayScript();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale36.getISO3Language();
        java.lang.String str38 = locale34.getDisplayScript(locale36);
        java.lang.String str39 = locale27.getDisplayLanguage(locale36);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getNumberInstance(locale27);
        fractionFormat23.setNumeratorFormat(numberFormat40);
        properFractionFormat20.setWholeFormat(numberFormat40);
        properFractionFormat7.setWholeFormat(numberFormat40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.text.NumberFormat numberFormat45 = properFractionFormat44.getDenominatorFormat();
        java.text.NumberFormat numberFormat46 = properFractionFormat44.getNumeratorFormat();
        java.text.NumberFormat numberFormat47 = properFractionFormat44.getNumeratorFormat();
        java.util.Locale locale51 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        java.lang.String str54 = numberFormat52.format((double) 10L);
        properFractionFormat44.setDenominatorFormat(numberFormat52);
        java.util.Locale locale59 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        int int61 = numberFormat60.getMaximumIntegerDigits();
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance(locale62);
        boolean boolean64 = numberFormat63.isGroupingUsed();
        java.util.Currency currency65 = numberFormat63.getCurrency();
        numberFormat60.setCurrency(currency65);
        java.util.Currency currency67 = numberFormat60.getCurrency();
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getInstance(locale69);
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getPercentInstance(locale71);
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = new org.apache.commons.math.fraction.FractionFormat(numberFormat70, numberFormat72);
        java.text.ParsePosition parsePosition76 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj77 = numberFormat72.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition76);
        java.lang.String str78 = parsePosition76.toString();
        java.lang.Number number79 = numberFormat60.parse("Chinese", parsePosition76);
        java.lang.String str81 = numberFormat60.format((double) (short) 10);
        boolean boolean82 = numberFormat60.isGroupingUsed();
        java.util.Locale locale83 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat84 = java.text.NumberFormat.getPercentInstance(locale83);
        boolean boolean85 = numberFormat84.isGroupingUsed();
        numberFormat84.setGroupingUsed(true);
        int int88 = numberFormat84.getMaximumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat89 = new org.apache.commons.math.fraction.FractionFormat(numberFormat60, numberFormat84);
        properFractionFormat44.setWholeFormat(numberFormat84);
        boolean boolean91 = fieldPosition2.equals((java.lang.Object) numberFormat84);
        java.lang.String str93 = numberFormat84.format((double) 9);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "100 0 / 1" + "'", str25, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str33, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "kor" + "'", str37, "kor");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "taiwan" + "'", str39, "taiwan");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals(locale51.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1,000%" + "'", str54, "1,000%");
        org.junit.Assert.assertEquals(locale59.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(currency65);
        org.junit.Assert.assertEquals(currency65.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency67);
        org.junit.Assert.assertEquals(currency67.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str78, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "1,000%" + "'", str81, "1,000%");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "900%" + "'", str93, "900%");
    }

    @Test
    public void test08476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08476");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder9 = builder5.addUnicodeLocaleAttribute("fra");
        java.util.Locale locale10 = builder9.build();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder12 = builder9.clearExtensions();
        java.util.Locale.Builder builder14 = builder12.setRegion("US");
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getScript();
        java.lang.String str17 = locale15.getDisplayName();
        java.util.Locale locale18 = locale15.stripExtensions();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale locale21 = builder19.build();
        java.util.Locale.Builder builder22 = builder19.clearExtensions();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.util.Locale.Builder builder25 = builder19.setLocale(locale23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.text.NumberFormat.Field field27 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition29 = new java.text.FieldPosition((java.text.Format.Field) field27, (int) '#');
        java.text.Format.Field field30 = fieldPosition29.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction36.multiply(fraction40);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction33.add(fraction40);
        boolean boolean43 = field30.equals((java.lang.Object) fraction33);
        java.text.FieldPosition fieldPosition44 = new java.text.FieldPosition(field30);
        java.text.Format.Field field45 = fieldPosition44.getFieldAttribute();
        int int46 = fieldPosition44.getEndIndex();
        java.util.Locale locale49 = new java.util.Locale("eng", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        boolean boolean50 = fieldPosition44.equals((java.lang.Object) locale49);
        java.lang.String str51 = locale23.getDisplayCountry(locale49);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getNumberInstance(locale49);
        java.lang.String str53 = locale18.getDisplayCountry(locale49);
        java.util.Locale.Builder builder54 = builder14.setLocale(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder56 = builder54.setVariant("java.text.fieldposition[field=-1,attribute=null,beginindex=100,endindex=0]_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=NULL,BEGININDEX=100,ENDINDEX=0]_English (11,700%,zho)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: java.text.fieldposition[field=-1,attribute=null,beginindex=100,endindex=0]_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=NULL,BEGININDEX=100,ENDINDEX=0]_English (11,700%,zho) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "france__#u-fra");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Korean" + "'", str17, "Korean");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(field27);
        org.junit.Assert.assertNotNull(field30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(field45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals(locale49.toString(), "eng_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test08477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08477");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.util.Locale locale6 = java.util.Locale.getDefault(category1);
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale6);
        numberFormat8.setMaximumIntegerDigits((int) 'x');
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getCurrencyInstance(locale11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.text.NumberFormat numberFormat14 = properFractionFormat13.getWholeFormat();
        numberFormat14.setGroupingUsed(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8, numberFormat14);
        java.lang.Object obj18 = numberFormat8.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator19 = properFractionFormat0.formatToCharacterIterator(obj18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(obj18);
    }

    @Test
    public void test08478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08478");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.setVariant("");
        java.util.Locale.Builder builder8 = builder3.setScript("");
        java.util.Locale.Builder builder9 = builder3.clearExtensions();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder12 = builder10.setVariant("Korean");
        java.util.Locale locale13 = builder10.build();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getIntegerInstance(locale15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        boolean boolean19 = numberFormat18.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        boolean boolean21 = numberFormat18.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16, numberFormat18);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getCurrencyInstance(locale23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        java.util.Currency currency26 = numberFormat24.getCurrency();
        fractionFormat22.setNumeratorFormat(numberFormat24);
        fractionFormat14.setDenominatorFormat(numberFormat24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat31 = fractionFormat30.getNumeratorFormat();
        java.util.Locale locale33 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.lang.String str35 = locale33.getDisplayCountry();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getIntegerInstance(locale33);
        numberFormat36.setMinimumIntegerDigits(0);
        java.lang.String str40 = numberFormat36.format(1.0d);
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.util.Locale locale42 = locale41.stripExtensions();
        java.util.Locale locale44 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale44);
        java.lang.String str46 = locale44.getDisplayCountry();
        java.lang.String str47 = locale41.getDisplayName(locale44);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.lang.String str49 = locale48.getDisplayScript();
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale50.getISO3Language();
        java.lang.String str52 = locale48.getDisplayScript(locale50);
        java.lang.String str53 = locale41.getDisplayLanguage(locale50);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getNumberInstance(locale41);
        java.util.Currency currency55 = numberFormat54.getCurrency();
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.negate();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.abs();
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.abs();
        long long66 = fraction64.longValue();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction60.multiply(fraction64);
        boolean boolean68 = numberFormat54.equals((java.lang.Object) fraction60);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31, numberFormat36, numberFormat54);
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getPercentInstance();
        numberFormat70.setMaximumIntegerDigits(2147483647);
        java.lang.String str74 = numberFormat70.format((long) 2147483647);
        java.util.Locale locale78 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat79 = java.text.NumberFormat.getPercentInstance(locale78);
        int int80 = numberFormat79.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat81 = new org.apache.commons.math.fraction.FractionFormat(numberFormat79);
        numberFormat79.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode84 = numberFormat79.getRoundingMode();
        numberFormat70.setRoundingMode(roundingMode84);
        numberFormat36.setRoundingMode(roundingMode84);
        java.lang.String str88 = numberFormat36.format((long) (short) 1);
        fractionFormat29.setDenominatorFormat(numberFormat36);
        fractionFormat2.setDenominatorFormat(numberFormat36);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency26);
        org.junit.Assert.assertEquals(currency26.toString(), "XXX");
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals(locale44.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str47, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "kor" + "'", str51, "kor");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "taiwan" + "'", str53, "taiwan");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(currency55);
        org.junit.Assert.assertEquals(currency55.toString(), "XXX");
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "214,748,364,700%" + "'", str74, "214,748,364,700%");
        org.junit.Assert.assertEquals(locale78.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2147483647 + "'", int80 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode84 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode84.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "1" + "'", str88, "1");
    }

    @Test
    public void test08479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08479");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.text.NumberFormat numberFormat29 = properFractionFormat28.getWholeFormat();
        int int30 = numberFormat29.getMaximumFractionDigits();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale31);
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = new org.apache.commons.math.fraction.FractionFormat(numberFormat34, numberFormat36);
        boolean boolean38 = numberFormat36.isGroupingUsed();
        boolean boolean39 = numberFormat36.isGroupingUsed();
        fractionFormat32.setNumeratorFormat(numberFormat36);
        java.lang.Object obj41 = numberFormat36.clone();
        java.lang.Object obj42 = numberFormat36.clone();
        java.util.Currency currency43 = numberFormat36.getCurrency();
        java.util.Locale locale47 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        int int49 = numberFormat48.getMaximumIntegerDigits();
        java.util.Locale locale53 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance(locale53);
        numberFormat54.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency57 = numberFormat54.getCurrency();
        numberFormat48.setCurrency(currency57);
        numberFormat36.setCurrency(currency57);
        numberFormat36.setParseIntegerOnly(true);
        java.util.Locale locale62 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str63 = locale62.getDisplayLanguage();
        java.lang.String str64 = locale62.toLanguageTag();
        java.util.Locale locale65 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleAttributes();
        java.lang.String str67 = locale65.getISO3Language();
        java.lang.String str68 = locale62.getDisplayScript(locale65);
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getPercentInstance(locale65);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat69);
        java.util.Locale locale71 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getCurrencyInstance(locale71);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat72);
        java.util.Currency currency74 = numberFormat72.getCurrency();
        properFractionFormat70.setNumeratorFormat(numberFormat72);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat76 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29, numberFormat36, numberFormat72);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(currency43);
        org.junit.Assert.assertEquals(currency43.toString(), "XXX");
        org.junit.Assert.assertEquals(locale47.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertEquals(locale53.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(currency57);
        org.junit.Assert.assertEquals(currency57.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Chinese" + "'", str63, "Chinese");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "zh-TW" + "'", str64, "zh-TW");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "zho" + "'", str67, "zho");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(currency74);
        org.junit.Assert.assertEquals(currency74.toString(), "XXX");
    }

    @Test
    public void test08480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08480");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction12.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction12.reciprocal();
        java.lang.String str26 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction25);
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        long long37 = fraction35.longValue();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction31.multiply(fraction35);
        boolean boolean39 = fraction25.equals((java.lang.Object) fraction31);
        int int40 = fraction25.getNumerator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "60 / 1" + "'", str26, "60 / 1");
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 60 + "'", int40 == 60);
    }

    @Test
    public void test08481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08481");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (-0.016666668f));
        org.apache.commons.math.fraction.Fraction fraction2 = fraction1.abs();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale3.getISO3Language();
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet6 = locale3.getExtensionKeys();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.text.NumberFormat numberFormat9 = properFractionFormat8.getWholeFormat();
        java.text.NumberFormat numberFormat10 = properFractionFormat8.getNumeratorFormat();
        java.util.Locale locale14 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        int int16 = numberFormat15.getMaximumIntegerDigits();
        java.util.Locale locale20 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        numberFormat21.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency24 = numberFormat21.getCurrency();
        numberFormat15.setCurrency(currency24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        numberFormat15.setMaximumIntegerDigits(599);
        java.util.Locale locale32 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale32);
        numberFormat33.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str37 = numberFormat33.format((double) 0.0f);
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = new org.apache.commons.math.fraction.FractionFormat(numberFormat42);
        java.text.NumberFormat numberFormat45 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33, numberFormat42, numberFormat45);
        java.text.NumberFormat numberFormat47 = properFractionFormat46.getWholeFormat();
        java.util.Locale locale51 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        int int53 = numberFormat52.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = new org.apache.commons.math.fraction.FractionFormat(numberFormat52);
        numberFormat52.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode57 = numberFormat52.getRoundingMode();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency59 = numberFormat58.getCurrency();
        numberFormat52.setCurrency(currency59);
        numberFormat52.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15, numberFormat47, numberFormat52);
        properFractionFormat8.setWholeFormat(numberFormat47);
        boolean boolean65 = fraction2.equals((java.lang.Object) numberFormat47);
        int int66 = fraction2.getDenominator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertEquals(locale20.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(currency24);
        org.junit.Assert.assertEquals(currency24.toString(), "XXX");
        org.junit.Assert.assertEquals(locale32.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0%" + "'", str37, "0%");
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals(locale51.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode57 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode57.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(currency59);
        org.junit.Assert.assertEquals(currency59.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 60 + "'", int66 == 60);
    }

    @Test
    public void test08482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08482");
        java.util.Locale locale2 = new java.util.Locale("java.text.ParseException: zh_TW", "zh-CN");
        java.lang.String str3 = locale2.getDisplayScript();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getCurrencyInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.lang.String str7 = locale2.getDisplayVariant(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition(59);
        org.apache.commons.math.fraction.Fraction fraction12 = fractionFormat8.parse("java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=0]", parsePosition11);
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.parseexception: zh_tw_ZH-CN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNull(fraction12);
    }

    @Test
    public void test08483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08483");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale2 = java.util.Locale.CHINA;
        boolean boolean3 = field0.equals((java.lang.Object) locale2);
        java.lang.String str4 = locale2.getDisplayVariant();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = locale5.getDisplayCountry(locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str11 = locale2.getDisplayLanguage(locale6);
        java.util.Locale locale15 = new java.util.Locale("kor", "chinois", "java.text.AttributedCharacterIterator$Attribute(reading)");
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str17 = locale15.getISO3Language();
        java.lang.String str18 = locale6.getDisplayScript(locale15);
        java.util.Locale locale19 = locale15.stripExtensions();
        boolean boolean20 = locale15.hasExtensions();
        java.lang.String str21 = locale15.getCountry();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Japan" + "'", str8, "Japan");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese" + "'", str11, "Chinese");
        org.junit.Assert.assertEquals(locale15.toString(), "kor_CHINOIS_java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Korean" + "'", str16, "Korean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "kor_CHINOIS_java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "CHINOIS" + "'", str21, "CHINOIS");
    }

    @Test
    public void test08484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08484");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale3.toLanguageTag();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getISO3Language();
        java.lang.String str9 = locale3.getDisplayScript(locale6);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale3.getDisplayCountry(locale10);
        java.util.Locale.Builder builder12 = builder0.setLocale(locale10);
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale13.getISO3Language();
        java.util.Locale locale17 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getIntegerInstance(locale17);
        java.lang.String str21 = locale13.getDisplayLanguage(locale17);
        java.lang.String str22 = locale13.getVariant();
        java.util.Locale.Builder builder23 = builder12.setLocale(locale13);
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("fr");
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale26);
        java.lang.String str28 = locale25.getDisplayLanguage(locale26);
        java.util.Set<java.lang.String> strSet29 = locale25.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder30 = builder23.setLocale(locale25);
        java.util.Locale.Builder builder32 = builder23.removeUnicodeLocaleAttribute("DEU");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Chinese" + "'", str4, "Chinese");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Taiwan" + "'", str11, "Taiwan");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zho" + "'", str15, "zho");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Chinese" + "'", str21, "Chinese");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fran\347ais" + "'", str28, "fran\347ais");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test08485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08485");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        boolean boolean16 = numberFormat15.isParseIntegerOnly();
        numberFormat15.setGroupingUsed(false);
        properFractionFormat3.setWholeFormat(numberFormat15);
        numberFormat15.setMinimumFractionDigits((int) 'u');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        boolean boolean26 = numberFormat25.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str29 = numberFormat25.format(0.008333333333333333d);
        boolean boolean30 = numberFormat25.isParseIntegerOnly();
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj34 = numberFormat25.parseObject("\u65e5\u6587", parsePosition33);
        int int35 = parsePosition33.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction36 = properFractionFormat22.parse("\uc601\uc5b4\uce90\ub098\ub2e4)", parsePosition33);
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) '#');
        java.lang.Object obj40 = properFractionFormat22.parseObject("java.text.NumberFormat$Field(exponent symbol)", parsePosition39);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getInstance(locale42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = new org.apache.commons.math.fraction.FractionFormat(numberFormat43, numberFormat45);
        boolean boolean47 = numberFormat45.isGroupingUsed();
        boolean boolean48 = numberFormat45.isGroupingUsed();
        java.text.ParsePosition parsePosition51 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj52 = numberFormat45.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition51);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat55 = properFractionFormat54.getDenominatorFormat();
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance(locale57);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getPercentInstance(locale60);
        boolean boolean62 = numberFormat61.isGroupingUsed();
        properFractionFormat59.setWholeFormat(numberFormat61);
        java.text.NumberFormat numberFormat64 = properFractionFormat59.getWholeFormat();
        java.lang.String str66 = numberFormat64.format((double) 1.0f);
        numberFormat64.setMaximumIntegerDigits((int) (byte) 100);
        numberFormat64.setParseIntegerOnly(false);
        java.util.Locale locale72 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category73 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale74 = java.util.Locale.getDefault(category73);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale75);
        java.util.Locale.setDefault(category73, locale75);
        java.util.Locale locale78 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category73, locale78);
        java.lang.String str80 = locale72.getDisplayLanguage(locale78);
        org.apache.commons.math.fraction.FractionFormat fractionFormat81 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale78);
        java.util.Locale locale83 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat84 = java.text.NumberFormat.getCurrencyInstance(locale83);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat85 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat84);
        java.text.ParsePosition parsePosition88 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction89 = properFractionFormat85.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition88);
        java.lang.Object obj90 = fractionFormat81.parseObject("214,748,364,700%", parsePosition88);
        java.lang.String str91 = parsePosition88.toString();
        java.lang.Object obj92 = numberFormat64.parseObject("600", parsePosition88);
        org.apache.commons.math.fraction.Fraction fraction93 = properFractionFormat54.parse("\uc911\uad6d\uc5b4", parsePosition88);
        java.lang.Object obj94 = numberFormat45.parseObject("10,000%", parsePosition88);
        int int95 = parsePosition88.getIndex();
        java.lang.Object obj96 = properFractionFormat22.parseObject("java.text.NumberFormat$Field(grouping separator)", parsePosition88);
        java.text.NumberFormat numberFormat97 = properFractionFormat22.getWholeFormat();
        boolean boolean98 = numberFormat97.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1%" + "'", str29, "1%");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNull(fraction36);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "100%" + "'", str66, "100%");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en");
        org.junit.Assert.assertTrue("'" + category73 + "' != '" + java.util.Locale.Category.FORMAT + "'", category73.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale74);
// flaky:         org.junit.Assert.assertEquals(locale74.toString(), "en");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "anglais" + "'", str80, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat81);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertNull(fraction89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=3]" + "'", str91, "java.text.ParsePosition[index=1,errorIndex=3]");
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertNull(fraction93);
        org.junit.Assert.assertEquals("'" + obj94 + "' != '" + 0L + "'", obj94, 0L);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 7 + "'", int95 == 7);
        org.junit.Assert.assertNull(obj96);
        org.junit.Assert.assertNotNull(numberFormat97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test08486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08486");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) (-0.9916667f), (int) (short) 17);
        org.apache.commons.math.fraction.Fraction fraction4 = new org.apache.commons.math.fraction.Fraction((double) 1.0f);
        org.apache.commons.math.fraction.Fraction fraction6 = new org.apache.commons.math.fraction.Fraction(10.0d);
        org.apache.commons.math.fraction.Fraction fraction7 = fraction4.subtract(fraction6);
        double double8 = fraction4.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction4.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.negate();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction2.divide(fraction11);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        long long23 = fraction21.longValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction17.multiply(fraction21);
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.abs();
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.abs();
        long long35 = fraction33.longValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction29.multiply(fraction33);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction17.divide(fraction36);
        long long38 = fraction37.longValue();
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 100);
        java.lang.String str42 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction41);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction37.subtract(fraction41);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.reciprocal();
        int int45 = fraction44.intValue();
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.negate();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.abs();
        org.apache.commons.math.fraction.Fraction fraction53 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.negate();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.abs();
        long long56 = fraction54.longValue();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction50.multiply(fraction54);
        double double58 = fraction57.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction57.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction62 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction63 = fraction62.negate();
        org.apache.commons.math.fraction.Fraction fraction66 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction67 = fraction66.negate();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction67.abs();
        org.apache.commons.math.fraction.Fraction fraction71 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction72 = fraction71.negate();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction72.abs();
        long long74 = fraction72.longValue();
        org.apache.commons.math.fraction.Fraction fraction75 = fraction68.multiply(fraction72);
        org.apache.commons.math.fraction.Fraction fraction78 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction79 = fraction78.negate();
        org.apache.commons.math.fraction.Fraction fraction80 = fraction79.abs();
        org.apache.commons.math.fraction.Fraction fraction83 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction84 = fraction83.negate();
        org.apache.commons.math.fraction.Fraction fraction85 = fraction84.abs();
        long long86 = fraction84.longValue();
        org.apache.commons.math.fraction.Fraction fraction87 = fraction80.multiply(fraction84);
        org.apache.commons.math.fraction.Fraction fraction88 = fraction72.subtract(fraction87);
        org.apache.commons.math.fraction.Fraction fraction89 = fraction87.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction90 = fraction89.abs();
        org.apache.commons.math.fraction.Fraction fraction91 = fraction90.negate();
        org.apache.commons.math.fraction.Fraction fraction92 = fraction62.subtract(fraction91);
        org.apache.commons.math.fraction.Fraction fraction93 = fraction57.add(fraction92);
        org.apache.commons.math.fraction.Fraction fraction94 = fraction44.subtract(fraction93);
        org.apache.commons.math.fraction.Fraction fraction95 = fraction12.add(fraction94);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 120L + "'", long38 == 120L);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0 / 1" + "'", str42, "0 / 1");
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 6.944444444444444E-5d + "'", double58 == 6.944444444444444E-5d);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(fraction87);
        org.junit.Assert.assertNotNull(fraction88);
        org.junit.Assert.assertNotNull(fraction89);
        org.junit.Assert.assertNotNull(fraction90);
        org.junit.Assert.assertNotNull(fraction91);
        org.junit.Assert.assertNotNull(fraction92);
        org.junit.Assert.assertNotNull(fraction93);
        org.junit.Assert.assertNotNull(fraction94);
        org.junit.Assert.assertNotNull(fraction95);
    }

    @Test
    public void test08487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08487");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat6 = fractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = fractionFormat2.getNumeratorFormat();
        numberFormat7.setMinimumIntegerDigits(600);
        int int10 = numberFormat7.getMinimumIntegerDigits();
        java.lang.Object obj11 = numberFormat7.clone();
        java.lang.Object obj12 = numberFormat7.clone();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean16 = numberFormat14.equals((java.lang.Object) numberFormat15);
        java.lang.Object obj17 = numberFormat15.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator18 = numberFormat7.formatToCharacterIterator(obj17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 600 + "'", int10 == 600);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
    }

    @Test
    public void test08488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08488");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet4);
        java.util.Collection<java.lang.String> strCollection6 = null;
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap8);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale10.getDisplayCountry();
        java.lang.String str12 = locale10.toLanguageTag();
        java.lang.String str13 = locale10.getISO3Language();
        java.lang.String str14 = locale10.getISO3Country();
        java.util.Set<java.lang.String> strSet15 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap17);
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 52 to fraction (-1/0)");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale22.getScript();
        java.lang.String str24 = locale20.getDisplayVariant(locale22);
        java.util.Set<java.lang.String> strSet25 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str26 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet25);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "und" + "'", str12, "und");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test08489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08489");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str5 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction4);
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction9.add(fraction15);
        org.apache.commons.math.fraction.Fraction fraction19 = fraction4.multiply(fraction15);
        org.apache.commons.math.fraction.Fraction fraction20 = fraction4.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction3.add(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 100, (int) (byte) 100);
        float float25 = fraction24.floatValue();
        double double26 = fraction24.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        long long37 = fraction35.longValue();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction31.multiply(fraction35);
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.abs();
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.negate();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.abs();
        long long49 = fraction47.longValue();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction43.multiply(fraction47);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction31.divide(fraction50);
        org.apache.commons.math.fraction.Fraction fraction52 = fraction31.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction31.negate();
        int int54 = fraction31.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction24.subtract(fraction31);
        org.apache.commons.math.fraction.Fraction fraction56 = fraction20.divide(fraction24);
        int int57 = fraction20.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction20.reciprocal();
        java.lang.String str59 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction58);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1 / 1" + "'", str5, "1 / 1");
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 1.0f + "'", float25 == 1.0f);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-1 / 1" + "'", str59, "-1 / 1");
    }

    @Test
    public void test08490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08490");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        fractionFormat4.setDenominatorFormat(numberFormat9);
        int int12 = numberFormat9.getMinimumIntegerDigits();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        boolean boolean19 = numberFormat18.isGroupingUsed();
        properFractionFormat16.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat21 = properFractionFormat16.getWholeFormat();
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number25 = numberFormat21.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition24);
        java.lang.Object obj26 = numberFormat9.parseObject("10,000%", parsePosition24);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        boolean boolean32 = numberFormat31.isGroupingUsed();
        properFractionFormat29.setWholeFormat(numberFormat31);
        java.text.NumberFormat numberFormat34 = properFractionFormat29.getWholeFormat();
        java.lang.String str36 = numberFormat34.format((double) 1.0f);
        numberFormat34.setMaximumIntegerDigits((int) (byte) 100);
        int int39 = numberFormat34.getMaximumIntegerDigits();
        java.util.Locale locale40 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale40);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getInstance(locale42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = new org.apache.commons.math.fraction.FractionFormat(numberFormat43, numberFormat45);
        boolean boolean47 = numberFormat45.isGroupingUsed();
        boolean boolean48 = numberFormat45.isGroupingUsed();
        fractionFormat41.setNumeratorFormat(numberFormat45);
        java.lang.Object obj50 = numberFormat45.clone();
        java.lang.Object obj51 = numberFormat45.clone();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance(locale52);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        numberFormat53.setMaximumFractionDigits(100);
        java.lang.String str58 = numberFormat53.format((long) 100);
        int int59 = numberFormat53.getMaximumFractionDigits();
        numberFormat53.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance(locale62);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = new org.apache.commons.math.fraction.FractionFormat(numberFormat63);
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance(locale66);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getPercentInstance(locale69);
        boolean boolean71 = numberFormat70.isGroupingUsed();
        properFractionFormat68.setWholeFormat(numberFormat70);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53, numberFormat63, numberFormat70);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34, numberFormat45, numberFormat53);
        org.apache.commons.math.fraction.FractionFormat fractionFormat75 = new org.apache.commons.math.fraction.FractionFormat(numberFormat45);
        java.text.NumberFormat numberFormat76 = fractionFormat75.getNumeratorFormat();
        boolean boolean77 = parsePosition24.equals((java.lang.Object) fractionFormat75);
        int int78 = parsePosition24.getIndex();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNull(number25);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + 0L + "'", obj26, 0L);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "100%" + "'", str36, "100%");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "10,000%" + "'", str58, "10,000%");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 7 + "'", int78 == 7);
    }

    @Test
    public void test08491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08491");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        java.lang.Object obj14 = numberFormat4.clone();
        java.lang.Object obj16 = numberFormat4.parseObject("-100%");
        numberFormat4.setMaximumFractionDigits(3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        int int20 = numberFormat4.getMaximumIntegerDigits();
        numberFormat4.setMinimumFractionDigits((int) (short) -19366);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + (-1L) + "'", obj16, (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
    }

    @Test
    public void test08492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08492");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale5.toLanguageTag();
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder10.build();
        java.lang.String str13 = locale12.getScript();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.lang.String str16 = locale14.toLanguageTag();
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale17.getISO3Language();
        java.lang.String str20 = locale14.getDisplayScript(locale17);
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale14.getDisplayCountry(locale21);
        java.util.Locale locale24 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str25 = locale21.getDisplayLanguage(locale24);
        java.lang.String str26 = locale12.getDisplayCountry(locale24);
        java.lang.String str27 = locale5.getDisplayVariant(locale12);
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayScript();
        java.lang.String str31 = locale28.getDisplayCountry(locale29);
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance(locale29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale29);
        java.util.Set<java.lang.Character> charSet35 = locale29.getExtensionKeys();
        java.lang.String str36 = locale12.getDisplayVariant(locale29);
        java.lang.String str37 = locale29.getDisplayCountry();
        java.lang.String str38 = locale0.getDisplayName(locale29);
        java.util.Set<java.lang.Character> charSet39 = locale0.getExtensionKeys();
        java.lang.String str40 = locale0.getVariant();
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale0.getDisplayScript(locale41);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "und" + "'", str9, "und");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinese" + "'", str15, "Chinese");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh-TW" + "'", str16, "zh-TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zho" + "'", str19, "zho");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Taiwan" + "'", str22, "Taiwan");
        org.junit.Assert.assertEquals(locale24.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Italian" + "'", str25, "Italian");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Japan" + "'", str31, "Japan");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Korean" + "'", str38, "Korean");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test08493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08493");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) (byte) -120);
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str6 = fractionFormat4.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat7 = fractionFormat4.getNumeratorFormat();
        java.text.NumberFormat numberFormat8 = fractionFormat4.getNumeratorFormat();
        java.text.NumberFormat numberFormat9 = fractionFormat4.getNumeratorFormat();
        java.lang.String str11 = numberFormat9.format((long) 2147483647);
        boolean boolean12 = numberFormat9.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9);
        boolean boolean14 = parsePosition1.equals((java.lang.Object) numberFormat9);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100 0 / 1" + "'", str6, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2,147,483,647" + "'", str11, "2,147,483,647");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08494");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(8654399, 96);
        org.apache.commons.math.fraction.Fraction fraction6 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.negate();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'x', 117);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction7.subtract(fraction11);
        org.apache.commons.math.fraction.Fraction fraction13 = fraction2.multiply(fraction12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale14.getISO3Language();
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleKeys();
        java.lang.String str17 = locale14.getISO3Country();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getNumberInstance(locale14);
        java.util.Locale locale22 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        int int24 = numberFormat23.getMaximumIntegerDigits();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        boolean boolean27 = numberFormat26.isGroupingUsed();
        java.util.Currency currency28 = numberFormat26.getCurrency();
        numberFormat23.setCurrency(currency28);
        java.util.Currency currency30 = numberFormat23.getCurrency();
        int int31 = numberFormat23.getMaximumFractionDigits();
        java.lang.Object obj32 = numberFormat23.clone();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        numberFormat34.setMaximumFractionDigits(100);
        numberFormat34.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str41 = numberFormat34.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat23, numberFormat34);
        java.text.NumberFormat numberFormat43 = properFractionFormat42.getWholeFormat();
        java.util.Locale locale47 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        int int49 = numberFormat48.getMaximumIntegerDigits();
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale50);
        boolean boolean52 = numberFormat51.isGroupingUsed();
        java.util.Currency currency53 = numberFormat51.getCurrency();
        numberFormat48.setCurrency(currency53);
        java.util.Currency currency55 = numberFormat48.getCurrency();
        java.math.RoundingMode roundingMode56 = numberFormat48.getRoundingMode();
        properFractionFormat42.setWholeFormat(numberFormat48);
        java.text.NumberFormat numberFormat58 = properFractionFormat42.getWholeFormat();
        java.text.NumberFormat numberFormat59 = properFractionFormat42.getNumeratorFormat();
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance(locale61);
        boolean boolean63 = numberFormat62.isGroupingUsed();
        java.lang.Object obj64 = numberFormat62.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        java.text.ParsePosition parsePosition68 = new java.text.ParsePosition(120);
        org.apache.commons.math.fraction.Fraction fraction69 = properFractionFormat65.parse("cor\351en", parsePosition68);
        int int70 = parsePosition68.getErrorIndex();
        parsePosition68.setErrorIndex(117);
        org.apache.commons.math.fraction.Fraction fraction73 = properFractionFormat42.parse("", parsePosition68);
        java.util.Locale locale77 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.lang.String str79 = locale78.getISO3Language();
        java.util.Set<java.lang.String> strSet80 = locale78.getUnicodeLocaleKeys();
        boolean boolean81 = locale78.hasExtensions();
        java.lang.String str82 = locale77.getDisplayName(locale78);
        java.util.Locale locale86 = new java.util.Locale("\uc911\uad6d\uc5b4", "", "Taiwan");
        java.lang.String str87 = locale86.getDisplayCountry();
        java.lang.String str88 = locale86.getISO3Country();
        java.lang.String str89 = locale86.toLanguageTag();
        java.lang.String str90 = locale77.getDisplayVariant(locale86);
        java.text.NumberFormat numberFormat91 = java.text.NumberFormat.getCurrencyInstance(locale86);
        properFractionFormat42.setNumeratorFormat(numberFormat91);
        // The following exception was thrown during execution in test generation
        try {
            int int93 = fraction13.compareTo((java.lang.Object) numberFormat91);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.text.DecimalFormat cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals(locale22.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "100%" + "'", str41, "100%");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals(locale47.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency55);
        org.junit.Assert.assertEquals(currency55.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode56 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode56.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertNull(fraction69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 119 + "'", int70 == 119);
        org.junit.Assert.assertNull(fraction73);
        org.junit.Assert.assertEquals(locale77.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "kor" + "'", str79, "kor");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str82, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertEquals(locale86.toString(), "\uc911\uad6d\uc5b4__Taiwan");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "und-Taiwan" + "'", str89, "und-Taiwan");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "10,000%" + "'", str90, "10,000%");
        org.junit.Assert.assertNotNull(numberFormat91);
    }

    @Test
    public void test08495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08495");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        float float4 = fraction2.floatValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.negate();
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        int int12 = numberFormat10.getMaximumFractionDigits();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat14);
        boolean boolean19 = fraction5.equals((java.lang.Object) fractionFormat18);
        java.text.NumberFormat numberFormat20 = fractionFormat18.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20);
        int int22 = numberFormat20.getMinimumFractionDigits();
        java.util.Locale locale23 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat(numberFormat26, numberFormat28);
        boolean boolean30 = numberFormat28.isGroupingUsed();
        boolean boolean31 = numberFormat28.isGroupingUsed();
        fractionFormat24.setNumeratorFormat(numberFormat28);
        java.lang.Object obj33 = numberFormat28.clone();
        java.lang.Object obj34 = numberFormat28.clone();
        java.util.Currency currency35 = numberFormat28.getCurrency();
        java.util.Locale locale39 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        int int41 = numberFormat40.getMaximumIntegerDigits();
        java.util.Locale locale45 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale45);
        numberFormat46.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency49 = numberFormat46.getCurrency();
        numberFormat40.setCurrency(currency49);
        numberFormat28.setCurrency(currency49);
        numberFormat28.setParseIntegerOnly(true);
        java.util.Locale locale54 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str55 = locale54.getDisplayLanguage();
        java.lang.String str56 = locale54.toLanguageTag();
        java.util.Locale locale57 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleAttributes();
        java.lang.String str59 = locale57.getISO3Language();
        java.lang.String str60 = locale54.getDisplayScript(locale57);
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getPercentInstance(locale57);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category64 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale65 = java.util.Locale.getDefault(category64);
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale66);
        java.util.Locale.setDefault(category64, locale66);
        java.util.Locale locale69 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category64, locale69);
        java.lang.String str71 = locale63.getDisplayLanguage(locale69);
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getInstance(locale63);
        int int73 = numberFormat72.getMinimumIntegerDigits();
        properFractionFormat62.setWholeFormat(numberFormat72);
        int int75 = numberFormat72.getMinimumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = new org.apache.commons.math.fraction.FractionFormat(numberFormat28, numberFormat72);
        numberFormat28.setGroupingUsed(true);
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20, numberFormat28);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1 / 1" + "'", str3, "1 / 1");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertEquals(locale39.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertEquals(locale45.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Chinese" + "'", str55, "Chinese");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "zh-TW" + "'", str56, "zh-TW");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "zho" + "'", str59, "zho");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertTrue("'" + category64 + "' != '" + java.util.Locale.Category.FORMAT + "'", category64.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "anglais" + "'", str71, "anglais");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test08496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08496");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayScript();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = locale5.getDisplayScript(locale7);
        java.lang.String str10 = locale5.toLanguageTag();
        java.util.Set<java.lang.String> strSet11 = locale5.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean16 = numberFormat14.equals((java.lang.Object) numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        boolean boolean18 = numberFormat14.equals((java.lang.Object) fractionFormat17);
        fractionFormat12.setDenominatorFormat(numberFormat14);
        properFractionFormat4.setDenominatorFormat(numberFormat14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat22 = properFractionFormat21.getWholeFormat();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        numberFormat24.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = new org.apache.commons.math.fraction.FractionFormat(numberFormat22, numberFormat24);
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        java.lang.String str31 = locale29.getISO3Language();
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getInstance(locale29);
        java.util.Locale locale33 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance(locale33);
        java.util.Currency currency36 = numberFormat35.getCurrency();
        numberFormat35.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat32, numberFormat35);
        fractionFormat28.setDenominatorFormat(numberFormat35);
        numberFormat35.setMinimumIntegerDigits(599);
        numberFormat35.setMaximumFractionDigits((int) (byte) 60);
        properFractionFormat4.setDenominatorFormat(numberFormat35);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "und" + "'", str10, "und");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zho" + "'", str31, "zho");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "TWD");
    }

    @Test
    public void test08497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08497");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction12.add(fraction18);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction21.divide(fraction24);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = locale27.getScript();
        boolean boolean30 = fraction26.equals((java.lang.Object) locale27);
        java.util.Locale.setDefault(category0, locale27);
        java.util.Locale locale32 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale32);
        java.util.Locale locale34 = locale32.stripExtensions();
        java.util.Locale locale35 = locale32.stripExtensions();
        java.lang.String str36 = locale27.getDisplayName(locale32);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale32);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(numberFormat37);
    }

    @Test
    public void test08498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08498");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat5);
        boolean boolean7 = numberFormat5.isGroupingUsed();
        boolean boolean8 = numberFormat5.isGroupingUsed();
        fractionFormat1.setNumeratorFormat(numberFormat5);
        java.lang.Object obj10 = numberFormat5.clone();
        java.lang.Object obj11 = numberFormat5.clone();
        boolean boolean12 = numberFormat5.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5);
        numberFormat5.setGroupingUsed(true);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test08499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08499");
        java.util.Locale locale2 = new java.util.Locale("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (0/-1)", "java.text.NumberFormat$Field(exponent)");
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.lang.String str4 = locale3.getDisplayScript();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getISO3Language();
        java.lang.String str7 = locale3.getDisplayScript(locale5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getNumberInstance(locale3);
        java.lang.String str10 = locale2.getDisplayVariant(locale3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = locale3.getUnicodeLocaleType("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=2147483647,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=2147483647,endIndex=0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "org.apache.commons.math.fraction.fractionconversionexception: overflow trying to convert 0 to fraction (0/-1)_JAVA.TEXT.NUMBERFORMAT$FIELD(EXPONENT)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test08500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08500");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, 1);
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 100);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.lang.String str9 = locale6.getDisplayCountry(locale7);
        java.util.Set<java.lang.String> strSet10 = locale7.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        boolean boolean12 = field0.equals((java.lang.Object) locale7);
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition((java.text.Format.Field) field0);
        fieldPosition14.setEndIndex(0);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }
}

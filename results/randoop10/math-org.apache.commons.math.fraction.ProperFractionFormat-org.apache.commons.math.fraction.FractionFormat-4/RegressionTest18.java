import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest18 {

    public static boolean debug = false;

    @Test
    public void test09001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09001");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency7 = numberFormat4.getCurrency();
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getISO3Language();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale12);
        java.util.Currency currency15 = numberFormat14.getCurrency();
        numberFormat14.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat14);
        java.lang.String str21 = numberFormat11.format(0.0d);
        java.lang.String str23 = numberFormat11.format((long) 96);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        numberFormat24.setParseIntegerOnly(true);
        java.math.RoundingMode roundingMode27 = numberFormat24.getRoundingMode();
        int int28 = numberFormat24.getMinimumIntegerDigits();
        java.lang.Object obj29 = numberFormat24.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat11, numberFormat24);
        numberFormat24.setMaximumFractionDigits(0);
        boolean boolean34 = numberFormat24.equals((java.lang.Object) "-12,000");
        boolean boolean35 = numberFormat24.isParseIntegerOnly();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zho" + "'", str10, "zho");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "TWD");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "96" + "'", str23, "96");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + roundingMode27 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode27.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test09002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09002");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getInstance();
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str5 = locale1.getISO3Language();
        boolean boolean6 = numberFormat0.equals((java.lang.Object) locale1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.lang.String str10 = locale9.getDisplayScript();
        java.lang.String str11 = locale8.getDisplayCountry(locale9);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getNumberInstance(locale8);
        int int13 = numberFormat12.getMinimumFractionDigits();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        numberFormat15.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12, numberFormat15);
        numberFormat12.setMaximumIntegerDigits(32);
        properFractionFormat7.setWholeFormat(numberFormat12);
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale24);
        java.util.Locale locale27 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance(locale27);
        java.util.Currency currency30 = numberFormat29.getCurrency();
        numberFormat29.setMinimumIntegerDigits(1);
        numberFormat29.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj38 = numberFormat29.parseObject("Japan", parsePosition37);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException42 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str43 = fractionConversionException42.getPattern();
        java.lang.Throwable[] throwableArray44 = fractionConversionException42.getSuppressed();
        java.lang.Object[] objArray45 = fractionConversionException42.getArguments();
        boolean boolean46 = parsePosition37.equals((java.lang.Object) objArray45);
        int int47 = parsePosition37.getIndex();
        int int48 = parsePosition37.getIndex();
        java.lang.Object obj49 = fractionFormat25.parseObject("\ud55c\uad6d\uc5b4", parsePosition37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat51 = properFractionFormat50.getWholeFormat();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance(locale52);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        numberFormat53.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = new org.apache.commons.math.fraction.FractionFormat(numberFormat51, numberFormat53);
        java.text.NumberFormat numberFormat58 = fractionFormat57.getNumeratorFormat();
        boolean boolean59 = parsePosition37.equals((java.lang.Object) fractionFormat57);
        java.util.Locale locale60 = java.util.Locale.TAIWAN;
        java.lang.String str61 = locale60.toLanguageTag();
        java.lang.String str62 = locale60.getISO3Country();
        java.lang.String str63 = locale60.toLanguageTag();
        java.lang.String str64 = locale60.getDisplayVariant();
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getInstance(locale60);
        boolean boolean66 = parsePosition37.equals((java.lang.Object) locale60);
        java.util.Locale locale69 = new java.util.Locale("France", "CHINESE (TAIWAN)");
        java.lang.String str70 = locale69.getCountry();
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getIntegerInstance(locale69);
        java.util.Locale.setDefault(locale69);
        boolean boolean73 = parsePosition37.equals((java.lang.Object) locale69);
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getNumberInstance(locale69);
        java.util.Locale locale76 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat77 = java.text.NumberFormat.getInstance(locale76);
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat79 = java.text.NumberFormat.getPercentInstance(locale78);
        org.apache.commons.math.fraction.FractionFormat fractionFormat80 = new org.apache.commons.math.fraction.FractionFormat(numberFormat77, numberFormat79);
        boolean boolean81 = numberFormat79.isGroupingUsed();
        boolean boolean82 = numberFormat79.isGroupingUsed();
        java.text.ParsePosition parsePosition85 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj86 = numberFormat79.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition85);
        java.lang.Number number87 = numberFormat74.parse("2,147,483,647 / 1", parsePosition85);
        org.apache.commons.math.fraction.Fraction fraction88 = properFractionFormat7.parse("11", parsePosition85);
        java.text.ParsePosition parsePosition91 = new java.text.ParsePosition((int) (byte) 120);
        java.lang.Object obj92 = properFractionFormat7.parseObject("", parsePosition91);
        int int93 = parsePosition91.getErrorIndex();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Japan" + "'", str11, "Japan");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "TWD");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str43, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "zh-TW" + "'", str61, "zh-TW");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "TWN" + "'", str62, "TWN");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "zh-TW" + "'", str63, "zh-TW");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals(locale69.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "CHINESE (TAIWAN)" + "'", str70, "CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertEquals("'" + number87 + "' != '" + 147483647L + "'", number87, 147483647L);
        org.junit.Assert.assertNull(fraction88);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 119 + "'", int93 == 119);
    }

    @Test
    public void test09003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09003");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        numberFormat5.setMaximumIntegerDigits(0);
        numberFormat5.setMaximumIntegerDigits(5);
        int int12 = numberFormat5.getMaximumFractionDigits();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test09004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09004");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        int int13 = fraction9.getNumerator();
        int int14 = fraction9.intValue();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction9.reciprocal();
        double double16 = fraction9.doubleValue();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder17.setLanguageTag("en");
        java.util.Locale.Builder builder22 = builder17.setExtension('a', "Korean");
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale23.getDisplayScript();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale25.getISO3Language();
        java.lang.String str27 = locale23.getDisplayScript(locale25);
        java.lang.String str28 = locale23.toLanguageTag();
        java.lang.String str29 = locale23.getDisplayVariant();
        boolean boolean30 = locale23.hasExtensions();
        java.util.Locale.Builder builder31 = builder22.setLocale(locale23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        org.apache.commons.math.fraction.Fraction fraction34 = fractionFormat32.parse("600");
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction9.subtract(fraction35);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.008333333333333333d + "'", double16 == 0.008333333333333333d);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "und" + "'", str28, "und");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
    }

    @Test
    public void test09005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09005");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(2147483647, 599);
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        float float5 = fraction3.floatValue();
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-2,147,483,647 / 599" + "'", str4, "-2,147,483,647 / 599");
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + (-3585114.5f) + "'", float5 == (-3585114.5f));
    }

    @Test
    public void test09006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09006");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.lang.String str8 = locale0.getVariant();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale0);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction16 = properFractionFormat12.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition15);
        java.text.NumberFormat numberFormat17 = properFractionFormat12.getWholeFormat();
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19, numberFormat21);
        boolean boolean23 = numberFormat21.isGroupingUsed();
        boolean boolean24 = numberFormat21.isGroupingUsed();
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj28 = numberFormat21.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21);
        java.text.NumberFormat numberFormat30 = fractionFormat29.getNumeratorFormat();
        properFractionFormat12.setNumeratorFormat(numberFormat30);
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        java.lang.String[] strArray37 = java.util.Locale.getISOCountries();
        boolean boolean38 = numberFormat36.equals((java.lang.Object) strArray37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat30, numberFormat36);
        boolean boolean40 = numberFormat9.isGroupingUsed();
        java.lang.Object obj41 = numberFormat9.clone();
        numberFormat9.setGroupingUsed(false);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u65e5\u672c" + "'", str5, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u672c" + "'", str6, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNull(fraction16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(obj41);
    }

    @Test
    public void test09007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09007");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat3 = properFractionFormat2.getWholeFormat();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean7 = numberFormat5.equals((java.lang.Object) numberFormat6);
        properFractionFormat2.setWholeFormat(numberFormat5);
        numberFormat5.setMinimumFractionDigits(0);
        int int11 = numberFormat5.getMaximumFractionDigits();
        java.text.NumberFormat.Field field12 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition((java.text.Format.Field) field12);
        int int14 = fieldPosition13.getEndIndex();
        fieldPosition13.setBeginIndex((int) (byte) 100);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        boolean boolean22 = fieldPosition13.equals((java.lang.Object) fractionFormat19);
        java.text.Format.Field field23 = fieldPosition13.getFieldAttribute();
        int int24 = fieldPosition13.getEndIndex();
        fieldPosition13.setBeginIndex(119);
        fieldPosition13.setEndIndex((int) (byte) 97);
        java.lang.StringBuffer stringBuffer29 = null;
        java.text.NumberFormat.Field field30 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition31 = new java.text.FieldPosition((java.text.Format.Field) field30);
        java.lang.String str32 = fieldPosition31.toString();
        java.util.Locale locale33 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = locale34.getDisplayScript();
        java.lang.String str36 = locale33.getDisplayName(locale34);
        boolean boolean37 = fieldPosition31.equals((java.lang.Object) locale34);
        fieldPosition31.setEndIndex((int) '#');
        int int40 = fieldPosition31.getField();
        int int41 = fieldPosition31.getBeginIndex();
        java.lang.String str42 = fieldPosition31.toString();
        fieldPosition31.setEndIndex(11);
        java.lang.String str45 = fieldPosition31.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer46 = numberFormat5.format((java.lang.Object) (byte) 97, stringBuffer29, fieldPosition31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(field12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(field23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(field30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str32, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese (Taiwan)" + "'", str36, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]" + "'", str42, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=11]" + "'", str45, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=11]");
    }

    @Test
    public void test09008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09008");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction8.add(fraction14);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction3.multiply(fraction14);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ONE;
        long long20 = fraction19.longValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction3.multiply(fraction19);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction2.subtract(fraction21);
        org.apache.commons.math.fraction.Fraction fraction25 = new org.apache.commons.math.fraction.Fraction(0.016666666666666666d, (int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction21.subtract(fraction25);
        java.util.Locale.Category category27 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale28 = java.util.Locale.getDefault(category27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale29);
        java.util.Locale.setDefault(category27, locale29);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        java.util.Locale locale35 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale35);
        java.lang.String str37 = locale35.getDisplayCountry();
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getIntegerInstance(locale35);
        java.lang.String str39 = locale32.getDisplayCountry(locale35);
        java.lang.String str40 = locale32.getISO3Language();
        java.lang.String str41 = locale32.getDisplayName();
        java.util.Locale.setDefault(category27, locale32);
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.lang.String str45 = locale43.getISO3Language();
        java.util.Locale locale47 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale47);
        java.lang.String str49 = locale47.getDisplayCountry();
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getIntegerInstance(locale47);
        java.lang.String str51 = locale43.getDisplayLanguage(locale47);
        java.lang.String str52 = locale43.getDisplayName();
        java.util.Locale.setDefault(category27, locale43);
        java.util.Locale locale54 = java.util.Locale.getDefault(category27);
        java.util.Locale locale55 = java.util.Locale.getDefault();
        java.util.Locale locale56 = locale55.stripExtensions();
        java.util.Locale locale57 = locale56.stripExtensions();
        java.util.Locale locale58 = java.util.Locale.getDefault();
        java.util.Locale locale59 = locale58.stripExtensions();
        java.util.Locale locale61 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale61);
        java.lang.String str63 = locale61.getDisplayCountry();
        java.lang.String str64 = locale58.getDisplayName(locale61);
        java.util.Locale locale65 = java.util.Locale.ROOT;
        java.lang.String str66 = locale65.getDisplayScript();
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.lang.String str68 = locale67.getISO3Language();
        java.lang.String str69 = locale65.getDisplayScript(locale67);
        java.lang.String str70 = locale58.getDisplayLanguage(locale67);
        java.lang.String str71 = locale58.toLanguageTag();
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getPercentInstance(locale58);
        java.lang.String str73 = locale58.toLanguageTag();
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getNumberInstance(locale58);
        java.lang.String str75 = locale56.getDisplayVariant(locale58);
        java.util.Locale.setDefault(category27, locale56);
        java.util.Locale locale77 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str78 = locale77.getDisplayLanguage();
        java.util.Locale locale79 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str80 = locale77.getDisplayCountry(locale79);
        java.lang.String str81 = locale79.getDisplayName();
        java.util.Locale locale82 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet83 = locale82.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat84 = java.text.NumberFormat.getInstance(locale82);
        java.util.Locale locale85 = locale82.stripExtensions();
        java.util.Locale locale86 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat87 = java.text.NumberFormat.getPercentInstance(locale86);
        java.lang.String str88 = locale85.getDisplayName(locale86);
        java.lang.String str89 = locale79.getDisplayLanguage(locale86);
        java.util.Set<java.lang.Character> charSet90 = locale86.getExtensionKeys();
        java.util.Locale.setDefault(category27, locale86);
        boolean boolean92 = fraction25.equals((java.lang.Object) locale86);
        java.lang.String str93 = locale86.toLanguageTag();
        java.lang.String str94 = locale86.toLanguageTag();
        java.lang.String str95 = locale86.getDisplayScript();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1 / 1" + "'", str4, "1 / 1");
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + category27 + "' != '" + java.util.Locale.Category.FORMAT + "'", category27.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale28);
// flaky:         org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "France" + "'", str39, "France");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "fra" + "'", str40, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u6cd5\u6587\u6cd5\u570b)" + "'", str41, "\u6cd5\u6587\u6cd5\u570b)");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "zho" + "'", str45, "zho");
        org.junit.Assert.assertEquals(locale47.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Chinese" + "'", str51, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str52, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale55);
// flaky:         org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale56);
// flaky:         org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale57);
// flaky:         org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale58);
// flaky:         org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale59);
// flaky:         org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale61.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Chinese (Taiwan)" + "'", str64, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "kor" + "'", str68, "kor");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str70, "\uc911\uad6d\uc5b4");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "zh-TW" + "'", str71, "zh-TW");
        org.junit.Assert.assertNotNull(numberFormat72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "zh-TW" + "'", str73, "zh-TW");
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u4e2d\u6587" + "'", str78, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Taiwan" + "'", str80, "Taiwan");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u6cd5\u6587\u52a0\u62ff\u5927)" + "'", str81, "\u6cd5\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat87);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str88, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str89, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(charSet90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "ko" + "'", str93, "ko");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ko" + "'", str94, "ko");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test09009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09009");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("en");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "Korean");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayScript();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale8.getISO3Language();
        java.lang.String str10 = locale6.getDisplayScript(locale8);
        java.lang.String str11 = locale6.toLanguageTag();
        java.lang.String str12 = locale6.getDisplayVariant();
        boolean boolean13 = locale6.hasExtensions();
        java.util.Locale.Builder builder14 = builder5.setLocale(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        org.apache.commons.math.fraction.Fraction fraction17 = fractionFormat15.parse("600");
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.negate();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.abs();
        long long28 = fraction26.longValue();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction22.multiply(fraction26);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.abs();
        long long41 = fraction39.longValue();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction35.multiply(fraction39);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction22.multiply(fraction42);
        int int44 = fraction42.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction17.add(fraction42);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction42.reciprocal();
        java.lang.String str47 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction42);
        int int48 = fraction42.intValue();
        int int49 = fraction42.getNumerator();
        java.lang.String str50 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction42);
        float float51 = fraction42.floatValue();
        int int52 = fraction42.getNumerator();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1 / 14,400" + "'", str47, "1 / 14,400");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1 / 14,400" + "'", str50, "1 / 14,400");
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 6.9444446E-5f + "'", float51 == 6.9444446E-5f);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test09010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09010");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat5);
        boolean boolean7 = numberFormat5.isGroupingUsed();
        boolean boolean8 = numberFormat5.isGroupingUsed();
        fractionFormat1.setNumeratorFormat(numberFormat5);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale10);
        java.lang.String str13 = numberFormat11.format(0.0d);
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        boolean boolean16 = numberFormat11.equals((java.lang.Object) strSet15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat11);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale18);
        boolean boolean20 = numberFormat19.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        int int22 = numberFormat19.getMaximumIntegerDigits();
        numberFormat19.setMaximumFractionDigits(100);
        fractionFormat17.setNumeratorFormat(numberFormat19);
        java.text.NumberFormat numberFormat26 = fractionFormat17.getDenominatorFormat();
        java.lang.Object obj27 = fractionFormat17.clone();
        java.text.NumberFormat numberFormat28 = null;
        // The following exception was thrown during execution in test generation
        try {
            fractionFormat17.setNumeratorFormat(numberFormat28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: numerator format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(obj27);
    }

    @Test
    public void test09011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09011");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getField();
        java.text.Format.Field field3 = fieldPosition1.getFieldAttribute();
        java.text.FieldPosition fieldPosition4 = new java.text.FieldPosition(field3);
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition(field3, (int) 'u');
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.negate();
        double double11 = fraction9.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.abs();
        long long24 = fraction22.longValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction18.multiply(fraction22);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        long long37 = fraction35.longValue();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction31.multiply(fraction35);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction18.multiply(fraction38);
        java.text.NumberFormat.Field field40 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition42 = new java.text.FieldPosition((java.text.Format.Field) field40, (int) '#');
        java.text.Format.Field field43 = fieldPosition42.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.negate();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction49.multiply(fraction53);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction46.add(fraction53);
        boolean boolean56 = field43.equals((java.lang.Object) fraction46);
        java.lang.String str57 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction46);
        org.apache.commons.math.fraction.Fraction fraction58 = fraction39.multiply(fraction46);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction12.add(fraction46);
        boolean boolean60 = field3.equals((java.lang.Object) fraction59);
        int int61 = fraction59.intValue();
        double double62 = fraction59.doubleValue();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.008333333333333333d) + "'", double11 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(field40);
        org.junit.Assert.assertNotNull(field43);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1 / 120" + "'", str57, "-1 / 120");
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
    }

    @Test
    public void test09012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09012");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str15 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction14);
        long long16 = fraction14.longValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction4.add(fraction14);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException21 = new org.apache.commons.math.fraction.FractionConversionException((double) 10, 35);
        boolean boolean22 = fraction18.equals((java.lang.Object) 10);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction18.reciprocal();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-1 / 100" + "'", str15, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(fraction23);
    }

    @Test
    public void test09013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09013");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat7.parse("java.text.ParseException: zh_TW", parsePosition16);
        java.text.NumberFormat numberFormat22 = properFractionFormat7.getDenominatorFormat();
        int int23 = numberFormat22.getMinimumIntegerDigits();
        java.lang.Object obj24 = numberFormat22.clone();
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("3,500.0000000000000000000000000000000000000000000000000000%");
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        boolean boolean29 = numberFormat22.equals((java.lang.Object) locale26);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getCurrencyInstance(locale26);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(fraction21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(numberFormat30);
    }

    @Test
    public void test09014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09014");
        java.util.Locale locale3 = new java.util.Locale("Chinese (Taiwan)", "\u65e5\u672c", "-1 / 100");
        java.lang.String str4 = locale3.getDisplayVariant();
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.util.Locale.setDefault(category5, locale7);
        java.util.Locale locale12 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category5, locale12);
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.PRC;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.util.Locale.setDefault(category5, locale14);
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale19.getDisplayScript();
        java.lang.String str21 = locale18.getDisplayCountry(locale19);
        java.util.Set<java.lang.String> strSet22 = locale19.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale19);
        boolean boolean24 = locale19.hasExtensions();
        java.lang.String str25 = locale19.toLanguageTag();
        java.util.Locale.setDefault(category5, locale19);
        java.util.Locale locale29 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getIntegerInstance(locale29);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale29);
        java.util.Locale.setDefault(category5, locale29);
        java.util.Locale locale34 = new java.util.Locale("US");
        java.util.Locale.setDefault(category5, locale34);
        java.lang.String str36 = locale3.getDisplayCountry(locale34);
        java.lang.String str37 = locale3.getScript();
        java.lang.Object obj38 = locale3.clone();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u65e5\u672c_-1 / 100");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 / 100" + "'", str4, "-1 / 100");
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals(locale12.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str16, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Japan" + "'", str21, "Japan");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "und" + "'", str25, "und");
        org.junit.Assert.assertEquals(locale29.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertEquals(locale34.toString(), "us");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "\u65e5\u672c_-1 / 100");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "\u65e5\u672c_-1 / 100");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "\u65e5\u672c_-1 / 100");
    }

    @Test
    public void test09015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09015");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale14 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale14);
        java.lang.String str17 = locale14.getDisplayScript();
        java.lang.String str18 = locale14.getVariant();
        java.lang.String str19 = locale14.toLanguageTag();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "us");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals(locale14.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh-tw" + "'", str18, "zh-tw");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "und" + "'", str19, "und");
        org.junit.Assert.assertNotNull(numberFormat20);
    }

    @Test
    public void test09016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09016");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        int int29 = numberFormat9.getMaximumIntegerDigits();
        numberFormat9.setMinimumIntegerDigits((int) (short) 32);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale32);
        java.util.Currency currency35 = numberFormat34.getCurrency();
        numberFormat34.setMinimumIntegerDigits(1);
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        boolean boolean46 = numberFormat45.isGroupingUsed();
        java.util.Currency currency47 = numberFormat45.getCurrency();
        numberFormat42.setCurrency(currency47);
        java.util.Currency currency49 = numberFormat42.getCurrency();
        numberFormat34.setCurrency(currency49);
        java.util.Locale locale52 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale52);
        java.lang.String str54 = locale52.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale52);
        java.util.Locale locale59 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        int int61 = numberFormat60.getMaximumIntegerDigits();
        fractionFormat55.setDenominatorFormat(numberFormat60);
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = new org.apache.commons.math.fraction.FractionFormat(numberFormat34, numberFormat60);
        java.math.RoundingMode roundingMode64 = numberFormat34.getRoundingMode();
        numberFormat9.setRoundingMode(roundingMode64);
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number68 = numberFormat9.parse("English");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"English\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "TWD");
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "XXX");
        org.junit.Assert.assertEquals(locale52.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertEquals(locale59.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode64 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode64.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test09017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09017");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 60);
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction4 = fraction1.add(fraction3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance(locale5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.Object obj8 = properFractionFormat7.clone();
        java.text.NumberFormat numberFormat9 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat10 = properFractionFormat7.getWholeFormat();
        numberFormat10.setGroupingUsed(false);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = fraction1.compareTo((java.lang.Object) numberFormat10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.text.DecimalFormat cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
    }

    @Test
    public void test09018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09018");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getInstance();
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str5 = locale1.getISO3Language();
        boolean boolean6 = numberFormat0.equals((java.lang.Object) locale1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.lang.String str10 = locale9.getDisplayScript();
        java.lang.String str11 = locale8.getDisplayCountry(locale9);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getNumberInstance(locale8);
        int int13 = numberFormat12.getMinimumFractionDigits();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        numberFormat15.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12, numberFormat15);
        numberFormat12.setMaximumIntegerDigits(32);
        properFractionFormat7.setWholeFormat(numberFormat12);
        java.text.NumberFormat.Field field23 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition24 = new java.text.FieldPosition((java.text.Format.Field) field23);
        int int25 = fieldPosition24.getEndIndex();
        fieldPosition24.setBeginIndex((int) (byte) 100);
        java.util.Locale locale29 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale29);
        java.lang.String str32 = fractionFormat30.format((java.lang.Object) 100);
        boolean boolean33 = fieldPosition24.equals((java.lang.Object) fractionFormat30);
        int int34 = fieldPosition24.getBeginIndex();
        int int35 = fieldPosition24.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = properFractionFormat7.format((java.lang.Object) fieldPosition24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Japan" + "'", str11, "Japan");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(field23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "100 0 / 1" + "'", str32, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test09019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09019");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.lang.String str9 = numberFormat7.format((double) 1.0f);
        numberFormat7.setMaximumIntegerDigits((int) (byte) 100);
        int int12 = numberFormat7.getMaximumIntegerDigits();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16, numberFormat18);
        boolean boolean20 = numberFormat18.isGroupingUsed();
        boolean boolean21 = numberFormat18.isGroupingUsed();
        fractionFormat14.setNumeratorFormat(numberFormat18);
        java.lang.Object obj23 = numberFormat18.clone();
        java.lang.Object obj24 = numberFormat18.clone();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        numberFormat26.setMaximumFractionDigits(100);
        java.lang.String str31 = numberFormat26.format((long) 100);
        int int32 = numberFormat26.getMaximumFractionDigits();
        numberFormat26.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat36);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        boolean boolean44 = numberFormat43.isGroupingUsed();
        properFractionFormat41.setWholeFormat(numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26, numberFormat36, numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat18, numberFormat26);
        java.text.NumberFormat numberFormat48 = properFractionFormat47.getWholeFormat();
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance(locale50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance(locale52);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = new org.apache.commons.math.fraction.FractionFormat(numberFormat51, numberFormat53);
        numberFormat53.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field58 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition59 = new java.text.FieldPosition((java.text.Format.Field) field58);
        java.lang.String str60 = fieldPosition59.toString();
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale62 = java.util.Locale.ROOT;
        java.lang.String str63 = locale62.getDisplayScript();
        java.lang.String str64 = locale61.getDisplayName(locale62);
        boolean boolean65 = fieldPosition59.equals((java.lang.Object) locale62);
        fieldPosition59.setEndIndex((int) '#');
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getCurrencyInstance(locale68);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat69);
        java.text.ParsePosition parsePosition73 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction74 = properFractionFormat70.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition73);
        boolean boolean75 = fieldPosition59.equals((java.lang.Object) parsePosition73);
        java.lang.Number number76 = numberFormat53.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition73);
        int int77 = parsePosition73.getIndex();
        java.lang.String str78 = parsePosition73.toString();
        org.apache.commons.math.fraction.Fraction fraction79 = properFractionFormat47.parse("", parsePosition73);
        org.apache.commons.math.fraction.Fraction fraction80 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str81 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction80);
        org.apache.commons.math.fraction.Fraction fraction84 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction85 = fraction84.negate();
        org.apache.commons.math.fraction.Fraction fraction86 = fraction85.abs();
        org.apache.commons.math.fraction.Fraction fraction87 = fraction85.abs();
        org.apache.commons.math.fraction.Fraction fraction90 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction91 = fraction90.negate();
        org.apache.commons.math.fraction.Fraction fraction92 = fraction91.abs();
        org.apache.commons.math.fraction.Fraction fraction93 = fraction91.abs();
        org.apache.commons.math.fraction.Fraction fraction94 = fraction85.add(fraction91);
        org.apache.commons.math.fraction.Fraction fraction95 = fraction80.multiply(fraction91);
        org.apache.commons.math.fraction.Fraction fraction96 = fraction95.negate();
        org.apache.commons.math.fraction.Fraction fraction97 = fraction96.abs();
        boolean boolean98 = parsePosition73.equals((java.lang.Object) fraction96);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100%" + "'", str9, "100%");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10,000%" + "'", str31, "10,000%");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(field58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str60, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Chinese (Taiwan)" + "'", str64, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNull(fraction74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(number76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str78, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "1 / 1" + "'", str81, "1 / 1");
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertNotNull(fraction87);
        org.junit.Assert.assertNotNull(fraction90);
        org.junit.Assert.assertNotNull(fraction91);
        org.junit.Assert.assertNotNull(fraction92);
        org.junit.Assert.assertNotNull(fraction93);
        org.junit.Assert.assertNotNull(fraction94);
        org.junit.Assert.assertNotNull(fraction95);
        org.junit.Assert.assertNotNull(fraction96);
        org.junit.Assert.assertNotNull(fraction97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test09020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09020");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        numberFormat4.setMinimumIntegerDigits(0);
        int int7 = numberFormat4.getMaximumFractionDigits();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        numberFormat9.setMaximumFractionDigits(100);
        java.lang.String str14 = numberFormat9.format((long) 100);
        int int15 = numberFormat9.getMaximumFractionDigits();
        numberFormat9.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        boolean boolean27 = numberFormat26.isGroupingUsed();
        properFractionFormat24.setWholeFormat(numberFormat26);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat19, numberFormat26);
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Locale locale33 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.lang.String str35 = locale33.getDisplayCountry();
        java.lang.String str36 = locale30.getDisplayName(locale33);
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.lang.String str38 = locale37.getDisplayScript();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale39.getISO3Language();
        java.lang.String str41 = locale37.getDisplayScript(locale39);
        java.lang.String str42 = locale30.getDisplayLanguage(locale39);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getNumberInstance(locale30);
        java.util.Currency currency44 = numberFormat43.getCurrency();
        java.util.Locale locale48 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        int int50 = numberFormat49.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = new org.apache.commons.math.fraction.FractionFormat(numberFormat49);
        numberFormat49.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode54 = numberFormat49.getRoundingMode();
        numberFormat43.setRoundingMode(roundingMode54);
        numberFormat9.setRoundingMode(roundingMode54);
        numberFormat4.setRoundingMode(roundingMode54);
        numberFormat4.setMinimumFractionDigits(0);
        java.lang.String str61 = numberFormat4.format((long) 32);
        numberFormat4.setMaximumIntegerDigits(100);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10,000%" + "'", str14, "10,000%");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese (Taiwan)" + "'", str36, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "kor" + "'", str40, "kor");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str42, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(currency44);
// flaky:         org.junit.Assert.assertEquals(currency44.toString(), "TWD");
        org.junit.Assert.assertEquals(locale48.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode54 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode54.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "32" + "'", str61, "32");
    }

    @Test
    public void test09021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09021");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.lang.String str6 = locale0.getDisplayVariant();
        java.util.Locale locale7 = locale0.stripExtensions();
        java.lang.String str8 = locale7.getDisplayName();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale10.getDisplayCountry(locale11);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getNumberInstance(locale10);
        java.lang.String str15 = locale10.getDisplayCountry();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getCurrencyInstance(locale10);
        boolean boolean17 = numberFormat16.isGroupingUsed();
        java.text.NumberFormat.Field field18 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition19 = new java.text.FieldPosition((java.text.Format.Field) field18);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        boolean boolean21 = field18.equals((java.lang.Object) locale20);
        java.lang.String str22 = locale20.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.text.NumberFormat numberFormat24 = fractionFormat23.getDenominatorFormat();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance();
        numberFormat25.setMaximumIntegerDigits(2147483647);
        int int28 = numberFormat25.getMinimumFractionDigits();
        numberFormat25.setParseIntegerOnly(true);
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getInstance(locale31);
        java.math.RoundingMode roundingMode33 = numberFormat32.getRoundingMode();
        numberFormat25.setRoundingMode(roundingMode33);
        numberFormat24.setRoundingMode(roundingMode33);
        numberFormat16.setRoundingMode(roundingMode33);
        numberFormat9.setRoundingMode(roundingMode33);
        java.lang.Object obj38 = numberFormat9.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Japan" + "'", str13, "Japan");
        org.junit.Assert.assertNotNull(numberFormat14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Japan" + "'", str15, "Japan");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(field18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "CN" + "'", str22, "CN");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + roundingMode33 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode33.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj38);
    }

    @Test
    public void test09022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09022");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getEndIndex();
        fieldPosition1.setBeginIndex((int) (byte) 100);
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str9 = fractionFormat7.format((java.lang.Object) 100);
        boolean boolean10 = fieldPosition1.equals((java.lang.Object) fractionFormat7);
        java.text.Format.Field field11 = fieldPosition1.getFieldAttribute();
        java.text.Format.Field field12 = fieldPosition1.getFieldAttribute();
        int int13 = fieldPosition1.getBeginIndex();
        java.text.Format.Field field14 = fieldPosition1.getFieldAttribute();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100 0 / 1" + "'", str9, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertNotNull(field12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(field14);
    }

    @Test
    public void test09023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09023");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale.setDefault(locale0);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.text.NumberFormat numberFormat6 = properFractionFormat5.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat5.getDenominatorFormat();
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Locale locale10 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str12 = locale9.getDisplayName(locale10);
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.lang.String str14 = locale13.toLanguageTag();
        java.lang.String str15 = locale13.getVariant();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder16.setScript("");
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.lang.String str22 = locale19.getDisplayLanguage(locale21);
        java.util.Locale.Builder builder23 = builder18.setLocale(locale19);
        java.lang.String str24 = locale13.getDisplayVariant(locale19);
        java.lang.String str25 = locale19.getDisplayName();
        java.lang.String str26 = locale19.getDisplayName();
        java.lang.String str27 = locale10.getDisplayScript(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        boolean boolean35 = numberFormat34.isGroupingUsed();
        properFractionFormat32.setWholeFormat(numberFormat34);
        java.text.NumberFormat numberFormat37 = properFractionFormat32.getWholeFormat();
        java.lang.String str39 = numberFormat37.format((double) 1.0f);
        numberFormat37.setMaximumIntegerDigits((int) (byte) 100);
        int int42 = numberFormat37.getMaximumIntegerDigits();
        int int43 = numberFormat37.getMinimumFractionDigits();
        java.text.ParsePosition parsePosition46 = new java.text.ParsePosition((int) (short) 10000);
        int int47 = parsePosition46.getErrorIndex();
        java.lang.Object obj48 = numberFormat37.parseObject("\ud55c\uad6d\uc5b4 (CHINESE (TAIWAN))", parsePosition46);
        java.lang.Object obj49 = fractionFormat28.parseObject("\ud504\ub791\uc2a4\uc5b4", parsePosition46);
        org.apache.commons.math.fraction.Fraction fraction50 = properFractionFormat5.parse("11 / 52", parsePosition46);
        java.util.Locale locale52 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getInstance(locale52);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = new org.apache.commons.math.fraction.FractionFormat(numberFormat53, numberFormat55);
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj60 = numberFormat55.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition59);
        java.lang.String str61 = parsePosition59.toString();
        boolean boolean63 = parsePosition59.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        parsePosition59.setErrorIndex(2147483647);
        org.apache.commons.math.fraction.Fraction fraction66 = properFractionFormat5.parse("ko", parsePosition59);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "francese (Francia)" + "'", str12, "francese (Francia)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh-TW" + "'", str14, "zh-TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinesisch" + "'", str22, "Chinesisch");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str25, "\u4e2d\u6587\u53f0\u7063)");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str26, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "100%" + "'", str39, "100%");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(fraction50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str61, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(fraction66);
    }

    @Test
    public void test09024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09024");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale3.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder7 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale locale9 = builder7.build();
        java.lang.String str10 = locale9.getDisplayScript();
        boolean boolean11 = locale9.hasExtensions();
        java.util.Locale locale12 = locale9.stripExtensions();
        java.lang.String str13 = locale9.getISO3Country();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getCurrencyInstance(locale9);
        java.text.FieldPosition fieldPosition16 = new java.text.FieldPosition(10);
        int int17 = fieldPosition16.getEndIndex();
        fieldPosition16.setBeginIndex((int) '#');
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.lang.String str21 = locale20.getScript();
        java.util.Locale locale25 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str26 = locale20.getDisplayScript(locale25);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale25);
        int int28 = numberFormat27.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        boolean boolean31 = fieldPosition16.equals((java.lang.Object) numberFormat27);
        numberFormat27.setGroupingUsed(false);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale34.getISO3Language();
        java.util.Set<java.lang.Character> charSet36 = locale34.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet37 = locale34.getExtensionKeys();
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getCurrencyInstance(locale34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27, numberFormat38);
        java.lang.Object obj40 = numberFormat27.clone();
        numberFormat27.setMaximumFractionDigits((int) (byte) -51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat27);
        java.text.NumberFormat numberFormat44 = fractionFormat43.getDenominatorFormat();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "TWN" + "'", str13, "TWN");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals(locale25.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "kor" + "'", str35, "kor");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertNotNull(charSet37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(numberFormat44);
    }

    @Test
    public void test09025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09025");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str3 = locale0.getDisplayCountry(locale2);
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Locale.setDefault(category4, locale6);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category4, locale9);
        java.lang.String str11 = locale9.getISO3Language();
        java.lang.String str12 = locale0.getDisplayLanguage(locale9);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale9);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str1, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Taiwan" + "'", str3, "Taiwan");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fra" + "'", str11, "fra");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "chinois" + "'", str12, "chinois");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test09026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09026");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        float float4 = fraction2.floatValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.negate();
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        int int12 = numberFormat10.getMaximumFractionDigits();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat14);
        boolean boolean19 = fraction5.equals((java.lang.Object) fractionFormat18);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction21.add(fraction27);
        double double29 = fraction27.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction5.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction27.negate();
        short short32 = fraction31.shortValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1 / 1" + "'", str3, "1 / 1");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.008333333333333333d + "'", double29 == 0.008333333333333333d);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + short32 + "' != '" + (short) 0 + "'", short32 == (short) 0);
    }

    @Test
    public void test09027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09027");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale9 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.lang.String str16 = locale12.toLanguageTag();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale locale19 = builder17.build();
        java.lang.String str20 = locale19.getScript();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale21.toLanguageTag();
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale24.getISO3Language();
        java.lang.String str27 = locale21.getDisplayScript(locale24);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale21.getDisplayCountry(locale28);
        java.util.Locale locale31 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str32 = locale28.getDisplayLanguage(locale31);
        java.lang.String str33 = locale19.getDisplayCountry(locale31);
        java.lang.String str34 = locale12.getDisplayVariant(locale19);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance(locale12);
        java.util.Locale locale36 = locale12.stripExtensions();
        java.lang.String str37 = locale9.getDisplayLanguage(locale12);
        java.util.Locale.setDefault(category0, locale12);
        boolean boolean39 = locale12.hasExtensions();
        java.lang.String str40 = locale12.getLanguage();
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder41.setScript("");
        java.util.Locale locale44 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str45 = locale44.getDisplayLanguage();
        java.lang.String str46 = locale44.toLanguageTag();
        java.util.Locale locale47 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        java.lang.String str49 = locale47.getISO3Language();
        java.lang.String str50 = locale44.getDisplayScript(locale47);
        java.util.Locale locale51 = java.util.Locale.ITALIAN;
        java.lang.String str52 = locale44.getDisplayCountry(locale51);
        java.util.Locale.Builder builder53 = builder41.setLocale(locale51);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = locale54.getDisplayScript();
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale56.getISO3Language();
        java.lang.String str58 = locale54.getDisplayScript(locale56);
        java.lang.String str59 = locale54.toLanguageTag();
        java.lang.String str60 = locale54.getDisplayVariant();
        java.lang.String str61 = locale54.getVariant();
        java.util.Locale.Builder builder62 = builder53.setLocale(locale54);
        java.util.Locale locale63 = locale54.stripExtensions();
        java.util.Locale locale64 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getInstance(locale64);
        java.util.Locale locale67 = locale64.stripExtensions();
        java.lang.String str68 = locale63.getDisplayName(locale67);
        java.lang.String str69 = locale67.getISO3Country();
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale67);
        java.lang.String str71 = locale12.getDisplayName(locale67);
        java.util.Locale.setDefault(locale67);
        java.lang.String str73 = locale67.getISO3Language();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals(locale9.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str22, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh-TW" + "'", str23, "zh-TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zho" + "'", str26, "zho");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Taiwan" + "'", str29, "Taiwan");
        org.junit.Assert.assertEquals(locale31.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Italian" + "'", str32, "Italian");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1 / 1" + "'", str37, "1 / 1");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Chinese" + "'", str45, "Chinese");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "zh-TW" + "'", str46, "zh-TW");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "zho" + "'", str49, "zho");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Taiwan" + "'", str52, "Taiwan");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "kor" + "'", str57, "kor");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "und" + "'", str59, "und");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "TWN" + "'", str69, "TWN");
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "zho" + "'", str73, "zho");
    }

    @Test
    public void test09028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09028");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale.setDefault(locale0);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str7 = locale6.getDisplayLanguage();
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str9 = locale6.getDisplayCountry(locale8);
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category10, locale15);
        java.lang.String str17 = locale15.getISO3Language();
        java.lang.String str18 = locale6.getDisplayLanguage(locale15);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale15);
        properFractionFormat5.setWholeFormat(numberFormat19);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        boolean boolean27 = numberFormat26.isGroupingUsed();
        properFractionFormat24.setWholeFormat(numberFormat26);
        java.text.NumberFormat numberFormat29 = properFractionFormat24.getWholeFormat();
        java.text.ParsePosition parsePosition32 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number33 = numberFormat29.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition32);
        parsePosition32.setErrorIndex(0);
        parsePosition32.setIndex(1);
        org.apache.commons.math.fraction.Fraction fraction38 = properFractionFormat5.parse("java.text.ParsePosition[index=87,errorIndex=3]", parsePosition32);
        java.text.ParsePosition parsePosition40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj41 = properFractionFormat5.parseObject("\u4e2d\u570b", parsePosition40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u4e2d\u6587" + "'", str1, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u4e2d\u6587" + "'", str7, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Taiwan" + "'", str9, "Taiwan");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fra" + "'", str17, "fra");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "chinois" + "'", str18, "chinois");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNull(number33);
        org.junit.Assert.assertNull(fraction38);
    }

    @Test
    public void test09029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09029");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.lang.String str2 = locale1.toLanguageTag();
        java.lang.String str3 = locale1.getVariant();
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder4.setScript("");
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        java.util.Locale locale9 = java.util.Locale.GERMANY;
        java.lang.String str10 = locale7.getDisplayLanguage(locale9);
        java.util.Locale.Builder builder11 = builder6.setLocale(locale7);
        java.lang.String str12 = locale1.getDisplayVariant(locale7);
        java.lang.String str13 = locale7.getScript();
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale18 = new java.util.Locale("\uc911\uad6d\uc5b4", "", "Taiwan");
        java.lang.String str19 = locale18.getDisplayCountry();
        java.lang.String str20 = locale18.getISO3Country();
        java.lang.String str21 = locale18.toLanguageTag();
        java.util.Locale.setDefault(category0, locale18);
        java.util.Locale locale23 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale23);
        java.util.Locale locale25 = locale23.stripExtensions();
        java.lang.String str26 = locale23.getDisplayName();
        java.util.Locale.setDefault(category0, locale23);
        java.util.Locale.Category category28 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale29.getISO3Language();
        java.util.Locale.setDefault(category28, locale29);
        java.lang.String str32 = locale29.getDisplayVariant();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance(locale29);
        java.lang.String str34 = locale29.getCountry();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale29);
        java.util.Locale.setDefault(category0, locale29);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinesisch" + "'", str10, "Chinesisch");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals(locale18.toString(), "\uc911\uad6d\uc5b4__Taiwan");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "und-Taiwan" + "'", str21, "und-Taiwan");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str26, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category28.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "kor" + "'", str30, "kor");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(numberFormat35);
    }

    @Test
    public void test09030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09030");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        int int6 = numberFormat5.getMaximumIntegerDigits();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        boolean boolean9 = numberFormat8.isGroupingUsed();
        java.util.Currency currency10 = numberFormat8.getCurrency();
        numberFormat5.setCurrency(currency10);
        properFractionFormat0.setWholeFormat(numberFormat5);
        java.util.Locale locale14 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18, numberFormat20);
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj25 = numberFormat20.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition24);
        java.lang.String str26 = parsePosition24.toString();
        java.lang.Object obj27 = fractionFormat15.parseObject("\uc911\uad6d\uc5b4", parsePosition24);
        org.apache.commons.math.fraction.Fraction fraction28 = properFractionFormat0.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (10/97)", parsePosition24);
        java.text.NumberFormat numberFormat29 = properFractionFormat0.getNumeratorFormat();
        java.lang.Object obj30 = properFractionFormat0.clone();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction36.multiply(fraction40);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction33.add(fraction40);
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.negate();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.abs();
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.negate();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.abs();
        long long53 = fraction51.longValue();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction47.multiply(fraction51);
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.negate();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction62 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction63 = fraction62.negate();
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.abs();
        long long65 = fraction63.longValue();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction59.multiply(fraction63);
        org.apache.commons.math.fraction.Fraction fraction67 = fraction51.subtract(fraction66);
        org.apache.commons.math.fraction.Fraction fraction68 = fraction66.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction69 = fraction68.abs();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction42.add(fraction68);
        org.apache.commons.math.fraction.Fraction fraction71 = fraction68.abs();
        java.lang.StringBuffer stringBuffer72 = null;
        java.text.NumberFormat.Field field73 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition74 = new java.text.FieldPosition((java.text.Format.Field) field73);
        int int75 = fieldPosition74.getBeginIndex();
        int int76 = fieldPosition74.getField();
        int int77 = fieldPosition74.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer78 = properFractionFormat0.format(fraction71, stringBuffer72, fieldPosition74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str26, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(fraction28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(field73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test09031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09031");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getWholeFormat();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        numberFormat3.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getISO3Language();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale12);
        java.util.Currency currency15 = numberFormat14.getCurrency();
        numberFormat14.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat14);
        fractionFormat7.setDenominatorFormat(numberFormat14);
        java.text.NumberFormat numberFormat21 = fractionFormat7.getNumeratorFormat();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency23 = numberFormat22.getCurrency();
        java.lang.String str25 = numberFormat22.format(1.0d);
        java.util.Locale locale27 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance(locale27);
        java.util.Currency currency30 = numberFormat29.getCurrency();
        numberFormat29.setMinimumIntegerDigits(1);
        numberFormat29.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj38 = numberFormat29.parseObject("Japan", parsePosition37);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException42 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str43 = fractionConversionException42.getPattern();
        java.lang.Throwable[] throwableArray44 = fractionConversionException42.getSuppressed();
        java.lang.Object[] objArray45 = fractionConversionException42.getArguments();
        boolean boolean46 = parsePosition37.equals((java.lang.Object) objArray45);
        int int47 = parsePosition37.getIndex();
        java.lang.String str48 = parsePosition37.toString();
        java.lang.Object obj49 = numberFormat22.parseObject("java.text.ParsePosition[index=52,errorIndex=-1]", parsePosition37);
        fractionFormat7.setDenominatorFormat(numberFormat22);
        java.text.NumberFormat numberFormat51 = fractionFormat7.getDenominatorFormat();
        numberFormat51.setMinimumFractionDigits((int) 'a');
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zho" + "'", str10, "zho");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "TWD");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "100%" + "'", str25, "100%");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "TWD");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str43, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str48, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(numberFormat51);
    }

    @Test
    public void test09032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09032");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        java.lang.Object obj14 = numberFormat4.clone();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale15);
        boolean boolean17 = numberFormat16.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance(locale19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20, numberFormat22);
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj27 = numberFormat22.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition26);
        properFractionFormat18.setNumeratorFormat(numberFormat22);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getCurrencyInstance(locale29);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.util.Locale locale33 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.lang.String str36 = fractionFormat34.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat37 = fractionFormat34.getNumeratorFormat();
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Locale locale39 = locale38.stripExtensions();
        java.util.Locale locale41 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.lang.String str43 = locale41.getDisplayCountry();
        java.lang.String str44 = locale38.getDisplayName(locale41);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.lang.String str46 = locale45.getDisplayScript();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale47.getISO3Language();
        java.lang.String str49 = locale45.getDisplayScript(locale47);
        java.lang.String str50 = locale38.getDisplayLanguage(locale47);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getNumberInstance(locale38);
        fractionFormat34.setNumeratorFormat(numberFormat51);
        properFractionFormat31.setWholeFormat(numberFormat51);
        properFractionFormat18.setWholeFormat(numberFormat51);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        numberFormat51.setGroupingUsed(true);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance(locale58);
        boolean boolean60 = numberFormat59.isGroupingUsed();
        java.util.Currency currency61 = numberFormat59.getCurrency();
        int int62 = numberFormat59.getMinimumFractionDigits();
        int int63 = numberFormat59.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = new org.apache.commons.math.fraction.FractionFormat(numberFormat59);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat51, numberFormat59);
        numberFormat51.setMaximumIntegerDigits((int) (byte) 88);
        numberFormat51.setMaximumIntegerDigits((int) (byte) 90);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "100 0 / 1" + "'", str36, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale41.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Chinese (Taiwan)" + "'", str44, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "kor" + "'", str48, "kor");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str50, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(currency61);
        org.junit.Assert.assertEquals(currency61.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test09033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09033");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        int int18 = fraction12.intValue();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction12.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 100, (int) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction19.multiply(fraction22);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        java.lang.String str27 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction26);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "60 / 1" + "'", str27, "60 / 1");
    }

    @Test
    public void test09034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09034");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction4.divide(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction4.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) 10, 120);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((-100), 2147483647);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction28.divide(fraction31);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction25.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.abs();
        long long44 = fraction42.longValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction38.multiply(fraction42);
        long long46 = fraction42.longValue();
        java.util.Locale locale47 = java.util.Locale.ROOT;
        java.lang.String str48 = locale47.getDisplayScript();
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale49.getISO3Language();
        java.lang.String str51 = locale47.getDisplayScript(locale49);
        java.lang.String str52 = locale47.toLanguageTag();
        java.lang.String str53 = locale47.getDisplayVariant();
        java.lang.String str54 = locale47.getVariant();
        boolean boolean55 = fraction42.equals((java.lang.Object) str54);
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.negate();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.abs();
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.abs();
        long long66 = fraction64.longValue();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction60.multiply(fraction64);
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.negate();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction71.abs();
        org.apache.commons.math.fraction.Fraction fraction75 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction76 = fraction75.negate();
        org.apache.commons.math.fraction.Fraction fraction77 = fraction76.abs();
        long long78 = fraction76.longValue();
        org.apache.commons.math.fraction.Fraction fraction79 = fraction72.multiply(fraction76);
        org.apache.commons.math.fraction.Fraction fraction80 = fraction64.subtract(fraction79);
        org.apache.commons.math.fraction.Fraction fraction83 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str84 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction83);
        org.apache.commons.math.fraction.Fraction fraction85 = fraction64.subtract(fraction83);
        org.apache.commons.math.fraction.Fraction fraction86 = fraction42.divide(fraction64);
        java.text.ParsePosition parsePosition88 = new java.text.ParsePosition((int) '4');
        parsePosition88.setErrorIndex(600);
        boolean boolean91 = fraction42.equals((java.lang.Object) 600);
        int int92 = fraction42.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction93 = fraction33.multiply(fraction42);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "kor" + "'", str50, "kor");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "und" + "'", str52, "und");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "-1 / 100" + "'", str84, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(fraction93);
    }

    @Test
    public void test09035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09035");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.util.Set<java.lang.String> strSet7 = locale0.getUnicodeLocaleKeys();
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale10);
        java.util.Locale.setDefault(category8, locale10);
        java.util.Locale locale13 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category8, locale13);
        java.lang.String str15 = locale13.getISO3Language();
        java.util.Locale locale18 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getIntegerInstance(locale18);
        java.lang.String str20 = locale13.getDisplayScript(locale18);
        java.lang.String str21 = locale0.getDisplayLanguage(locale13);
        java.lang.String str22 = locale0.getCountry();
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str24 = locale23.getDisplayLanguage();
        java.lang.String str25 = locale0.getDisplayName(locale23);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale23);
        numberFormat26.setMinimumFractionDigits((int) (byte) 97);
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayScript();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale31.getISO3Language();
        java.lang.String str33 = locale29.getDisplayScript(locale31);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale29);
        numberFormat34.setParseIntegerOnly(false);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.text.NumberFormat numberFormat40 = properFractionFormat39.getWholeFormat();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean44 = numberFormat42.equals((java.lang.Object) numberFormat43);
        properFractionFormat39.setWholeFormat(numberFormat42);
        boolean boolean46 = numberFormat34.equals((java.lang.Object) properFractionFormat39);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = new org.apache.commons.math.fraction.FractionFormat(numberFormat34);
        java.lang.StringBuffer stringBuffer48 = null;
        java.text.FieldPosition fieldPosition50 = new java.text.FieldPosition((-59));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer51 = numberFormat26.format((java.lang.Object) numberFormat34, stringBuffer48, fieldPosition50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fra" + "'", str15, "fra");
        org.junit.Assert.assertEquals(locale18.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str24, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "kor" + "'", str32, "kor");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test09036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09036");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        numberFormat1.setMaximumFractionDigits(2147483647);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        java.lang.Number number19 = numberFormat1.parse("\ud55c\uad6d\uc5b4", parsePosition16);
        numberFormat1.setMaximumFractionDigits((int) (short) 0);
        int int22 = numberFormat1.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test09037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09037");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat4 = fractionFormat3.getNumeratorFormat();
        java.text.NumberFormat numberFormat5 = fractionFormat3.getDenominatorFormat();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean9 = numberFormat7.equals((java.lang.Object) numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat8);
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale13);
        java.util.Locale.setDefault(category11, locale13);
        java.util.Locale locale18 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category11, locale18);
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction23.add(fraction29);
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.negate();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction32.divide(fraction35);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = locale38.getDisplayScript();
        java.lang.String str40 = locale38.getScript();
        boolean boolean41 = fraction37.equals((java.lang.Object) locale38);
        java.util.Locale.setDefault(category11, locale38);
        java.lang.String str43 = locale38.getDisplayName();
        java.util.Locale locale44 = locale38.stripExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale38);
        java.lang.StringBuffer stringBuffer46 = null;
        java.text.NumberFormat.Field field47 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition49 = new java.text.FieldPosition((java.text.Format.Field) field47, (int) '#');
        java.text.Format.Field field50 = fieldPosition49.getFieldAttribute();
        java.text.Format.Field field51 = fieldPosition49.getFieldAttribute();
        java.text.FieldPosition fieldPosition53 = new java.text.FieldPosition(field51, 599);
        java.text.FieldPosition fieldPosition55 = new java.text.FieldPosition(field51, (int) (short) 32);
        java.text.ParsePosition parsePosition57 = new java.text.ParsePosition((int) 'a');
        java.lang.String str58 = parsePosition57.toString();
        java.lang.Object obj59 = null;
        boolean boolean60 = parsePosition57.equals(obj59);
        boolean boolean61 = field51.equals((java.lang.Object) parsePosition57);
        java.text.FieldPosition fieldPosition63 = new java.text.FieldPosition(field51, 3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer64 = fractionFormat10.format((java.lang.Object) fractionFormat45, stringBuffer46, fieldPosition63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertEquals(locale18.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(field47);
        org.junit.Assert.assertNotNull(field50);
        org.junit.Assert.assertNotNull(field51);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str58, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test09038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09038");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        int int6 = numberFormat5.getMaximumIntegerDigits();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        boolean boolean9 = numberFormat8.isGroupingUsed();
        java.util.Currency currency10 = numberFormat8.getCurrency();
        numberFormat5.setCurrency(currency10);
        properFractionFormat0.setWholeFormat(numberFormat5);
        java.lang.Object obj13 = properFractionFormat0.clone();
        java.text.NumberFormat numberFormat14 = properFractionFormat0.getWholeFormat();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.text.AttributedCharacterIterator attributedCharacterIterator19 = numberFormat16.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj20 = numberFormat16.clone();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getCurrencyInstance(locale22);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction28 = properFractionFormat24.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition27);
        java.lang.Object obj29 = numberFormat16.parseObject("zh-TW", parsePosition27);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.lang.String str32 = locale30.toLanguageTag();
        java.util.Locale locale33 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str35 = locale33.getISO3Language();
        java.lang.String str36 = locale30.getDisplayScript(locale33);
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.lang.String str38 = locale30.getDisplayCountry(locale37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        boolean boolean40 = numberFormat16.equals((java.lang.Object) locale30);
        int int41 = numberFormat16.getMinimumFractionDigits();
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getInstance(locale42);
        java.util.Locale locale45 = locale42.stripExtensions();
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance(locale46);
        java.lang.String str48 = locale45.getDisplayName(locale46);
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getIntegerInstance(locale45);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat16, numberFormat49);
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(attributedCharacterIterator19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(fraction28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str31, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zh-TW" + "'", str32, "zh-TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "zho" + "'", str35, "zho");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Taiwan" + "'", str38, "Taiwan");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str48, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertNotNull(numberFormat49);
    }

    @Test
    public void test09039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09039");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        numberFormat6.setMinimumIntegerDigits(0);
        java.lang.String str10 = numberFormat6.format(1.0d);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale locale14 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str16 = locale14.getDisplayCountry();
        java.lang.String str17 = locale11.getDisplayName(locale14);
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayScript();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.lang.String str22 = locale18.getDisplayScript(locale20);
        java.lang.String str23 = locale11.getDisplayLanguage(locale20);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale11);
        java.util.Currency currency25 = numberFormat24.getCurrency();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        long long36 = fraction34.longValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction34);
        boolean boolean38 = numberFormat24.equals((java.lang.Object) fraction30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat6, numberFormat24);
        java.text.NumberFormat numberFormat40 = properFractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat41 = properFractionFormat39.getWholeFormat();
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency44 = numberFormat43.getCurrency();
        java.lang.String str46 = numberFormat43.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.util.Locale locale51 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        java.lang.String[] strArray53 = java.util.Locale.getISOCountries();
        boolean boolean54 = numberFormat52.equals((java.lang.Object) strArray53);
        java.util.Locale locale58 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance(locale58);
        int int60 = numberFormat59.getMaximumIntegerDigits();
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance(locale61);
        boolean boolean63 = numberFormat62.isGroupingUsed();
        java.util.Currency currency64 = numberFormat62.getCurrency();
        numberFormat59.setCurrency(currency64);
        java.util.Currency currency66 = numberFormat59.getCurrency();
        java.math.RoundingMode roundingMode67 = numberFormat59.getRoundingMode();
        numberFormat52.setRoundingMode(roundingMode67);
        boolean boolean69 = numberFormat52.isParseIntegerOnly();
        properFractionFormat47.setWholeFormat(numberFormat52);
        java.text.NumberFormat numberFormat71 = properFractionFormat47.getWholeFormat();
        java.util.Locale locale73 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet74 = locale73.getUnicodeLocaleAttributes();
        java.util.Locale locale76 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale76);
        java.lang.String str78 = locale76.getDisplayCountry();
        java.text.NumberFormat numberFormat79 = java.text.NumberFormat.getIntegerInstance(locale76);
        java.lang.String str80 = locale73.getDisplayCountry(locale76);
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getPercentInstance(locale73);
        org.apache.commons.math.fraction.FractionFormat fractionFormat82 = new org.apache.commons.math.fraction.FractionFormat(numberFormat81);
        java.text.ParsePosition parsePosition85 = new java.text.ParsePosition((int) '4');
        parsePosition85.setErrorIndex(600);
        int int88 = parsePosition85.getIndex();
        java.lang.Object obj89 = fractionFormat82.parseObject("it", parsePosition85);
        java.lang.String str90 = parsePosition85.toString();
        java.lang.Object obj91 = numberFormat71.parseObject("", parsePosition85);
        org.apache.commons.math.fraction.Fraction fraction92 = properFractionFormat39.parse("2,147,483,647.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", parsePosition85);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction93 = fraction92.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The denominator must not be zero");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese (Taiwan)" + "'", str17, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str23, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "TWD");
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100%" + "'", str46, "100%");
        org.junit.Assert.assertEquals(locale51.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals(locale58.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(currency64);
        org.junit.Assert.assertEquals(currency64.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency66);
        org.junit.Assert.assertEquals(currency66.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode67 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode67.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertEquals(locale76.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "France" + "'", str80, "France");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "java.text.ParsePosition[index=52,errorIndex=51]" + "'", str90, "java.text.ParsePosition[index=52,errorIndex=51]");
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNotNull(fraction92);
    }

    @Test
    public void test09040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09040");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale5.toLanguageTag();
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder10.build();
        java.lang.String str13 = locale12.getScript();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.lang.String str16 = locale14.toLanguageTag();
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale17.getISO3Language();
        java.lang.String str20 = locale14.getDisplayScript(locale17);
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale14.getDisplayCountry(locale21);
        java.util.Locale locale24 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str25 = locale21.getDisplayLanguage(locale24);
        java.lang.String str26 = locale12.getDisplayCountry(locale24);
        java.lang.String str27 = locale5.getDisplayVariant(locale12);
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayScript();
        java.lang.String str31 = locale28.getDisplayCountry(locale29);
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance(locale29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale29);
        java.util.Set<java.lang.Character> charSet35 = locale29.getExtensionKeys();
        java.lang.String str36 = locale12.getDisplayVariant(locale29);
        java.lang.String str37 = locale29.getDisplayCountry();
        java.lang.String str38 = locale0.getDisplayName(locale29);
        java.util.Set<java.lang.Character> charSet39 = locale0.getExtensionKeys();
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleKeys();
        java.lang.String str42 = locale40.toLanguageTag();
        java.util.Locale locale43 = locale40.stripExtensions();
        java.lang.String str44 = locale0.getDisplayName(locale40);
        boolean boolean45 = locale0.hasExtensions();
        boolean boolean46 = locale0.hasExtensions();
        java.util.Set<java.lang.String> strSet47 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "und" + "'", str9, "und");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str15, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh-TW" + "'", str16, "zh-TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zho" + "'", str19, "zho");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Taiwan" + "'", str22, "Taiwan");
        org.junit.Assert.assertEquals(locale24.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Italian" + "'", str25, "Italian");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Japan" + "'", str31, "Japan");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Korean" + "'", str38, "Korean");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "und" + "'", str42, "und");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Korean" + "'", str44, "Korean");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strSet47);
    }

    @Test
    public void test09041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09041");
        java.util.Locale locale3 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str4 = locale3.getDisplayVariant();
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale locale10 = locale8.stripExtensions();
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale11);
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        boolean boolean14 = locale11.hasExtensions();
        java.lang.String str15 = locale8.getDisplayScript(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale11);
        java.lang.String str17 = locale3.getDisplayScript(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        fractionFormat23.setDenominatorFormat(numberFormat28);
        java.util.Locale locale32 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.lang.String str35 = fractionFormat33.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat36 = fractionFormat33.getNumeratorFormat();
        numberFormat36.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency39 = numberFormat36.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat36);
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        boolean boolean47 = numberFormat45.equals((java.lang.Object) strArray46);
        java.util.Locale locale51 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        int int53 = numberFormat52.getMaximumIntegerDigits();
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        boolean boolean56 = numberFormat55.isGroupingUsed();
        java.util.Currency currency57 = numberFormat55.getCurrency();
        numberFormat52.setCurrency(currency57);
        java.util.Currency currency59 = numberFormat52.getCurrency();
        java.math.RoundingMode roundingMode60 = numberFormat52.getRoundingMode();
        numberFormat45.setRoundingMode(roundingMode60);
        numberFormat36.setRoundingMode(roundingMode60);
        numberFormat36.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode65 = numberFormat36.getRoundingMode();
        numberFormat28.setRoundingMode(roundingMode65);
        fractionFormat18.setNumeratorFormat(numberFormat28);
        java.text.NumberFormat numberFormat68 = fractionFormat18.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj70 = numberFormat68.parseObject("\u6cd5\u6587\u52a0\u62ff\u5927)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "10,000%" + "'", str4, "10,000%");
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "100 0 / 1" + "'", str35, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals(locale51.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(currency57);
        org.junit.Assert.assertEquals(currency57.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency59);
        org.junit.Assert.assertEquals(currency59.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode60 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode60.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + roundingMode65 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode65.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat68);
    }

    @Test
    public void test09042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09042");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("German");
        java.lang.String str2 = languageRange1.getRange();
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction6.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.add(fraction12);
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction15.divide(fraction18);
        int int21 = fraction15.intValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction15.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 100, (int) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.negate();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction22.multiply(fraction25);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction31.add(fraction37);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction28.multiply(fraction38);
        java.text.NumberFormat.Field field41 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition43 = new java.text.FieldPosition((java.text.Format.Field) field41, (int) '#');
        java.text.Format.Field field44 = fieldPosition43.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction53 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.negate();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction50.multiply(fraction54);
        org.apache.commons.math.fraction.Fraction fraction56 = fraction47.add(fraction54);
        boolean boolean57 = field44.equals((java.lang.Object) fraction47);
        int int58 = fraction47.intValue();
        long long59 = fraction47.longValue();
        org.apache.commons.math.fraction.Fraction fraction61 = new org.apache.commons.math.fraction.Fraction(0.016666666666666666d);
        org.apache.commons.math.fraction.Fraction fraction62 = fraction47.divide(fraction61);
        org.apache.commons.math.fraction.Fraction fraction65 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) 10, 100);
        float float66 = fraction65.floatValue();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction62.divide(fraction65);
        org.apache.commons.math.fraction.Fraction fraction68 = fraction38.divide(fraction65);
        java.lang.String str69 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction38);
        boolean boolean70 = languageRange1.equals((java.lang.Object) fraction38);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "german" + "'", str2, "german");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(field41);
        org.junit.Assert.assertNotNull(field44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + 0.1f + "'", float66 == 0.1f);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "-119 / 120" + "'", str69, "-119 / 120");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test09043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09043");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction4.divide(fraction23);
        int int25 = fraction23.getNumerator();
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder26.setScript("");
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str30 = locale29.getDisplayLanguage();
        java.lang.String str31 = locale29.toLanguageTag();
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        java.lang.String str34 = locale32.getISO3Language();
        java.lang.String str35 = locale29.getDisplayScript(locale32);
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.lang.String str37 = locale29.getDisplayCountry(locale36);
        java.util.Locale.Builder builder38 = builder26.setLocale(locale36);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getInstance(locale36);
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.negate();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction42.multiply(fraction46);
        java.lang.String str48 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction42);
        java.lang.String str49 = numberFormat39.format((java.lang.Object) fraction42);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction42.abs();
        org.apache.commons.math.fraction.Fraction fraction53 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.negate();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.abs();
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.negate();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.abs();
        long long61 = fraction59.longValue();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction55.multiply(fraction59);
        org.apache.commons.math.fraction.Fraction fraction65 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.negate();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction66.abs();
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.negate();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction71.abs();
        long long73 = fraction71.longValue();
        org.apache.commons.math.fraction.Fraction fraction74 = fraction67.multiply(fraction71);
        org.apache.commons.math.fraction.Fraction fraction75 = fraction59.subtract(fraction74);
        org.apache.commons.math.fraction.Fraction fraction78 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction79 = fraction78.negate();
        double double80 = fraction78.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction84 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction85 = fraction78.multiply(fraction84);
        boolean boolean86 = fraction75.equals((java.lang.Object) fraction78);
        int int87 = fraction75.intValue();
        int int88 = fraction75.getDenominator();
        int int89 = fraction75.intValue();
        org.apache.commons.math.fraction.Fraction fraction90 = fraction42.divide(fraction75);
        org.apache.commons.math.fraction.Fraction fraction91 = fraction23.add(fraction75);
        java.lang.String str92 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction91);
        java.lang.String str93 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction91);
        int int94 = fraction91.getNumerator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese" + "'", str30, "Chinese");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zh-TW" + "'", str31, "zh-TW");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zho" + "'", str34, "zho");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Taiwan" + "'", str37, "Taiwan");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "20 / 7" + "'", str48, "20 / 7");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2,857" + "'", str49, "2,857");
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-0.008333333333333333d) + "'", double80 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 14400 + "'", int88 == 14400);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(fraction90);
        org.junit.Assert.assertNotNull(fraction91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "1 / 120" + "'", str92, "1 / 120");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "1 / 120" + "'", str93, "1 / 120");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test09044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09044");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder8 = builder3.setExtension('a', "TWN");
        java.util.Locale.Builder builder10 = builder3.removeUnicodeLocaleAttribute("zho");
        java.util.Locale.Builder builder12 = builder3.setRegion("fr");
        java.util.Locale locale13 = builder3.build();
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = java.util.Locale.getDefault(category14);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getIntegerInstance(locale15);
        java.lang.String str17 = locale15.getISO3Country();
        java.util.Locale.Builder builder18 = builder3.setLocale(locale15);
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.getDefault(category19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale21);
        java.util.Locale.setDefault(category19, locale21);
        java.util.Locale locale25 = new java.util.Locale("Chinese (Taiwan)");
        java.util.Locale.setDefault(category19, locale25);
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder27.clearExtensions();
        java.util.Locale.Builder builder30 = builder27.setVariant("");
        java.util.Locale.Builder builder32 = builder30.setLanguage("Japan");
        java.util.Locale.Builder builder34 = builder32.setLanguage("France");
        java.util.Locale.Builder builder35 = builder32.clear();
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("9,700%");
        java.lang.String str38 = locale37.getDisplayLanguage();
        java.util.Locale.Builder builder39 = builder35.setLocale(locale37);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getInstance();
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.lang.String str45 = locale41.getISO3Language();
        boolean boolean46 = numberFormat40.equals((java.lang.Object) locale41);
        java.util.Locale.Builder builder47 = builder35.setLocale(locale41);
        java.util.Locale.setDefault(category19, locale41);
        java.util.Locale locale49 = java.util.Locale.getDefault(category19);
        java.util.Locale.Builder builder50 = builder3.setLocale(locale49);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder52 = builder3.setVariant("java.text.FieldPosition[field=100,attribute=null,beginIndex=0,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: java.text.FieldPosition[field=100,attribute=null,beginIndex=0,endIndex=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "japan_FR_#a-twn");
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.FORMAT + "'", category19.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale20);
// flaky:         org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertEquals(locale25.toString(), "chinese (taiwan)");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test09045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09045");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Set<java.lang.String> strSet8 = locale0.getUnicodeLocaleKeys();
        java.lang.String str9 = locale0.getScript();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str11 = locale0.getLanguage();
        java.text.NumberFormat.Field field12 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition((java.text.Format.Field) field12);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        boolean boolean16 = field12.equals((java.lang.Object) locale14);
        java.util.Set<java.lang.String> strSet17 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale14.getISO3Language();
        java.util.Locale locale19 = locale14.stripExtensions();
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("Germany");
        java.lang.String str22 = locale14.getDisplayLanguage(locale21);
        java.util.Locale locale24 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale24);
        java.lang.String str26 = locale24.getDisplayCountry();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getIntegerInstance(locale24);
        java.lang.String str28 = locale24.toLanguageTag();
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder29.clearExtensions();
        java.util.Locale locale31 = builder29.build();
        java.lang.String str32 = locale31.getScript();
        java.util.Locale locale33 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str34 = locale33.getDisplayLanguage();
        java.lang.String str35 = locale33.toLanguageTag();
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        java.lang.String str38 = locale36.getISO3Language();
        java.lang.String str39 = locale33.getDisplayScript(locale36);
        java.util.Locale locale40 = java.util.Locale.ITALIAN;
        java.lang.String str41 = locale33.getDisplayCountry(locale40);
        java.util.Locale locale43 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str44 = locale40.getDisplayLanguage(locale43);
        java.lang.String str45 = locale31.getDisplayCountry(locale43);
        java.lang.String str46 = locale24.getDisplayVariant(locale31);
        java.lang.String str47 = locale31.getLanguage();
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getInstance(locale31);
        java.lang.String str49 = locale14.getDisplayLanguage(locale31);
        java.util.Set<java.lang.String> strSet50 = locale14.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str52 = locale0.getDisplayVariant(locale14);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en" + "'", str11, "en");
        org.junit.Assert.assertNotNull(field12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "eng" + "'", str18, "eng");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "germany");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English" + "'", str22, "English");
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "und" + "'", str28, "und");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese" + "'", str34, "Chinese");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "zh-TW" + "'", str35, "zh-TW");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zho" + "'", str38, "zho");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Taiwan" + "'", str41, "Taiwan");
        org.junit.Assert.assertEquals(locale43.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Italian" + "'", str44, "Italian");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "English" + "'", str49, "English");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test09046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09046");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str3 = locale0.getDisplayCountry(locale2);
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=35,errorIndex=35]");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale5);
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale12);
        java.util.Currency currency15 = numberFormat14.getCurrency();
        numberFormat14.setMinimumIntegerDigits(1);
        numberFormat14.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition22 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj23 = numberFormat14.parseObject("Japan", parsePosition22);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException27 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str28 = fractionConversionException27.getPattern();
        java.lang.Throwable[] throwableArray29 = fractionConversionException27.getSuppressed();
        java.lang.Object[] objArray30 = fractionConversionException27.getArguments();
        boolean boolean31 = parsePosition22.equals((java.lang.Object) objArray30);
        int int32 = parsePosition22.getIndex();
        int int33 = parsePosition22.getIndex();
        java.lang.Object obj34 = fractionFormat10.parseObject("\ud55c\uad6d\uc5b4", parsePosition22);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat36 = properFractionFormat35.getWholeFormat();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        numberFormat38.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = new org.apache.commons.math.fraction.FractionFormat(numberFormat36, numberFormat38);
        java.text.NumberFormat numberFormat43 = fractionFormat42.getNumeratorFormat();
        boolean boolean44 = parsePosition22.equals((java.lang.Object) fractionFormat42);
        java.util.Locale.Category category45 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale46 = java.util.Locale.getDefault(category45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale47);
        java.util.Locale.setDefault(category45, locale47);
        java.util.Locale locale50 = java.util.Locale.getDefault(category45);
        java.util.Locale.Category category51 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.lang.String str53 = locale52.getISO3Language();
        java.util.Locale.setDefault(category51, locale52);
        java.util.Locale.setDefault(category45, locale52);
        java.util.Locale locale56 = java.util.Locale.ITALIAN;
        java.lang.String str57 = locale56.getISO3Country();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getIntegerInstance(locale56);
        java.util.Locale.setDefault(category45, locale56);
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getNumberInstance(locale56);
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getPercentInstance(locale56);
        fractionFormat42.setNumeratorFormat(numberFormat61);
        boolean boolean63 = numberFormat61.isParseIntegerOnly();
        java.text.ParsePosition parsePosition66 = new java.text.ParsePosition((int) 'a');
        java.lang.String str67 = parsePosition66.toString();
        java.util.Locale.Builder builder68 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder69 = builder68.clearExtensions();
        java.util.Locale.Builder builder70 = builder68.clear();
        java.util.Locale.Builder builder71 = builder70.clear();
        boolean boolean72 = parsePosition66.equals((java.lang.Object) builder71);
        java.lang.Object obj73 = numberFormat61.parseObject("\u65e5\u672c,-1 / 100)", parsePosition66);
        int int74 = parsePosition66.getIndex();
        java.lang.Object obj75 = numberFormat7.parseObject("214,748,364,700", parsePosition66);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Taiwan" + "'", str3, "Taiwan");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "TWD");
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str28, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + category45 + "' != '" + java.util.Locale.Category.FORMAT + "'", category45.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category51 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category51.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "kor" + "'", str53, "kor");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str67, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 97 + "'", int74 == 97);
        org.junit.Assert.assertNull(obj75);
    }

    @Test
    public void test09047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09047");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale7 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.lang.String str10 = fractionFormat8.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat11 = fractionFormat8.getNumeratorFormat();
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.util.Locale locale13 = locale12.stripExtensions();
        java.util.Locale locale15 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        java.lang.String str17 = locale15.getDisplayCountry();
        java.lang.String str18 = locale12.getDisplayName(locale15);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale19.getDisplayScript();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale21.getISO3Language();
        java.lang.String str23 = locale19.getDisplayScript(locale21);
        java.lang.String str24 = locale12.getDisplayLanguage(locale21);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getNumberInstance(locale12);
        fractionFormat8.setNumeratorFormat(numberFormat25);
        numberFormat25.setMinimumIntegerDigits(2);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        boolean boolean31 = numberFormat30.isGroupingUsed();
        numberFormat30.setGroupingUsed(true);
        java.util.Locale locale37 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale37);
        int int39 = numberFormat38.getMaximumIntegerDigits();
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        boolean boolean42 = numberFormat41.isGroupingUsed();
        java.util.Currency currency43 = numberFormat41.getCurrency();
        numberFormat38.setCurrency(currency43);
        java.util.Currency currency45 = numberFormat38.getCurrency();
        java.math.RoundingMode roundingMode46 = numberFormat38.getRoundingMode();
        numberFormat30.setRoundingMode(roundingMode46);
        numberFormat25.setRoundingMode(roundingMode46);
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance(locale50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance(locale52);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = new org.apache.commons.math.fraction.FractionFormat(numberFormat51, numberFormat53);
        java.text.ParsePosition parsePosition57 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj58 = numberFormat53.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition57);
        java.lang.String str59 = parsePosition57.toString();
        java.lang.String str60 = parsePosition57.toString();
        java.lang.Object obj61 = numberFormat25.parseObject("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", parsePosition57);
        int int62 = parsePosition57.getIndex();
        java.lang.Object obj63 = fractionFormat4.parseObject("taiwan_ZH_TW_10,000%", parsePosition57);
        java.util.Locale.Category category64 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale65 = java.util.Locale.getDefault(category64);
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale66);
        java.util.Locale.setDefault(category64, locale66);
        java.util.Locale locale69 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category64, locale69);
        java.util.Set<java.lang.String> strSet71 = locale69.getUnicodeLocaleAttributes();
        java.lang.String str72 = locale69.getVariant();
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale69);
        java.lang.StringBuffer stringBuffer74 = null;
        java.text.NumberFormat.Field field75 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition76 = new java.text.FieldPosition((java.text.Format.Field) field75);
        java.lang.String str77 = fieldPosition76.toString();
        java.util.Locale locale78 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale79 = java.util.Locale.ROOT;
        java.lang.String str80 = locale79.getDisplayScript();
        java.lang.String str81 = locale78.getDisplayName(locale79);
        boolean boolean82 = fieldPosition76.equals((java.lang.Object) locale79);
        java.text.NumberFormat.Field field83 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition84 = new java.text.FieldPosition((java.text.Format.Field) field83);
        java.text.FieldPosition fieldPosition86 = new java.text.FieldPosition((java.text.Format.Field) field83, (int) (byte) 10);
        boolean boolean87 = fieldPosition76.equals((java.lang.Object) field83);
        java.text.FieldPosition fieldPosition88 = new java.text.FieldPosition((java.text.Format.Field) field83);
        java.text.Format.Field field89 = fieldPosition88.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer90 = fractionFormat4.format((java.lang.Object) locale69, stringBuffer74, fieldPosition88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "100 0 / 1" + "'", str10, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Korean" + "'", str18, "Korean");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str24, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals(locale37.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(currency43);
        org.junit.Assert.assertEquals(currency43.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency45);
        org.junit.Assert.assertEquals(currency45.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode46 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode46.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str59, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str60, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + category64 + "' != '" + java.util.Locale.Category.FORMAT + "'", category64.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(fractionFormat73);
        org.junit.Assert.assertNotNull(field75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str77, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Chinese (Taiwan)" + "'", str81, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(field83);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(field89);
    }

    @Test
    public void test09048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09048");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.setRegion("en");
        java.util.Locale locale6 = builder5.build();
        java.util.Locale locale7 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = locale7.getDisplayCountry(locale9);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale11);
        java.lang.String str14 = locale11.getDisplayScript();
        java.lang.String str15 = locale7.getDisplayVariant(locale11);
        java.lang.String str17 = locale7.getExtension('a');
        java.lang.String str18 = locale6.getDisplayCountry(locale7);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getIntegerInstance(locale6);
        java.lang.String str20 = locale6.getCountry();
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale21);
        java.util.Locale locale23 = locale21.stripExtensions();
        java.lang.String str24 = locale21.getDisplayName();
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale25.toLanguageTag();
        java.lang.String str27 = locale25.getDisplayLanguage();
        java.lang.String str28 = locale25.getISO3Country();
        java.lang.String str29 = locale21.getDisplayScript(locale25);
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale30);
        java.util.Locale locale32 = locale30.stripExtensions();
        java.util.Locale locale33 = locale30.stripExtensions();
        java.lang.String str34 = locale21.getDisplayVariant(locale33);
        java.util.Locale locale37 = new java.util.Locale("1,396,801 / 14,400", "java.text.FieldPosition[field=100,attribute=null,beginIndex=117,endIndex=0]");
        java.lang.String str38 = locale33.getDisplayLanguage(locale37);
        java.lang.String str39 = locale6.getDisplayName(locale33);
        java.lang.String str40 = locale6.getDisplayCountry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "_EN");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str8, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Taiwan" + "'", str10, "Taiwan");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "EN" + "'", str18, "EN");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "EN" + "'", str20, "EN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str24, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zh-TW" + "'", str26, "zh-TW");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str27, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "TWN" + "'", str28, "TWN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals(locale37.toString(), "1,396,801 / 14,400_JAVA.TEXT.FIELDPOSITION[FIELD=100,ATTRIBUTE=NULL,BEGININDEX=117,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Chinese" + "'", str38, "Chinese");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "EN" + "'", str39, "EN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "EN" + "'", str40, "EN");
    }

    @Test
    public void test09049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09049");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        long long4 = fraction2.longValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.divide(fraction9);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = new org.apache.commons.math.fraction.Fraction((double) 100);
        org.apache.commons.math.fraction.Fraction fraction14 = fraction11.divide(fraction13);
        float float15 = fraction11.floatValue();
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str17 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction16);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.negate();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction21.add(fraction27);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction16.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction16.negate();
        long long33 = fraction32.longValue();
        org.apache.commons.math.fraction.Fraction fraction36 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str37 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction36);
        long long38 = fraction36.longValue();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction36.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction32.divide(fraction39);
        java.text.NumberFormat.Field field41 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition43 = new java.text.FieldPosition((java.text.Format.Field) field41, (int) '#');
        java.text.Format.Field field44 = fieldPosition43.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction53 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.negate();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction50.multiply(fraction54);
        org.apache.commons.math.fraction.Fraction fraction56 = fraction47.add(fraction54);
        boolean boolean57 = field44.equals((java.lang.Object) fraction47);
        int int58 = fraction47.intValue();
        org.apache.commons.math.fraction.Fraction fraction59 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.negate();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction47.divide(fraction59);
        int int62 = fraction32.compareTo((java.lang.Object) fraction47);
        org.apache.commons.math.fraction.Fraction fraction63 = fraction11.divide(fraction47);
        byte byte64 = fraction63.byteValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1 / 100" + "'", str3, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-2.857143f) + "'", float15 == (-2.857143f));
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1 / 1" + "'", str17, "1 / 1");
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1 / 100" + "'", str37, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(field41);
        org.junit.Assert.assertNotNull(field44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertTrue("'" + byte64 + "' != '" + (byte) 86 + "'", byte64 == (byte) 86);
    }

    @Test
    public void test09050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09050");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("german", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str7 = locale5.getISO3Language();
        java.lang.String str8 = locale5.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale10);
        java.util.Locale locale12 = locale10.stripExtensions();
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale12.getDisplayVariant();
        java.lang.String str15 = locale12.getDisplayVariant();
        java.lang.String str16 = locale5.getDisplayName(locale12);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getCurrencyInstance(locale17);
        java.lang.String str19 = locale17.getISO3Language();
        java.lang.String str20 = locale17.getDisplayName();
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        long long31 = fraction29.longValue();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction25.multiply(fraction29);
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.negate();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.negate();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.abs();
        long long43 = fraction41.longValue();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction37.multiply(fraction41);
        org.apache.commons.math.fraction.Fraction fraction45 = fraction29.subtract(fraction44);
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.negate();
        double double50 = fraction48.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction54 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction48.multiply(fraction54);
        boolean boolean56 = fraction45.equals((java.lang.Object) fraction48);
        java.util.Locale locale57 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str58 = locale57.getDisplayLanguage();
        java.lang.String str59 = locale57.toLanguageTag();
        java.util.Locale locale60 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleAttributes();
        java.lang.String str62 = locale60.getISO3Language();
        java.lang.String str63 = locale57.getDisplayScript(locale60);
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        java.lang.String str65 = locale57.getDisplayCountry(locale64);
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance(locale57);
        boolean boolean67 = fraction48.equals((java.lang.Object) locale57);
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale57);
        org.apache.commons.math.fraction.FractionFormat fractionFormat69 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale57);
        java.lang.String str70 = locale17.getDisplayName(locale57);
        java.lang.String str71 = locale12.getDisplayVariant(locale17);
        java.lang.String str72 = locale17.getDisplayCountry();
        java.util.Set<java.lang.String> strSet73 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str74 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet73);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zho" + "'", str7, "zho");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str16, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "eng" + "'", str19, "eng");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc601\uc5b4" + "'", str20, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-0.008333333333333333d) + "'", double50 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str58, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "zh-TW" + "'", str59, "zh-TW");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zho" + "'", str62, "zho");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Taiwan" + "'", str65, "Taiwan");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(fractionFormat68);
        org.junit.Assert.assertNotNull(fractionFormat69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u82f1\u6587" + "'", str70, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test09051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09051");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((-2), 20);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction6.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.add(fraction12);
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction15.divide(fraction18);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction24.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction15.subtract(fraction26);
        org.apache.commons.math.fraction.Fraction fraction31 = new org.apache.commons.math.fraction.Fraction((double) (short) 0, (double) 10, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.negate();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.abs();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction41.abs();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction35.add(fraction41);
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.negate();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction44.divide(fraction47);
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.negate();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.abs();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction53.abs();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction44.subtract(fraction55);
        long long57 = fraction55.longValue();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction55.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction31.multiply(fraction55);
        org.apache.commons.math.fraction.Fraction fraction60 = fraction26.divide(fraction55);
        org.apache.commons.math.fraction.Fraction fraction61 = fraction2.add(fraction55);
        org.apache.commons.math.fraction.Fraction fraction64 = new org.apache.commons.math.fraction.Fraction(1728000, 35);
        org.apache.commons.math.fraction.Fraction fraction65 = fraction61.divide(fraction64);
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.negate();
        java.lang.String str67 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction65);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "-77 / 41,472,000" + "'", str67, "-77 / 41,472,000");
    }

    @Test
    public void test09052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09052");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.lang.String str11 = locale0.getDisplayName(locale8);
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.lang.String str17 = locale16.getDisplayName();
        java.util.Locale.setDefault(category12, locale16);
        java.lang.String str19 = locale0.getDisplayName(locale16);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getIntegerInstance(locale0);
        int int21 = numberFormat20.getMaximumFractionDigits();
        java.lang.StringBuffer stringBuffer23 = null;
        java.text.NumberFormat.Field field24 = java.text.NumberFormat.Field.EXPONENT;
        java.text.NumberFormat.Field field25 = java.text.NumberFormat.Field.DECIMAL_SEPARATOR;
        java.text.FieldPosition fieldPosition26 = new java.text.FieldPosition((java.text.Format.Field) field25);
        boolean boolean27 = field24.equals((java.lang.Object) field25);
        java.text.FieldPosition fieldPosition29 = new java.text.FieldPosition((java.text.Format.Field) field24, 0);
        int int30 = fieldPosition29.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer31 = numberFormat20.format((double) 100L, stringBuffer23, fieldPosition29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc77c\ubcf8" + "'", str5, "\uc77c\ubcf8");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc77c\ubcf8" + "'", str6, "\uc77c\ubcf8");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Japanese (Japan)" + "'", str11, "Japanese (Japan)");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale16.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1 / 1 (zh-tw)" + "'", str17, "1 / 1 (zh-tw)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Japanese (Japan)" + "'", str19, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(field24);
        org.junit.Assert.assertNotNull(field25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test09053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09053");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        numberFormat1.setMaximumFractionDigits(2147483647);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        java.lang.Number number19 = numberFormat1.parse("\ud55c\uad6d\uc5b4", parsePosition16);
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getCurrencyInstance(locale21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.util.Locale locale25 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale25);
        java.lang.String str28 = fractionFormat26.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat29 = fractionFormat26.getNumeratorFormat();
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Locale locale33 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.lang.String str35 = locale33.getDisplayCountry();
        java.lang.String str36 = locale30.getDisplayName(locale33);
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.lang.String str38 = locale37.getDisplayScript();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale39.getISO3Language();
        java.lang.String str41 = locale37.getDisplayScript(locale39);
        java.lang.String str42 = locale30.getDisplayLanguage(locale39);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getNumberInstance(locale30);
        fractionFormat26.setNumeratorFormat(numberFormat43);
        properFractionFormat23.setWholeFormat(numberFormat43);
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getInstance(locale47);
        boolean boolean49 = numberFormat48.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.text.ParsePosition parsePosition53 = new java.text.ParsePosition((int) '4');
        org.apache.commons.math.fraction.Fraction fraction54 = properFractionFormat50.parse("0%", parsePosition53);
        java.lang.Object obj55 = properFractionFormat23.parseObject("\u6cd5\u6587\u6cd5\u570b)", parsePosition53);
        java.text.NumberFormat.Field field57 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition58 = new java.text.FieldPosition((java.text.Format.Field) field57);
        java.lang.String str59 = fieldPosition58.toString();
        java.util.Locale locale60 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.lang.String str62 = locale61.getDisplayScript();
        java.lang.String str63 = locale60.getDisplayName(locale61);
        boolean boolean64 = fieldPosition58.equals((java.lang.Object) locale61);
        fieldPosition58.setEndIndex((int) '#');
        java.util.Locale locale67 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getCurrencyInstance(locale67);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat68);
        java.text.ParsePosition parsePosition72 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction73 = properFractionFormat69.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition72);
        boolean boolean74 = fieldPosition58.equals((java.lang.Object) parsePosition72);
        java.lang.String str75 = parsePosition72.toString();
        int int76 = parsePosition72.getIndex();
        org.apache.commons.math.fraction.Fraction fraction77 = properFractionFormat23.parse("java.text.ParsePosition[index=52,errorIndex=-1]", parsePosition72);
        java.lang.Number number78 = numberFormat1.parse("-1 / 1", parsePosition72);
        parsePosition72.setIndex((int) (byte) 88);
        int int81 = parsePosition72.getErrorIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "100 0 / 1" + "'", str28, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Korean" + "'", str36, "Korean");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "kor" + "'", str40, "kor");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str42, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(fraction54);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(field57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str59, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Chinese (Taiwan)" + "'", str63, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNull(fraction73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str75, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNull(fraction77);
        org.junit.Assert.assertNull(number78);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
    }

    @Test
    public void test09054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09054");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getWholeFormat();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        numberFormat3.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getISO3Language();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale12);
        java.util.Currency currency15 = numberFormat14.getCurrency();
        numberFormat14.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat14);
        fractionFormat7.setDenominatorFormat(numberFormat14);
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition(10);
        int int24 = fieldPosition23.getEndIndex();
        fieldPosition23.setBeginIndex((int) '#');
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.lang.String str28 = locale27.getScript();
        java.util.Locale locale32 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str33 = locale27.getDisplayScript(locale32);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getNumberInstance(locale32);
        int int35 = numberFormat34.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat34);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        boolean boolean38 = fieldPosition23.equals((java.lang.Object) numberFormat34);
        numberFormat34.setGroupingUsed(false);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        boolean boolean44 = numberFormat43.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.lang.String str47 = numberFormat43.format(0.008333333333333333d);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance(locale49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance(locale52);
        boolean boolean54 = numberFormat53.isGroupingUsed();
        properFractionFormat51.setWholeFormat(numberFormat53);
        java.text.NumberFormat numberFormat56 = properFractionFormat51.getWholeFormat();
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number60 = numberFormat56.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition59);
        int int61 = parsePosition59.getIndex();
        java.lang.String str62 = parsePosition59.toString();
        java.lang.Number number63 = numberFormat43.parse("-100%", parsePosition59);
        java.lang.Object obj64 = numberFormat34.parseObject("1,000%", parsePosition59);
        int int65 = parsePosition59.getErrorIndex();
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.lang.String str67 = locale66.getISO3Language();
        java.util.Set<java.lang.String> strSet68 = locale66.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getCurrencyInstance(locale66);
        boolean boolean70 = parsePosition59.equals((java.lang.Object) numberFormat69);
        org.apache.commons.math.fraction.Fraction fraction71 = fractionFormat7.parse("1%", parsePosition59);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zho" + "'", str10, "zho");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals(locale32.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1%" + "'", str47, "1%");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNull(number60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str62, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertEquals("'" + number63 + "' != '" + 1L + "'", number63, 1L);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "kor" + "'", str67, "kor");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(fraction71);
    }

    @Test
    public void test09055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09055");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.setVariant("Korean");
        java.util.Locale locale10 = builder7.build();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        boolean boolean16 = numberFormat15.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        boolean boolean18 = numberFormat15.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13, numberFormat15);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getCurrencyInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.util.Currency currency23 = numberFormat21.getCurrency();
        fractionFormat19.setNumeratorFormat(numberFormat21);
        fractionFormat11.setDenominatorFormat(numberFormat21);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getCurrencyInstance(locale26);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction32 = properFractionFormat28.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition31);
        java.util.Locale locale35 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale35);
        java.lang.String str38 = fractionFormat36.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat39 = fractionFormat36.getNumeratorFormat();
        numberFormat39.setMaximumFractionDigits((int) (short) -1);
        int int42 = numberFormat39.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        numberFormat39.setGroupingUsed(true);
        java.util.Currency currency46 = numberFormat39.getCurrency();
        java.text.NumberFormat.Field field48 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition49 = new java.text.FieldPosition((java.text.Format.Field) field48);
        java.lang.String str50 = fieldPosition49.toString();
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale52.getDisplayScript();
        java.lang.String str54 = locale51.getDisplayName(locale52);
        boolean boolean55 = fieldPosition49.equals((java.lang.Object) locale52);
        fieldPosition49.setEndIndex((int) '#');
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getCurrencyInstance(locale58);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        java.text.ParsePosition parsePosition63 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction64 = properFractionFormat60.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition63);
        boolean boolean65 = fieldPosition49.equals((java.lang.Object) parsePosition63);
        parsePosition63.setErrorIndex((int) '#');
        java.lang.Object obj68 = numberFormat39.parseObject("ja-JP", parsePosition63);
        org.apache.commons.math.fraction.Fraction fraction69 = properFractionFormat28.parse("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]", parsePosition63);
        java.text.NumberFormat numberFormat70 = properFractionFormat28.getWholeFormat();
        java.util.Locale locale71 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getInstance(locale71);
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getPercentInstance(locale73);
        org.apache.commons.math.fraction.FractionFormat fractionFormat75 = new org.apache.commons.math.fraction.FractionFormat(numberFormat72, numberFormat74);
        int int76 = numberFormat72.getMaximumIntegerDigits();
        numberFormat72.setGroupingUsed(true);
        java.lang.String str80 = numberFormat72.format((long) 119);
        properFractionFormat28.setWholeFormat(numberFormat72);
        java.util.Locale locale82 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat83 = java.text.NumberFormat.getInstance(locale82);
        properFractionFormat28.setWholeFormat(numberFormat83);
        fractionFormat11.setNumeratorFormat(numberFormat83);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNull(fraction32);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "100 0 / 1" + "'", str38, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
        org.junit.Assert.assertNotNull(field48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str50, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Chinese (Taiwan)" + "'", str54, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNull(fraction64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNull(fraction69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "119" + "'", str80, "119");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat83);
    }

    @Test
    public void test09056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09056");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        float float4 = fraction2.floatValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.negate();
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        int int12 = numberFormat10.getMaximumFractionDigits();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat14);
        boolean boolean19 = fraction5.equals((java.lang.Object) fractionFormat18);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction21.add(fraction27);
        double double29 = fraction27.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction5.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction33 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str34 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction33);
        long long35 = fraction33.longValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction41 = fraction36.divide(fraction40);
        double double42 = fraction36.doubleValue();
        int int43 = fraction36.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction27.multiply(fraction36);
        org.apache.commons.math.fraction.Fraction fraction46 = new org.apache.commons.math.fraction.Fraction((-1.0d));
        int int47 = fraction46.getNumerator();
        java.util.Locale locale48 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.lang.String str50 = locale48.getISO3Language();
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance(locale48);
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.negate();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction57.multiply(fraction61);
        org.apache.commons.math.fraction.Fraction fraction63 = fraction54.add(fraction61);
        org.apache.commons.math.fraction.Fraction fraction66 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction67 = fraction66.negate();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction67.abs();
        org.apache.commons.math.fraction.Fraction fraction71 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction72 = fraction71.negate();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction72.abs();
        long long74 = fraction72.longValue();
        org.apache.commons.math.fraction.Fraction fraction75 = fraction68.multiply(fraction72);
        org.apache.commons.math.fraction.Fraction fraction78 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction79 = fraction78.negate();
        org.apache.commons.math.fraction.Fraction fraction80 = fraction79.abs();
        org.apache.commons.math.fraction.Fraction fraction83 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction84 = fraction83.negate();
        org.apache.commons.math.fraction.Fraction fraction85 = fraction84.abs();
        long long86 = fraction84.longValue();
        org.apache.commons.math.fraction.Fraction fraction87 = fraction80.multiply(fraction84);
        org.apache.commons.math.fraction.Fraction fraction88 = fraction72.subtract(fraction87);
        org.apache.commons.math.fraction.Fraction fraction89 = fraction87.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction90 = fraction89.abs();
        org.apache.commons.math.fraction.Fraction fraction91 = fraction63.add(fraction89);
        org.apache.commons.math.fraction.Fraction fraction92 = fraction89.abs();
        java.lang.String str93 = numberFormat51.format((java.lang.Object) fraction92);
        org.apache.commons.math.fraction.Fraction fraction94 = fraction46.subtract(fraction92);
        org.apache.commons.math.fraction.Fraction fraction95 = fraction46.negate();
        int int96 = fraction46.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction97 = fraction44.subtract(fraction46);
        org.apache.commons.math.fraction.Fraction fraction98 = fraction46.reciprocal();
        double double99 = fraction46.doubleValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1 / 1" + "'", str3, "1 / 1");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.008333333333333333d + "'", double29 == 0.008333333333333333d);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1 / 100" + "'", str34, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.01d + "'", double42 == 0.01d);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "zho" + "'", str50, "zho");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(fraction87);
        org.junit.Assert.assertNotNull(fraction88);
        org.junit.Assert.assertNotNull(fraction89);
        org.junit.Assert.assertNotNull(fraction90);
        org.junit.Assert.assertNotNull(fraction91);
        org.junit.Assert.assertNotNull(fraction92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "14,400" + "'", str93, "14,400");
        org.junit.Assert.assertNotNull(fraction94);
        org.junit.Assert.assertNotNull(fraction95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertNotNull(fraction97);
        org.junit.Assert.assertNotNull(fraction98);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + (-1.0d) + "'", double99 == (-1.0d));
    }

    @Test
    public void test09057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09057");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(59, 8654399);
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "59 / 8,654,399" + "'", str4, "59 / 8,654,399");
    }

    @Test
    public void test09058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09058");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category1, locale6);
        java.lang.String str8 = locale0.getDisplayLanguage(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str10 = locale6.getDisplayScript();
        java.lang.String str11 = locale6.getDisplayLanguage();
        java.lang.String str13 = locale6.getExtension('a');
        java.lang.String str15 = locale6.getExtension('x');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "fr_ca_JAVA.TEXT.PARSEPOSITION[INDEX=0,ERRORINDEX=-1]_zh-tw");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "anglais" + "'", str8, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str11, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test09059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09059");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        boolean boolean4 = field0.equals((java.lang.Object) locale2);
        java.util.Set<java.lang.String> strSet5 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str6 = locale2.getISO3Language();
        java.util.Locale locale7 = locale2.stripExtensions();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("Germany");
        java.lang.String str10 = locale2.getDisplayLanguage(locale9);
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.lang.String str16 = locale12.toLanguageTag();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale locale19 = builder17.build();
        java.lang.String str20 = locale19.getScript();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale21.toLanguageTag();
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale24.getISO3Language();
        java.lang.String str27 = locale21.getDisplayScript(locale24);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale21.getDisplayCountry(locale28);
        java.util.Locale locale31 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str32 = locale28.getDisplayLanguage(locale31);
        java.lang.String str33 = locale19.getDisplayCountry(locale31);
        java.lang.String str34 = locale12.getDisplayVariant(locale19);
        java.lang.String str35 = locale19.getLanguage();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getInstance(locale19);
        java.lang.String str37 = locale2.getDisplayLanguage(locale19);
        java.util.Set<java.lang.String> strSet38 = locale2.getUnicodeLocaleKeys();
        java.lang.String str39 = locale2.getDisplayName();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "germany");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str22, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh-TW" + "'", str23, "zh-TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zho" + "'", str26, "zho");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Taiwan" + "'", str29, "Taiwan");
        org.junit.Assert.assertEquals(locale31.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Italian" + "'", str32, "Italian");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "English" + "'", str37, "English");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\uc601\uc5b4" + "'", str39, "\uc601\uc5b4");
    }

    @Test
    public void test09060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09060");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) 'a');
        java.lang.String str2 = parsePosition1.toString();
        java.lang.Object obj3 = null;
        boolean boolean4 = parsePosition1.equals(obj3);
        int int5 = parsePosition1.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.abs();
        long long16 = fraction14.longValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction10.multiply(fraction14);
        org.apache.commons.math.fraction.Fraction fraction20 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str21 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction20);
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction20.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction10.add(fraction20);
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale25);
        boolean boolean27 = numberFormat26.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat30, numberFormat32);
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj37 = numberFormat32.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition36);
        properFractionFormat28.setNumeratorFormat(numberFormat32);
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getInstance(locale39);
        boolean boolean41 = numberFormat40.isParseIntegerOnly();
        numberFormat40.setGroupingUsed(false);
        properFractionFormat28.setWholeFormat(numberFormat40);
        numberFormat40.setMinimumFractionDigits((int) 'u');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getInstance(locale49);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = new org.apache.commons.math.fraction.FractionFormat(numberFormat50, numberFormat52);
        java.text.ParsePosition parsePosition56 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj57 = numberFormat52.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition56);
        org.apache.commons.math.fraction.Fraction fraction58 = properFractionFormat47.parse("214,748,364,700%", parsePosition56);
        boolean boolean59 = fraction20.equals((java.lang.Object) properFractionFormat47);
        boolean boolean60 = parsePosition1.equals((java.lang.Object) properFractionFormat47);
        java.text.NumberFormat numberFormat61 = properFractionFormat47.getWholeFormat();
        boolean boolean62 = numberFormat61.isGroupingUsed();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str2, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 / 100" + "'", str21, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(fraction58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test09061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09061");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        long long4 = fraction2.longValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.divide(fraction9);
        double double11 = fraction5.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction5.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction5.negate();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1 / 100" + "'", str3, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.01d + "'", double11 == 0.01d);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
    }

    @Test
    public void test09062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09062");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        int int5 = numberFormat4.getMinimumFractionDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        numberFormat7.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat7);
        int int12 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale14.getISO3Language();
        java.util.Locale.setDefault(category13, locale14);
        java.lang.String str17 = locale14.getDisplayVariant();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getIntegerInstance(locale14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        numberFormat21.setMaximumFractionDigits(100);
        java.lang.String str26 = numberFormat21.format((long) 100);
        int int27 = numberFormat21.getMaximumFractionDigits();
        numberFormat21.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat31);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale37);
        boolean boolean39 = numberFormat38.isGroupingUsed();
        properFractionFormat36.setWholeFormat(numberFormat38);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21, numberFormat31, numberFormat38);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        fractionFormat19.setNumeratorFormat(numberFormat38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat38);
        java.lang.Object obj45 = numberFormat38.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "10,000%" + "'", str26, "10,000%");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(obj45);
    }

    @Test
    public void test09063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09063");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder7.setExtension('x', "\uc774\ud0c8\ub9ac\uc544\uc5b4_US");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: ??????????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test09064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09064");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        boolean boolean4 = numberFormat3.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        boolean boolean6 = numberFormat3.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        boolean boolean10 = numberFormat9.isGroupingUsed();
        java.lang.Object obj11 = numberFormat9.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        fractionFormat7.setDenominatorFormat(numberFormat9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.util.Locale locale16 = locale15.stripExtensions();
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str20 = locale18.getDisplayCountry();
        java.lang.String str21 = locale15.getDisplayName(locale18);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayScript();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale24.getISO3Language();
        java.lang.String str26 = locale22.getDisplayScript(locale24);
        java.lang.String str27 = locale15.getDisplayLanguage(locale24);
        java.lang.String str28 = locale15.toLanguageTag();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale15);
        java.lang.String str30 = locale15.toLanguageTag();
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getInstance(locale15);
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str35 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction34);
        float float36 = fraction34.floatValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction34.negate();
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        int int44 = numberFormat42.getMaximumFractionDigits();
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getInstance(locale45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = new org.apache.commons.math.fraction.FractionFormat(numberFormat46, numberFormat48);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = new org.apache.commons.math.fraction.FractionFormat(numberFormat42, numberFormat46);
        boolean boolean51 = fraction37.equals((java.lang.Object) fractionFormat50);
        java.text.NumberFormat numberFormat52 = fractionFormat50.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = new org.apache.commons.math.fraction.FractionFormat(numberFormat31, numberFormat52);
        java.util.Locale locale54 = java.util.Locale.TAIWAN;
        java.lang.String str55 = locale54.toLanguageTag();
        java.lang.String str57 = locale54.getExtension('x');
        boolean boolean58 = locale54.hasExtensions();
        java.util.Locale locale59 = locale54.stripExtensions();
        java.lang.String str60 = locale54.getISO3Country();
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.lang.String str62 = locale61.getDisplayScript();
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale63.getISO3Language();
        java.lang.String str65 = locale61.getDisplayScript(locale63);
        java.lang.String str66 = locale61.toLanguageTag();
        java.lang.String str67 = locale61.getDisplayVariant();
        java.util.Locale locale68 = locale61.stripExtensions();
        java.util.Locale locale69 = java.util.Locale.TAIWAN;
        java.lang.String str70 = locale69.toLanguageTag();
        java.lang.String str72 = locale69.getExtension('x');
        java.lang.String str73 = locale68.getDisplayScript(locale69);
        java.lang.String str74 = locale54.getDisplayCountry(locale68);
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getIntegerInstance(locale68);
        numberFormat75.setGroupingUsed(true);
        org.apache.commons.math.fraction.FractionFormat fractionFormat78 = new org.apache.commons.math.fraction.FractionFormat(numberFormat31, numberFormat75);
        java.util.Locale locale80 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat81 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale80);
        java.lang.String str83 = fractionFormat81.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat84 = fractionFormat81.getNumeratorFormat();
        numberFormat84.setMaximumFractionDigits((int) (short) -1);
        numberFormat84.setMaximumIntegerDigits(0);
        java.math.RoundingMode roundingMode89 = numberFormat84.getRoundingMode();
        boolean boolean90 = numberFormat75.equals((java.lang.Object) numberFormat84);
        org.apache.commons.math.fraction.FractionFormat fractionFormat91 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9, numberFormat75);
        numberFormat75.setParseIntegerOnly(false);
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Korean" + "'", str21, "Korean");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "kor" + "'", str25, "kor");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ko" + "'", str28, "ko");
        org.junit.Assert.assertNotNull(numberFormat29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ko" + "'", str30, "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1 / 1" + "'", str35, "1 / 1");
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 1.0f + "'", float36 == 1.0f);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "zh-TW" + "'", str55, "zh-TW");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "TWN" + "'", str60, "TWN");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "kor" + "'", str64, "kor");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "und" + "'", str66, "und");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "zh-TW" + "'", str70, "zh-TW");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Taiwan" + "'", str74, "Taiwan");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertEquals(locale80.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "100 0 / 1" + "'", str83, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertTrue("'" + roundingMode89 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode89.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test09065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09065");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str5 = locale0.getCountry();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale13 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category6, locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.PRC;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.util.Locale.setDefault(category6, locale15);
        java.util.Locale locale19 = java.util.Locale.getDefault(category6);
        java.lang.String str20 = locale0.getDisplayCountry(locale19);
        java.lang.String str21 = locale19.getDisplayCountry();
        java.lang.String str22 = locale19.getDisplayName();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale19);
        numberFormat23.setMaximumFractionDigits((int) (byte) -18);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals(locale13.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str17, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uce90\ub098\ub2e4" + "'", str21, "\uce90\ub098\ub2e4");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str22, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(numberFormat23);
    }

    @Test
    public void test09066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09066");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Locale.setDefault(locale5);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale5.getDisplayName(locale8);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = java.util.Locale.getDefault(category13);
        java.lang.String str15 = locale12.getDisplayScript(locale14);
        java.lang.String str16 = locale14.getDisplayCountry();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale17);
        java.lang.String str19 = locale14.getDisplayScript(locale17);
        java.lang.String str20 = locale14.getLanguage();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale21.getISO3Language();
        java.lang.String str24 = locale14.getDisplayVariant(locale21);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale25.getScript();
        java.lang.String str27 = locale25.getDisplayName();
        java.util.Locale locale28 = locale25.stripExtensions();
        java.lang.String str29 = locale28.getCountry();
        java.lang.String str30 = locale28.getVariant();
        java.lang.String str31 = locale14.getDisplayLanguage(locale28);
        java.util.Locale.setDefault(category0, locale14);
        java.util.Locale locale33 = java.util.Locale.getDefault(category0);
        java.util.Locale locale34 = java.util.Locale.getDefault(category0);
        java.lang.String str35 = locale34.getLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cor\351en" + "'", str10, "cor\351en");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ko" + "'", str20, "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str22, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zho" + "'", str23, "zho");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str31, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ko" + "'", str35, "ko");
    }

    @Test
    public void test09067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09067");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.PRC;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale0.getDisplayCountry(locale2);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale6.getISO3Language();
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        java.lang.String str9 = locale6.getDisplayLanguage();
        java.lang.String str10 = locale0.getDisplayScript(locale6);
        java.text.NumberFormat.Field field11 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition((java.text.Format.Field) field11);
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition((java.text.Format.Field) field11, 1);
        java.text.FieldPosition fieldPosition16 = new java.text.FieldPosition((java.text.Format.Field) field11, (int) (short) 100);
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayScript();
        java.lang.String str20 = locale17.getDisplayCountry(locale18);
        java.util.Set<java.lang.String> strSet21 = locale18.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        boolean boolean23 = field11.equals((java.lang.Object) locale18);
        boolean boolean24 = locale18.hasExtensions();
        java.lang.String str25 = locale0.getDisplayLanguage(locale18);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number28 = numberFormat26.parse("anglais (Canada)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"anglais (Canada)\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str4, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Japan" + "'", str20, "Japan");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Italian" + "'", str25, "Italian");
        org.junit.Assert.assertNotNull(numberFormat26);
    }

    @Test
    public void test09068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09068");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.multiply(fraction9);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction2.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = new org.apache.commons.math.fraction.Fraction((double) (-1.0f), (double) 10, (int) (byte) -1);
        int int16 = fraction15.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction2.multiply(fraction15);
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale19.getDisplayScript();
        java.lang.String str21 = locale18.getDisplayCountry(locale19);
        java.util.Set<java.lang.String> strSet22 = locale19.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale19);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale19);
        java.util.Set<java.lang.Character> charSet25 = locale19.getExtensionKeys();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getIntegerInstance(locale19);
        java.lang.Number number28 = numberFormat26.parse("2,147,483,647");
        int int29 = numberFormat26.getMaximumIntegerDigits();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale30.getISO3Language();
        java.util.Set<java.lang.Character> charSet32 = locale30.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet33 = locale30.getExtensionKeys();
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getCurrencyInstance(locale30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) '4');
        parsePosition38.setIndex(0);
        java.lang.Object obj41 = properFractionFormat35.parseObject("und", parsePosition38);
        java.text.FieldPosition fieldPosition43 = new java.text.FieldPosition(120);
        java.lang.String str44 = properFractionFormat35.format((java.lang.Object) 120);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.lang.String str46 = locale45.getDisplayScript();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale47.getISO3Language();
        java.lang.String str49 = locale45.getDisplayScript(locale47);
        java.lang.String str50 = locale45.toLanguageTag();
        java.util.Set<java.lang.String> strSet51 = locale45.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale45);
        java.text.NumberFormat numberFormat53 = fractionFormat52.getDenominatorFormat();
        java.lang.String str55 = numberFormat53.format((double) (-100));
        properFractionFormat35.setDenominatorFormat(numberFormat53);
        boolean boolean57 = numberFormat26.equals((java.lang.Object) numberFormat53);
        boolean boolean58 = fraction2.equals((java.lang.Object) numberFormat53);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Japan" + "'", str21, "Japan");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + number28 + "' != '" + 2147483647L + "'", number28, 2147483647L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "kor" + "'", str31, "kor");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\244 120.00 \244 0.00 / \244 1.00" + "'", str44, "\244 120.00 \244 0.00 / \244 1.00");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "kor" + "'", str48, "kor");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "und" + "'", str50, "und");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-100" + "'", str55, "-100");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test09069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09069");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        boolean boolean12 = numberFormat11.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj22 = numberFormat17.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition21);
        properFractionFormat13.setNumeratorFormat(numberFormat17);
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getCurrencyInstance(locale24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.util.Locale locale28 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale28);
        java.lang.String str31 = fractionFormat29.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat32 = fractionFormat29.getNumeratorFormat();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Locale locale34 = locale33.stripExtensions();
        java.util.Locale locale36 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        java.lang.String str38 = locale36.getDisplayCountry();
        java.lang.String str39 = locale33.getDisplayName(locale36);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale40.getDisplayScript();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale42.getISO3Language();
        java.lang.String str44 = locale40.getDisplayScript(locale42);
        java.lang.String str45 = locale33.getDisplayLanguage(locale42);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getNumberInstance(locale33);
        fractionFormat29.setNumeratorFormat(numberFormat46);
        properFractionFormat26.setWholeFormat(numberFormat46);
        properFractionFormat13.setWholeFormat(numberFormat46);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.util.Locale locale54 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        java.lang.String[] strArray56 = java.util.Locale.getISOCountries();
        boolean boolean57 = numberFormat55.equals((java.lang.Object) strArray56);
        java.lang.String str59 = numberFormat55.format((double) (byte) -1);
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.lang.String str62 = locale61.getDisplayScript();
        java.lang.String str63 = locale60.getDisplayCountry(locale61);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getNumberInstance(locale60);
        numberFormat64.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46, numberFormat55, numberFormat64);
        properFractionFormat9.setWholeFormat(numberFormat55);
        java.lang.Object obj69 = numberFormat55.clone();
        numberFormat55.setMinimumFractionDigits((-92));
        boolean boolean72 = numberFormat55.isGroupingUsed();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100 0 / 1" + "'", str31, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Korean" + "'", str39, "Korean");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "kor" + "'", str43, "kor");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str45, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals(locale54.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-100%" + "'", str59, "-100%");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Japan" + "'", str63, "Japan");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test09070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09070");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        java.lang.String[] strArray10 = java.util.Locale.getISOCountries();
        boolean boolean11 = numberFormat9.equals((java.lang.Object) strArray10);
        java.util.Locale locale15 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        int int17 = numberFormat16.getMaximumIntegerDigits();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        boolean boolean20 = numberFormat19.isGroupingUsed();
        java.util.Currency currency21 = numberFormat19.getCurrency();
        numberFormat16.setCurrency(currency21);
        java.util.Currency currency23 = numberFormat16.getCurrency();
        java.math.RoundingMode roundingMode24 = numberFormat16.getRoundingMode();
        numberFormat9.setRoundingMode(roundingMode24);
        boolean boolean26 = numberFormat9.isParseIntegerOnly();
        java.lang.Object obj27 = numberFormat9.clone();
        java.util.Locale locale29 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale29);
        java.lang.String str32 = fractionFormat30.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat33 = fractionFormat30.getNumeratorFormat();
        java.text.NumberFormat numberFormat34 = fractionFormat30.getNumeratorFormat();
        java.text.NumberFormat numberFormat35 = fractionFormat30.getNumeratorFormat();
        java.lang.String str37 = numberFormat35.format((long) 2147483647);
        java.math.RoundingMode roundingMode38 = numberFormat35.getRoundingMode();
        numberFormat9.setRoundingMode(roundingMode38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9);
        fractionFormat4.setDenominatorFormat(numberFormat9);
        numberFormat9.setMinimumFractionDigits((int) 'u');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode24 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode24.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "100 0 / 1" + "'", str32, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2,147,483,647" + "'", str37, "2,147,483,647");
        org.junit.Assert.assertTrue("'" + roundingMode38 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode38.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test09071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09071");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) 'a');
        java.lang.String str8 = parsePosition7.toString();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder12 = builder11.clear();
        boolean boolean13 = parsePosition7.equals((java.lang.Object) builder12);
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = java.util.Locale.getDefault(category14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale16);
        java.util.Locale.setDefault(category14, locale16);
        java.util.Locale locale19 = java.util.Locale.getDefault(category14);
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale19);
        boolean boolean22 = parsePosition7.equals((java.lang.Object) locale19);
        java.lang.String str23 = locale1.getDisplayScript(locale19);
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.lang.String str25 = locale24.getDisplayCountry();
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale27 = java.util.Locale.PRC;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.lang.String str29 = locale24.getDisplayCountry(locale26);
        java.lang.String str30 = locale19.getDisplayLanguage(locale24);
        java.util.Locale locale31 = locale19.stripExtensions();
        java.lang.String str32 = locale31.getScript();
        java.lang.String str33 = locale31.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str8, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str28, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "coreano" + "'", str30, "coreano");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ko" + "'", str33, "ko");
    }

    @Test
    public void test09072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09072");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getWholeFormat();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        numberFormat3.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.text.NumberFormat numberFormat8 = fractionFormat7.getNumeratorFormat();
        numberFormat8.setParseIntegerOnly(false);
        numberFormat8.setMaximumIntegerDigits(6);
        java.math.RoundingMode roundingMode13 = numberFormat8.getRoundingMode();
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode13.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test09073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09073");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale12 = new java.util.Locale("Japanese (Japan)", "chinois", "-1 / 120");
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale14.getISO3Language();
        java.lang.String str16 = locale14.getDisplayCountry();
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale17.getISO3Language();
        java.lang.String str20 = locale14.getDisplayScript(locale17);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale17);
        java.util.Locale.setDefault(category0, locale17);
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str24 = locale23.getDisplayLanguage();
        java.lang.String str25 = locale23.toLanguageTag();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getIntegerInstance(locale23);
        java.util.Locale.setDefault(category0, locale23);
        java.util.Locale locale28 = java.util.Locale.TAIWAN;
        java.lang.String str29 = locale28.toLanguageTag();
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getInstance(locale28);
        java.lang.String str32 = locale28.getDisplayVariant();
        java.lang.String str33 = locale28.getISO3Country();
        java.util.Locale.setDefault(category0, locale28);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals(locale12.toString(), "japanese (japan)_CHINOIS_-1 / 120");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zho" + "'", str19, "zho");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese" + "'", str24, "Chinese");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh-TW" + "'", str25, "zh-TW");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "zh-TW" + "'", str29, "zh-TW");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "TWN" + "'", str33, "TWN");
    }

    @Test
    public void test09074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09074");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.lang.String str5 = locale1.toLanguageTag();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = builder6.build();
        java.lang.String str9 = locale8.getScript();
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.lang.String str12 = locale10.toLanguageTag();
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale13.getISO3Language();
        java.lang.String str16 = locale10.getDisplayScript(locale13);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale10.getDisplayCountry(locale17);
        java.util.Locale locale20 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str21 = locale17.getDisplayLanguage(locale20);
        java.lang.String str22 = locale8.getDisplayCountry(locale20);
        java.lang.String str23 = locale1.getDisplayVariant(locale8);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale1);
        java.util.Locale locale25 = locale1.stripExtensions();
        boolean boolean26 = locale1.hasExtensions();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese" + "'", str11, "Chinese");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh-TW" + "'", str12, "zh-TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zho" + "'", str15, "zho");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Taiwan" + "'", str18, "Taiwan");
        org.junit.Assert.assertEquals(locale20.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Italian" + "'", str21, "Italian");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test09075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09075");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getEndIndex();
        fieldPosition1.setBeginIndex((int) (byte) 100);
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str9 = fractionFormat7.format((java.lang.Object) 100);
        boolean boolean10 = fieldPosition1.equals((java.lang.Object) fractionFormat7);
        java.text.Format.Field field11 = fieldPosition1.getFieldAttribute();
        int int12 = fieldPosition1.getField();
        int int13 = fieldPosition1.getEndIndex();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException17 = new org.apache.commons.math.fraction.FractionConversionException((double) 'x', (long) (byte) 100, (long) (short) 100);
        java.lang.Throwable[] throwableArray18 = fractionConversionException17.getSuppressed();
        java.text.ParseException parseException21 = new java.text.ParseException("Korean", (int) (short) 1);
        int int22 = parseException21.getErrorOffset();
        fractionConversionException17.addSuppressed((java.lang.Throwable) parseException21);
        boolean boolean24 = fieldPosition1.equals((java.lang.Object) parseException21);
        java.lang.Throwable[] throwableArray25 = parseException21.getSuppressed();
        int int26 = parseException21.getErrorOffset();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100 0 / 1" + "'", str9, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test09076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09076");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        java.lang.Object obj14 = numberFormat4.clone();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale15);
        boolean boolean17 = numberFormat16.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance(locale19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20, numberFormat22);
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj27 = numberFormat22.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition26);
        properFractionFormat18.setNumeratorFormat(numberFormat22);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getCurrencyInstance(locale29);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.util.Locale locale33 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.lang.String str36 = fractionFormat34.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat37 = fractionFormat34.getNumeratorFormat();
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Locale locale39 = locale38.stripExtensions();
        java.util.Locale locale41 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.lang.String str43 = locale41.getDisplayCountry();
        java.lang.String str44 = locale38.getDisplayName(locale41);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.lang.String str46 = locale45.getDisplayScript();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale47.getISO3Language();
        java.lang.String str49 = locale45.getDisplayScript(locale47);
        java.lang.String str50 = locale38.getDisplayLanguage(locale47);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getNumberInstance(locale38);
        fractionFormat34.setNumeratorFormat(numberFormat51);
        properFractionFormat31.setWholeFormat(numberFormat51);
        properFractionFormat18.setWholeFormat(numberFormat51);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        numberFormat51.setGroupingUsed(true);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance(locale58);
        boolean boolean60 = numberFormat59.isGroupingUsed();
        java.util.Currency currency61 = numberFormat59.getCurrency();
        int int62 = numberFormat59.getMinimumFractionDigits();
        int int63 = numberFormat59.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = new org.apache.commons.math.fraction.FractionFormat(numberFormat59);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat51, numberFormat59);
        java.lang.Object obj66 = numberFormat51.clone();
        numberFormat51.setMaximumFractionDigits((int) (byte) 0);
        java.lang.String str70 = numberFormat51.format((double) 10.0f);
        java.lang.String str72 = numberFormat51.format(1100L);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "100 0 / 1" + "'", str36, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(locale39);
// flaky:         org.junit.Assert.assertEquals(locale39.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertEquals(locale41.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "france (CHINESE (TAIWAN))" + "'", str44, "france (CHINESE (TAIWAN))");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "kor" + "'", str48, "kor");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "france" + "'", str50, "france");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(currency61);
        org.junit.Assert.assertEquals(currency61.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "10" + "'", str70, "10");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1,100" + "'", str72, "1,100");
    }

    @Test
    public void test09077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09077");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str8 = fractionFormat6.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat9 = fractionFormat6.getNumeratorFormat();
        fractionFormat3.setNumeratorFormat(numberFormat9);
        java.text.NumberFormat numberFormat11 = fractionFormat3.getDenominatorFormat();
        java.util.Locale locale12 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.lang.StringBuffer stringBuffer14 = null;
        java.text.NumberFormat.Field field15 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition16 = new java.text.FieldPosition((java.text.Format.Field) field15);
        int int17 = fieldPosition16.getEndIndex();
        fieldPosition16.setBeginIndex((int) (byte) 100);
        java.lang.String str20 = fieldPosition16.toString();
        fieldPosition16.setEndIndex(20);
        java.lang.String str23 = fieldPosition16.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer24 = fractionFormat3.format((java.lang.Object) strSet13, stringBuffer14, fieldPosition16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100 0 / 1" + "'", str8, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(field15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]" + "'", str20, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=20]" + "'", str23, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=20]");
    }

    @Test
    public void test09078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09078");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str5 = locale0.getCountry();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale13 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category6, locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.PRC;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.util.Locale.setDefault(category6, locale15);
        java.util.Locale locale19 = java.util.Locale.getDefault(category6);
        java.lang.String str20 = locale0.getDisplayCountry(locale19);
        java.util.Locale locale21 = locale19.stripExtensions();
        java.util.Locale locale24 = new java.util.Locale("Chinese", "java.text.parseposition[index=35,errorindex=600]");
        java.util.Set<java.lang.Character> charSet25 = locale24.getExtensionKeys();
        java.lang.String str26 = locale21.getDisplayCountry(locale24);
        java.lang.String str27 = locale24.getLanguage();
        java.lang.String str29 = locale24.getExtension('x');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals(locale13.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str17, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale24.toString(), "chinese_JAVA.TEXT.PARSEPOSITION[INDEX=35,ERRORINDEX=600]");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Canada" + "'", str26, "Canada");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "chinese" + "'", str27, "chinese");
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test09079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09079");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 52 to fraction (-1/0)");
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale2.getDisplayScript(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.lang.String str7 = locale2.getDisplayVariant();
        java.lang.String str8 = locale1.getDisplayName(locale2);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale14.getISO3Language();
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleKeys();
        java.lang.String str17 = locale14.getISO3Country();
        java.util.Locale.Builder builder18 = builder12.setLocale(locale14);
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.lang.String str20 = locale19.toLanguageTag();
        java.lang.String str21 = locale19.getISO3Country();
        java.lang.String str22 = locale14.getDisplayCountry(locale19);
        java.lang.String str23 = locale2.getDisplayName(locale19);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh-TW" + "'", str20, "zh-TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "TWN" + "'", str21, "TWN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str23, "\u4e2d\u6587\u53f0\u7063)");
    }

    @Test
    public void test09080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09080");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat7.parse("java.text.ParseException: zh_TW", parsePosition16);
        java.text.NumberFormat numberFormat22 = properFractionFormat7.getDenominatorFormat();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24, numberFormat26);
        boolean boolean28 = numberFormat26.isGroupingUsed();
        java.lang.String str30 = numberFormat26.format((double) 100);
        java.lang.String str32 = numberFormat26.format((double) (short) 10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat22, numberFormat26);
        java.lang.String str35 = numberFormat26.format((long) 10);
        java.math.RoundingMode roundingMode36 = numberFormat26.getRoundingMode();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(fraction21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10,000%" + "'", str30, "10,000%");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1,000%" + "'", str32, "1,000%");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1,000%" + "'", str35, "1,000%");
        org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode36.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test09081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09081");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getWholeFormat();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        numberFormat3.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getISO3Language();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale12);
        java.util.Currency currency15 = numberFormat14.getCurrency();
        numberFormat14.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat14);
        fractionFormat7.setDenominatorFormat(numberFormat14);
        java.text.NumberFormat numberFormat21 = fractionFormat7.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21);
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayScript();
        java.lang.String str27 = locale24.getDisplayCountry(locale25);
        java.util.Set<java.lang.String> strSet28 = locale25.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getIntegerInstance(locale25);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale25);
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        int int37 = numberFormat36.getMaximumIntegerDigits();
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        numberFormat42.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency45 = numberFormat42.getCurrency();
        numberFormat36.setCurrency(currency45);
        numberFormat36.setGroupingUsed(false);
        java.lang.String str50 = numberFormat36.format((double) (short) 2);
        java.text.ParsePosition parsePosition53 = new java.text.ParsePosition((int) (byte) 0);
        java.lang.Object obj54 = numberFormat36.parseObject("1%", parsePosition53);
        java.lang.Number number55 = numberFormat30.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 100 to fraction (10/0)", parsePosition53);
        java.lang.String str56 = parsePosition53.toString();
        org.apache.commons.math.fraction.Fraction fraction57 = fractionFormat22.parse("java.text.ParseException: zh_CN", parsePosition53);
        parsePosition53.setErrorIndex((int) (byte) 3);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zho" + "'", str10, "zho");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "TWD");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Japan" + "'", str27, "Japan");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(currency45);
        org.junit.Assert.assertEquals(currency45.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "200%" + "'", str50, "200%");
        org.junit.Assert.assertEquals("'" + obj54 + "' != '" + 0.01d + "'", obj54, 0.01d);
        org.junit.Assert.assertNull(number55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "java.text.ParsePosition[index=2,errorIndex=2]" + "'", str56, "java.text.ParsePosition[index=2,errorIndex=2]");
        org.junit.Assert.assertNull(fraction57);
    }

    @Test
    public void test09082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09082");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction6 = properFractionFormat2.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition5);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        numberFormat13.setMaximumFractionDigits((int) (short) -1);
        int int16 = numberFormat13.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        numberFormat13.setGroupingUsed(true);
        java.util.Currency currency20 = numberFormat13.getCurrency();
        java.text.NumberFormat.Field field22 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field22);
        java.lang.String str24 = fieldPosition23.toString();
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = locale25.getDisplayName(locale26);
        boolean boolean29 = fieldPosition23.equals((java.lang.Object) locale26);
        fieldPosition23.setEndIndex((int) '#');
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction38 = properFractionFormat34.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition37);
        boolean boolean39 = fieldPosition23.equals((java.lang.Object) parsePosition37);
        parsePosition37.setErrorIndex((int) '#');
        java.lang.Object obj42 = numberFormat13.parseObject("ja-JP", parsePosition37);
        org.apache.commons.math.fraction.Fraction fraction43 = properFractionFormat2.parse("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]", parsePosition37);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        boolean boolean46 = numberFormat45.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        java.lang.String str49 = numberFormat45.format(0.008333333333333333d);
        java.math.RoundingMode roundingMode50 = numberFormat45.getRoundingMode();
        properFractionFormat2.setWholeFormat(numberFormat45);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance();
        numberFormat52.setMaximumIntegerDigits(2147483647);
        java.lang.String str56 = numberFormat52.format((long) 2147483647);
        properFractionFormat2.setNumeratorFormat(numberFormat52);
        java.text.NumberFormat numberFormat58 = properFractionFormat2.getWholeFormat();
        numberFormat58.setGroupingUsed(true);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNull(fraction6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str24, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Chinese (Taiwan)" + "'", str28, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNull(fraction38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1%" + "'", str49, "1%");
        org.junit.Assert.assertTrue("'" + roundingMode50 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode50.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "214,748,364,700%" + "'", str56, "214,748,364,700%");
        org.junit.Assert.assertNotNull(numberFormat58);
    }

    @Test
    public void test09083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09083");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat5);
        numberFormat5.setMinimumFractionDigits((int) '4');
        int int9 = numberFormat5.getMinimumFractionDigits();
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition((int) '4');
        parsePosition12.setErrorIndex(600);
        java.lang.String str15 = parsePosition12.toString();
        java.lang.Object obj16 = numberFormat5.parseObject("fr", parsePosition12);
        parsePosition12.setErrorIndex((int) (short) 1);
        java.lang.StringBuffer stringBuffer19 = null;
        java.text.NumberFormat.Field field20 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition21 = new java.text.FieldPosition((java.text.Format.Field) field20);
        int int22 = fieldPosition21.getEndIndex();
        int int23 = fieldPosition21.getField();
        int int24 = fieldPosition21.getBeginIndex();
        fieldPosition21.setBeginIndex((int) (short) -14400);
        int int27 = fieldPosition21.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer28 = fractionFormat1.format((java.lang.Object) (short) 1, stringBuffer19, fieldPosition21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.text.ParsePosition[index=52,errorIndex=600]" + "'", str15, "java.text.ParsePosition[index=52,errorIndex=600]");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(field20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test09084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09084");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.lang.String str2 = locale0.getISO3Language();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale0);
        boolean boolean4 = numberFormat3.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat7.setMinimumFractionDigits((int) '#');
        java.util.Locale locale15 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        java.lang.String str18 = numberFormat16.format((double) 10L);
        org.apache.commons.math.fraction.Fraction fraction21 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str22 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction21);
        long long23 = fraction21.longValue();
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        java.util.Locale locale33 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        numberFormat34.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency37 = numberFormat34.getCurrency();
        numberFormat28.setCurrency(currency37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        boolean boolean40 = fraction21.equals((java.lang.Object) properFractionFormat39);
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        int int46 = numberFormat45.getMaximumIntegerDigits();
        int int47 = numberFormat45.getMaximumFractionDigits();
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getInstance(locale48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = new org.apache.commons.math.fraction.FractionFormat(numberFormat49, numberFormat51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = new org.apache.commons.math.fraction.FractionFormat(numberFormat45, numberFormat49);
        java.util.Currency currency54 = numberFormat45.getCurrency();
        properFractionFormat39.setWholeFormat(numberFormat45);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat16, numberFormat45);
        java.lang.Object obj57 = numberFormat7.clone();
        java.text.ParsePosition parsePosition60 = new java.text.ParsePosition((int) 'x');
        java.lang.String str61 = parsePosition60.toString();
        java.lang.Object obj62 = numberFormat7.parseObject("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (100/-51)", parsePosition60);
        java.lang.StringBuffer stringBuffer63 = null;
        java.text.FieldPosition fieldPosition65 = new java.text.FieldPosition((int) 'x');
        int int66 = fieldPosition65.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer67 = fractionFormat5.format((java.lang.Object) numberFormat7, stringBuffer63, fieldPosition65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1,000%" + "'", str18, "1,000%");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-1 / 100" + "'", str22, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertEquals(locale33.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(currency37);
        org.junit.Assert.assertEquals(currency37.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(currency54);
        org.junit.Assert.assertEquals(currency54.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.text.ParsePosition[index=120,errorIndex=-1]" + "'", str61, "java.text.ParsePosition[index=120,errorIndex=-1]");
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 120 + "'", int66 == 120);
    }

    @Test
    public void test09085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09085");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        numberFormat5.setGroupingUsed(true);
        numberFormat5.setMaximumIntegerDigits((int) (short) 100);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale14.getISO3Language();
        java.util.Set<java.lang.Character> charSet16 = locale14.getExtensionKeys();
        java.util.Locale locale17 = java.util.Locale.US;
        java.lang.String str18 = locale17.getDisplayScript();
        java.lang.String str19 = locale14.getDisplayVariant(locale17);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24, numberFormat26);
        java.text.ParsePosition parsePosition30 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj31 = numberFormat26.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition30);
        java.lang.String str32 = parsePosition30.toString();
        boolean boolean34 = parsePosition30.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction35 = properFractionFormat21.parse("java.text.ParseException: zh_TW", parsePosition30);
        java.text.NumberFormat numberFormat36 = properFractionFormat21.getWholeFormat();
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition(119);
        int int40 = parsePosition39.getIndex();
        java.lang.Object obj41 = null;
        boolean boolean42 = parsePosition39.equals(obj41);
        java.lang.Object obj43 = numberFormat36.parseObject("zh_tw", parsePosition39);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat36);
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getCurrencyInstance(locale46);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.text.ParsePosition parsePosition51 = new java.text.ParsePosition((int) '#');
        java.lang.Object obj52 = properFractionFormat48.parseObject("", parsePosition51);
        parsePosition51.setErrorIndex((-1));
        org.apache.commons.math.fraction.Fraction fraction55 = fractionFormat44.parse("-\244 0.02", parsePosition51);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str32, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(fraction35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 119 + "'", int40 == 119);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(fraction55);
    }

    @Test
    public void test09086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09086");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getCurrencyInstance(locale4);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat6.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition9);
        org.apache.commons.math.fraction.Fraction fraction11 = properFractionFormat2.parse("zh_TW", parsePosition9);
        java.text.NumberFormat numberFormat12 = properFractionFormat2.getWholeFormat();
        java.util.Locale locale15 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        java.lang.String str18 = fractionFormat16.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat19 = fractionFormat16.getNumeratorFormat();
        numberFormat19.setMaximumFractionDigits((int) (short) -1);
        int int22 = numberFormat19.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition(119);
        int int27 = parsePosition26.getIndex();
        org.apache.commons.math.fraction.Fraction fraction28 = properFractionFormat23.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 100 to fraction (100/-1)", parsePosition26);
        org.apache.commons.math.fraction.Fraction fraction29 = properFractionFormat2.parse("java.text.FieldPosition[field=32,attribute=null,beginIndex=0,endIndex=0]", parsePosition26);
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Locale locale33 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.lang.String str35 = locale33.getDisplayCountry();
        java.lang.String str36 = locale30.getDisplayName(locale33);
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.lang.String str38 = locale37.getDisplayScript();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale39.getISO3Language();
        java.lang.String str41 = locale37.getDisplayScript(locale39);
        java.lang.String str42 = locale30.getDisplayLanguage(locale39);
        java.lang.String str43 = locale30.toLanguageTag();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getIntegerInstance(locale30);
        int int45 = numberFormat44.getMinimumFractionDigits();
        java.lang.String str47 = numberFormat44.format((long) 'a');
        java.lang.String str49 = numberFormat44.format((double) (-2.0f));
        properFractionFormat2.setWholeFormat(numberFormat44);
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.negate();
        long long56 = fraction54.longValue();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction51.divide(fraction54);
        java.lang.String str58 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction51);
        java.lang.StringBuffer stringBuffer59 = null;
        java.text.NumberFormat.Field field60 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition61 = new java.text.FieldPosition((java.text.Format.Field) field60);
        java.text.FieldPosition fieldPosition63 = new java.text.FieldPosition((java.text.Format.Field) field60, 1);
        java.text.FieldPosition fieldPosition65 = new java.text.FieldPosition((java.text.Format.Field) field60, (int) (short) 100);
        java.util.Locale locale66 = java.util.Locale.JAPAN;
        java.util.Locale locale67 = java.util.Locale.ROOT;
        java.lang.String str68 = locale67.getDisplayScript();
        java.lang.String str69 = locale66.getDisplayCountry(locale67);
        java.util.Set<java.lang.String> strSet70 = locale67.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat71 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale67);
        boolean boolean72 = field60.equals((java.lang.Object) locale67);
        java.text.FieldPosition fieldPosition73 = new java.text.FieldPosition((java.text.Format.Field) field60);
        fieldPosition73.setBeginIndex((int) 'a');
        java.text.Format.Field field76 = fieldPosition73.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer77 = properFractionFormat2.format(fraction51, stringBuffer59, fieldPosition73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNull(fraction10);
        org.junit.Assert.assertNull(fraction11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "100 0 / 1" + "'", str18, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 119 + "'", int27 == 119);
        org.junit.Assert.assertNull(fraction28);
        org.junit.Assert.assertNull(fraction29);
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese (Taiwan)" + "'", str36, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "kor" + "'", str40, "kor");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str42, "\uc911\uad6d\uc5b4");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "zh-TW" + "'", str43, "zh-TW");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "97" + "'", str47, "97");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-2" + "'", str49, "-2");
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1 / 1" + "'", str58, "1 / 1");
        org.junit.Assert.assertNotNull(field60);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Japan" + "'", str69, "Japan");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(fractionFormat71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(field76);
    }

    @Test
    public void test09087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09087");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale3.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder7 = builder2.setLocale(locale3);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("chinois (Taiwan)");
        java.util.Locale.Builder builder10 = builder7.setLocale(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayScript();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale14.getISO3Language();
        java.lang.String str16 = locale12.getDisplayScript(locale14);
        java.lang.String str17 = locale12.toLanguageTag();
        java.lang.String str18 = locale12.getDisplayVariant();
        java.util.Locale locale19 = locale12.stripExtensions();
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale20.toLanguageTag();
        java.lang.String str23 = locale20.getExtension('x');
        java.lang.String str24 = locale19.getDisplayScript(locale20);
        java.lang.String str25 = locale9.getDisplayScript(locale20);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "und" + "'", str17, "und");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh-TW" + "'", str21, "zh-TW");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test09088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09088");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("en");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "Korean");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayScript();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale8.getISO3Language();
        java.lang.String str10 = locale6.getDisplayScript(locale8);
        java.lang.String str11 = locale6.toLanguageTag();
        java.lang.String str12 = locale6.getDisplayVariant();
        boolean boolean13 = locale6.hasExtensions();
        java.util.Locale.Builder builder14 = builder5.setLocale(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        org.apache.commons.math.fraction.Fraction fraction17 = fractionFormat15.parse("600");
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.negate();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.abs();
        long long28 = fraction26.longValue();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction22.multiply(fraction26);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.abs();
        long long41 = fraction39.longValue();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction35.multiply(fraction39);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction22.multiply(fraction42);
        int int44 = fraction42.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction17.add(fraction42);
        java.lang.String str46 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction45);
        byte byte47 = fraction45.byteValue();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "8,640,001 / 14,400" + "'", str46, "8,640,001 / 14,400");
        org.junit.Assert.assertTrue("'" + byte47 + "' != '" + (byte) 88 + "'", byte47 == (byte) 88);
    }

    @Test
    public void test09089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09089");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        numberFormat1.setMaximumFractionDigits((int) (byte) 100);
        java.util.Locale locale8 = new java.util.Locale("3,500.0000000000000000000000000000000000000000000000000000%");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.text.NumberFormat.Field field10 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field10);
        int int12 = fieldPosition11.getField();
        java.text.Format.Field field13 = fieldPosition11.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.ZERO;
        boolean boolean15 = field13.equals((java.lang.Object) fraction14);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        numberFormat16.setMaximumIntegerDigits(2147483647);
        int int19 = numberFormat16.getMaximumIntegerDigits();
        numberFormat16.setMaximumIntegerDigits((int) (short) 32);
        boolean boolean22 = fraction14.equals((java.lang.Object) numberFormat16);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getCurrencyInstance(locale23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        java.text.ParsePosition parsePosition28 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction29 = properFractionFormat25.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        boolean boolean35 = numberFormat34.isGroupingUsed();
        properFractionFormat32.setWholeFormat(numberFormat34);
        java.text.NumberFormat numberFormat37 = properFractionFormat32.getWholeFormat();
        properFractionFormat25.setWholeFormat(numberFormat37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        boolean boolean44 = numberFormat43.isGroupingUsed();
        properFractionFormat41.setWholeFormat(numberFormat43);
        java.text.NumberFormat numberFormat46 = properFractionFormat41.getWholeFormat();
        java.util.Currency currency47 = numberFormat46.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = new org.apache.commons.math.fraction.FractionFormat(numberFormat46);
        java.lang.Object obj49 = numberFormat46.clone();
        boolean boolean50 = numberFormat46.isParseIntegerOnly();
        properFractionFormat25.setWholeFormat(numberFormat46);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance(locale52);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        numberFormat53.setMaximumFractionDigits(100);
        java.lang.String str58 = numberFormat53.format((long) 100);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16, numberFormat46, numberFormat53);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat9, numberFormat46);
        java.lang.String str62 = numberFormat1.format((double) (short) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        int int64 = numberFormat1.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals(locale8.toString(), "3,500.0000000000000000000000000000000000000000000000000000%");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(field13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNull(fraction29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "10,000%" + "'", str58, "10,000%");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1,000%" + "'", str62, "1,000%");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test09090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09090");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        fractionFormat4.setDenominatorFormat(numberFormat9);
        java.util.Locale locale13 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.lang.String str16 = fractionFormat14.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat17 = fractionFormat14.getNumeratorFormat();
        numberFormat17.setMaximumFractionDigits((int) (short) -1);
        int int20 = numberFormat17.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale22);
        boolean boolean24 = numberFormat23.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getInstance(locale26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27, numberFormat29);
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj34 = numberFormat29.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition33);
        properFractionFormat25.setNumeratorFormat(numberFormat29);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getCurrencyInstance(locale36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.util.Locale locale40 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale40);
        java.lang.String str43 = fractionFormat41.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat44 = fractionFormat41.getNumeratorFormat();
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.util.Locale locale46 = locale45.stripExtensions();
        java.util.Locale locale48 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale48);
        java.lang.String str50 = locale48.getDisplayCountry();
        java.lang.String str51 = locale45.getDisplayName(locale48);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale52.getDisplayScript();
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale54.getISO3Language();
        java.lang.String str56 = locale52.getDisplayScript(locale54);
        java.lang.String str57 = locale45.getDisplayLanguage(locale54);
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getNumberInstance(locale45);
        fractionFormat41.setNumeratorFormat(numberFormat58);
        properFractionFormat38.setWholeFormat(numberFormat58);
        properFractionFormat25.setWholeFormat(numberFormat58);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        java.util.Locale locale66 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance(locale66);
        java.lang.String[] strArray68 = java.util.Locale.getISOCountries();
        boolean boolean69 = numberFormat67.equals((java.lang.Object) strArray68);
        java.lang.String str71 = numberFormat67.format((double) (byte) -1);
        java.util.Locale locale72 = java.util.Locale.JAPAN;
        java.util.Locale locale73 = java.util.Locale.ROOT;
        java.lang.String str74 = locale73.getDisplayScript();
        java.lang.String str75 = locale72.getDisplayCountry(locale73);
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getNumberInstance(locale72);
        numberFormat76.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58, numberFormat67, numberFormat76);
        properFractionFormat21.setWholeFormat(numberFormat67);
        java.text.ParsePosition parsePosition83 = new java.text.ParsePosition((int) 'a');
        java.lang.String str84 = parsePosition83.toString();
        java.lang.String str85 = parsePosition83.toString();
        java.lang.Object obj86 = properFractionFormat21.parseObject("zh-tw", parsePosition83);
        java.util.Locale locale87 = java.util.Locale.CANADA;
        java.text.NumberFormat numberFormat88 = java.text.NumberFormat.getNumberInstance(locale87);
        properFractionFormat21.setNumeratorFormat(numberFormat88);
        boolean boolean90 = numberFormat88.isParseIntegerOnly();
        fractionFormat4.setNumeratorFormat(numberFormat88);
        numberFormat88.setMaximumFractionDigits((int) (short) 1);
        int int94 = numberFormat88.getMaximumFractionDigits();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "100 0 / 1" + "'", str16, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "100 0 / 1" + "'", str43, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale46);
// flaky:         org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale48.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Chinese (Taiwan)" + "'", str51, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "kor" + "'", str55, "kor");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str57, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertEquals(locale66.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-100%" + "'", str71, "-100%");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Japan" + "'", str75, "Japan");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str84, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str85, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "en_CA");
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test09091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09091");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction12.add(fraction18);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction21.divide(fraction24);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = locale27.getScript();
        boolean boolean30 = fraction26.equals((java.lang.Object) locale27);
        java.util.Locale.setDefault(category0, locale27);
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getInstance(locale32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33, numberFormat35);
        numberFormat35.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field40 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition41 = new java.text.FieldPosition((java.text.Format.Field) field40);
        java.lang.String str42 = fieldPosition41.toString();
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.lang.String str45 = locale44.getDisplayScript();
        java.lang.String str46 = locale43.getDisplayName(locale44);
        boolean boolean47 = fieldPosition41.equals((java.lang.Object) locale44);
        fieldPosition41.setEndIndex((int) '#');
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getCurrencyInstance(locale50);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        java.text.ParsePosition parsePosition55 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction56 = properFractionFormat52.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition55);
        boolean boolean57 = fieldPosition41.equals((java.lang.Object) parsePosition55);
        java.lang.Number number58 = numberFormat35.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition55);
        org.apache.commons.math.fraction.Fraction fraction61 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction62 = fraction61.negate();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction62.abs();
        org.apache.commons.math.fraction.Fraction fraction64 = fraction62.abs();
        java.util.Locale locale65 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getInstance(locale65);
        java.util.Locale locale67 = java.util.Locale.getDefault();
        boolean boolean68 = numberFormat66.equals((java.lang.Object) locale67);
        boolean boolean69 = fraction64.equals((java.lang.Object) locale67);
        boolean boolean70 = parsePosition55.equals((java.lang.Object) locale67);
        java.util.Locale.setDefault(category0, locale67);
        java.util.Locale locale73 = java.util.Locale.forLanguageTag("eng");
        java.util.Locale.setDefault(category0, locale73);
        java.text.NumberFormat.Field field75 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition76 = new java.text.FieldPosition((java.text.Format.Field) field75);
        java.util.Locale locale77 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat78 = java.text.NumberFormat.getInstance(locale77);
        boolean boolean79 = field75.equals((java.lang.Object) locale77);
        java.util.Locale locale80 = java.util.Locale.ITALIAN;
        java.lang.String str81 = locale80.getDisplayCountry();
        java.lang.String str82 = locale77.getDisplayVariant(locale80);
        java.text.NumberFormat numberFormat83 = java.text.NumberFormat.getIntegerInstance(locale80);
        java.util.Locale locale84 = locale80.stripExtensions();
        java.util.Locale.setDefault(category0, locale84);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(field40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str42, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Chinese (Taiwan)" + "'", str46, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNull(fraction56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(number58);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(locale67);
// flaky:         org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "eng");
        org.junit.Assert.assertNotNull(field75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "it");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "it");
    }

    @Test
    public void test09092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09092");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale5);
        java.util.Currency currency8 = numberFormat7.getCurrency();
        numberFormat7.setMinimumIntegerDigits(1);
        numberFormat7.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj16 = numberFormat7.parseObject("Japan", parsePosition15);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException20 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str21 = fractionConversionException20.getPattern();
        java.lang.Throwable[] throwableArray22 = fractionConversionException20.getSuppressed();
        java.lang.Object[] objArray23 = fractionConversionException20.getArguments();
        boolean boolean24 = parsePosition15.equals((java.lang.Object) objArray23);
        int int25 = parsePosition15.getIndex();
        int int26 = parsePosition15.getIndex();
        java.lang.Object obj27 = fractionFormat3.parseObject("\ud55c\uad6d\uc5b4", parsePosition15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat29 = properFractionFormat28.getWholeFormat();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        numberFormat31.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = new org.apache.commons.math.fraction.FractionFormat(numberFormat29, numberFormat31);
        java.text.NumberFormat numberFormat36 = fractionFormat35.getNumeratorFormat();
        boolean boolean37 = parsePosition15.equals((java.lang.Object) fractionFormat35);
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.lang.String str39 = locale38.toLanguageTag();
        java.lang.String str40 = locale38.getISO3Country();
        java.lang.String str41 = locale38.toLanguageTag();
        java.lang.String str42 = locale38.getDisplayVariant();
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getInstance(locale38);
        boolean boolean44 = parsePosition15.equals((java.lang.Object) locale38);
        java.lang.String str45 = locale0.getDisplayScript(locale38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str47 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "TWD");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str21, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "zh-TW" + "'", str39, "zh-TW");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "TWN" + "'", str40, "TWN");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zh-TW" + "'", str41, "zh-TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "en" + "'", str47, "en");
    }

    @Test
    public void test09093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09093");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder8 = builder5.clear();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("9,700%");
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.util.Locale.Builder builder12 = builder8.setLocale(locale10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str18 = locale14.getISO3Language();
        boolean boolean19 = numberFormat13.equals((java.lang.Object) locale14);
        java.util.Locale.Builder builder20 = builder8.setLocale(locale14);
        java.util.Locale.Builder builder21 = builder8.clear();
        java.util.Locale.Builder builder22 = builder8.clearExtensions();
        java.util.Locale.Builder builder23 = builder8.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test09094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09094");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction8.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str28 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction8.subtract(fraction27);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction8.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction8.abs();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 / 100" + "'", str28, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
    }

    @Test
    public void test09095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09095");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = numberFormat1.isGroupingUsed();
        numberFormat1.setGroupingUsed(true);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        java.math.RoundingMode roundingMode17 = numberFormat9.getRoundingMode();
        numberFormat1.setRoundingMode(roundingMode17);
        java.lang.String[] strArray19 = java.util.Locale.getISOLanguages();
        boolean boolean20 = numberFormat1.equals((java.lang.Object) strArray19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits((-120));
        int int24 = numberFormat1.getMinimumIntegerDigits();
        int int25 = numberFormat1.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode17 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode17.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test09096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09096");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = builder3.build();
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        boolean boolean9 = numberFormat8.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.NumberFormat numberFormat11 = properFractionFormat10.getWholeFormat();
        numberFormat11.setMinimumFractionDigits((int) (byte) 0);
        numberFormat11.setMinimumFractionDigits(60);
        numberFormat11.setMaximumFractionDigits((int) (byte) 1);
        java.math.RoundingMode roundingMode18 = numberFormat11.getRoundingMode();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale19.getISO3Language();
        java.util.Locale.setDefault(locale19);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str24 = locale19.getDisplayName(locale22);
        java.lang.String str25 = locale19.getISO3Language();
        java.lang.String str26 = locale19.getCountry();
        boolean boolean27 = numberFormat11.equals((java.lang.Object) locale19);
        java.util.Locale.Builder builder28 = builder6.setLocale(locale19);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder31 = builder6.setUnicodeLocaleKeyword("10\240000,00 $", "");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 10?000,00 $ [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + roundingMode18 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode18.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "kor" + "'", str20, "kor");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "cor\351en" + "'", str24, "cor\351en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "kor" + "'", str25, "kor");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test09097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09097");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale locale17 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.lang.String str20 = locale14.getDisplayName(locale17);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale14.getDisplayLanguage(locale23);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale14);
        fractionFormat10.setNumeratorFormat(numberFormat27);
        properFractionFormat7.setWholeFormat(numberFormat27);
        fractionFormat4.setNumeratorFormat(numberFormat27);
        java.text.NumberFormat numberFormat31 = fractionFormat4.getNumeratorFormat();
        java.text.NumberFormat numberFormat32 = fractionFormat4.getDenominatorFormat();
        java.text.NumberFormat.Field field34 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition35 = new java.text.FieldPosition((java.text.Format.Field) field34);
        java.lang.String str36 = fieldPosition35.toString();
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = locale38.getDisplayScript();
        java.lang.String str40 = locale37.getDisplayName(locale38);
        boolean boolean41 = fieldPosition35.equals((java.lang.Object) locale38);
        fieldPosition35.setEndIndex((int) '#');
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getCurrencyInstance(locale44);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        java.text.ParsePosition parsePosition49 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction50 = properFractionFormat46.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition49);
        boolean boolean51 = fieldPosition35.equals((java.lang.Object) parsePosition49);
        java.lang.String str52 = parsePosition49.toString();
        int int53 = parsePosition49.getIndex();
        org.apache.commons.math.fraction.Fraction fraction54 = fractionFormat4.parse("Canada", parsePosition49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj56 = fractionFormat4.parseObject("org.apache.commons.math.fraction.FractionConversionException: Unable to convert 0.008 to fraction after -120 iterations");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "HI!" + "'", str20, "HI!");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(field34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str36, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese (Taiwan)" + "'", str40, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNull(fraction50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str52, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNull(fraction54);
    }

    @Test
    public void test09098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09098");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.util.Locale locale5 = locale3.stripExtensions();
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        boolean boolean9 = locale6.hasExtensions();
        java.lang.String str10 = locale3.getDisplayScript(locale6);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.lang.String str13 = locale6.toLanguageTag();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fr-CA" + "'", str13, "fr-CA");
    }

    @Test
    public void test09099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09099");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.toLanguageTag();
        java.util.Locale locale2 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.lang.String str4 = locale2.toLanguageTag();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        boolean boolean7 = locale5.hasExtensions();
        java.lang.String str8 = locale5.getDisplayScript();
        java.lang.String str9 = locale2.getDisplayName(locale5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str11 = locale0.getDisplayVariant(locale5);
        java.util.Locale locale12 = locale5.stripExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        org.apache.commons.math.fraction.Fraction fraction15 = fractionFormat13.parse("1 / 120");
        java.text.NumberFormat numberFormat16 = fractionFormat13.getDenominatorFormat();
        java.math.RoundingMode roundingMode17 = numberFormat16.getRoundingMode();
        boolean boolean18 = numberFormat16.isGroupingUsed();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ja" + "'", str1, "ja");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Chinese" + "'", str3, "Chinese");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh-TW" + "'", str4, "zh-TW");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "chinois (Taiwan)" + "'", str9, "chinois (Taiwan)");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + roundingMode17 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode17.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test09100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09100");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.util.Locale locale6 = new java.util.Locale("Chinese (Taiwan)");
        java.util.Locale locale9 = new java.util.Locale("Chinese", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        java.lang.String str10 = locale6.getDisplayCountry(locale9);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale6);
        java.lang.String str12 = locale3.getDisplayLanguage(locale6);
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale14.getDisplayScript();
        java.lang.String str16 = locale13.getDisplayCountry(locale14);
        java.util.Set<java.lang.String> strSet17 = locale14.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        boolean boolean19 = locale14.hasExtensions();
        java.util.Set<java.lang.Character> charSet20 = locale14.getExtensionKeys();
        java.lang.String str21 = locale3.getDisplayScript(locale14);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance(locale14);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals(locale6.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals(locale9.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Japan" + "'", str16, "Japan");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(numberFormat22);
    }

    @Test
    public void test09101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09101");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("zh-TW");
        java.lang.String str10 = locale0.getDisplayLanguage(locale9);
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.abs();
        long long21 = fraction19.longValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction15.multiply(fraction19);
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.negate();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.abs();
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.negate();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.abs();
        long long33 = fraction31.longValue();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction27.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction35 = fraction19.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        double double40 = fraction38.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction44 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction45 = fraction38.multiply(fraction44);
        boolean boolean46 = fraction35.equals((java.lang.Object) fraction38);
        java.util.Locale locale47 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str48 = locale47.getDisplayLanguage();
        java.lang.String str49 = locale47.toLanguageTag();
        java.util.Locale locale50 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        java.lang.String str52 = locale50.getISO3Language();
        java.lang.String str53 = locale47.getDisplayScript(locale50);
        java.util.Locale locale54 = java.util.Locale.ITALIAN;
        java.lang.String str55 = locale47.getDisplayCountry(locale54);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance(locale47);
        boolean boolean57 = fraction38.equals((java.lang.Object) locale47);
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale47);
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = locale59.getDisplayScript();
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale61.getISO3Language();
        java.lang.String str63 = locale59.getDisplayScript(locale61);
        java.lang.String str64 = locale47.getDisplayScript(locale59);
        java.util.Locale locale68 = new java.util.Locale("English", "-119 / 120", "");
        java.lang.String str69 = locale59.getDisplayName(locale68);
        java.lang.String str70 = locale9.getDisplayLanguage(locale68);
        java.lang.String str71 = locale68.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-0.008333333333333333d) + "'", double40 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Chinese" + "'", str48, "Chinese");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "zh-TW" + "'", str49, "zh-TW");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "zho" + "'", str52, "zho");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Taiwan" + "'", str55, "Taiwan");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "kor" + "'", str62, "kor");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals(locale68.toString(), "english_-119 / 120");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Chinese" + "'", str70, "Chinese");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-119 / 120" + "'", str71, "-119 / 120");
    }

    @Test
    public void test09102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09102");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        boolean boolean9 = numberFormat7.equals((java.lang.Object) locale8);
        boolean boolean10 = fraction5.equals((java.lang.Object) locale8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction5.abs();
        java.text.NumberFormat numberFormat12 = null;
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        numberFormat17.setMinimumIntegerDigits((int) (short) -1);
        boolean boolean20 = numberFormat17.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12, numberFormat17);
        java.lang.Object obj22 = numberFormat17.clone();
        boolean boolean23 = fraction11.equals(obj22);
        int int24 = fraction11.intValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.negate();
        short short27 = fraction26.shortValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 0 + "'", short27 == (short) 0);
    }

    @Test
    public void test09103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09103");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.util.Locale.setDefault(category5, locale7);
        java.util.Locale locale10 = java.util.Locale.getDefault(category5);
        java.util.Locale locale14 = new java.util.Locale("zh_TW", "Taiwan", "hi!");
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getISO3Language();
        java.lang.String str19 = locale15.getDisplayScript(locale17);
        java.lang.String str20 = locale15.toLanguageTag();
        java.lang.String str21 = locale15.getDisplayVariant();
        boolean boolean22 = locale15.hasExtensions();
        java.lang.String str23 = locale14.getDisplayLanguage(locale15);
        java.lang.String str24 = locale14.getCountry();
        java.util.Locale.setDefault(category5, locale14);
        java.lang.String str26 = locale4.getDisplayScript(locale14);
        java.lang.String str27 = locale0.getDisplayName(locale4);
        java.lang.String str28 = locale4.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals(locale14.toString(), "zh_tw_TAIWAN_hi!");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "und" + "'", str20, "und");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh_tw" + "'", str23, "zh_tw");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "TAIWAN" + "'", str24, "TAIWAN");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Chinese (Taiwan)" + "'", str27, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test09104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09104");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = numberFormat1.isGroupingUsed();
        numberFormat1.setGroupingUsed(true);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        java.math.RoundingMode roundingMode17 = numberFormat9.getRoundingMode();
        numberFormat1.setRoundingMode(roundingMode17);
        java.lang.String[] strArray19 = java.util.Locale.getISOLanguages();
        boolean boolean20 = numberFormat1.equals((java.lang.Object) strArray19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat22 = fractionFormat21.getDenominatorFormat();
        java.util.Locale locale23 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat(numberFormat26, numberFormat28);
        boolean boolean30 = numberFormat28.isGroupingUsed();
        boolean boolean31 = numberFormat28.isGroupingUsed();
        fractionFormat24.setNumeratorFormat(numberFormat28);
        java.lang.Object obj33 = numberFormat28.clone();
        java.lang.Object obj34 = numberFormat28.clone();
        boolean boolean35 = numberFormat28.isParseIntegerOnly();
        fractionFormat21.setNumeratorFormat(numberFormat28);
        java.text.ParseException parseException39 = new java.text.ParseException("1 / 1", 52);
        boolean boolean40 = numberFormat28.equals((java.lang.Object) 52);
        java.util.Locale.Category category41 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale42 = java.util.Locale.getDefault(category41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale43);
        java.util.Locale.setDefault(category41, locale43);
        java.util.Locale locale46 = java.util.Locale.getDefault(category41);
        java.util.Locale locale48 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale48);
        java.lang.String str50 = locale48.getDisplayCountry();
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getIntegerInstance(locale48);
        java.lang.String str52 = locale48.toLanguageTag();
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder54 = builder53.clearExtensions();
        java.util.Locale locale55 = builder53.build();
        java.lang.String str56 = locale55.getScript();
        java.util.Locale locale57 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str58 = locale57.getDisplayLanguage();
        java.lang.String str59 = locale57.toLanguageTag();
        java.util.Locale locale60 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleAttributes();
        java.lang.String str62 = locale60.getISO3Language();
        java.lang.String str63 = locale57.getDisplayScript(locale60);
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        java.lang.String str65 = locale57.getDisplayCountry(locale64);
        java.util.Locale locale67 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str68 = locale64.getDisplayLanguage(locale67);
        java.lang.String str69 = locale55.getDisplayCountry(locale67);
        java.lang.String str70 = locale48.getDisplayVariant(locale55);
        java.util.Locale.setDefault(category41, locale48);
        java.util.Locale locale72 = java.util.Locale.getDefault(category41);
        java.util.Locale locale73 = java.util.Locale.getDefault(category41);
        java.util.Locale locale74 = java.util.Locale.ROOT;
        java.lang.String str75 = locale74.getDisplayScript();
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.lang.String str77 = locale76.getISO3Language();
        java.lang.String str78 = locale74.getDisplayScript(locale76);
        java.util.Locale.setDefault(category41, locale74);
        java.util.Locale locale80 = java.util.Locale.getDefault(category41);
        java.util.Locale locale84 = new java.util.Locale("Chinese (Taiwan)", "\u65e5\u672c", "-1 / 100");
        java.lang.String str85 = locale84.getDisplayVariant();
        java.lang.String str86 = locale84.getLanguage();
        java.text.NumberFormat numberFormat87 = java.text.NumberFormat.getCurrencyInstance(locale84);
        java.lang.String str88 = locale80.getDisplayCountry(locale84);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator89 = numberFormat28.formatToCharacterIterator((java.lang.Object) str88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode17 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode17.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.FORMAT + "'", category41.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_tw_TAIWAN_hi!");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals(locale48.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "und" + "'", str52, "und");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Chinese" + "'", str58, "Chinese");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "zh-TW" + "'", str59, "zh-TW");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zho" + "'", str62, "zho");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Taiwan" + "'", str65, "Taiwan");
        org.junit.Assert.assertEquals(locale67.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Italian" + "'", str68, "Italian");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "kor" + "'", str77, "kor");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
// flaky:         org.junit.Assert.assertEquals(locale84.toString(), "\u65e5\u672c_-1 / 100");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "-1 / 100" + "'", str85, "-1 / 100");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "chinese (taiwan)" + "'", str86, "chinese (taiwan)");
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
    }

    @Test
    public void test09105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09105");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        boolean boolean9 = numberFormat7.equals((java.lang.Object) locale8);
        boolean boolean10 = fraction5.equals((java.lang.Object) locale8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction5.abs();
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        boolean boolean14 = fraction11.equals((java.lang.Object) locale12);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale12);
        java.lang.String str16 = locale12.getVariant();
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.util.Set<java.lang.Character> charSet20 = locale17.getExtensionKeys();
        java.util.Locale locale23 = new java.util.Locale("Overflow trying to convert {0} to fraction ({1}/{2})", "anglais");
        java.lang.String str24 = locale17.getDisplayName(locale23);
        java.lang.String str25 = locale12.getDisplayName(locale23);
        java.lang.String str26 = locale12.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = locale27.stripExtensions();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        java.lang.String str30 = locale12.getDisplayLanguage(locale28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale28);
        java.lang.String str32 = locale28.getISO3Country();
        java.lang.String str33 = locale28.toString();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str19, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertEquals(locale23.toString(), "overflow trying to convert {0} to fraction ({1}/{2})_ANGLAIS");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English (Canada)" + "'", str24, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinese (China)" + "'", str25, "Chinese (China)");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Chinese" + "'", str26, "Chinese");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese" + "'", str30, "Chinese");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "CAN" + "'", str32, "CAN");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "en_CA" + "'", str33, "en_CA");
    }

    @Test
    public void test09106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09106");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category0, locale5);
        java.lang.String str7 = locale5.getISO3Language();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale14.getISO3Language();
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleKeys();
        java.lang.String str17 = locale14.getISO3Country();
        java.util.Locale.Builder builder18 = builder12.setLocale(locale14);
        java.lang.String str20 = locale14.getExtension('a');
        java.lang.String str21 = locale14.getDisplayVariant();
        java.util.Locale locale22 = locale14.stripExtensions();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale22);
        java.lang.String str24 = locale5.getDisplayLanguage(locale22);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fra" + "'", str7, "fra");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str24, "\ud504\ub791\uc2a4\uc5b4");
    }

    @Test
    public void test09107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09107");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(category0, locale9);
        java.util.Locale locale13 = java.util.Locale.getDefault(category0);
        java.lang.String str14 = locale13.getDisplayName();
        java.lang.String str15 = locale13.toLanguageTag();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getNumberInstance(locale13);
        java.lang.String str18 = numberFormat16.format((double) 117L);
        java.math.RoundingMode roundingMode19 = numberFormat16.getRoundingMode();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str11, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English (Canada)" + "'", str14, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "en-CA" + "'", str15, "en-CA");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "117" + "'", str18, "117");
        org.junit.Assert.assertTrue("'" + roundingMode19 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode19.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test09108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09108");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayName(locale3);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale9.getISO3Language();
        java.lang.String str11 = locale7.getDisplayScript(locale9);
        java.lang.String str12 = locale0.getDisplayLanguage(locale9);
        java.util.Locale locale15 = new java.util.Locale("hi!", "org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (0/-1)");
        java.lang.String str16 = locale9.getDisplayVariant(locale15);
        java.util.Locale.setDefault(locale9);
        java.util.Locale locale20 = new java.util.Locale("\uc911\uad6d\uc5b4\uc911\uad6d)", "10");
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        java.lang.String str22 = locale9.getDisplayLanguage(locale20);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        boolean boolean25 = locale23.hasExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.lang.String str29 = locale28.getDisplayScript();
        java.lang.String str30 = locale27.getDisplayCountry(locale28);
        java.util.Set<java.lang.String> strSet31 = locale28.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getIntegerInstance(locale28);
        java.lang.String str33 = locale23.getDisplayScript(locale28);
        java.lang.String str34 = locale23.getDisplayName();
        java.lang.String str35 = locale9.getDisplayVariant(locale23);
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "_HI!");
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "HI!" + "'", str6, "HI!");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(locale15.toString(), "hi!_ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals(locale20.toString(), "\uc911\uad6d\uc5b4\uc911\uad6d)_10");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Korean" + "'", str22, "Korean");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Japan" + "'", str30, "Japan");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test09109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09109");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        float float4 = fraction2.floatValue();
        org.apache.commons.math.fraction.Fraction fraction7 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str8 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction7);
        org.apache.commons.math.fraction.Fraction fraction9 = fraction2.subtract(fraction7);
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.abs();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction13.abs();
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction19.abs();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction13.add(fraction19);
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.negate();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction22.divide(fraction25);
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.negate();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction22.subtract(fraction33);
        org.apache.commons.math.fraction.Fraction fraction38 = new org.apache.commons.math.fraction.Fraction((double) (short) 0, (double) 10, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.abs();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction42.abs();
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.negate();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.abs();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction48.abs();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction42.add(fraction48);
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.negate();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction51.divide(fraction54);
        org.apache.commons.math.fraction.Fraction fraction59 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.negate();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.abs();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction60.abs();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction51.subtract(fraction62);
        long long64 = fraction62.longValue();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction62.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction38.multiply(fraction62);
        org.apache.commons.math.fraction.Fraction fraction67 = fraction33.divide(fraction62);
        org.apache.commons.math.fraction.Fraction fraction70 = new org.apache.commons.math.fraction.Fraction((int) '4', 35);
        org.apache.commons.math.fraction.Fraction fraction71 = fraction33.divide(fraction70);
        org.apache.commons.math.fraction.Fraction fraction72 = fraction2.divide(fraction70);
        org.apache.commons.math.fraction.Fraction fraction73 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction74 = fraction72.add(fraction73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fraction must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1 / 1" + "'", str3, "1 / 1");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-1 / 100" + "'", str8, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
    }

    @Test
    public void test09110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09110");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        int int5 = numberFormat3.getMaximumFractionDigits();
        int int6 = numberFormat3.getMinimumIntegerDigits();
        numberFormat3.setMinimumIntegerDigits((int) (byte) -15);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test09111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09111");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.lang.String str1 = field0.toString();
        java.lang.String str2 = field0.toString();
        java.lang.String str3 = field0.toString();
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str6 = locale4.getISO3Language();
        java.lang.String str8 = locale4.getExtension('u');
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale11);
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale14);
        java.util.Currency currency17 = numberFormat16.getCurrency();
        numberFormat16.setMinimumIntegerDigits(1);
        numberFormat16.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj25 = numberFormat16.parseObject("Japan", parsePosition24);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException29 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str30 = fractionConversionException29.getPattern();
        java.lang.Throwable[] throwableArray31 = fractionConversionException29.getSuppressed();
        java.lang.Object[] objArray32 = fractionConversionException29.getArguments();
        boolean boolean33 = parsePosition24.equals((java.lang.Object) objArray32);
        int int34 = parsePosition24.getIndex();
        int int35 = parsePosition24.getIndex();
        java.lang.Object obj36 = fractionFormat12.parseObject("\ud55c\uad6d\uc5b4", parsePosition24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat38 = properFractionFormat37.getWholeFormat();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        numberFormat40.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = new org.apache.commons.math.fraction.FractionFormat(numberFormat38, numberFormat40);
        java.text.NumberFormat numberFormat45 = fractionFormat44.getNumeratorFormat();
        boolean boolean46 = parsePosition24.equals((java.lang.Object) fractionFormat44);
        java.util.Locale locale47 = java.util.Locale.TAIWAN;
        java.lang.String str48 = locale47.toLanguageTag();
        java.lang.String str49 = locale47.getISO3Country();
        java.lang.String str50 = locale47.toLanguageTag();
        java.lang.String str51 = locale47.getDisplayVariant();
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getInstance(locale47);
        boolean boolean53 = parsePosition24.equals((java.lang.Object) locale47);
        java.lang.Object obj54 = fractionFormat9.parseObject("", parsePosition24);
        parsePosition24.setErrorIndex((int) (short) 2);
        boolean boolean57 = field0.equals((java.lang.Object) parsePosition24);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str1, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str2, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str3, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fra" + "'", str6, "fra");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "TWD");
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str30, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "zh-TW" + "'", str48, "zh-TW");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "TWN" + "'", str49, "TWN");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "zh-TW" + "'", str50, "zh-TW");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test09112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09112");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction8.add(fraction14);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.divide(fraction20);
        int int23 = fraction17.intValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction17.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction4.add(fraction17);
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction29.multiply(fraction33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        boolean boolean37 = numberFormat36.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        boolean boolean39 = fraction33.equals((java.lang.Object) properFractionFormat38);
        java.lang.String str40 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction33);
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.negate();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.abs();
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.negate();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.abs();
        long long51 = fraction49.longValue();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction45.multiply(fraction49);
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.negate();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.abs();
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.negate();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction61.abs();
        long long63 = fraction61.longValue();
        org.apache.commons.math.fraction.Fraction fraction64 = fraction57.multiply(fraction61);
        org.apache.commons.math.fraction.Fraction fraction65 = fraction49.subtract(fraction64);
        org.apache.commons.math.fraction.Fraction fraction66 = fraction64.negate();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction33.subtract(fraction64);
        org.apache.commons.math.fraction.Fraction fraction68 = fraction33.reciprocal();
        int int69 = fraction33.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction4.multiply(fraction33);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1 / 120" + "'", str40, "1 / 120");
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 120 + "'", int69 == 120);
        org.junit.Assert.assertNotNull(fraction70);
    }

    @Test
    public void test09113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09113");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("97");
        java.lang.String str2 = locale1.getDisplayName();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(fractionFormat3);
    }

    @Test
    public void test09114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09114");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("");
        java.lang.String str2 = locale1.getCountry();
        java.lang.String str3 = locale1.getDisplayScript();
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale1.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("zh-TW");
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.lang.String str9 = locale7.getScript();
        java.lang.String str10 = locale7.getDisplayVariant();
        java.lang.String str11 = locale7.getVariant();
        java.lang.String str12 = locale1.getDisplayName(locale7);
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str14 = locale13.getDisplayLanguage();
        java.util.Locale.setDefault(locale13);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getIntegerInstance(locale13);
        java.lang.String str17 = locale13.toLanguageTag();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayScript();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.lang.String str22 = locale18.getDisplayScript(locale20);
        java.lang.String str23 = locale18.toLanguageTag();
        java.util.Set<java.lang.String> strSet24 = locale18.getUnicodeLocaleKeys();
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale25);
        java.util.Set<java.lang.String> strSet27 = locale25.getUnicodeLocaleKeys();
        boolean boolean28 = locale25.hasExtensions();
        java.lang.String str29 = locale18.getDisplayVariant(locale25);
        java.lang.String str30 = locale13.getDisplayVariant(locale25);
        java.util.Locale locale34 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.lang.String str35 = locale34.getDisplayName();
        java.lang.String str36 = locale13.getDisplayName(locale34);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale13);
        java.util.Locale.setDefault(locale13);
        java.lang.String str39 = locale1.getDisplayName(locale13);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u4e2d\u6587" + "'", str14, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh-TW" + "'", str17, "zh-TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "und" + "'", str23, "und");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals(locale34.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1 / 1 (zh-tw)" + "'", str35, "1 / 1 (zh-tw)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese (Taiwan)" + "'", str36, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test09115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09115");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        numberFormat3.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field8);
        java.lang.String str10 = fieldPosition9.toString();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayScript();
        java.lang.String str14 = locale11.getDisplayName(locale12);
        boolean boolean15 = fieldPosition9.equals((java.lang.Object) locale12);
        fieldPosition9.setEndIndex((int) '#');
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction24 = properFractionFormat20.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition23);
        boolean boolean25 = fieldPosition9.equals((java.lang.Object) parsePosition23);
        java.lang.Number number26 = numberFormat3.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition23);
        java.lang.String str28 = numberFormat3.format((long) '#');
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale29);
        java.util.Locale locale34 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale34);
        java.lang.String str37 = fractionFormat35.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat38 = fractionFormat35.getNumeratorFormat();
        fractionFormat32.setNumeratorFormat(numberFormat38);
        numberFormat38.setMaximumFractionDigits(2147483647);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.text.ParsePosition parsePosition45 = new java.text.ParsePosition((int) '4');
        parsePosition45.setIndex(0);
        java.text.FieldPosition fieldPosition49 = new java.text.FieldPosition(1);
        boolean boolean50 = parsePosition45.equals((java.lang.Object) fieldPosition49);
        java.lang.Number number51 = numberFormat38.parse("-100", parsePosition45);
        java.math.RoundingMode roundingMode52 = numberFormat38.getRoundingMode();
        numberFormat3.setRoundingMode(roundingMode52);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str10, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese (Taiwan)" + "'", str14, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNull(fraction24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(number26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "3,500.0000000000000000000000000000000000000000000000000000%" + "'", str28, "3,500.0000000000000000000000000000000000000000000000000000%");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "100 0 / 1" + "'", str37, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + number51 + "' != '" + (-100L) + "'", number51, (-100L));
        org.junit.Assert.assertTrue("'" + roundingMode52 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode52.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test09116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09116");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction13 = properFractionFormat9.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition12);
        java.lang.Object obj14 = numberFormat1.parseObject("zh-TW", parsePosition12);
        numberFormat1.setMinimumIntegerDigits((int) (byte) 0);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        boolean boolean19 = numberFormat18.isParseIntegerOnly();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.lang.String str23 = locale20.getISO3Country();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale20);
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        int int30 = numberFormat29.getMaximumIntegerDigits();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        boolean boolean33 = numberFormat32.isGroupingUsed();
        java.util.Currency currency34 = numberFormat32.getCurrency();
        numberFormat29.setCurrency(currency34);
        java.util.Currency currency36 = numberFormat29.getCurrency();
        int int37 = numberFormat29.getMaximumFractionDigits();
        java.lang.Object obj38 = numberFormat29.clone();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        numberFormat40.setMaximumFractionDigits(100);
        numberFormat40.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str47 = numberFormat40.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat29, numberFormat40);
        numberFormat40.setMinimumIntegerDigits(600);
        numberFormat40.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat18, numberFormat40);
        int int54 = numberFormat18.getMinimumIntegerDigits();
        java.lang.String str56 = numberFormat18.format((double) (byte) 87);
        java.lang.StringBuffer stringBuffer58 = null;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat60);
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance(locale62);
        boolean boolean64 = numberFormat63.isGroupingUsed();
        properFractionFormat61.setWholeFormat(numberFormat63);
        java.text.NumberFormat numberFormat66 = properFractionFormat61.getWholeFormat();
        java.text.ParsePosition parsePosition69 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number70 = numberFormat66.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition69);
        numberFormat66.setMaximumFractionDigits(11);
        numberFormat66.setGroupingUsed(false);
        numberFormat66.setGroupingUsed(false);
        java.text.FieldPosition fieldPosition78 = new java.text.FieldPosition(10);
        int int79 = fieldPosition78.getEndIndex();
        fieldPosition78.setBeginIndex((int) '#');
        java.util.Locale locale82 = java.util.Locale.ENGLISH;
        java.lang.String str83 = locale82.getScript();
        java.util.Locale locale87 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str88 = locale82.getDisplayScript(locale87);
        java.text.NumberFormat numberFormat89 = java.text.NumberFormat.getNumberInstance(locale87);
        int int90 = numberFormat89.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat91 = new org.apache.commons.math.fraction.FractionFormat(numberFormat89);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat92 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat89);
        boolean boolean93 = fieldPosition78.equals((java.lang.Object) numberFormat89);
        fieldPosition78.setEndIndex((int) (byte) 100);
        int int96 = fieldPosition78.getBeginIndex();
        boolean boolean97 = numberFormat66.equals((java.lang.Object) fieldPosition78);
        java.lang.String str98 = fieldPosition78.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer99 = numberFormat18.format((double) 'a', stringBuffer58, fieldPosition78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNull(fraction13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100%" + "'", str47, "100%");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "87" + "'", str56, "87");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNull(number70);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals(locale87.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(numberFormat89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 35 + "'", int96 == 35);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "java.text.FieldPosition[field=10,attribute=null,beginIndex=35,endIndex=100]" + "'", str98, "java.text.FieldPosition[field=10,attribute=null,beginIndex=35,endIndex=100]");
    }

    @Test
    public void test09117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09117");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.text.NumberFormat numberFormat10 = properFractionFormat9.getWholeFormat();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.lang.Object obj15 = numberFormat13.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getCurrencyInstance(locale17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.util.Locale locale21 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale21);
        java.lang.String str24 = fractionFormat22.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat25 = fractionFormat22.getNumeratorFormat();
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.util.Locale locale27 = locale26.stripExtensions();
        java.util.Locale locale29 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale29);
        java.lang.String str31 = locale29.getDisplayCountry();
        java.lang.String str32 = locale26.getDisplayName(locale29);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.lang.String str34 = locale33.getDisplayScript();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale35.getISO3Language();
        java.lang.String str37 = locale33.getDisplayScript(locale35);
        java.lang.String str38 = locale26.getDisplayLanguage(locale35);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getNumberInstance(locale26);
        fractionFormat22.setNumeratorFormat(numberFormat39);
        properFractionFormat19.setWholeFormat(numberFormat39);
        fractionFormat16.setNumeratorFormat(numberFormat39);
        java.text.NumberFormat numberFormat43 = fractionFormat16.getNumeratorFormat();
        java.text.NumberFormat numberFormat44 = fractionFormat16.getDenominatorFormat();
        java.text.NumberFormat.Field field46 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition47 = new java.text.FieldPosition((java.text.Format.Field) field46);
        java.lang.String str48 = fieldPosition47.toString();
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayScript();
        java.lang.String str52 = locale49.getDisplayName(locale50);
        boolean boolean53 = fieldPosition47.equals((java.lang.Object) locale50);
        fieldPosition47.setEndIndex((int) '#');
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getCurrencyInstance(locale56);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        java.text.ParsePosition parsePosition61 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction62 = properFractionFormat58.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition61);
        boolean boolean63 = fieldPosition47.equals((java.lang.Object) parsePosition61);
        java.lang.String str64 = parsePosition61.toString();
        int int65 = parsePosition61.getIndex();
        org.apache.commons.math.fraction.Fraction fraction66 = fractionFormat16.parse("Canada", parsePosition61);
        java.lang.String str67 = parsePosition61.toString();
        parsePosition61.setErrorIndex((int) ' ');
        org.apache.commons.math.fraction.Fraction fraction70 = properFractionFormat9.parse("-2,147,483,647 / 599", parsePosition61);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100 0 / 1" + "'", str24, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale29.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (Taiwan)" + "'", str32, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "kor" + "'", str36, "kor");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str38, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(field46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str48, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Chinese (Taiwan)" + "'", str52, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNull(fraction62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str64, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNull(fraction66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str67, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNotNull(fraction70);
    }

    @Test
    public void test09118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09118");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat6 = fractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = fractionFormat2.getNumeratorFormat();
        java.lang.String str9 = numberFormat7.format((long) 2147483647);
        boolean boolean10 = numberFormat7.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        java.text.NumberFormat numberFormat12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fractionFormat11.setDenominatorFormat(numberFormat12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: denominator format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2,147,483,647" + "'", str9, "2,147,483,647");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test09119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09119");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale5);
        numberFormat7.setMaximumIntegerDigits((int) 'x');
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.text.NumberFormat numberFormat13 = properFractionFormat12.getWholeFormat();
        numberFormat13.setGroupingUsed(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7, numberFormat13);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        boolean boolean23 = numberFormat22.isGroupingUsed();
        properFractionFormat20.setWholeFormat(numberFormat22);
        java.text.NumberFormat numberFormat25 = properFractionFormat20.getWholeFormat();
        java.text.ParsePosition parsePosition28 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number29 = numberFormat25.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition28);
        parsePosition28.setErrorIndex(0);
        parsePosition28.setErrorIndex(1728000);
        java.lang.Object obj34 = numberFormat13.parseObject("\ub300\ub9cc", parsePosition28);
        int int35 = parsePosition28.getIndex();
        int int36 = parsePosition28.getErrorIndex();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale37.getISO3Language();
        java.util.Set<java.lang.String> strSet39 = locale37.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getCurrencyInstance(locale37);
        boolean boolean41 = numberFormat40.isParseIntegerOnly();
        java.math.RoundingMode roundingMode42 = numberFormat40.getRoundingMode();
        boolean boolean44 = numberFormat40.equals((java.lang.Object) "coreano");
        boolean boolean45 = numberFormat40.isGroupingUsed();
        boolean boolean46 = parsePosition28.equals((java.lang.Object) numberFormat40);
        java.util.Locale locale47 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str48 = locale47.getDisplayLanguage();
        java.util.Locale.setDefault(locale47);
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getIntegerInstance(locale47);
        java.lang.String str51 = locale47.toLanguageTag();
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale52.getDisplayScript();
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale54.getISO3Language();
        java.lang.String str56 = locale52.getDisplayScript(locale54);
        java.lang.String str57 = locale52.toLanguageTag();
        java.util.Set<java.lang.String> strSet58 = locale52.getUnicodeLocaleKeys();
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale59);
        java.util.Set<java.lang.String> strSet61 = locale59.getUnicodeLocaleKeys();
        boolean boolean62 = locale59.hasExtensions();
        java.lang.String str63 = locale52.getDisplayVariant(locale59);
        java.lang.String str64 = locale47.getDisplayVariant(locale59);
        java.lang.String str65 = locale47.getDisplayScript();
        boolean boolean66 = parsePosition28.equals((java.lang.Object) locale47);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNull(number29);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "kor" + "'", str38, "kor");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + roundingMode42 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode42.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Chinese" + "'", str48, "Chinese");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "zh-TW" + "'", str51, "zh-TW");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "kor" + "'", str55, "kor");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "und" + "'", str57, "und");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test09120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09120");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("fr-FR");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayCountry(locale4);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale3);
        java.lang.String str8 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance(locale3);
        numberFormat9.setParseIntegerOnly(true);
        int int12 = numberFormat9.getMaximumIntegerDigits();
        int int13 = numberFormat9.getMinimumFractionDigits();
        boolean boolean14 = numberFormat9.isParseIntegerOnly();
        boolean boolean15 = locale1.equals((java.lang.Object) boolean14);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Japan" + "'", str6, "Japan");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c" + "'", str8, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test09121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09121");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        boolean boolean16 = numberFormat15.isParseIntegerOnly();
        numberFormat15.setGroupingUsed(false);
        properFractionFormat3.setWholeFormat(numberFormat15);
        numberFormat15.setMinimumFractionDigits((int) 'u');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        boolean boolean26 = numberFormat25.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str29 = numberFormat25.format(0.008333333333333333d);
        boolean boolean30 = numberFormat25.isParseIntegerOnly();
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj34 = numberFormat25.parseObject("\u65e5\u6587", parsePosition33);
        int int35 = parsePosition33.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction36 = properFractionFormat22.parse("\uc601\uc5b4\uce90\ub098\ub2e4)", parsePosition33);
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) '#');
        java.lang.Object obj40 = properFractionFormat22.parseObject("java.text.NumberFormat$Field(exponent symbol)", parsePosition39);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.lang.Object obj45 = numberFormat43.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = new org.apache.commons.math.fraction.FractionFormat(numberFormat43);
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getCurrencyInstance(locale47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.util.Locale locale51 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale51);
        java.lang.String str54 = fractionFormat52.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat55 = fractionFormat52.getNumeratorFormat();
        java.util.Locale locale56 = java.util.Locale.getDefault();
        java.util.Locale locale57 = locale56.stripExtensions();
        java.util.Locale locale59 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale59);
        java.lang.String str61 = locale59.getDisplayCountry();
        java.lang.String str62 = locale56.getDisplayName(locale59);
        java.util.Locale locale63 = java.util.Locale.ROOT;
        java.lang.String str64 = locale63.getDisplayScript();
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.lang.String str66 = locale65.getISO3Language();
        java.lang.String str67 = locale63.getDisplayScript(locale65);
        java.lang.String str68 = locale56.getDisplayLanguage(locale65);
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getNumberInstance(locale56);
        fractionFormat52.setNumeratorFormat(numberFormat69);
        properFractionFormat49.setWholeFormat(numberFormat69);
        fractionFormat46.setNumeratorFormat(numberFormat69);
        java.text.NumberFormat numberFormat73 = fractionFormat46.getNumeratorFormat();
        java.text.NumberFormat numberFormat74 = fractionFormat46.getDenominatorFormat();
        java.text.ParsePosition parsePosition77 = new java.text.ParsePosition((int) '4');
        parsePosition77.setIndex(0);
        java.text.FieldPosition fieldPosition81 = new java.text.FieldPosition(1);
        boolean boolean82 = parsePosition77.equals((java.lang.Object) fieldPosition81);
        org.apache.commons.math.fraction.Fraction fraction83 = fractionFormat46.parse("it-IT", parsePosition77);
        org.apache.commons.math.fraction.Fraction fraction84 = properFractionFormat22.parse("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)", parsePosition77);
        java.util.Locale locale88 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat89 = java.text.NumberFormat.getPercentInstance(locale88);
        int int90 = numberFormat89.getMinimumIntegerDigits();
        int int91 = numberFormat89.getMinimumFractionDigits();
        properFractionFormat22.setDenominatorFormat(numberFormat89);
        java.text.NumberFormat numberFormat93 = properFractionFormat22.getWholeFormat();
        java.text.NumberFormat numberFormat94 = properFractionFormat22.getWholeFormat();
        java.text.NumberFormat numberFormat95 = properFractionFormat22.getDenominatorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1%" + "'", str29, "1%");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNull(fraction36);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertEquals(locale51.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "100 0 / 1" + "'", str54, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale59.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Chinese (Taiwan)" + "'", str62, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "kor" + "'", str66, "kor");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str68, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(fraction83);
        org.junit.Assert.assertNull(fraction84);
        org.junit.Assert.assertEquals(locale88.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(numberFormat93);
        org.junit.Assert.assertNotNull(numberFormat94);
        org.junit.Assert.assertNotNull(numberFormat95);
    }

    @Test
    public void test09122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09122");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale1);
        java.util.Set<java.lang.Character> charSet7 = locale1.getExtensionKeys();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.lang.Number number10 = numberFormat8.parse("2,147,483,647");
        int int11 = numberFormat8.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8);
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.util.Locale locale17 = new java.util.Locale("zho", "Chinese (Taiwan)", "Overflow trying to convert {0} to fraction ({1}/{2})");
        java.lang.String str18 = locale13.getDisplayLanguage(locale17);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale17);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance();
        numberFormat20.setParseIntegerOnly(true);
        java.math.RoundingMode roundingMode23 = numberFormat20.getRoundingMode();
        int int24 = numberFormat20.getMinimumIntegerDigits();
        java.lang.Object obj25 = numberFormat20.clone();
        java.util.Locale locale29 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        int int31 = numberFormat30.getMaximumIntegerDigits();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale32);
        boolean boolean34 = numberFormat33.isGroupingUsed();
        java.util.Currency currency35 = numberFormat33.getCurrency();
        numberFormat30.setCurrency(currency35);
        java.util.Currency currency37 = numberFormat30.getCurrency();
        java.math.RoundingMode roundingMode38 = numberFormat30.getRoundingMode();
        numberFormat20.setRoundingMode(roundingMode38);
        numberFormat19.setRoundingMode(roundingMode38);
        int int41 = numberFormat19.getMinimumIntegerDigits();
        fractionFormat12.setNumeratorFormat(numberFormat19);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + number10 + "' != '" + 2147483647L + "'", number10, 2147483647L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale17.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Japanese" + "'", str18, "Japanese");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + roundingMode23 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode23.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(locale29.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency37);
        org.junit.Assert.assertEquals(currency37.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode38 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode38.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test09123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09123");
        java.util.Locale locale3 = new java.util.Locale("java.text.parseposition[index=1,errorindex=10]", "\u4e2d\u6587", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(decimal separator),beginIndex=0,endIndex=0]");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        java.util.Locale.setDefault(locale3);
        java.lang.String str6 = locale3.toString();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u4e2d\u6587_java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(decimal separator),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(fractionFormat4);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u4e2d\u6587_java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(decimal separator),beginIndex=0,endIndex=0]" + "'", str6, "\u4e2d\u6587_java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(decimal separator),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test09124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09124");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(17, (int) (byte) 60);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        long long13 = fraction11.longValue();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction7.multiply(fraction11);
        long long15 = fraction11.longValue();
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale16.getDisplayScript();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale18.getISO3Language();
        java.lang.String str20 = locale16.getDisplayScript(locale18);
        java.lang.String str21 = locale16.toLanguageTag();
        java.lang.String str22 = locale16.getDisplayVariant();
        java.lang.String str23 = locale16.getVariant();
        boolean boolean24 = fraction11.equals((java.lang.Object) str23);
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.abs();
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.abs();
        long long35 = fraction33.longValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction29.multiply(fraction33);
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.negate();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.abs();
        long long47 = fraction45.longValue();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction41.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction33.subtract(fraction48);
        org.apache.commons.math.fraction.Fraction fraction52 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str53 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction52);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction33.subtract(fraction52);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction11.divide(fraction33);
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.abs();
        org.apache.commons.math.fraction.Fraction fraction59 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction62 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction65 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.negate();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction62.multiply(fraction66);
        org.apache.commons.math.fraction.Fraction fraction68 = fraction59.add(fraction66);
        org.apache.commons.math.fraction.Fraction fraction69 = fraction59.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction56.divide(fraction69);
        org.apache.commons.math.fraction.Fraction fraction71 = fraction2.multiply(fraction56);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "und" + "'", str21, "und");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 / 100" + "'", str53, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
    }

    @Test
    public void test09125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09125");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.lang.String str5 = locale1.toLanguageTag();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = builder6.build();
        java.lang.String str9 = locale8.getScript();
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.lang.String str12 = locale10.toLanguageTag();
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale13.getISO3Language();
        java.lang.String str16 = locale10.getDisplayScript(locale13);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale10.getDisplayCountry(locale17);
        java.util.Locale locale20 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str21 = locale17.getDisplayLanguage(locale20);
        java.lang.String str22 = locale8.getDisplayCountry(locale20);
        java.lang.String str23 = locale1.getDisplayVariant(locale8);
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayScript();
        java.lang.String str27 = locale24.getDisplayCountry(locale25);
        java.util.Set<java.lang.String> strSet28 = locale25.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getIntegerInstance(locale25);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale25);
        java.util.Set<java.lang.Character> charSet31 = locale25.getExtensionKeys();
        java.lang.String str32 = locale8.getDisplayVariant(locale25);
        java.lang.String str33 = locale25.getDisplayCountry();
        java.lang.String str34 = locale25.getDisplayScript();
        java.util.Set<java.lang.Character> charSet35 = locale25.getExtensionKeys();
        java.lang.String str36 = locale25.toString();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese" + "'", str11, "Chinese");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh-TW" + "'", str12, "zh-TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zho" + "'", str15, "zho");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Taiwan" + "'", str18, "Taiwan");
        org.junit.Assert.assertEquals(locale20.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Italian" + "'", str21, "Italian");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Japan" + "'", str27, "Japan");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test09126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09126");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat14 = properFractionFormat3.getWholeFormat();
        java.util.Locale locale18 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        java.lang.String[] strArray20 = java.util.Locale.getISOCountries();
        boolean boolean21 = numberFormat19.equals((java.lang.Object) strArray20);
        int int22 = numberFormat19.getMinimumIntegerDigits();
        java.util.Currency currency23 = numberFormat19.getCurrency();
        java.util.Locale locale24 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale24);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getInstance(locale26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27, numberFormat29);
        boolean boolean31 = numberFormat29.isGroupingUsed();
        boolean boolean32 = numberFormat29.isGroupingUsed();
        fractionFormat25.setNumeratorFormat(numberFormat29);
        java.lang.Object obj34 = numberFormat29.clone();
        java.lang.Object obj35 = numberFormat29.clone();
        java.util.Currency currency36 = numberFormat29.getCurrency();
        java.util.Locale locale40 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        int int42 = numberFormat41.getMaximumIntegerDigits();
        java.util.Locale locale46 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance(locale46);
        numberFormat47.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency50 = numberFormat47.getCurrency();
        numberFormat41.setCurrency(currency50);
        numberFormat29.setCurrency(currency50);
        numberFormat19.setCurrency(currency50);
        properFractionFormat3.setNumeratorFormat(numberFormat19);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals(locale18.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertEquals(locale40.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertEquals(locale46.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(currency50);
        org.junit.Assert.assertEquals(currency50.toString(), "XXX");
    }

    @Test
    public void test09127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09127");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) '4');
        int int2 = parsePosition1.getIndex();
        java.lang.String str3 = parsePosition1.toString();
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition((-2));
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.List<java.lang.String> strList16 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList14);
        java.lang.String str17 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strList16);
        java.util.Collection<java.lang.String> strCollection18 = null;
        java.util.Locale.FilteringMode filteringMode19 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strCollection18, filteringMode19);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.lang.String str23 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList25 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap24);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strList34);
        java.lang.String str37 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strList36);
        java.util.Collection<java.lang.String> strCollection38 = null;
        java.util.Locale.FilteringMode filteringMode39 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, strCollection38, filteringMode39);
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        java.lang.String str43 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strSet42);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap44 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList45 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, strMap44);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList47 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Locale locale51 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strSet52);
        java.util.Locale.FilteringMode filteringMode54 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags(languageRangeList47, (java.util.Collection<java.lang.String>) strSet52, filteringMode54);
        java.util.Locale locale56 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale56);
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale56);
        java.util.Locale locale61 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str62 = locale56.getDisplayScript(locale61);
        java.util.Set<java.lang.String> strSet63 = locale56.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags(languageRangeList47, (java.util.Collection<java.lang.String>) strSet63);
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags(languageRangeList45, (java.util.Collection<java.lang.String>) strSet63);
        java.lang.String str66 = java.util.Locale.lookupTag(languageRangeList25, (java.util.Collection<java.lang.String>) strList65);
        boolean boolean67 = parsePosition5.equals((java.lang.Object) strList65);
        parsePosition5.setErrorIndex((int) (byte) 120);
        boolean boolean70 = parsePosition1.equals((java.lang.Object) (byte) 120);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.ParsePosition[index=52,errorIndex=-1]" + "'", str3, "java.text.ParsePosition[index=52,errorIndex=-1]");
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + filteringMode19 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode19.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(languageRangeList25);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + filteringMode39 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode39.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(languageRangeList45);
        org.junit.Assert.assertNotNull(languageRangeList47);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
// flaky:         org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertTrue("'" + filteringMode54 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode54.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(fractionFormat59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test09128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09128");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale0.getDisplayCountry(locale3);
        java.lang.String str8 = locale0.getISO3Language();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.String str10 = locale0.getDisplayName();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        numberFormat11.setParseIntegerOnly(false);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "France" + "'", str7, "France");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
        org.junit.Assert.assertNotNull(numberFormat9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str10, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNotNull(numberFormat11);
    }

    @Test
    public void test09129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09129");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.abs();
        long long16 = fraction14.longValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction10.multiply(fraction14);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.negate();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.abs();
        long long28 = fraction26.longValue();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction22.multiply(fraction26);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction14.subtract(fraction29);
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        double double35 = fraction33.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction39 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction40 = fraction33.multiply(fraction39);
        boolean boolean41 = fraction30.equals((java.lang.Object) fraction33);
        java.util.Locale locale42 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str43 = locale42.getDisplayLanguage();
        java.lang.String str44 = locale42.toLanguageTag();
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        java.lang.String str47 = locale45.getISO3Language();
        java.lang.String str48 = locale42.getDisplayScript(locale45);
        java.util.Locale locale49 = java.util.Locale.ITALIAN;
        java.lang.String str50 = locale42.getDisplayCountry(locale49);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale42);
        boolean boolean52 = fraction33.equals((java.lang.Object) locale42);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale42);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale42);
        java.lang.String str55 = locale3.getDisplayLanguage(locale42);
        java.lang.String str56 = locale42.getDisplayName();
        java.lang.String str57 = locale42.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-0.008333333333333333d) + "'", double35 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str43, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "zh-TW" + "'", str44, "zh-TW");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "zho" + "'", str47, "zho");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Taiwan" + "'", str50, "Taiwan");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str56, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str57, "\uc911\uad6d\uc5b4");
    }

    @Test
    public void test09130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09130");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        numberFormat1.setMaximumFractionDigits((int) (byte) 100);
        java.util.Locale locale8 = new java.util.Locale("3,500.0000000000000000000000000000000000000000000000000000%");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.text.NumberFormat.Field field10 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field10);
        int int12 = fieldPosition11.getField();
        java.text.Format.Field field13 = fieldPosition11.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.ZERO;
        boolean boolean15 = field13.equals((java.lang.Object) fraction14);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        numberFormat16.setMaximumIntegerDigits(2147483647);
        int int19 = numberFormat16.getMaximumIntegerDigits();
        numberFormat16.setMaximumIntegerDigits((int) (short) 32);
        boolean boolean22 = fraction14.equals((java.lang.Object) numberFormat16);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getCurrencyInstance(locale23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        java.text.ParsePosition parsePosition28 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction29 = properFractionFormat25.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        boolean boolean35 = numberFormat34.isGroupingUsed();
        properFractionFormat32.setWholeFormat(numberFormat34);
        java.text.NumberFormat numberFormat37 = properFractionFormat32.getWholeFormat();
        properFractionFormat25.setWholeFormat(numberFormat37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        boolean boolean44 = numberFormat43.isGroupingUsed();
        properFractionFormat41.setWholeFormat(numberFormat43);
        java.text.NumberFormat numberFormat46 = properFractionFormat41.getWholeFormat();
        java.util.Currency currency47 = numberFormat46.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = new org.apache.commons.math.fraction.FractionFormat(numberFormat46);
        java.lang.Object obj49 = numberFormat46.clone();
        boolean boolean50 = numberFormat46.isParseIntegerOnly();
        properFractionFormat25.setWholeFormat(numberFormat46);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance(locale52);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        numberFormat53.setMaximumFractionDigits(100);
        java.lang.String str58 = numberFormat53.format((long) 100);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16, numberFormat46, numberFormat53);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat9, numberFormat46);
        java.lang.String str62 = numberFormat1.format((double) (short) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat64 = properFractionFormat63.getWholeFormat();
        numberFormat64.setMaximumFractionDigits(200);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals(locale8.toString(), "3,500.0000000000000000000000000000000000000000000000000000%");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(field13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNull(fraction29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "10,000%" + "'", str58, "10,000%");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1,000%" + "'", str62, "1,000%");
        org.junit.Assert.assertNotNull(numberFormat64);
    }

    @Test
    public void test09131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09131");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str4 = locale0.getDisplayScript();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
    }

    @Test
    public void test09132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09132");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayScript();
        java.lang.String str10 = locale7.getDisplayCountry(locale8);
        java.util.Set<java.lang.String> strSet11 = locale8.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getIntegerInstance(locale8);
        int int13 = numberFormat12.getMaximumIntegerDigits();
        int int14 = numberFormat12.getMaximumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12);
        boolean boolean16 = languageRange1.equals((java.lang.Object) fractionFormat15);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Japan" + "'", str10, "Japan");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09133");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        boolean boolean19 = numberFormat18.isGroupingUsed();
        properFractionFormat16.setWholeFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat11, numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.lang.Object obj23 = numberFormat18.clone();
        java.lang.Object obj24 = numberFormat18.clone();
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.lang.String str32 = locale30.toLanguageTag();
        java.util.Locale locale33 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str35 = locale33.getISO3Language();
        java.lang.String str36 = locale30.getDisplayScript(locale33);
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.lang.String str38 = locale30.getDisplayCountry(locale37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        java.math.RoundingMode roundingMode41 = numberFormat40.getRoundingMode();
        numberFormat29.setRoundingMode(roundingMode41);
        numberFormat18.setRoundingMode(roundingMode41);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str31, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zh-TW" + "'", str32, "zh-TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "zho" + "'", str35, "zho");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Taiwan" + "'", str38, "Taiwan");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + roundingMode41 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode41.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test09134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09134");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale1);
        java.util.Set<java.lang.Character> charSet7 = locale1.getExtensionKeys();
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9, numberFormat11);
        boolean boolean13 = numberFormat11.isGroupingUsed();
        boolean boolean14 = numberFormat11.isGroupingUsed();
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj18 = numberFormat11.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat21 = properFractionFormat20.getDenominatorFormat();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        boolean boolean28 = numberFormat27.isGroupingUsed();
        properFractionFormat25.setWholeFormat(numberFormat27);
        java.text.NumberFormat numberFormat30 = properFractionFormat25.getWholeFormat();
        java.lang.String str32 = numberFormat30.format((double) 1.0f);
        numberFormat30.setMaximumIntegerDigits((int) (byte) 100);
        numberFormat30.setParseIntegerOnly(false);
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category39 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale40 = java.util.Locale.getDefault(category39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale41);
        java.util.Locale.setDefault(category39, locale41);
        java.util.Locale locale44 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category39, locale44);
        java.lang.String str46 = locale38.getDisplayLanguage(locale44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale44);
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getCurrencyInstance(locale49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.text.ParsePosition parsePosition54 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction55 = properFractionFormat51.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition54);
        java.lang.Object obj56 = fractionFormat47.parseObject("214,748,364,700%", parsePosition54);
        java.lang.String str57 = parsePosition54.toString();
        java.lang.Object obj58 = numberFormat30.parseObject("600", parsePosition54);
        org.apache.commons.math.fraction.Fraction fraction59 = properFractionFormat20.parse("\uc911\uad6d\uc5b4", parsePosition54);
        java.lang.Object obj60 = numberFormat11.parseObject("10,000%", parsePosition54);
        int int61 = parsePosition54.getIndex();
        int int62 = parsePosition54.getErrorIndex();
        java.util.Locale locale63 = java.util.Locale.ROOT;
        java.lang.String str64 = locale63.getDisplayScript();
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.lang.String str66 = locale65.getISO3Language();
        java.lang.String str67 = locale63.getDisplayScript(locale65);
        java.lang.String str68 = locale65.getScript();
        java.util.Locale.setDefault(locale65);
        boolean boolean70 = parsePosition54.equals((java.lang.Object) locale65);
        java.util.Set<java.lang.Character> charSet71 = locale65.getExtensionKeys();
        java.lang.String str72 = locale1.getDisplayScript(locale65);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "100%" + "'", str32, "100%");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.FORMAT + "'", category39.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale40);
// flaky:         org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "anglais" + "'", str46, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNull(fraction55);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=3]" + "'", str57, "java.text.ParsePosition[index=1,errorIndex=3]");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(fraction59);
        org.junit.Assert.assertEquals("'" + obj60 + "' != '" + 0L + "'", obj60, 0L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 7 + "'", int61 == 7);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "kor" + "'", str66, "kor");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(charSet71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test09135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09135");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\uc911\uad6d\uc5b4");
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.getDefault(category2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.util.Locale.setDefault(category2, locale4);
        java.util.Locale locale7 = java.util.Locale.getDefault(category2);
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        boolean boolean9 = locale7.hasExtensions();
        java.util.Locale locale10 = locale7.stripExtensions();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = locale11.getScript();
        java.util.Locale locale16 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str17 = locale11.getDisplayScript(locale16);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getNumberInstance(locale16);
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet20 = locale16.getExtensionKeys();
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale locale22 = java.util.Locale.PRC;
        java.lang.String str23 = locale21.getDisplayName(locale22);
        java.lang.String str24 = locale16.getDisplayName(locale21);
        java.util.Locale locale26 = new java.util.Locale("-1 / 120");
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder27.setScript("");
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.lang.String str32 = locale30.toLanguageTag();
        java.util.Locale locale33 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str35 = locale33.getISO3Language();
        java.lang.String str36 = locale30.getDisplayScript(locale33);
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.lang.String str38 = locale30.getDisplayCountry(locale37);
        java.util.Locale.Builder builder39 = builder27.setLocale(locale37);
        java.lang.String str40 = locale37.getDisplayScript();
        java.lang.String str41 = locale26.getDisplayLanguage(locale37);
        java.lang.String str42 = locale26.getDisplayVariant();
        java.lang.String str43 = locale16.getDisplayName(locale26);
        java.lang.String str44 = locale10.getDisplayScript(locale26);
        java.util.Locale locale45 = locale10.stripExtensions();
        java.lang.String str46 = locale1.getDisplayCountry(locale10);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(locale16.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str23, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str24, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertEquals(locale26.toString(), "-1 / 120");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str31, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zh-TW" + "'", str32, "zh-TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "zho" + "'", str35, "zho");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Taiwan" + "'", str38, "Taiwan");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1 / 120" + "'", str41, "-1 / 120");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str43, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test09136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09136");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str5 = locale0.getCountry();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale13 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category6, locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.PRC;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.util.Locale.setDefault(category6, locale15);
        java.util.Locale locale19 = java.util.Locale.getDefault(category6);
        java.lang.String str20 = locale0.getDisplayCountry(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat22 = fractionFormat21.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        boolean boolean25 = numberFormat24.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        boolean boolean27 = numberFormat24.isGroupingUsed();
        java.lang.String str29 = numberFormat24.format((double) 10L);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale30.getISO3Language();
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance(locale30);
        boolean boolean34 = numberFormat33.isParseIntegerOnly();
        java.math.RoundingMode roundingMode35 = numberFormat33.getRoundingMode();
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24, numberFormat33);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat22, numberFormat33);
        java.util.Currency currency39 = numberFormat33.getCurrency();
        java.math.RoundingMode roundingMode40 = numberFormat33.getRoundingMode();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals(locale13.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str17, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1,000%" + "'", str29, "1,000%");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "kor" + "'", str31, "kor");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + roundingMode35 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode35.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode40 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode40.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test09137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09137");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale3);
        java.util.Currency currency6 = numberFormat5.getCurrency();
        numberFormat5.setMinimumIntegerDigits(1);
        numberFormat5.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj14 = numberFormat5.parseObject("Japan", parsePosition13);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException18 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str19 = fractionConversionException18.getPattern();
        java.lang.Throwable[] throwableArray20 = fractionConversionException18.getSuppressed();
        java.lang.Object[] objArray21 = fractionConversionException18.getArguments();
        boolean boolean22 = parsePosition13.equals((java.lang.Object) objArray21);
        int int23 = parsePosition13.getIndex();
        int int24 = parsePosition13.getIndex();
        java.lang.Object obj25 = fractionFormat1.parseObject("\ud55c\uad6d\uc5b4", parsePosition13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat27 = properFractionFormat26.getWholeFormat();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        numberFormat29.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27, numberFormat29);
        java.text.NumberFormat numberFormat34 = fractionFormat33.getNumeratorFormat();
        boolean boolean35 = parsePosition13.equals((java.lang.Object) fractionFormat33);
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.lang.String str37 = locale36.toLanguageTag();
        java.lang.String str38 = locale36.getISO3Country();
        java.lang.String str39 = locale36.toLanguageTag();
        java.lang.String str40 = locale36.getDisplayVariant();
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getInstance(locale36);
        boolean boolean42 = parsePosition13.equals((java.lang.Object) locale36);
        java.util.Locale.setDefault(locale36);
        java.lang.String str44 = locale36.getISO3Country();
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getNumberInstance(locale36);
        java.lang.Class<?> wildcardClass46 = locale36.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "TWD");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str19, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "zh-TW" + "'", str37, "zh-TW");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "TWN" + "'", str38, "TWN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "zh-TW" + "'", str39, "zh-TW");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "TWN" + "'", str44, "TWN");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test09138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09138");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale7 = new java.util.Locale("java.text.parseexception: zh_tw");
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault(category0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.lang.String str11 = locale9.getDisplayLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals(locale7.toString(), "java.text.parseexception: zh_tw");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "java.text.parseexception: zh_tw");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.text.parseexception: zh_tw" + "'", str11, "java.text.parseexception: zh_tw");
    }

    @Test
    public void test09139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09139");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number11 = numberFormat7.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition10);
        parsePosition10.setIndex((int) ' ');
        int int14 = parsePosition10.getErrorIndex();
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale17);
        java.util.Locale.setDefault(category15, locale17);
        java.util.Locale locale22 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category15, locale22);
        java.util.Locale locale24 = java.util.Locale.getDefault(category15);
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.lang.String str26 = locale25.getScript();
        java.util.Locale locale30 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str31 = locale25.getDisplayScript(locale30);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getNumberInstance(locale30);
        java.util.Set<java.lang.String> strSet33 = locale30.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet34 = locale30.getExtensionKeys();
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Locale locale36 = java.util.Locale.PRC;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        java.lang.String str38 = locale30.getDisplayName(locale35);
        java.util.Locale locale39 = locale35.stripExtensions();
        java.util.Locale locale40 = java.util.Locale.JAPAN;
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale41.getDisplayScript();
        java.lang.String str43 = locale40.getDisplayCountry(locale41);
        java.util.Set<java.lang.String> strSet44 = locale41.getUnicodeLocaleAttributes();
        java.lang.String str45 = locale39.getDisplayVariant(locale41);
        java.lang.String str46 = locale39.getDisplayCountry();
        java.lang.String str47 = locale39.getScript();
        java.lang.String str48 = locale39.getLanguage();
        java.util.Locale locale52 = new java.util.Locale("zho", "Chinese (Taiwan)", "Overflow trying to convert {0} to fraction ({1}/{2})");
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleKeys();
        java.lang.String str54 = locale39.getDisplayVariant(locale52);
        java.util.Locale.setDefault(category15, locale52);
        java.util.Locale locale56 = java.util.Locale.JAPAN;
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.lang.String str58 = locale57.getDisplayScript();
        java.lang.String str59 = locale56.getDisplayCountry(locale57);
        java.util.Locale locale60 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str61 = locale60.getDisplayLanguage();
        java.util.Locale locale62 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str63 = locale60.getDisplayCountry(locale62);
        java.lang.String str64 = locale57.getDisplayName(locale62);
        java.lang.String str65 = locale62.getScript();
        java.util.Locale locale69 = new java.util.Locale("en", "11,700%", "zho");
        boolean boolean70 = locale69.hasExtensions();
        java.lang.String str71 = locale62.getDisplayLanguage(locale69);
        java.lang.String str72 = locale62.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet73 = locale62.getExtensionKeys();
        java.util.Locale.setDefault(category15, locale62);
        java.util.Locale locale75 = java.util.Locale.getDefault(category15);
        boolean boolean76 = parsePosition10.equals((java.lang.Object) category15);
        java.util.Locale locale77 = java.util.Locale.getDefault(category15);
        java.util.Locale locale78 = java.util.Locale.getDefault(category15);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(number11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals(locale22.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals(locale30.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str37, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str38, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Japan" + "'", str43, "Japan");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u52a0\u62ff\u5927" + "'", str46, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "en" + "'", str48, "en");
        org.junit.Assert.assertEquals(locale52.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Japan" + "'", str59, "Japan");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u4e2d\u6587" + "'", str61, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Taiwan" + "'", str63, "Taiwan");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals(locale69.toString(), "en_11,700%_zho");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "French" + "'", str71, "French");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u52a0\u62ff\u5927" + "'", str72, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertNotNull(charSet73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr_CA");
    }

    @Test
    public void test09140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09140");
        java.util.Locale locale1 = new java.util.Locale("3,500.0%_2,147,483,647 / 1_100% (ZH-TW)");
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        boolean boolean5 = numberFormat3.equals((java.lang.Object) locale4);
        java.util.Locale locale7 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.lang.String str9 = locale7.getDisplayCountry();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.lang.String str11 = locale4.getDisplayVariant(locale7);
        java.lang.String str12 = locale7.getCountry();
        java.lang.String str13 = locale7.getISO3Language();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        boolean boolean16 = locale14.hasExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale19.getDisplayScript();
        java.lang.String str21 = locale18.getDisplayCountry(locale19);
        java.util.Set<java.lang.String> strSet22 = locale19.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale19);
        java.lang.String str24 = locale14.getDisplayScript(locale19);
        java.lang.String str25 = locale7.getDisplayLanguage(locale19);
        java.util.Locale locale28 = new java.util.Locale("-200%", "\244 120.00 \244 0.00 / \244 1.00");
        java.lang.String str29 = locale19.getDisplayName(locale28);
        java.lang.String str30 = locale1.getDisplayLanguage(locale19);
        org.junit.Assert.assertEquals(locale1.toString(), "3,500.0%_2,147,483,647 / 1_100% (zh-tw)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Japan" + "'", str21, "Japan");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals(locale28.toString(), "-200%_\244 120.00 \244 0.00 / \244 1.00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "3,500.0%_2,147,483,647 / 1_100% (zh-tw)" + "'", str30, "3,500.0%_2,147,483,647 / 1_100% (zh-tw)");
    }

    @Test
    public void test09141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09141");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        java.lang.String str3 = numberFormat0.format(1.0d);
        int int4 = numberFormat0.getMinimumIntegerDigits();
        int int5 = numberFormat0.getMinimumFractionDigits();
        java.lang.String str7 = numberFormat0.format((long) (byte) -101);
        java.lang.StringBuffer stringBuffer9 = null;
        java.text.NumberFormat.Field field10 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field10);
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition((java.text.Format.Field) field10, 1);
        java.text.FieldPosition fieldPosition15 = new java.text.FieldPosition((java.text.Format.Field) field10, (int) (short) 100);
        java.text.FieldPosition fieldPosition16 = new java.text.FieldPosition((java.text.Format.Field) field10);
        java.lang.String str17 = field10.toString();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency19 = numberFormat18.getCurrency();
        java.lang.String str21 = numberFormat18.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.text.NumberFormat numberFormat23 = properFractionFormat22.getWholeFormat();
        java.text.NumberFormat numberFormat24 = properFractionFormat22.getWholeFormat();
        boolean boolean25 = field10.equals((java.lang.Object) numberFormat24);
        java.text.FieldPosition fieldPosition26 = new java.text.FieldPosition((java.text.Format.Field) field10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer27 = numberFormat0.format((long) 20, stringBuffer9, fieldPosition26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
        org.junit.Assert.assertEquals(currency1.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100 %" + "'", str3, "100 %");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-10\240100 %" + "'", str7, "-10\240100 %");
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.text.NumberFormat$Field(grouping separator)" + "'", str17, "java.text.NumberFormat$Field(grouping separator)");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(currency19);
        org.junit.Assert.assertEquals(currency19.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 %" + "'", str21, "100 %");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09142");
        java.util.Locale locale2 = new java.util.Locale("France", "");
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale7);
        java.util.Currency currency10 = numberFormat9.getCurrency();
        numberFormat9.setMinimumIntegerDigits(1);
        numberFormat9.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj18 = numberFormat9.parseObject("Japan", parsePosition17);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException22 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str23 = fractionConversionException22.getPattern();
        java.lang.Throwable[] throwableArray24 = fractionConversionException22.getSuppressed();
        java.lang.Object[] objArray25 = fractionConversionException22.getArguments();
        boolean boolean26 = parsePosition17.equals((java.lang.Object) objArray25);
        int int27 = parsePosition17.getIndex();
        int int28 = parsePosition17.getIndex();
        java.lang.Object obj29 = fractionFormat5.parseObject("\ud55c\uad6d\uc5b4", parsePosition17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat31 = properFractionFormat30.getWholeFormat();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        numberFormat33.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = new org.apache.commons.math.fraction.FractionFormat(numberFormat31, numberFormat33);
        java.text.NumberFormat numberFormat38 = fractionFormat37.getNumeratorFormat();
        boolean boolean39 = parsePosition17.equals((java.lang.Object) fractionFormat37);
        java.util.Locale locale40 = java.util.Locale.TAIWAN;
        java.lang.String str41 = locale40.toLanguageTag();
        java.lang.String str42 = locale40.getISO3Country();
        java.lang.String str43 = locale40.toLanguageTag();
        java.lang.String str44 = locale40.getDisplayVariant();
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getInstance(locale40);
        boolean boolean46 = parsePosition17.equals((java.lang.Object) locale40);
        java.util.Locale locale49 = new java.util.Locale("France", "CHINESE (TAIWAN)");
        java.lang.String str50 = locale49.getCountry();
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getIntegerInstance(locale49);
        java.util.Locale.setDefault(locale49);
        boolean boolean53 = parsePosition17.equals((java.lang.Object) locale49);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getNumberInstance(locale49);
        java.util.Locale.setDefault(category3, locale49);
        java.lang.String str56 = locale2.getDisplayCountry(locale49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale locale59 = new java.util.Locale("-10\240100 %");
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getInstance(locale59);
        fractionFormat57.setNumeratorFormat(numberFormat60);
        org.junit.Assert.assertEquals(locale2.toString(), "france");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "TWD");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str23, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zh-TW" + "'", str41, "zh-TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "TWN" + "'", str42, "TWN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "zh-TW" + "'", str43, "zh-TW");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals(locale49.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "CHINESE (TAIWAN)" + "'", str50, "CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertEquals(locale59.toString(), "-10\240100 %");
        org.junit.Assert.assertNotNull(numberFormat60);
    }

    @Test
    public void test09143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09143");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        boolean boolean5 = numberFormat3.isGroupingUsed();
        boolean boolean6 = numberFormat3.isGroupingUsed();
        numberFormat3.setMinimumFractionDigits(1);
        numberFormat3.setMaximumFractionDigits(3);
        java.lang.String str12 = numberFormat3.format((long) 35);
        java.util.Locale locale17 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        numberFormat18.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str22 = numberFormat18.format((double) 0.0f);
        int int23 = numberFormat18.getMaximumIntegerDigits();
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale24);
        java.util.Currency currency27 = numberFormat26.getCurrency();
        numberFormat26.setMinimumIntegerDigits(1);
        java.text.NumberFormat numberFormat30 = null;
        java.util.Locale locale34 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        numberFormat35.setMinimumIntegerDigits((int) (short) -1);
        boolean boolean38 = numberFormat35.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = new org.apache.commons.math.fraction.FractionFormat(numberFormat30, numberFormat35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat26, numberFormat30);
        java.util.Locale locale45 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale45);
        int int47 = numberFormat46.getMaximumIntegerDigits();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        boolean boolean50 = numberFormat49.isGroupingUsed();
        java.util.Currency currency51 = numberFormat49.getCurrency();
        numberFormat46.setCurrency(currency51);
        java.util.Currency currency53 = numberFormat46.getCurrency();
        java.math.RoundingMode roundingMode54 = numberFormat46.getRoundingMode();
        java.text.ParsePosition parsePosition57 = new java.text.ParsePosition((int) 'a');
        java.lang.String str58 = parsePosition57.toString();
        java.lang.String str59 = parsePosition57.toString();
        java.lang.Object obj60 = numberFormat46.parseObject("zho", parsePosition57);
        java.lang.Object obj61 = numberFormat18.parseObject("", parsePosition57);
        int int62 = parsePosition57.getErrorIndex();
        java.lang.Object obj63 = numberFormat3.parseObject("\u53f0\u6e7e", parsePosition57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj65 = numberFormat3.parseObject("taiwan_ZH_TW_10,000%");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "3,500.0%" + "'", str12, "3,500.0%");
        org.junit.Assert.assertEquals(locale17.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0%" + "'", str22, "0%");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "TWD");
        org.junit.Assert.assertEquals(locale34.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals(locale45.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(currency51);
        org.junit.Assert.assertEquals(currency51.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode54 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode54.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str58, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str59, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 97 + "'", int62 == 97);
        org.junit.Assert.assertNull(obj63);
    }

    @Test
    public void test09144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09144");
        java.util.Locale locale1 = new java.util.Locale("United Kingdom");
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale2.getDisplayCountry(locale3);
        java.util.Set<java.lang.String> strSet6 = locale3.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        boolean boolean8 = locale3.hasExtensions();
        java.util.Locale locale11 = new java.util.Locale("anglais", "kor");
        java.lang.String str12 = locale3.getDisplayLanguage(locale11);
        java.text.NumberFormat.Field field13 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition((java.text.Format.Field) field13);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale15);
        boolean boolean17 = field13.equals((java.lang.Object) locale15);
        java.util.Set<java.lang.String> strSet18 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale15.getISO3Language();
        java.util.Locale locale20 = locale15.stripExtensions();
        java.lang.String str21 = locale11.getDisplayName(locale20);
        java.lang.String str22 = locale20.getDisplayLanguage();
        java.lang.String str23 = locale1.getDisplayVariant(locale20);
        org.junit.Assert.assertEquals(locale1.toString(), "united kingdom");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Japan" + "'", str5, "Japan");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals(locale11.toString(), "anglais_KOR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(field13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "eng" + "'", str19, "eng");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "anglais (KOR)" + "'", str21, "anglais (KOR)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English" + "'", str22, "English");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test09145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09145");
        java.util.Locale locale3 = new java.util.Locale("1 / 100", "france (CHINESE (TAIWAN))", "java.text.FieldPosition[field=10,attribute=java.text.NumberFormat$Field(currency),beginIndex=10,endIndex=0]");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        java.lang.String str5 = locale3.getCountry();
        java.lang.String str6 = locale3.getDisplayName();
        org.junit.Assert.assertEquals(locale3.toString(), "1 / 100_FRANCE (CHINESE (TAIWAN))_java.text.FieldPosition[field=10,attribute=java.text.NumberFormat$Field(currency),beginIndex=10,endIndex=0]");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FRANCE (CHINESE (TAIWAN))" + "'", str5, "FRANCE (CHINESE (TAIWAN))");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1 / 100 (FRANCE (CHINESE (TAIWAN)),java.text.FieldPosition[field=10,attribute=java.text.NumberFormat$Field(currency),beginIndex=10,endIndex=0])" + "'", str6, "1 / 100 (FRANCE (CHINESE (TAIWAN)),java.text.FieldPosition[field=10,attribute=java.text.NumberFormat$Field(currency),beginIndex=10,endIndex=0])");
    }

    @Test
    public void test09146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09146");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction4.abs();
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        long long23 = fraction21.longValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction17.multiply(fraction21);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction4.multiply(fraction24);
        org.apache.commons.math.fraction.Fraction fraction29 = new org.apache.commons.math.fraction.Fraction((double) (-1.0f), (double) 10, (int) (byte) -1);
        int int30 = fraction29.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction25.subtract(fraction29);
        int int32 = fraction25.intValue();
        org.apache.commons.math.fraction.Fraction fraction36 = new org.apache.commons.math.fraction.Fraction((double) (short) 1, (double) (byte) 100, 117);
        int int37 = fraction36.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction40 = new org.apache.commons.math.fraction.Fraction(11, (int) (byte) 87);
        org.apache.commons.math.fraction.Fraction fraction41 = fraction36.subtract(fraction40);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction25.add(fraction41);
        int int43 = fraction42.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.negate();
        double double48 = fraction46.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction46.abs();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.abs();
        org.apache.commons.math.fraction.Fraction fraction53 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.negate();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.abs();
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.negate();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.abs();
        long long61 = fraction59.longValue();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction55.multiply(fraction59);
        org.apache.commons.math.fraction.Fraction fraction63 = fraction55.abs();
        org.apache.commons.math.fraction.Fraction fraction66 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction67 = fraction66.negate();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction67.abs();
        org.apache.commons.math.fraction.Fraction fraction71 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction72 = fraction71.negate();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction72.abs();
        long long74 = fraction72.longValue();
        org.apache.commons.math.fraction.Fraction fraction75 = fraction68.multiply(fraction72);
        org.apache.commons.math.fraction.Fraction fraction76 = fraction55.multiply(fraction75);
        java.text.NumberFormat.Field field77 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition79 = new java.text.FieldPosition((java.text.Format.Field) field77, (int) '#');
        java.text.Format.Field field80 = fieldPosition79.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction83 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction86 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction89 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction90 = fraction89.negate();
        org.apache.commons.math.fraction.Fraction fraction91 = fraction86.multiply(fraction90);
        org.apache.commons.math.fraction.Fraction fraction92 = fraction83.add(fraction90);
        boolean boolean93 = field80.equals((java.lang.Object) fraction83);
        java.lang.String str94 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction83);
        org.apache.commons.math.fraction.Fraction fraction95 = fraction76.multiply(fraction83);
        org.apache.commons.math.fraction.Fraction fraction96 = fraction49.add(fraction83);
        org.apache.commons.math.fraction.Fraction fraction97 = fraction83.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction98 = fraction83.reciprocal();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction99 = fraction42.multiply(fraction83);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: overflow: mul");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50112000 + "'", int43 == 50112000);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-0.008333333333333333d) + "'", double48 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(field77);
        org.junit.Assert.assertNotNull(field80);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertNotNull(fraction89);
        org.junit.Assert.assertNotNull(fraction90);
        org.junit.Assert.assertNotNull(fraction91);
        org.junit.Assert.assertNotNull(fraction92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "-1 / 120" + "'", str94, "-1 / 120");
        org.junit.Assert.assertNotNull(fraction95);
        org.junit.Assert.assertNotNull(fraction96);
        org.junit.Assert.assertNotNull(fraction97);
        org.junit.Assert.assertNotNull(fraction98);
    }

    @Test
    public void test09147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09147");
        java.util.Locale locale2 = new java.util.Locale("France", "CHINESE (TAIWAN)");
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.lang.String str4 = locale2.getVariant();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getNumberInstance(locale2);
        int int6 = numberFormat5.getMinimumIntegerDigits();
        numberFormat5.setGroupingUsed(true);
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        numberFormat14.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str18 = numberFormat14.format((double) 0.0f);
        java.util.Locale locale22 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        int int24 = numberFormat23.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23);
        java.text.NumberFormat numberFormat26 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat23, numberFormat26);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException30 = new org.apache.commons.math.fraction.FractionConversionException(0.0d, 10);
        boolean boolean31 = numberFormat23.equals((java.lang.Object) 10);
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getInstance(locale32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33, numberFormat35);
        int int37 = numberFormat33.getMaximumIntegerDigits();
        java.util.Locale locale38 = java.util.Locale.JAPAN;
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.lang.String str40 = locale39.getDisplayScript();
        java.lang.String str41 = locale38.getDisplayCountry(locale39);
        java.util.Set<java.lang.String> strSet42 = locale39.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getIntegerInstance(locale39);
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getInstance(locale39);
        java.util.Set<java.lang.Character> charSet45 = locale39.getExtensionKeys();
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getIntegerInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23, numberFormat33, numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33);
        java.text.NumberFormat numberFormat49 = fractionFormat48.getNumeratorFormat();
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.lang.String str51 = locale50.getScript();
        java.util.Locale locale55 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str56 = locale50.getDisplayScript(locale55);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getNumberInstance(locale55);
        java.util.Set<java.lang.String> strSet58 = locale55.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet59 = locale55.getExtensionKeys();
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.util.Locale locale61 = java.util.Locale.PRC;
        java.lang.String str62 = locale60.getDisplayName(locale61);
        java.lang.String str63 = locale55.getDisplayName(locale60);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.lang.String str65 = locale64.getISO3Language();
        java.util.Set<java.lang.Character> charSet66 = locale64.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale64);
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale64);
        java.lang.String str69 = locale60.getDisplayScript(locale64);
        boolean boolean70 = numberFormat49.equals((java.lang.Object) locale60);
        java.text.ParsePosition parsePosition73 = new java.text.ParsePosition((int) 'a');
        java.lang.String str74 = parsePosition73.toString();
        java.util.Locale.Builder builder75 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder76 = builder75.clearExtensions();
        java.util.Locale.Builder builder77 = builder75.clear();
        java.util.Locale.Builder builder78 = builder77.clear();
        boolean boolean79 = parsePosition73.equals((java.lang.Object) builder78);
        java.util.Locale.Category category80 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale81 = java.util.Locale.getDefault(category80);
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat83 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale82);
        java.util.Locale.setDefault(category80, locale82);
        java.util.Locale locale85 = java.util.Locale.getDefault(category80);
        java.util.Set<java.lang.String> strSet86 = locale85.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat87 = java.text.NumberFormat.getPercentInstance(locale85);
        boolean boolean88 = parsePosition73.equals((java.lang.Object) locale85);
        parsePosition73.setErrorIndex((int) (short) 0);
        java.lang.String str91 = parsePosition73.toString();
        java.lang.Number number92 = numberFormat49.parse("100 / 1", parsePosition73);
        int int93 = parsePosition73.getIndex();
        java.lang.Number number94 = numberFormat5.parse("Chinesisch", parsePosition73);
        org.junit.Assert.assertEquals(locale2.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0%" + "'", str18, "0%");
        org.junit.Assert.assertEquals(locale22.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Japan" + "'", str41, "Japan");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals(locale55.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(charSet59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str62, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str63, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "kor" + "'", str65, "kor");
        org.junit.Assert.assertNotNull(charSet66);
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertNotNull(fractionFormat68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str74, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + category80 + "' != '" + java.util.Locale.Category.FORMAT + "'", category80.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat83);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=0]" + "'", str91, "java.text.ParsePosition[index=97,errorIndex=0]");
        org.junit.Assert.assertNull(number92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 97 + "'", int93 == 97);
        org.junit.Assert.assertNull(number94);
    }

    @Test
    public void test09148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09148");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.lang.String str10 = locale2.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance();
        numberFormat14.setParseIntegerOnly(true);
        java.lang.Object obj17 = numberFormat14.clone();
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.lang.String str19 = locale18.toLanguageTag();
        java.lang.String str21 = locale18.getExtension('x');
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale18);
        java.lang.String str24 = numberFormat22.format((long) 1);
        boolean boolean25 = numberFormat14.equals((java.lang.Object) 1);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale28.getISO3Language();
        java.lang.String str30 = locale26.getDisplayScript(locale28);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale26);
        numberFormat31.setMaximumIntegerDigits(3);
        java.math.RoundingMode roundingMode34 = numberFormat31.getRoundingMode();
        numberFormat14.setRoundingMode(roundingMode34);
        numberFormat14.setMaximumFractionDigits((int) (byte) 0);
        java.math.RoundingMode roundingMode38 = numberFormat14.getRoundingMode();
        numberFormat13.setRoundingMode(roundingMode38);
        boolean boolean40 = numberFormat13.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CHINESE (TAIWAN)" + "'", str10, "CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh-TW" + "'", str19, "zh-TW");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100%" + "'", str24, "100%");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "kor" + "'", str29, "kor");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + roundingMode34 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode34.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + roundingMode38 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode38.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test09149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09149");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(100);
        fieldPosition1.setBeginIndex((int) 'u');
        int int4 = fieldPosition1.getEndIndex();
        org.apache.commons.math.fraction.Fraction fraction7 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str8 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction7);
        long long9 = fraction7.longValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction7.abs();
        int int11 = fraction10.getDenominator();
        boolean boolean12 = fieldPosition1.equals((java.lang.Object) fraction10);
        int int13 = fieldPosition1.getEndIndex();
        java.lang.String str14 = fieldPosition1.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-1 / 100" + "'", str8, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.text.FieldPosition[field=100,attribute=null,beginIndex=117,endIndex=0]" + "'", str14, "java.text.FieldPosition[field=100,attribute=null,beginIndex=117,endIndex=0]");
    }

    @Test
    public void test09150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09150");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.util.Locale locale10 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str12 = locale10.getDisplayCountry();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale10);
        numberFormat13.setMinimumIntegerDigits(0);
        java.lang.String str17 = numberFormat13.format(1.0d);
        numberFormat13.setMaximumFractionDigits((int) ' ');
        numberFormat13.setMinimumIntegerDigits(600);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8, numberFormat13);
        numberFormat13.setParseIntegerOnly(true);
        int int25 = numberFormat13.getMinimumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test09151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09151");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(35, (int) (short) 1);
        int int3 = fraction2.intValue();
        int int4 = fraction2.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction10.multiply(fraction14);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction7.add(fraction14);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        long long26 = fraction24.longValue();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction21.subtract(fraction24);
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction30.multiply(fraction34);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction27.add(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction7.subtract(fraction27);
        org.apache.commons.math.fraction.Fraction fraction39 = new org.apache.commons.math.fraction.Fraction((double) 600);
        org.apache.commons.math.fraction.Fraction fraction40 = fraction7.add(fraction39);
        int int41 = fraction40.intValue();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction40.abs();
        int int43 = fraction2.compareTo((java.lang.Object) fraction40);
        java.lang.String str44 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction48 = new org.apache.commons.math.fraction.Fraction((double) (-2), (double) 1, 14400);
        float float49 = fraction48.floatValue();
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.getReducedFraction(1, (int) (byte) -120);
        int int53 = fraction52.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.negate();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.abs();
        org.apache.commons.math.fraction.Fraction fraction61 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction62 = fraction61.negate();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction62.abs();
        long long64 = fraction62.longValue();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction58.multiply(fraction62);
        org.apache.commons.math.fraction.Fraction fraction68 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction69 = fraction68.negate();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction69.abs();
        org.apache.commons.math.fraction.Fraction fraction73 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction74 = fraction73.negate();
        org.apache.commons.math.fraction.Fraction fraction75 = fraction74.abs();
        long long76 = fraction74.longValue();
        org.apache.commons.math.fraction.Fraction fraction77 = fraction70.multiply(fraction74);
        org.apache.commons.math.fraction.Fraction fraction78 = fraction62.subtract(fraction77);
        org.apache.commons.math.fraction.Fraction fraction81 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str82 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction81);
        org.apache.commons.math.fraction.Fraction fraction83 = fraction62.subtract(fraction81);
        org.apache.commons.math.fraction.Fraction fraction84 = fraction52.subtract(fraction81);
        int int85 = fraction52.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction86 = fraction48.add(fraction52);
        org.apache.commons.math.fraction.Fraction fraction87 = fraction2.subtract(fraction52);
        java.lang.String str88 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction87);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 599 + "'", int41 == 599);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "35 / 1" + "'", str44, "35 / 1");
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + (-2.0f) + "'", float49 == (-2.0f));
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "-1 / 100" + "'", str82, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertNotNull(fraction87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "4,201 / 120" + "'", str88, "4,201 / 120");
    }

    @Test
    public void test09152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09152");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.NumberFormat.Field field1 = java.text.NumberFormat.Field.CURRENCY;
        boolean boolean2 = field0.equals((java.lang.Object) field1);
        java.text.FieldPosition fieldPosition4 = new java.text.FieldPosition((java.text.Format.Field) field0, (-1));
        java.lang.String str5 = field0.toString();
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("zh-TW");
        java.lang.String str8 = languageRange7.getRange();
        java.lang.String str9 = languageRange7.getRange();
        double double10 = languageRange7.getWeight();
        double double11 = languageRange7.getWeight();
        java.lang.String str12 = languageRange7.getRange();
        boolean boolean13 = field0.equals((java.lang.Object) str12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        boolean boolean19 = numberFormat18.isGroupingUsed();
        properFractionFormat16.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat21 = properFractionFormat16.getWholeFormat();
        java.util.Currency currency22 = numberFormat21.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21);
        java.text.NumberFormat numberFormat24 = fractionFormat23.getDenominatorFormat();
        numberFormat24.setParseIntegerOnly(true);
        java.lang.Object obj27 = numberFormat24.clone();
        boolean boolean28 = field0.equals((java.lang.Object) numberFormat24);
        int int29 = numberFormat24.getMinimumFractionDigits();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str5, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zh-tw" + "'", str8, "zh-tw");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh-tw" + "'", str9, "zh-tw");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh-tw" + "'", str12, "zh-tw");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test09153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09153");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category1, locale6);
        java.lang.String str8 = locale0.getDisplayLanguage(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getCurrencyInstance(locale11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction17 = properFractionFormat13.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition16);
        java.lang.Object obj18 = fractionFormat9.parseObject("214,748,364,700%", parsePosition16);
        java.lang.String str19 = parsePosition16.toString();
        int int20 = parsePosition16.getIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "anglais" + "'", str8, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(fraction17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=3]" + "'", str19, "java.text.ParsePosition[index=1,errorIndex=3]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test09154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09154");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction6 = properFractionFormat2.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition5);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        numberFormat13.setMaximumFractionDigits((int) (short) -1);
        int int16 = numberFormat13.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        numberFormat13.setGroupingUsed(true);
        java.util.Currency currency20 = numberFormat13.getCurrency();
        java.text.NumberFormat.Field field22 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field22);
        java.lang.String str24 = fieldPosition23.toString();
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = locale25.getDisplayName(locale26);
        boolean boolean29 = fieldPosition23.equals((java.lang.Object) locale26);
        fieldPosition23.setEndIndex((int) '#');
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction38 = properFractionFormat34.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition37);
        boolean boolean39 = fieldPosition23.equals((java.lang.Object) parsePosition37);
        parsePosition37.setErrorIndex((int) '#');
        java.lang.Object obj42 = numberFormat13.parseObject("ja-JP", parsePosition37);
        org.apache.commons.math.fraction.Fraction fraction43 = properFractionFormat2.parse("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]", parsePosition37);
        java.text.NumberFormat numberFormat44 = properFractionFormat2.getWholeFormat();
        java.text.ParsePosition parsePosition47 = new java.text.ParsePosition((int) (byte) 87);
        java.lang.Number number48 = numberFormat44.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (32/-1)", parsePosition47);
        parsePosition47.setErrorIndex((int) (byte) 120);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNull(fraction6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str24, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Chinese (Taiwan)" + "'", str28, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNull(fraction38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNull(number48);
    }

    @Test
    public void test09155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09155");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (-119.99167f), (double) 0.016666668f, (int) (byte) -120);
        float float4 = fraction3.floatValue();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance(locale5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        boolean boolean10 = numberFormat9.isGroupingUsed();
        properFractionFormat7.setWholeFormat(numberFormat9);
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.util.Locale locale13 = locale12.stripExtensions();
        java.util.Locale locale15 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        java.lang.String str17 = locale15.getDisplayCountry();
        java.lang.String str18 = locale12.getDisplayName(locale15);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale19.getDisplayScript();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale21.getISO3Language();
        java.lang.String str23 = locale19.getDisplayScript(locale21);
        java.lang.String str24 = locale12.getDisplayLanguage(locale21);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getNumberInstance(locale12);
        java.util.Currency currency26 = numberFormat25.getCurrency();
        java.util.Locale locale30 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        int int32 = numberFormat31.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat31);
        numberFormat31.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode36 = numberFormat31.getRoundingMode();
        numberFormat25.setRoundingMode(roundingMode36);
        numberFormat9.setRoundingMode(roundingMode36);
        java.math.RoundingMode roundingMode39 = numberFormat9.getRoundingMode();
        boolean boolean40 = fraction3.equals((java.lang.Object) numberFormat9);
        int int41 = numberFormat9.getMinimumIntegerDigits();
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-120.0f) + "'", float4 == (-120.0f));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italian" + "'", str18, "Italian");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str24, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(currency26);
        org.junit.Assert.assertEquals(currency26.toString(), "XXX");
        org.junit.Assert.assertEquals(locale30.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode36.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + roundingMode39 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode39.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test09156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09156");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        float float4 = fraction2.floatValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.negate();
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        int int12 = numberFormat10.getMaximumFractionDigits();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat14);
        boolean boolean19 = fraction5.equals((java.lang.Object) fractionFormat18);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction21.add(fraction27);
        double double29 = fraction27.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction5.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction27.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str35 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction34);
        float float36 = fraction34.floatValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction34.negate();
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        int int44 = numberFormat42.getMaximumFractionDigits();
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getInstance(locale45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = new org.apache.commons.math.fraction.FractionFormat(numberFormat46, numberFormat48);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = new org.apache.commons.math.fraction.FractionFormat(numberFormat42, numberFormat46);
        boolean boolean51 = fraction37.equals((java.lang.Object) fractionFormat50);
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.negate();
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.negate();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.abs();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction57.abs();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction53.add(fraction59);
        double double61 = fraction59.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction37.multiply(fraction59);
        org.apache.commons.math.fraction.Fraction fraction65 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str66 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction65);
        long long67 = fraction65.longValue();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction65.abs();
        org.apache.commons.math.fraction.Fraction fraction69 = fraction68.abs();
        org.apache.commons.math.fraction.Fraction fraction72 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction73 = fraction68.divide(fraction72);
        double double74 = fraction68.doubleValue();
        int int75 = fraction68.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction59.multiply(fraction68);
        org.apache.commons.math.fraction.Fraction fraction80 = new org.apache.commons.math.fraction.Fraction((double) 120L, (double) 35, 2);
        int int81 = fraction80.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction82 = fraction59.add(fraction80);
        org.apache.commons.math.fraction.Fraction fraction83 = fraction31.subtract(fraction59);
        java.lang.String str84 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction59);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1 / 1" + "'", str3, "1 / 1");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.008333333333333333d + "'", double29 == 0.008333333333333333d);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1 / 1" + "'", str35, "1 / 1");
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 1.0f + "'", float36 == 1.0f);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.008333333333333333d + "'", double61 == 0.008333333333333333d);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "-1 / 100" + "'", str66, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.01d + "'", double74 == 0.01d);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 100 + "'", int75 == 100);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 120 + "'", int81 == 120);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "1 / 120" + "'", str84, "1 / 120");
    }

    @Test
    public void test09157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09157");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8, numberFormat10);
        boolean boolean12 = numberFormat10.isGroupingUsed();
        boolean boolean13 = numberFormat10.isGroupingUsed();
        fractionFormat6.setNumeratorFormat(numberFormat10);
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        int int21 = numberFormat20.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        boolean boolean32 = numberFormat31.isGroupingUsed();
        java.util.Currency currency33 = numberFormat31.getCurrency();
        numberFormat28.setCurrency(currency33);
        java.util.Currency currency35 = numberFormat28.getCurrency();
        java.math.RoundingMode roundingMode36 = numberFormat28.getRoundingMode();
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) 'a');
        java.lang.String str40 = parsePosition39.toString();
        java.lang.String str41 = parsePosition39.toString();
        java.lang.Object obj42 = numberFormat28.parseObject("zho", parsePosition39);
        java.lang.Object obj43 = fractionFormat22.parseObject("java.text.NumberFormat$Field(currency)", parsePosition39);
        java.lang.Object obj44 = numberFormat10.parseObject("Italian", parsePosition39);
        java.lang.Object obj45 = numberFormat1.parseObject("600", parsePosition39);
        java.util.Locale locale47 = new java.util.Locale("Chinese (Taiwan)");
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance(locale49);
        java.util.Currency currency52 = numberFormat51.getCurrency();
        numberFormat51.setMinimumIntegerDigits(1);
        numberFormat51.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj60 = numberFormat51.parseObject("Japan", parsePosition59);
        int int61 = numberFormat51.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat48, numberFormat51);
        java.util.Locale locale67 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getPercentInstance(locale67);
        int int69 = numberFormat68.getMaximumIntegerDigits();
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getPercentInstance(locale70);
        boolean boolean72 = numberFormat71.isGroupingUsed();
        java.util.Currency currency73 = numberFormat71.getCurrency();
        numberFormat68.setCurrency(currency73);
        java.util.Currency currency75 = numberFormat68.getCurrency();
        numberFormat68.setGroupingUsed(true);
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.lang.String str79 = locale78.getISO3Language();
        java.lang.String str80 = locale78.getDisplayCountry();
        java.util.Locale locale81 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet82 = locale81.getUnicodeLocaleAttributes();
        java.lang.String str83 = locale81.getISO3Language();
        java.lang.String str84 = locale78.getDisplayScript(locale81);
        org.apache.commons.math.fraction.FractionFormat fractionFormat85 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale78);
        java.text.NumberFormat numberFormat86 = java.text.NumberFormat.getIntegerInstance(locale78);
        java.util.Currency currency87 = numberFormat86.getCurrency();
        numberFormat68.setCurrency(currency87);
        numberFormat51.setCurrency(currency87);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(currency33);
        org.junit.Assert.assertEquals(currency33.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode36.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str40, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str41, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertEquals(locale47.toString(), "chinese (taiwan)");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "TWD");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals(locale67.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(currency73);
        org.junit.Assert.assertEquals(currency73.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency75);
        org.junit.Assert.assertEquals(currency75.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "kor" + "'", str79, "kor");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "zho" + "'", str83, "zho");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(fractionFormat85);
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertNotNull(currency87);
        org.junit.Assert.assertEquals(currency87.toString(), "XXX");
    }

    @Test
    public void test09158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09158");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale4 = new java.util.Locale("zho", "Chinese (Taiwan)", "Overflow trying to convert {0} to fraction ({1}/{2})");
        java.lang.String str5 = locale0.getDisplayLanguage(locale4);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        properFractionFormat11.setWholeFormat(numberFormat13);
        java.text.NumberFormat numberFormat16 = properFractionFormat11.getWholeFormat();
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number20 = numberFormat16.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition19);
        parsePosition19.setErrorIndex(0);
        parsePosition19.setIndex(1);
        parsePosition19.setErrorIndex(32);
        java.lang.Object obj27 = fractionFormat7.parseObject("-1 / 207,360,000", parsePosition19);
        java.lang.String str28 = parsePosition19.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale4.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Japanese" + "'", str5, "Japanese");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNull(number20);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=2]" + "'", str28, "java.text.ParsePosition[index=1,errorIndex=2]");
    }

    @Test
    public void test09159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09159");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale3);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("\u4e2d\u6587");
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.lang.String str11 = locale10.getDisplayCountry();
        java.lang.String str12 = locale10.getDisplayLanguage();
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale13.toLanguageTag();
        java.util.Set<java.lang.String> strSet19 = locale13.getUnicodeLocaleKeys();
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale20);
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        boolean boolean23 = locale20.hasExtensions();
        java.lang.String str24 = locale13.getDisplayVariant(locale20);
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat(numberFormat26, numberFormat28);
        numberFormat28.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field33 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition34 = new java.text.FieldPosition((java.text.Format.Field) field33);
        java.lang.String str35 = fieldPosition34.toString();
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.lang.String str38 = locale37.getDisplayScript();
        java.lang.String str39 = locale36.getDisplayName(locale37);
        boolean boolean40 = fieldPosition34.equals((java.lang.Object) locale37);
        fieldPosition34.setEndIndex((int) '#');
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getCurrencyInstance(locale43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction49 = properFractionFormat45.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition48);
        boolean boolean50 = fieldPosition34.equals((java.lang.Object) parsePosition48);
        java.lang.Number number51 = numberFormat28.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition48);
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.negate();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.abs();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction55.abs();
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getInstance(locale58);
        java.util.Locale locale60 = java.util.Locale.getDefault();
        boolean boolean61 = numberFormat59.equals((java.lang.Object) locale60);
        boolean boolean62 = fraction57.equals((java.lang.Object) locale60);
        boolean boolean63 = parsePosition48.equals((java.lang.Object) locale60);
        java.lang.String str64 = locale13.getDisplayScript(locale60);
        java.lang.String str65 = locale10.getDisplayName(locale60);
        java.lang.String str66 = locale9.getDisplayVariant(locale60);
        java.lang.String str67 = locale3.getDisplayVariant(locale9);
        java.lang.String str68 = locale9.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "cinese" + "'", str1, "cinese");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Taiwan" + "'", str11, "Taiwan");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese" + "'", str12, "cinese");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(field33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str35, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Chinese (Taiwan)" + "'", str39, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNull(fraction49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(number51);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(locale60);
// flaky:         org.junit.Assert.assertEquals(locale60.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "cinese (Taiwan)" + "'", str65, "cinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test09160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09160");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        numberFormat1.setMaximumFractionDigits((int) (byte) 100);
        numberFormat1.setMaximumFractionDigits((int) (byte) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setParseIntegerOnly(true);
        java.math.RoundingMode roundingMode12 = numberFormat1.getRoundingMode();
        numberFormat1.setMinimumFractionDigits(600);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + roundingMode12 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode12.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test09161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09161");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction8.add(fraction14);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction3.multiply(fraction14);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ONE;
        long long20 = fraction19.longValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction3.multiply(fraction19);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction2.subtract(fraction21);
        java.lang.String str23 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction21);
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.negate();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.abs();
        long long34 = fraction32.longValue();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction28.multiply(fraction32);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction28.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.negate();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.abs();
        long long47 = fraction45.longValue();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction41.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction28.multiply(fraction48);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction21.add(fraction49);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction21.negate();
        short short52 = fraction51.shortValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1 / 1" + "'", str4, "1 / 1");
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1 / 1" + "'", str23, "1 / 1");
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + short52 + "' != '" + (short) -1 + "'", short52 == (short) -1);
    }

    @Test
    public void test09162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09162");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("zh-TW");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        double double7 = languageRange1.getWeight();
        java.lang.String str8 = languageRange1.getRange();
        java.lang.String str9 = languageRange1.getRange();
        double double10 = languageRange1.getWeight();
        double double11 = languageRange1.getWeight();
        java.lang.String str12 = languageRange1.getRange();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        boolean boolean18 = numberFormat17.isGroupingUsed();
        properFractionFormat15.setWholeFormat(numberFormat17);
        java.text.NumberFormat numberFormat20 = properFractionFormat15.getWholeFormat();
        java.util.Currency currency21 = numberFormat20.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20);
        java.lang.Object obj23 = numberFormat20.clone();
        int int24 = numberFormat20.getMaximumIntegerDigits();
        boolean boolean25 = languageRange1.equals((java.lang.Object) int24);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zh-tw" + "'", str8, "zh-tw");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh-tw" + "'", str9, "zh-tw");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh-tw" + "'", str12, "zh-tw");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09163");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale5.getISO3Country();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getNumberInstance(locale5);
        numberFormat9.setMinimumFractionDigits(0);
        numberFormat9.setMaximumIntegerDigits(1728000);
        java.lang.String str15 = numberFormat9.format((long) 120);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean20 = numberFormat18.equals((java.lang.Object) numberFormat19);
        java.lang.Object obj21 = numberFormat19.clone();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean26 = numberFormat24.equals((java.lang.Object) numberFormat25);
        java.util.Locale locale31 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        int int33 = numberFormat32.getMaximumIntegerDigits();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        boolean boolean36 = numberFormat35.isGroupingUsed();
        java.util.Currency currency37 = numberFormat35.getCurrency();
        numberFormat32.setCurrency(currency37);
        java.util.Currency currency39 = numberFormat32.getCurrency();
        java.math.RoundingMode roundingMode40 = numberFormat32.getRoundingMode();
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) 'a');
        java.lang.String str44 = parsePosition43.toString();
        java.lang.String str45 = parsePosition43.toString();
        java.lang.Object obj46 = numberFormat32.parseObject("zho", parsePosition43);
        java.lang.String str47 = parsePosition43.toString();
        java.lang.Number number48 = numberFormat25.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition43);
        java.lang.Object obj49 = numberFormat19.parseObject("cor\351en", parsePosition43);
        parsePosition43.setErrorIndex(600);
        int int52 = parsePosition43.getIndex();
        java.lang.Object obj53 = numberFormat9.parseObject("anglais (KOR)", parsePosition43);
        int int54 = parsePosition43.getIndex();
        org.apache.commons.math.fraction.Fraction fraction55 = fractionFormat3.parse("2%", parsePosition43);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals(locale31.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(currency37);
        org.junit.Assert.assertEquals(currency37.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode40 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode40.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str44, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str45, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str47, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number48);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 97 + "'", int52 == 97);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNull(fraction55);
    }

    @Test
    public void test09164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09164");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale0.getDisplayCountry(locale3);
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.setScript("");
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.lang.String str13 = locale11.toLanguageTag();
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = locale14.getISO3Language();
        java.lang.String str17 = locale11.getDisplayScript(locale14);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = locale11.getDisplayCountry(locale18);
        java.util.Locale.Builder builder20 = builder8.setLocale(locale18);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale21.toLanguageTag();
        java.lang.String str27 = locale21.getDisplayVariant();
        java.lang.String str28 = locale21.getVariant();
        java.util.Locale.Builder builder29 = builder20.setLocale(locale21);
        java.util.Locale locale30 = locale21.stripExtensions();
        java.lang.String str31 = locale0.getDisplayName(locale21);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale locale36 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str39 = locale38.getDisplayLanguage();
        java.lang.String str40 = locale38.getISO3Language();
        java.lang.String str41 = locale36.getDisplayLanguage(locale38);
        java.lang.String str42 = locale36.getCountry();
        java.lang.String str43 = locale0.getDisplayLanguage(locale36);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "France" + "'", str7, "France");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese" + "'", str12, "cinese");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zh-TW" + "'", str13, "zh-TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zho" + "'", str16, "zho");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Taiwan" + "'", str19, "Taiwan");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "und" + "'", str26, "und");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "French (France)" + "'", str31, "French (France)");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals(locale36.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "cinese" + "'", str39, "cinese");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "zho" + "'", str40, "zho");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1 / 1" + "'", str41, "1 / 1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "French" + "'", str43, "French");
    }

    @Test
    public void test09165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09165");
        java.util.Locale locale2 = new java.util.Locale("java.text.ParseException: zh_TW", "zh-CN");
        java.lang.String str3 = locale2.getDisplayScript();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getCurrencyInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.lang.String str7 = locale2.getDisplayVariant(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.parseexception: zh_tw_ZH-CN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(fractionFormat9);
    }

    @Test
    public void test09166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09166");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        int int8 = numberFormat7.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        numberFormat12.setMaximumFractionDigits(100);
        java.lang.String str17 = numberFormat12.format((long) 100);
        int int18 = numberFormat12.getMaximumFractionDigits();
        numberFormat12.setMinimumFractionDigits((int) (short) 0);
        int int21 = numberFormat12.getMaximumFractionDigits();
        numberFormat12.setMaximumIntegerDigits((-1));
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getInstance(locale24);
        boolean boolean26 = numberFormat25.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance(locale28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = new org.apache.commons.math.fraction.FractionFormat(numberFormat29, numberFormat31);
        java.text.ParsePosition parsePosition35 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj36 = numberFormat31.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition35);
        properFractionFormat27.setNumeratorFormat(numberFormat31);
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance(locale38);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.util.Locale locale42 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale42);
        java.lang.String str45 = fractionFormat43.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat46 = fractionFormat43.getNumeratorFormat();
        java.util.Locale locale47 = java.util.Locale.getDefault();
        java.util.Locale locale48 = locale47.stripExtensions();
        java.util.Locale locale50 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale50);
        java.lang.String str52 = locale50.getDisplayCountry();
        java.lang.String str53 = locale47.getDisplayName(locale50);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = locale54.getDisplayScript();
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale56.getISO3Language();
        java.lang.String str58 = locale54.getDisplayScript(locale56);
        java.lang.String str59 = locale47.getDisplayLanguage(locale56);
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getNumberInstance(locale47);
        fractionFormat43.setNumeratorFormat(numberFormat60);
        properFractionFormat40.setWholeFormat(numberFormat60);
        properFractionFormat27.setWholeFormat(numberFormat60);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat60);
        numberFormat60.setGroupingUsed(true);
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12, numberFormat60);
        properFractionFormat10.setNumeratorFormat(numberFormat12);
        java.util.Locale locale69 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet70 = locale69.getUnicodeLocaleAttributes();
        java.util.Locale locale72 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale72);
        java.lang.String str74 = locale72.getDisplayCountry();
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getIntegerInstance(locale72);
        java.lang.String str76 = locale69.getDisplayCountry(locale72);
        java.text.NumberFormat numberFormat77 = java.text.NumberFormat.getPercentInstance(locale69);
        properFractionFormat10.setWholeFormat(numberFormat77);
        java.util.Locale locale80 = java.util.Locale.forLanguageTag("zh-TW");
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getNumberInstance(locale80);
        java.util.Currency currency82 = numberFormat81.getCurrency();
        numberFormat77.setCurrency(currency82);
        numberFormat77.setGroupingUsed(true);
        int int86 = numberFormat77.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "10,000%" + "'", str17, "10,000%");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "100 0 / 1" + "'", str45, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(locale47);
// flaky:         org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
// flaky:         org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals(locale50.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Korean" + "'", str53, "Korean");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "kor" + "'", str57, "kor");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str59, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals(locale72.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "France" + "'", str76, "France");
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(currency82);
        org.junit.Assert.assertEquals(currency82.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test09167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09167");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.lang.String str5 = locale1.toLanguageTag();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = builder6.build();
        java.lang.String str9 = locale8.getScript();
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.lang.String str12 = locale10.toLanguageTag();
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale13.getISO3Language();
        java.lang.String str16 = locale10.getDisplayScript(locale13);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale10.getDisplayCountry(locale17);
        java.util.Locale locale20 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str21 = locale17.getDisplayLanguage(locale20);
        java.lang.String str22 = locale8.getDisplayCountry(locale20);
        java.lang.String str23 = locale1.getDisplayVariant(locale8);
        java.lang.String str24 = locale1.getCountry();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale1);
        numberFormat25.setMaximumIntegerDigits((int) 'u');
        java.lang.String str29 = numberFormat25.format((long) (-2));
        java.util.Currency currency30 = numberFormat25.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25);
        boolean boolean32 = numberFormat25.isGroupingUsed();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str11, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh-TW" + "'", str12, "zh-TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zho" + "'", str15, "zho");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Taiwan" + "'", str18, "Taiwan");
        org.junit.Assert.assertEquals(locale20.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Italian" + "'", str21, "Italian");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-200%" + "'", str29, "-200%");
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test09168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09168");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat4 = properFractionFormat2.getDenominatorFormat();
        java.util.Locale locale6 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale9);
        java.util.Currency currency12 = numberFormat11.getCurrency();
        numberFormat11.setMinimumIntegerDigits(1);
        numberFormat11.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj20 = numberFormat11.parseObject("Japan", parsePosition19);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException24 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str25 = fractionConversionException24.getPattern();
        java.lang.Throwable[] throwableArray26 = fractionConversionException24.getSuppressed();
        java.lang.Object[] objArray27 = fractionConversionException24.getArguments();
        boolean boolean28 = parsePosition19.equals((java.lang.Object) objArray27);
        int int29 = parsePosition19.getIndex();
        int int30 = parsePosition19.getIndex();
        java.lang.Object obj31 = fractionFormat7.parseObject("\ud55c\uad6d\uc5b4", parsePosition19);
        parsePosition19.setErrorIndex(14400);
        org.apache.commons.math.fraction.Fraction fraction34 = properFractionFormat2.parse("\u65e5\u6587", parsePosition19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat36 = properFractionFormat35.getWholeFormat();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        numberFormat38.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = new org.apache.commons.math.fraction.FractionFormat(numberFormat36, numberFormat38);
        properFractionFormat2.setDenominatorFormat(numberFormat36);
        boolean boolean44 = numberFormat36.isGroupingUsed();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "TWD");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str25, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(fraction34);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test09169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09169");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat14 = properFractionFormat3.getWholeFormat();
        int int15 = numberFormat14.getMinimumFractionDigits();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance();
        numberFormat16.setParseIntegerOnly(true);
        java.lang.Object obj19 = numberFormat16.clone();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat16, numberFormat20);
        java.lang.String str23 = numberFormat20.format((long) ' ');
        numberFormat20.setMaximumIntegerDigits(0);
        org.apache.commons.math.fraction.Fraction fraction29 = new org.apache.commons.math.fraction.Fraction((double) 3, (double) 9700L, 599);
        java.lang.String str30 = numberFormat20.format((java.lang.Object) 9700L);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "32" + "'", str23, "32");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
    }

    @Test
    public void test09170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09170");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.lang.String str3 = locale0.getLanguage();
        boolean boolean4 = locale0.hasExtensions();
        java.lang.String str5 = locale0.getISO3Country();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale7 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale10);
        java.util.Currency currency13 = numberFormat12.getCurrency();
        numberFormat12.setMinimumIntegerDigits(1);
        numberFormat12.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition20 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj21 = numberFormat12.parseObject("Japan", parsePosition20);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException25 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str26 = fractionConversionException25.getPattern();
        java.lang.Throwable[] throwableArray27 = fractionConversionException25.getSuppressed();
        java.lang.Object[] objArray28 = fractionConversionException25.getArguments();
        boolean boolean29 = parsePosition20.equals((java.lang.Object) objArray28);
        int int30 = parsePosition20.getIndex();
        int int31 = parsePosition20.getIndex();
        java.lang.Object obj32 = fractionFormat8.parseObject("\ud55c\uad6d\uc5b4", parsePosition20);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale34.getISO3Language();
        java.lang.String str36 = locale34.getDisplayCountry();
        java.util.Locale locale37 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        java.lang.String str39 = locale37.getISO3Language();
        java.lang.String str40 = locale34.getDisplayScript(locale37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale34);
        java.text.NumberFormat.Field field43 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition44 = new java.text.FieldPosition((java.text.Format.Field) field43);
        java.lang.String str45 = fieldPosition44.toString();
        java.util.Locale locale46 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale47 = java.util.Locale.ROOT;
        java.lang.String str48 = locale47.getDisplayScript();
        java.lang.String str49 = locale46.getDisplayName(locale47);
        boolean boolean50 = fieldPosition44.equals((java.lang.Object) locale47);
        fieldPosition44.setEndIndex((int) '#');
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getCurrencyInstance(locale53);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.text.ParsePosition parsePosition58 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction59 = properFractionFormat55.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition58);
        boolean boolean60 = fieldPosition44.equals((java.lang.Object) parsePosition58);
        java.lang.String str61 = parsePosition58.toString();
        parsePosition58.setErrorIndex((int) (short) 10);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency65 = numberFormat64.getCurrency();
        java.lang.String str67 = numberFormat64.format(1.0d);
        int int68 = numberFormat64.getMinimumIntegerDigits();
        boolean boolean69 = parsePosition58.equals((java.lang.Object) int68);
        java.lang.Object obj70 = fractionFormat41.parseObject("ita", parsePosition58);
        java.lang.Object obj71 = fractionFormat8.parseObject("zh_tw", parsePosition58);
        java.text.NumberFormat numberFormat72 = fractionFormat8.getDenominatorFormat();
        int int73 = numberFormat72.getMinimumIntegerDigits();
        fractionFormat6.setDenominatorFormat(numberFormat72);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ko" + "'", str3, "ko");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "TWD");
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str26, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "kor" + "'", str35, "kor");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "zho" + "'", str39, "zho");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(field43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str45, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinese (Taiwan)" + "'", str49, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNull(fraction59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str61, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(currency65);
// flaky:         org.junit.Assert.assertEquals(currency65.toString(), "XXX");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "100%" + "'", str67, "100%");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test09171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09171");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, 1);
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 100);
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.clear();
        java.util.Locale.Builder builder9 = builder6.clear();
        java.util.Locale.Builder builder12 = builder9.setExtension('a', "TWN");
        java.util.Locale.Builder builder14 = builder12.setLanguageTag("Canada");
        boolean boolean15 = field0.equals((java.lang.Object) builder12);
        java.text.FieldPosition fieldPosition16 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale18.getISO3Language();
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleKeys();
        java.lang.String str21 = locale18.getISO3Country();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getNumberInstance(locale18);
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        int int28 = numberFormat27.getMaximumIntegerDigits();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        boolean boolean31 = numberFormat30.isGroupingUsed();
        java.util.Currency currency32 = numberFormat30.getCurrency();
        numberFormat27.setCurrency(currency32);
        java.util.Currency currency34 = numberFormat27.getCurrency();
        int int35 = numberFormat27.getMaximumFractionDigits();
        java.lang.Object obj36 = numberFormat27.clone();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        numberFormat38.setMaximumFractionDigits(100);
        numberFormat38.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str45 = numberFormat38.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22, numberFormat27, numberFormat38);
        java.text.NumberFormat.Field field48 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition49 = new java.text.FieldPosition((java.text.Format.Field) field48);
        java.lang.String str50 = fieldPosition49.toString();
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale52.getDisplayScript();
        java.lang.String str54 = locale51.getDisplayName(locale52);
        boolean boolean55 = fieldPosition49.equals((java.lang.Object) locale52);
        fieldPosition49.setEndIndex((int) '#');
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getCurrencyInstance(locale58);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        java.text.ParsePosition parsePosition63 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction64 = properFractionFormat60.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition63);
        boolean boolean65 = fieldPosition49.equals((java.lang.Object) parsePosition63);
        int int66 = parsePosition63.getIndex();
        org.apache.commons.math.fraction.Fraction fraction67 = properFractionFormat46.parse("hi!", parsePosition63);
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getInstance(locale68);
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getPercentInstance(locale70);
        org.apache.commons.math.fraction.FractionFormat fractionFormat72 = new org.apache.commons.math.fraction.FractionFormat(numberFormat69, numberFormat71);
        boolean boolean73 = numberFormat71.isGroupingUsed();
        boolean boolean74 = numberFormat71.isGroupingUsed();
        java.text.ParsePosition parsePosition77 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj78 = numberFormat71.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition77);
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = new org.apache.commons.math.fraction.FractionFormat(numberFormat71);
        java.text.NumberFormat numberFormat80 = fractionFormat79.getNumeratorFormat();
        properFractionFormat46.setWholeFormat(numberFormat80);
        boolean boolean82 = field0.equals((java.lang.Object) numberFormat80);
        java.math.RoundingMode roundingMode83 = numberFormat80.getRoundingMode();
        java.util.Locale locale84 = java.util.Locale.KOREAN;
        java.lang.String str85 = locale84.getISO3Language();
        java.lang.String str86 = locale84.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat87 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale84);
        java.text.NumberFormat numberFormat88 = fractionFormat87.getNumeratorFormat();
        java.math.RoundingMode roundingMode89 = numberFormat88.getRoundingMode();
        org.apache.commons.math.fraction.FractionFormat fractionFormat90 = new org.apache.commons.math.fraction.FractionFormat(numberFormat80, numberFormat88);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(currency32);
        org.junit.Assert.assertEquals(currency32.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "100%" + "'", str45, "100%");
        org.junit.Assert.assertNotNull(field48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str50, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Chinese (Taiwan)" + "'", str54, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNull(fraction64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNull(fraction67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + roundingMode83 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode83.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "kor" + "'", str85, "kor");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(fractionFormat87);
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertTrue("'" + roundingMode89 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode89.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test09172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09172");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number11 = numberFormat7.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition10);
        numberFormat7.setMaximumFractionDigits(11);
        numberFormat7.setGroupingUsed(false);
        numberFormat7.setGroupingUsed(false);
        java.text.FieldPosition fieldPosition19 = new java.text.FieldPosition(10);
        int int20 = fieldPosition19.getEndIndex();
        fieldPosition19.setBeginIndex((int) '#');
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.lang.String str24 = locale23.getScript();
        java.util.Locale locale28 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str29 = locale23.getDisplayScript(locale28);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getNumberInstance(locale28);
        int int31 = numberFormat30.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = new org.apache.commons.math.fraction.FractionFormat(numberFormat30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        boolean boolean34 = fieldPosition19.equals((java.lang.Object) numberFormat30);
        fieldPosition19.setEndIndex((int) (byte) 100);
        int int37 = fieldPosition19.getBeginIndex();
        boolean boolean38 = numberFormat7.equals((java.lang.Object) fieldPosition19);
        java.lang.Object obj39 = numberFormat7.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(number11);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals(locale28.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj39);
    }

    @Test
    public void test09173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09173");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat14 = properFractionFormat3.getNumeratorFormat();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.Object obj18 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat19 = properFractionFormat17.getWholeFormat();
        int int20 = numberFormat19.getMaximumIntegerDigits();
        java.lang.Object obj21 = numberFormat19.clone();
        properFractionFormat3.setNumeratorFormat(numberFormat19);
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        int int28 = numberFormat27.getMaximumIntegerDigits();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        boolean boolean31 = numberFormat30.isGroupingUsed();
        java.util.Currency currency32 = numberFormat30.getCurrency();
        numberFormat27.setCurrency(currency32);
        java.util.Currency currency34 = numberFormat27.getCurrency();
        int int35 = numberFormat27.getMaximumFractionDigits();
        java.lang.Object obj36 = numberFormat27.clone();
        numberFormat27.setMinimumFractionDigits((int) (short) 1);
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.lang.String str40 = locale39.getScript();
        java.util.Locale locale44 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str45 = locale39.getDisplayScript(locale44);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getNumberInstance(locale44);
        int int47 = numberFormat46.getMinimumIntegerDigits();
        java.util.Locale locale51 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        int int53 = numberFormat52.getMaximumIntegerDigits();
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        boolean boolean56 = numberFormat55.isGroupingUsed();
        java.util.Currency currency57 = numberFormat55.getCurrency();
        numberFormat52.setCurrency(currency57);
        java.lang.Object obj59 = numberFormat52.clone();
        boolean boolean60 = numberFormat52.isGroupingUsed();
        int int61 = numberFormat52.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27, numberFormat46, numberFormat52);
        numberFormat27.setMinimumIntegerDigits(120);
        numberFormat27.setMinimumIntegerDigits((int) (byte) -1);
        properFractionFormat3.setDenominatorFormat(numberFormat27);
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getPercentInstance(locale68);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat69);
        java.text.AttributedCharacterIterator attributedCharacterIterator72 = numberFormat69.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj73 = numberFormat69.clone();
        numberFormat69.setMaximumFractionDigits(2147483647);
        numberFormat69.setParseIntegerOnly(true);
        int int78 = numberFormat69.getMaximumFractionDigits();
        properFractionFormat3.setNumeratorFormat(numberFormat69);
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency82 = numberFormat81.getCurrency();
        numberFormat81.setGroupingUsed(true);
        int int85 = numberFormat81.getMaximumIntegerDigits();
        java.text.ParsePosition parsePosition88 = new java.text.ParsePosition(120);
        java.lang.Object obj89 = numberFormat81.parseObject("10 / 1", parsePosition88);
        java.lang.Object obj90 = properFractionFormat3.parseObject("", parsePosition88);
        int int91 = parsePosition88.getErrorIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(currency32);
        org.junit.Assert.assertEquals(currency32.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals(locale44.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals(locale51.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(currency57);
        org.junit.Assert.assertEquals(currency57.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(attributedCharacterIterator72);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(currency82);
// flaky:         org.junit.Assert.assertEquals(currency82.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2147483647 + "'", int85 == 2147483647);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 119 + "'", int91 == 119);
    }

    @Test
    public void test09174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09174");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = locale1.stripExtensions();
        java.lang.String str4 = locale3.getDisplayVariant();
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.util.Set<java.lang.Character> charSet16 = locale13.getExtensionKeys();
        java.lang.String str17 = locale8.getDisplayScript(locale13);
        java.lang.String str18 = locale3.getDisplayVariant(locale13);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test09175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09175");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction6 = properFractionFormat2.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        boolean boolean12 = numberFormat11.isGroupingUsed();
        properFractionFormat9.setWholeFormat(numberFormat11);
        java.text.NumberFormat numberFormat14 = properFractionFormat9.getWholeFormat();
        properFractionFormat2.setWholeFormat(numberFormat14);
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        numberFormat20.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str24 = numberFormat20.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20);
        java.text.NumberFormat numberFormat26 = fractionFormat25.getNumeratorFormat();
        java.lang.String str28 = numberFormat26.format(1.0d);
        properFractionFormat2.setWholeFormat(numberFormat26);
        java.text.NumberFormat numberFormat30 = properFractionFormat2.getWholeFormat();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        java.lang.Object obj34 = numberFormat32.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = new org.apache.commons.math.fraction.FractionFormat(numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat32);
        numberFormat32.setMinimumFractionDigits((-2));
        java.util.Currency currency39 = numberFormat32.getCurrency();
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.util.Locale locale41 = locale40.stripExtensions();
        java.util.Locale locale42 = locale41.stripExtensions();
        java.lang.String str43 = null; // flaky: locale42.getISO3Language();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getInstance(locale42);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getNumeratorFormat();
        java.lang.String str48 = numberFormat46.format((double) (-2));
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32, numberFormat44, numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = new org.apache.commons.math.fraction.FractionFormat(numberFormat30, numberFormat46);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNull(fraction6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0%" + "'", str24, "0%");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "100%" + "'", str28, "100%");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale40);
// flaky:         org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(locale41);
// flaky:         org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "kor" + "'", str43, "kor");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-2" + "'", str48, "-2");
    }

    @Test
    public void test09176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09176");
        java.util.Locale locale2 = new java.util.Locale("100%", "zh-TW");
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder3.setScript("");
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.lang.String str9 = locale6.getDisplayLanguage(locale8);
        java.util.Locale.Builder builder10 = builder5.setLocale(locale6);
        java.lang.String str11 = locale2.getDisplayScript(locale6);
        java.lang.String str12 = locale2.getDisplayName();
        boolean boolean13 = locale2.hasExtensions();
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale.Builder builder17 = builder14.setVariant("");
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.getDefault(category19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale21);
        java.util.Locale.setDefault(category19, locale21);
        java.util.Locale locale24 = java.util.Locale.getDefault(category19);
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder26 = builder17.setLocale(locale24);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale24);
        java.lang.String str28 = locale2.getDisplayLanguage(locale24);
        boolean boolean29 = locale2.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = locale2.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "100%_ZH-TW");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinesisch" + "'", str9, "Chinesisch");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100% (ZH-TW)" + "'", str12, "100% (ZH-TW)");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.FORMAT + "'", category19.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale20);
// flaky:         org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "100%" + "'", str28, "100%");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test09177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09177");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale3.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder7 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale locale9 = builder7.build();
        java.lang.String str10 = locale9.toLanguageTag();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        java.util.Locale locale17 = new java.util.Locale("cor\351en", "en");
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleKeys();
        java.lang.String str19 = locale9.getDisplayScript(locale17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = locale17.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh-TW" + "'", str10, "zh-TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese" + "'", str14, "Chinese");
        org.junit.Assert.assertEquals(locale17.toString(), "cor\351en_EN");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test09178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09178");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayName(locale3);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale9.getISO3Language();
        java.lang.String str11 = locale7.getDisplayScript(locale9);
        java.lang.String str12 = locale0.getDisplayLanguage(locale9);
        java.lang.String str13 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale0);
        java.lang.String str15 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale17 = locale0.stripExtensions();
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        java.util.Locale locale20 = builder18.build();
        java.util.Locale.Builder builder21 = builder18.clearExtensions();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale22.getISO3Language();
        java.util.Locale.Builder builder24 = builder18.setLocale(locale22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        java.text.NumberFormat.Field field26 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition28 = new java.text.FieldPosition((java.text.Format.Field) field26, (int) '#');
        java.text.Format.Field field29 = fieldPosition28.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction35.multiply(fraction39);
        org.apache.commons.math.fraction.Fraction fraction41 = fraction32.add(fraction39);
        boolean boolean42 = field29.equals((java.lang.Object) fraction32);
        java.text.FieldPosition fieldPosition43 = new java.text.FieldPosition(field29);
        java.text.Format.Field field44 = fieldPosition43.getFieldAttribute();
        int int45 = fieldPosition43.getEndIndex();
        java.util.Locale locale48 = new java.util.Locale("eng", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        boolean boolean49 = fieldPosition43.equals((java.lang.Object) locale48);
        java.lang.String str50 = locale22.getDisplayCountry(locale48);
        java.lang.String str51 = locale0.getDisplayScript(locale48);
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Korean" + "'", str6, "Korean");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ko" + "'", str13, "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ko" + "'", str15, "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "kor" + "'", str23, "kor");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(field26);
        org.junit.Assert.assertNotNull(field29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(field44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals(locale48.toString(), "eng_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test09179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09179");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction4 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        long long19 = fraction17.longValue();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction13.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        long long31 = fraction29.longValue();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction25.multiply(fraction29);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction17.subtract(fraction32);
        org.apache.commons.math.fraction.Fraction fraction36 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str37 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction36);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction17.subtract(fraction36);
        long long39 = fraction36.longValue();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction8.divide(fraction36);
        org.apache.commons.math.fraction.Fraction fraction41 = fraction2.multiply(fraction40);
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.negate();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.abs();
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.negate();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.abs();
        long long52 = fraction50.longValue();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction46.multiply(fraction50);
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.negate();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.abs();
        org.apache.commons.math.fraction.Fraction fraction61 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction62 = fraction61.negate();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction62.abs();
        long long64 = fraction62.longValue();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction58.multiply(fraction62);
        org.apache.commons.math.fraction.Fraction fraction66 = fraction50.subtract(fraction65);
        org.apache.commons.math.fraction.Fraction fraction67 = fraction65.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction67.abs();
        int int69 = fraction67.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction40.subtract(fraction67);
        org.apache.commons.math.fraction.Fraction fraction71 = fraction40.negate();
        int int72 = fraction40.intValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0 / 1" + "'", str3, "0 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1 / 100" + "'", str37, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 14400 + "'", int69 == 14400);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10000 + "'", int72 == 10000);
    }

    @Test
    public void test09180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09180");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        boolean boolean19 = numberFormat18.isGroupingUsed();
        properFractionFormat16.setWholeFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat11, numberFormat18);
        int int22 = numberFormat18.getMaximumIntegerDigits();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        java.lang.Object obj26 = properFractionFormat25.clone();
        java.text.NumberFormat numberFormat27 = properFractionFormat25.getWholeFormat();
        int int28 = numberFormat27.getMaximumIntegerDigits();
        java.lang.Object obj29 = numberFormat27.clone();
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getInstance(locale30);
        java.util.Currency currency33 = numberFormat32.getCurrency();
        numberFormat32.setMinimumFractionDigits((int) (short) -1);
        java.util.Locale locale39 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        int int41 = numberFormat40.getMaximumIntegerDigits();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        boolean boolean44 = numberFormat43.isGroupingUsed();
        java.util.Currency currency45 = numberFormat43.getCurrency();
        numberFormat40.setCurrency(currency45);
        java.util.Currency currency47 = numberFormat40.getCurrency();
        numberFormat32.setCurrency(currency47);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance(locale49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        numberFormat50.setMaximumFractionDigits(100);
        java.lang.String str55 = numberFormat50.format((long) 100);
        int int56 = numberFormat50.getMaximumFractionDigits();
        numberFormat50.setMinimumFractionDigits((int) (short) 0);
        int int59 = numberFormat50.getMaximumFractionDigits();
        java.math.RoundingMode roundingMode60 = numberFormat50.getRoundingMode();
        numberFormat50.setGroupingUsed(false);
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getCurrencyInstance(locale63);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64);
        java.text.ParsePosition parsePosition68 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction69 = properFractionFormat65.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition68);
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getPercentInstance(locale70);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getPercentInstance(locale73);
        boolean boolean75 = numberFormat74.isGroupingUsed();
        properFractionFormat72.setWholeFormat(numberFormat74);
        java.text.NumberFormat numberFormat77 = properFractionFormat72.getWholeFormat();
        properFractionFormat65.setWholeFormat(numberFormat77);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32, numberFormat50, numberFormat77);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat81 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27, numberFormat50);
        boolean boolean82 = numberFormat18.equals((java.lang.Object) fractionFormat81);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(currency33);
        org.junit.Assert.assertEquals(currency33.toString(), "TWD");
        org.junit.Assert.assertEquals(locale39.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(currency45);
        org.junit.Assert.assertEquals(currency45.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "10,000%" + "'", str55, "10,000%");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertTrue("'" + roundingMode60 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode60.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNull(fraction69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test09181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09181");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str8 = fractionFormat6.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat9 = fractionFormat6.getNumeratorFormat();
        fractionFormat3.setNumeratorFormat(numberFormat9);
        java.util.Locale locale14 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        int int16 = numberFormat15.getMaximumIntegerDigits();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        boolean boolean19 = numberFormat18.isGroupingUsed();
        java.util.Currency currency20 = numberFormat18.getCurrency();
        numberFormat15.setCurrency(currency20);
        java.util.Currency currency22 = numberFormat15.getCurrency();
        java.math.RoundingMode roundingMode23 = numberFormat15.getRoundingMode();
        numberFormat9.setRoundingMode(roundingMode23);
        java.lang.Object obj25 = numberFormat9.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100 0 / 1" + "'", str8, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode23 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode23.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj25);
    }

    @Test
    public void test09182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09182");
        java.util.Locale locale3 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str4 = locale3.getDisplayVariant();
        java.text.NumberFormat.Field field5 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition((java.text.Format.Field) field5);
        int int7 = fieldPosition6.getEndIndex();
        fieldPosition6.setBeginIndex((int) (byte) 100);
        java.util.Locale locale11 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str14 = fractionFormat12.format((java.lang.Object) 100);
        boolean boolean15 = fieldPosition6.equals((java.lang.Object) fractionFormat12);
        java.text.Format.Field field16 = fieldPosition6.getFieldAttribute();
        java.util.Locale locale20 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        boolean boolean22 = fieldPosition6.equals((java.lang.Object) locale20);
        java.lang.String str23 = locale3.getDisplayCountry(locale20);
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category25 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale26 = java.util.Locale.getDefault(category25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale27);
        java.util.Locale.setDefault(category25, locale27);
        java.util.Locale locale30 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category25, locale30);
        java.lang.String str32 = locale24.getDisplayLanguage(locale30);
        java.lang.String str33 = locale3.getDisplayName(locale30);
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str35 = locale3.getDisplayLanguage();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale3);
        java.lang.String str38 = locale3.getUnicodeLocaleType("US");
        org.junit.Assert.assertEquals(locale3.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "10,000%" + "'", str4, "10,000%");
        org.junit.Assert.assertNotNull(field5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "100 0 / 1" + "'", str14, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(field16);
        org.junit.Assert.assertEquals(locale20.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ZH_TW" + "'", str23, "ZH_TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.FORMAT + "'", category25.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "anglais" + "'", str32, "anglais");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str33, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "taiwan" + "'", str35, "taiwan");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test09183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09183");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        boolean boolean4 = field0.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.lang.String str6 = locale5.getDisplayCountry();
        java.lang.String str7 = locale2.getDisplayVariant(locale5);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        int int9 = numberFormat8.getMaximumFractionDigits();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.lang.Object obj13 = numberFormat11.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getCurrencyInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.util.Locale locale19 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale19);
        java.lang.String str22 = fractionFormat20.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat23 = fractionFormat20.getNumeratorFormat();
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Locale locale25 = locale24.stripExtensions();
        java.util.Locale locale27 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale27);
        java.lang.String str29 = locale27.getDisplayCountry();
        java.lang.String str30 = locale24.getDisplayName(locale27);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = locale31.getDisplayScript();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale33.getISO3Language();
        java.lang.String str35 = locale31.getDisplayScript(locale33);
        java.lang.String str36 = locale24.getDisplayLanguage(locale33);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getNumberInstance(locale24);
        fractionFormat20.setNumeratorFormat(numberFormat37);
        properFractionFormat17.setWholeFormat(numberFormat37);
        fractionFormat14.setNumeratorFormat(numberFormat37);
        java.text.NumberFormat numberFormat41 = fractionFormat14.getNumeratorFormat();
        java.text.NumberFormat numberFormat42 = fractionFormat14.getDenominatorFormat();
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        numberFormat43.setMaximumIntegerDigits(2147483647);
        java.lang.String str47 = numberFormat43.format((long) 'a');
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale48);
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        numberFormat50.setMinimumIntegerDigits(1728000);
        numberFormat50.setMaximumIntegerDigits(600);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42, numberFormat43, numberFormat50);
        java.lang.Object obj56 = numberFormat50.clone();
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getInstance(locale57);
        java.util.Locale locale59 = java.util.Locale.getDefault();
        boolean boolean60 = numberFormat58.equals((java.lang.Object) locale59);
        boolean boolean61 = numberFormat58.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = new org.apache.commons.math.fraction.FractionFormat(numberFormat58);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8, numberFormat50, numberFormat58);
        java.text.NumberFormat numberFormat64 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency66 = numberFormat65.getCurrency();
        java.lang.String str68 = numberFormat65.format(1.0d);
        int int69 = numberFormat65.getMinimumIntegerDigits();
        boolean boolean70 = numberFormat65.isGroupingUsed();
        boolean boolean71 = numberFormat65.isParseIntegerOnly();
        int int72 = numberFormat65.getMinimumFractionDigits();
        properFractionFormat63.setNumeratorFormat(numberFormat65);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "100 0 / 1" + "'", str22, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Korean" + "'", str30, "Korean");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "kor" + "'", str34, "kor");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str36, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "9\240700 %" + "'", str47, "9\240700 %");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(locale59);
// flaky:         org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(currency66);
        org.junit.Assert.assertEquals(currency66.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "100 %" + "'", str68, "100 %");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test09184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09184");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        numberFormat6.setMinimumIntegerDigits(0);
        java.lang.String str10 = numberFormat6.format(1.0d);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale locale14 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str16 = locale14.getDisplayCountry();
        java.lang.String str17 = locale11.getDisplayName(locale14);
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayScript();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.lang.String str22 = locale18.getDisplayScript(locale20);
        java.lang.String str23 = locale11.getDisplayLanguage(locale20);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale11);
        java.util.Currency currency25 = numberFormat24.getCurrency();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        long long36 = fraction34.longValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction34);
        boolean boolean38 = numberFormat24.equals((java.lang.Object) fraction30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat6, numberFormat24);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale43);
        boolean boolean45 = numberFormat44.isGroupingUsed();
        properFractionFormat42.setWholeFormat(numberFormat44);
        java.util.Locale locale47 = java.util.Locale.getDefault();
        java.util.Locale locale48 = locale47.stripExtensions();
        java.util.Locale locale50 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale50);
        java.lang.String str52 = locale50.getDisplayCountry();
        java.lang.String str53 = locale47.getDisplayName(locale50);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = locale54.getDisplayScript();
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale56.getISO3Language();
        java.lang.String str58 = locale54.getDisplayScript(locale56);
        java.lang.String str59 = locale47.getDisplayLanguage(locale56);
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getNumberInstance(locale47);
        java.util.Currency currency61 = numberFormat60.getCurrency();
        java.util.Locale locale65 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance(locale65);
        int int67 = numberFormat66.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = new org.apache.commons.math.fraction.FractionFormat(numberFormat66);
        numberFormat66.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode71 = numberFormat66.getRoundingMode();
        numberFormat60.setRoundingMode(roundingMode71);
        numberFormat44.setRoundingMode(roundingMode71);
        java.math.RoundingMode roundingMode74 = numberFormat44.getRoundingMode();
        numberFormat24.setRoundingMode(roundingMode74);
        boolean boolean76 = numberFormat24.isParseIntegerOnly();
        numberFormat24.setGroupingUsed(true);
        java.lang.Object obj79 = numberFormat24.clone();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Korean" + "'", str17, "Korean");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str23, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(locale47);
// flaky:         org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
// flaky:         org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals(locale50.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Korean" + "'", str53, "Korean");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "kor" + "'", str57, "kor");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str59, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(currency61);
        org.junit.Assert.assertEquals(currency61.toString(), "XXX");
        org.junit.Assert.assertEquals(locale65.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode71 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode71.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + roundingMode74 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode74.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(obj79);
    }

    @Test
    public void test09185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09185");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        numberFormat3.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field8);
        java.lang.String str10 = fieldPosition9.toString();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayScript();
        java.lang.String str14 = locale11.getDisplayName(locale12);
        boolean boolean15 = fieldPosition9.equals((java.lang.Object) locale12);
        fieldPosition9.setEndIndex((int) '#');
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction24 = properFractionFormat20.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition23);
        boolean boolean25 = fieldPosition9.equals((java.lang.Object) parsePosition23);
        java.lang.Number number26 = numberFormat3.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition23);
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction30.abs();
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale33);
        java.util.Locale locale35 = java.util.Locale.getDefault();
        boolean boolean36 = numberFormat34.equals((java.lang.Object) locale35);
        boolean boolean37 = fraction32.equals((java.lang.Object) locale35);
        boolean boolean38 = parsePosition23.equals((java.lang.Object) locale35);
        java.lang.String str39 = locale35.getDisplayVariant();
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj42 = fractionFormat40.parseObject("java.text.FieldPosition[field=100,attribute=null,beginIndex=117,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str10, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese (Taiwan)" + "'", str14, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNull(fraction24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(number26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(locale35);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(fractionFormat40);
    }

    @Test
    public void test09186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09186");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat12 = fractionFormat11.getNumeratorFormat();
        java.text.NumberFormat numberFormat13 = fractionFormat11.getNumeratorFormat();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale15);
        boolean boolean17 = numberFormat16.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance(locale19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20, numberFormat22);
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj27 = numberFormat22.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition26);
        properFractionFormat18.setNumeratorFormat(numberFormat22);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale29);
        boolean boolean31 = numberFormat30.isParseIntegerOnly();
        numberFormat30.setGroupingUsed(false);
        properFractionFormat18.setWholeFormat(numberFormat30);
        numberFormat30.setMinimumFractionDigits((int) 'u');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getInstance(locale39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = new org.apache.commons.math.fraction.FractionFormat(numberFormat40, numberFormat42);
        java.text.ParsePosition parsePosition46 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj47 = numberFormat42.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition46);
        org.apache.commons.math.fraction.Fraction fraction48 = properFractionFormat37.parse("214,748,364,700%", parsePosition46);
        parsePosition46.setIndex(120);
        java.lang.Object obj51 = fractionFormat11.parseObject("\u6cd5\u6587\u52a0\u62ff\u5927)", parsePosition46);
        org.apache.commons.math.fraction.Fraction fraction52 = properFractionFormat9.parse("100% / 120", parsePosition46);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(fraction48);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(fraction52);
    }

    @Test
    public void test09187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09187");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale7 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.lang.String str9 = locale7.getDisplayCountry();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.lang.String str11 = locale7.toLanguageTag();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale locale14 = builder12.build();
        java.lang.String str15 = locale14.getScript();
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.toLanguageTag();
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale19.getISO3Language();
        java.lang.String str22 = locale16.getDisplayScript(locale19);
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = locale16.getDisplayCountry(locale23);
        java.util.Locale locale26 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str27 = locale23.getDisplayLanguage(locale26);
        java.lang.String str28 = locale14.getDisplayCountry(locale26);
        java.lang.String str29 = locale7.getDisplayVariant(locale14);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale31 = java.util.Locale.getDefault(category0);
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category0, locale32);
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.lang.String str36 = locale35.getScript();
        java.util.Locale locale40 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str41 = locale35.getDisplayScript(locale40);
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getNumberInstance(locale40);
        java.util.Set<java.lang.String> strSet43 = locale40.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet44 = locale40.getExtensionKeys();
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.util.Locale locale46 = java.util.Locale.PRC;
        java.lang.String str47 = locale45.getDisplayName(locale46);
        java.lang.String str48 = locale40.getDisplayName(locale45);
        java.util.Locale locale49 = locale45.stripExtensions();
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale50.getDisplayCountry(locale51);
        java.util.Set<java.lang.String> strSet54 = locale51.getUnicodeLocaleAttributes();
        java.lang.String str55 = locale49.getDisplayVariant(locale51);
        java.lang.String str57 = locale49.getExtension('a');
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getIntegerInstance(locale49);
        java.util.Locale locale60 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale60);
        java.lang.String str62 = locale60.getDisplayCountry();
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getIntegerInstance(locale60);
        java.lang.String str64 = locale60.toLanguageTag();
        java.lang.String str65 = locale49.getDisplayCountry(locale60);
        java.lang.String str66 = locale32.getDisplayName(locale49);
        java.lang.String str67 = locale32.getDisplayVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str17, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh-TW" + "'", str18, "zh-TW");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zho" + "'", str21, "zho");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Taiwan" + "'", str24, "Taiwan");
        org.junit.Assert.assertEquals(locale26.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Italian" + "'", str27, "Italian");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale32);
// flaky:         org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals(locale40.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(charSet44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str47, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str48, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Japan" + "'", str53, "Japan");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertEquals(locale60.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "und" + "'", str64, "und");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Canada" + "'", str65, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Korean" + "'", str66, "Korean");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test09188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09188");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        boolean boolean32 = numberFormat31.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        java.lang.String str35 = numberFormat31.format(0.008333333333333333d);
        boolean boolean36 = numberFormat31.isParseIntegerOnly();
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj40 = numberFormat31.parseObject("\u65e5\u6587", parsePosition39);
        int int41 = parsePosition39.getIndex();
        org.apache.commons.math.fraction.Fraction fraction42 = properFractionFormat28.parse("0 / 1", parsePosition39);
        java.util.Locale locale46 = new java.util.Locale("\uc911\uad6d\uc5b4", "", "Taiwan");
        java.lang.String str47 = locale46.getDisplayCountry();
        boolean boolean48 = parsePosition39.equals((java.lang.Object) locale46);
        java.util.Set<java.lang.String> strSet49 = locale46.getUnicodeLocaleKeys();
        java.lang.String str50 = locale46.getDisplayLanguage();
        java.lang.String str51 = locale46.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1%" + "'", str35, "1%");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNull(fraction42);
        org.junit.Assert.assertEquals(locale46.toString(), "\uc911\uad6d\uc5b4__Taiwan");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str50, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test09189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09189");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        java.lang.String str3 = numberFormat0.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat5 = properFractionFormat4.getWholeFormat();
        java.text.NumberFormat numberFormat6 = properFractionFormat4.getWholeFormat();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str10 = locale8.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale8);
        numberFormat11.setMinimumIntegerDigits(0);
        numberFormat11.setMinimumIntegerDigits(0);
        org.apache.commons.math.fraction.Fraction fraction19 = new org.apache.commons.math.fraction.Fraction((double) 2147483647, (double) 100.0f, (int) 'u');
        java.lang.String str20 = numberFormat11.format((java.lang.Object) 100.0f);
        properFractionFormat4.setWholeFormat(numberFormat11);
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition(10);
        int int24 = fieldPosition23.getEndIndex();
        fieldPosition23.setBeginIndex((int) '#');
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.lang.String str28 = locale27.getScript();
        java.util.Locale locale32 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str33 = locale27.getDisplayScript(locale32);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getNumberInstance(locale32);
        int int35 = numberFormat34.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat34);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        boolean boolean38 = fieldPosition23.equals((java.lang.Object) numberFormat34);
        numberFormat34.setGroupingUsed(false);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = locale41.getISO3Language();
        java.util.Set<java.lang.Character> charSet43 = locale41.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet44 = locale41.getExtensionKeys();
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getCurrencyInstance(locale41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = new org.apache.commons.math.fraction.FractionFormat(numberFormat34, numberFormat45);
        boolean boolean48 = numberFormat45.equals((java.lang.Object) "\u4e2d\u6587\u4e2d\u570b)");
        numberFormat45.setMaximumIntegerDigits(35);
        int int51 = numberFormat45.getMaximumFractionDigits();
        int int52 = numberFormat45.getMinimumFractionDigits();
        properFractionFormat4.setWholeFormat(numberFormat45);
        boolean boolean54 = numberFormat45.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
        org.junit.Assert.assertEquals(currency1.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100%" + "'", str3, "100%");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals(locale32.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "kor" + "'", str42, "kor");
        org.junit.Assert.assertNotNull(charSet43);
        org.junit.Assert.assertNotNull(charSet44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test09190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09190");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.lang.String str5 = locale1.toLanguageTag();
        java.lang.String str6 = locale1.getDisplayScript();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale1);
        java.lang.String str9 = numberFormat7.format((double) 0.1f);
        int int10 = numberFormat7.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale.LanguageRange languageRange13 = new java.util.Locale.LanguageRange("zh-TW");
        double double14 = languageRange13.getWeight();
        double double15 = languageRange13.getWeight();
        double double16 = languageRange13.getWeight();
        double double17 = languageRange13.getWeight();
        double double18 = languageRange13.getWeight();
        double double19 = languageRange13.getWeight();
        java.lang.String str20 = languageRange13.getRange();
        java.lang.String str21 = languageRange13.getRange();
        java.lang.String str22 = languageRange13.getRange();
        java.lang.StringBuffer stringBuffer23 = null;
        java.text.NumberFormat.Field field24 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition((java.text.Format.Field) field24);
        java.text.FieldPosition fieldPosition27 = new java.text.FieldPosition((java.text.Format.Field) field24, 1);
        java.text.FieldPosition fieldPosition29 = new java.text.FieldPosition((java.text.Format.Field) field24, (int) (short) 100);
        java.text.FieldPosition fieldPosition30 = new java.text.FieldPosition((java.text.Format.Field) field24);
        java.text.FieldPosition fieldPosition31 = new java.text.FieldPosition((java.text.Format.Field) field24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer32 = numberFormat7.format((java.lang.Object) languageRange13, stringBuffer23, fieldPosition31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10%" + "'", str9, "10%");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh-tw" + "'", str20, "zh-tw");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh-tw" + "'", str21, "zh-tw");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh-tw" + "'", str22, "zh-tw");
        org.junit.Assert.assertNotNull(field24);
    }

    @Test
    public void test09191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09191");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        boolean boolean8 = numberFormat7.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat13);
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj18 = numberFormat13.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition17);
        properFractionFormat9.setNumeratorFormat(numberFormat13);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getCurrencyInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.util.Locale locale24 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale24);
        java.lang.String str27 = fractionFormat25.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat28 = fractionFormat25.getNumeratorFormat();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Locale locale32 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.lang.String str34 = locale32.getDisplayCountry();
        java.lang.String str35 = locale29.getDisplayName(locale32);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale36.getDisplayScript();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale38.getISO3Language();
        java.lang.String str40 = locale36.getDisplayScript(locale38);
        java.lang.String str41 = locale29.getDisplayLanguage(locale38);
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getNumberInstance(locale29);
        fractionFormat25.setNumeratorFormat(numberFormat42);
        properFractionFormat22.setWholeFormat(numberFormat42);
        properFractionFormat9.setWholeFormat(numberFormat42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.util.Locale locale50 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale50);
        java.lang.String[] strArray52 = java.util.Locale.getISOCountries();
        boolean boolean53 = numberFormat51.equals((java.lang.Object) strArray52);
        java.lang.String str55 = numberFormat51.format((double) (byte) -1);
        java.util.Locale locale56 = java.util.Locale.JAPAN;
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.lang.String str58 = locale57.getDisplayScript();
        java.lang.String str59 = locale56.getDisplayCountry(locale57);
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getNumberInstance(locale56);
        numberFormat60.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42, numberFormat51, numberFormat60);
        java.text.NumberFormat.Field field65 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition66 = new java.text.FieldPosition((java.text.Format.Field) field65);
        java.lang.String str67 = fieldPosition66.toString();
        java.util.Locale locale68 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale69 = java.util.Locale.ROOT;
        java.lang.String str70 = locale69.getDisplayScript();
        java.lang.String str71 = locale68.getDisplayName(locale69);
        boolean boolean72 = fieldPosition66.equals((java.lang.Object) locale69);
        fieldPosition66.setEndIndex((int) '#');
        java.util.Locale locale75 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getCurrencyInstance(locale75);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        java.text.ParsePosition parsePosition80 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction81 = properFractionFormat77.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition80);
        boolean boolean82 = fieldPosition66.equals((java.lang.Object) parsePosition80);
        int int83 = parsePosition80.getIndex();
        org.apache.commons.math.fraction.Fraction fraction84 = properFractionFormat63.parse("java.text.NumberFormat$Field(exponent symbol)", parsePosition80);
        int int85 = parsePosition80.getIndex();
        java.lang.Object obj86 = numberFormat1.parseObject("2,857", parsePosition80);
        int int87 = parsePosition80.getErrorIndex();
        parsePosition80.setIndex((-59));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100 0 / 1" + "'", str27, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals(locale32.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Korean" + "'", str35, "Korean");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "kor" + "'", str39, "kor");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str41, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals(locale50.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-100%" + "'", str55, "-100%");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Japan" + "'", str59, "Japan");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(field65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str67, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Chinese (Taiwan)" + "'", str71, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNull(fraction81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNull(fraction84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 5 + "'", int87 == 5);
    }

    @Test
    public void test09192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09192");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction4.divide(fraction23);
        double double25 = fraction24.doubleValue();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance(locale26);
        java.util.Locale locale29 = locale26.stripExtensions();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        java.lang.String str32 = locale29.getDisplayName(locale30);
        boolean boolean33 = fraction24.equals((java.lang.Object) locale29);
        java.lang.String str34 = locale29.getVariant();
        java.util.Locale locale35 = java.util.Locale.US;
        java.lang.String str36 = locale35.getDisplayScript();
        java.lang.String str37 = locale29.getDisplayVariant(locale35);
        java.lang.String str38 = locale35.getLanguage();
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder39.setScript("");
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.lang.String str45 = locale42.getDisplayLanguage(locale44);
        java.util.Locale.Builder builder46 = builder41.setLocale(locale42);
        java.util.Locale.Builder builder47 = builder46.clearExtensions();
        java.util.Locale locale48 = builder46.build();
        java.lang.String str49 = locale48.toLanguageTag();
        java.lang.String str50 = locale35.getDisplayScript(locale48);
        java.lang.String str51 = locale35.getDisplayVariant();
        java.lang.String str52 = locale35.getScript();
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale35);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 120.0d + "'", double25 == 120.0d);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str32, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "en" + "'", str38, "en");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Chinesisch" + "'", str45, "Chinesisch");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "zh-TW" + "'", str49, "zh-TW");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(fractionFormat53);
    }

    @Test
    public void test09193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09193");
        java.util.Locale locale2 = new java.util.Locale("France", "CHINESE (TAIWAN)");
        java.lang.String str3 = locale2.getCountry();
        java.lang.String str4 = locale2.getDisplayName();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("org.apache.commons.math.fraction.FractionConversionException: Unable to convert 1,728,000 to fraction after -120 iterations");
        java.lang.String str8 = locale2.getDisplayVariant(locale7);
        java.util.Set<java.lang.String> strSet9 = locale2.getUnicodeLocaleKeys();
        org.junit.Assert.assertEquals(locale2.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CHINESE (TAIWAN)" + "'", str3, "CHINESE (TAIWAN)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "france (CHINESE (TAIWAN))" + "'", str4, "france (CHINESE (TAIWAN))");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test09194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09194");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getWholeFormat();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        numberFormat3.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getISO3Language();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale12);
        java.util.Currency currency15 = numberFormat14.getCurrency();
        numberFormat14.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat14);
        fractionFormat7.setDenominatorFormat(numberFormat14);
        java.text.NumberFormat numberFormat21 = fractionFormat7.getDenominatorFormat();
        java.lang.Number number23 = numberFormat21.parse("-100%");
        int int24 = numberFormat21.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat26 = properFractionFormat25.getDenominatorFormat();
        java.util.Locale locale30 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        int int32 = numberFormat31.getMaximumIntegerDigits();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        boolean boolean35 = numberFormat34.isGroupingUsed();
        java.util.Currency currency36 = numberFormat34.getCurrency();
        numberFormat31.setCurrency(currency36);
        java.lang.Object obj38 = numberFormat31.clone();
        boolean boolean39 = numberFormat31.isGroupingUsed();
        properFractionFormat25.setDenominatorFormat(numberFormat31);
        int int41 = numberFormat31.getMinimumIntegerDigits();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale42.getISO3Language();
        java.util.Set<java.lang.Character> charSet44 = locale42.getExtensionKeys();
        java.util.Locale locale45 = java.util.Locale.US;
        java.lang.String str46 = locale45.getDisplayScript();
        java.lang.String str47 = locale42.getDisplayVariant(locale45);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getCurrencyInstance(locale42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.util.Locale locale51 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getInstance(locale51);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance(locale53);
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = new org.apache.commons.math.fraction.FractionFormat(numberFormat52, numberFormat54);
        java.text.ParsePosition parsePosition58 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj59 = numberFormat54.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition58);
        java.lang.String str60 = parsePosition58.toString();
        boolean boolean62 = parsePosition58.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction63 = properFractionFormat49.parse("java.text.ParseException: zh_TW", parsePosition58);
        java.text.NumberFormat numberFormat64 = properFractionFormat49.getDenominatorFormat();
        java.util.Locale locale65 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getInstance(locale65);
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getPercentInstance(locale67);
        org.apache.commons.math.fraction.FractionFormat fractionFormat69 = new org.apache.commons.math.fraction.FractionFormat(numberFormat66, numberFormat68);
        boolean boolean70 = numberFormat68.isGroupingUsed();
        java.lang.String str72 = numberFormat68.format((double) 100);
        java.lang.String str74 = numberFormat68.format((double) (short) 10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat75 = new org.apache.commons.math.fraction.FractionFormat(numberFormat64, numberFormat68);
        int int76 = numberFormat68.getMaximumFractionDigits();
        java.math.RoundingMode roundingMode77 = numberFormat68.getRoundingMode();
        numberFormat31.setRoundingMode(roundingMode77);
        numberFormat21.setRoundingMode(roundingMode77);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zho" + "'", str10, "zho");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "TWD");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + number23 + "' != '" + (-100L) + "'", number23, (-100L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals(locale30.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "kor" + "'", str43, "kor");
        org.junit.Assert.assertNotNull(charSet44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str60, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(fraction63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "10,000%" + "'", str72, "10,000%");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1,000%" + "'", str74, "1,000%");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + roundingMode77 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode77.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test09195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09195");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat4 = properFractionFormat3.getWholeFormat();
        numberFormat4.setMinimumFractionDigits((int) (byte) 0);
        numberFormat4.setMinimumFractionDigits(60);
        numberFormat4.setMaximumFractionDigits((int) (byte) 1);
        java.math.RoundingMode roundingMode11 = numberFormat4.getRoundingMode();
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.util.Locale locale15 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        java.lang.String str17 = locale15.getDisplayCountry();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getIntegerInstance(locale15);
        java.lang.String str19 = locale12.getDisplayCountry(locale15);
        java.lang.String str20 = locale12.getISO3Language();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getCurrencyInstance(locale12);
        org.apache.commons.math.fraction.Fraction fraction23 = new org.apache.commons.math.fraction.Fraction((double) (byte) 0);
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.negate();
        double double32 = fraction30.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction36 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction36);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction27.divide(fraction30);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction23.add(fraction27);
        double double40 = fraction39.doubleValue();
        int int41 = fraction39.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction39.abs();
        java.lang.String str43 = numberFormat21.format((java.lang.Object) fraction39);
        java.lang.String str44 = numberFormat4.format((java.lang.Object) fraction39);
        numberFormat4.setMinimumIntegerDigits((int) (byte) 10);
        int int47 = numberFormat4.getMaximumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode11.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "France" + "'", str19, "France");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fra" + "'", str20, "fra");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-0.008333333333333333d) + "'", double32 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(fraction42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u20ac" + "'", str43, "\u20ac");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1.0" + "'", str44, "1.0");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
    }

    @Test
    public void test09196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09196");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        java.math.RoundingMode roundingMode12 = numberFormat4.getRoundingMode();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        boolean boolean19 = numberFormat17.isGroupingUsed();
        boolean boolean20 = numberFormat17.isGroupingUsed();
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj24 = numberFormat17.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition23);
        numberFormat17.setParseIntegerOnly(false);
        properFractionFormat13.setWholeFormat(numberFormat17);
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance(locale28);
        boolean boolean30 = numberFormat29.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getInstance(locale32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33, numberFormat35);
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj40 = numberFormat35.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition39);
        properFractionFormat31.setNumeratorFormat(numberFormat35);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getCurrencyInstance(locale42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.util.Locale locale46 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale46);
        java.lang.String str49 = fractionFormat47.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat50 = fractionFormat47.getNumeratorFormat();
        java.util.Locale locale51 = java.util.Locale.getDefault();
        java.util.Locale locale52 = locale51.stripExtensions();
        java.util.Locale locale54 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale54);
        java.lang.String str56 = locale54.getDisplayCountry();
        java.lang.String str57 = locale51.getDisplayName(locale54);
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.lang.String str59 = locale58.getDisplayScript();
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale60.getISO3Language();
        java.lang.String str62 = locale58.getDisplayScript(locale60);
        java.lang.String str63 = locale51.getDisplayLanguage(locale60);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getNumberInstance(locale51);
        fractionFormat47.setNumeratorFormat(numberFormat64);
        properFractionFormat44.setWholeFormat(numberFormat64);
        properFractionFormat31.setWholeFormat(numberFormat64);
        properFractionFormat13.setNumeratorFormat(numberFormat64);
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getInstance(locale69);
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getPercentInstance(locale71);
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = new org.apache.commons.math.fraction.FractionFormat(numberFormat70, numberFormat72);
        numberFormat72.setMinimumFractionDigits((int) '4');
        int int76 = numberFormat72.getMinimumFractionDigits();
        properFractionFormat13.setDenominatorFormat(numberFormat72);
        java.util.Locale locale79 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat80 = java.text.NumberFormat.getCurrencyInstance(locale79);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat80);
        java.text.ParsePosition parsePosition84 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction85 = properFractionFormat81.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition84);
        int int86 = parsePosition84.getIndex();
        org.apache.commons.math.fraction.Fraction fraction87 = properFractionFormat13.parse("10,000", parsePosition84);
        java.text.NumberFormat numberFormat88 = properFractionFormat13.getWholeFormat();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode12 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode12.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals(locale46.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "100 0 / 1" + "'", str49, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(locale51);
// flaky:         org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
// flaky:         org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals(locale54.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Korean" + "'", str57, "Korean");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "kor" + "'", str61, "kor");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str63, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 52 + "'", int76 == 52);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNull(fraction85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(fraction87);
        org.junit.Assert.assertNotNull(numberFormat88);
    }

    @Test
    public void test09197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09197");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale3.toLanguageTag();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getISO3Language();
        java.lang.String str9 = locale3.getDisplayScript(locale6);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale3.getDisplayCountry(locale10);
        java.util.Locale.Builder builder12 = builder0.setLocale(locale10);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale13.toLanguageTag();
        java.lang.String str19 = locale13.getDisplayVariant();
        java.lang.String str20 = locale13.getVariant();
        java.util.Locale.Builder builder21 = builder12.setLocale(locale13);
        java.util.Locale.Builder builder22 = builder12.clearExtensions();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale26);
        java.util.Locale.setDefault(category24, locale26);
        java.util.Locale locale29 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category24, locale29);
        java.lang.String str31 = locale23.getDisplayLanguage(locale29);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getInstance(locale23);
        java.util.Locale.Builder builder33 = builder22.setLocale(locale23);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strSet38);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap40 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList41 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, strMap40);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap42 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList43 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList41, strMap42);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strList49);
        java.util.Locale.FilteringMode filteringMode52 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags(languageRangeList41, (java.util.Collection<java.lang.String>) strList49, filteringMode52);
        java.util.Collection<java.lang.String> strCollection54 = null;
        java.lang.String str55 = java.util.Locale.lookupTag(languageRangeList41, strCollection54);
        java.util.Locale locale56 = java.util.Locale.ROOT;
        java.lang.String str57 = locale56.getDisplayScript();
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = locale58.getISO3Language();
        java.lang.String str60 = locale56.getDisplayScript(locale58);
        java.util.Set<java.lang.String> strSet61 = locale58.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet62 = locale58.getUnicodeLocaleKeys();
        java.lang.String str63 = java.util.Locale.lookupTag(languageRangeList41, (java.util.Collection<java.lang.String>) strSet62);
        boolean boolean64 = locale23.equals((java.lang.Object) languageRangeList41);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str4, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Taiwan" + "'", str11, "Taiwan");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "anglais" + "'", str31, "anglais");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(languageRangeList41);
        org.junit.Assert.assertNotNull(languageRangeList43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + filteringMode52 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode52.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "kor" + "'", str59, "kor");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test09198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09198");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        java.lang.Object obj14 = numberFormat4.clone();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale15);
        boolean boolean17 = numberFormat16.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance(locale19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20, numberFormat22);
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj27 = numberFormat22.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition26);
        properFractionFormat18.setNumeratorFormat(numberFormat22);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getCurrencyInstance(locale29);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.util.Locale locale33 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.lang.String str36 = fractionFormat34.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat37 = fractionFormat34.getNumeratorFormat();
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Locale locale39 = locale38.stripExtensions();
        java.util.Locale locale41 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.lang.String str43 = locale41.getDisplayCountry();
        java.lang.String str44 = locale38.getDisplayName(locale41);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.lang.String str46 = locale45.getDisplayScript();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale47.getISO3Language();
        java.lang.String str49 = locale45.getDisplayScript(locale47);
        java.lang.String str50 = locale38.getDisplayLanguage(locale47);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getNumberInstance(locale38);
        fractionFormat34.setNumeratorFormat(numberFormat51);
        properFractionFormat31.setWholeFormat(numberFormat51);
        properFractionFormat18.setWholeFormat(numberFormat51);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        numberFormat51.setGroupingUsed(true);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance(locale58);
        boolean boolean60 = numberFormat59.isGroupingUsed();
        java.util.Currency currency61 = numberFormat59.getCurrency();
        int int62 = numberFormat59.getMinimumFractionDigits();
        int int63 = numberFormat59.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = new org.apache.commons.math.fraction.FractionFormat(numberFormat59);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat51, numberFormat59);
        java.util.Locale locale66 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale66);
        org.apache.commons.math.fraction.FractionFormat fractionFormat69 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale66);
        java.util.Locale locale71 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat72 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale71);
        java.lang.String str74 = fractionFormat72.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat75 = fractionFormat72.getNumeratorFormat();
        fractionFormat69.setNumeratorFormat(numberFormat75);
        numberFormat75.setMaximumFractionDigits(2147483647);
        java.util.Locale locale81 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat82 = java.text.NumberFormat.getIntegerInstance(locale81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat75, numberFormat82);
        java.text.NumberFormat numberFormat84 = null;
        // The following exception was thrown during execution in test generation
        try {
            properFractionFormat83.setWholeFormat(numberFormat84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: whole format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "100 0 / 1" + "'", str36, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(locale39);
// flaky:         org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals(locale41.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Korean" + "'", str44, "Korean");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "kor" + "'", str48, "kor");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str50, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(currency61);
        org.junit.Assert.assertEquals(currency61.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(fractionFormat68);
        org.junit.Assert.assertNotNull(fractionFormat69);
        org.junit.Assert.assertEquals(locale71.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "100 0 / 1" + "'", str74, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertEquals(locale81.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat82);
    }

    @Test
    public void test09199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09199");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale2 = java.util.Locale.CHINA;
        boolean boolean3 = field0.equals((java.lang.Object) locale2);
        java.lang.String str4 = locale2.getDisplayVariant();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = locale5.getDisplayCountry(locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str11 = locale2.getDisplayLanguage(locale6);
        java.util.Locale locale15 = new java.util.Locale("kor", "chinois", "java.text.AttributedCharacterIterator$Attribute(reading)");
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str17 = locale15.getISO3Language();
        java.lang.String str18 = locale6.getDisplayScript(locale15);
        java.util.Locale locale19 = locale15.stripExtensions();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance(locale19);
        boolean boolean21 = locale19.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = locale19.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Japan" + "'", str8, "Japan");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese" + "'", str11, "Chinese");
        org.junit.Assert.assertEquals(locale15.toString(), "kor_CHINOIS_java.text.AttributedCharacterIterator$Attribute(reading)");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "kor_CHINOIS_java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test09200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09200");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("en");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "Korean");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayScript();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale8.getISO3Language();
        java.lang.String str10 = locale6.getDisplayScript(locale8);
        java.lang.String str11 = locale6.toLanguageTag();
        java.lang.String str12 = locale6.getDisplayVariant();
        boolean boolean13 = locale6.hasExtensions();
        java.util.Locale.Builder builder14 = builder5.setLocale(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        org.apache.commons.math.fraction.Fraction fraction17 = fractionFormat15.parse("600");
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.negate();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.abs();
        long long28 = fraction26.longValue();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction22.multiply(fraction26);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.abs();
        long long41 = fraction39.longValue();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction35.multiply(fraction39);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction22.multiply(fraction42);
        int int44 = fraction42.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction17.add(fraction42);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction42.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction42.negate();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
    }

    @Test
    public void test09201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09201");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        numberFormat3.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field8);
        java.lang.String str10 = fieldPosition9.toString();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayScript();
        java.lang.String str14 = locale11.getDisplayName(locale12);
        boolean boolean15 = fieldPosition9.equals((java.lang.Object) locale12);
        fieldPosition9.setEndIndex((int) '#');
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction24 = properFractionFormat20.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition23);
        boolean boolean25 = fieldPosition9.equals((java.lang.Object) parsePosition23);
        java.lang.Number number26 = numberFormat3.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition23);
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction30.abs();
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale33);
        java.util.Locale locale35 = java.util.Locale.getDefault();
        boolean boolean36 = numberFormat34.equals((java.lang.Object) locale35);
        boolean boolean37 = fraction32.equals((java.lang.Object) locale35);
        boolean boolean38 = parsePosition23.equals((java.lang.Object) locale35);
        java.lang.String str39 = locale35.getDisplayVariant();
        java.lang.String str40 = locale35.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str10, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese (Taiwan)" + "'", str14, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNull(fraction24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(number26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(locale35);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test09202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09202");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat14 = properFractionFormat3.getNumeratorFormat();
        java.text.NumberFormat numberFormat15 = properFractionFormat3.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 100, (int) (byte) 100);
        float float19 = fraction18.floatValue();
        double double20 = fraction18.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        long long31 = fraction29.longValue();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction25.multiply(fraction29);
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.negate();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.negate();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.abs();
        long long43 = fraction41.longValue();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction37.multiply(fraction41);
        org.apache.commons.math.fraction.Fraction fraction45 = fraction25.divide(fraction44);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction25.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction25.negate();
        int int48 = fraction25.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction18.subtract(fraction25);
        java.lang.StringBuffer stringBuffer50 = null;
        java.text.NumberFormat.Field field51 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition52 = new java.text.FieldPosition((java.text.Format.Field) field51);
        java.text.FieldPosition fieldPosition54 = new java.text.FieldPosition((java.text.Format.Field) field51, (int) (byte) 10);
        fieldPosition54.setBeginIndex(10);
        int int57 = fieldPosition54.getBeginIndex();
        java.text.Format.Field field58 = fieldPosition54.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer59 = properFractionFormat3.format(fraction49, stringBuffer50, fieldPosition54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 1.0f + "'", float19 == 1.0f);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(field51);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(field58);
    }

    @Test
    public void test09203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09203");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = locale0.hasExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat4 = fractionFormat3.getNumeratorFormat();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getCurrencyInstance();
        int int6 = numberFormat5.getMaximumFractionDigits();
        boolean boolean7 = numberFormat5.isParseIntegerOnly();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance();
        java.util.Locale locale10 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str13 = fractionFormat11.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat14 = fractionFormat11.getNumeratorFormat();
        numberFormat14.setMaximumFractionDigits((int) (short) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat8, numberFormat14);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        numberFormat19.setMaximumFractionDigits(100);
        java.lang.String str24 = numberFormat19.format((long) 100);
        int int25 = numberFormat19.getMaximumFractionDigits();
        numberFormat19.setMinimumFractionDigits((int) (short) 0);
        int int28 = numberFormat19.getMaximumFractionDigits();
        java.math.RoundingMode roundingMode29 = numberFormat19.getRoundingMode();
        numberFormat19.setGroupingUsed(false);
        java.lang.Object obj32 = numberFormat19.clone();
        properFractionFormat17.setNumeratorFormat(numberFormat19);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        boolean boolean40 = numberFormat39.isGroupingUsed();
        properFractionFormat37.setWholeFormat(numberFormat39);
        java.text.NumberFormat numberFormat42 = properFractionFormat37.getWholeFormat();
        java.text.ParsePosition parsePosition45 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number46 = numberFormat42.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition45);
        parsePosition45.setIndex((int) ' ');
        java.lang.Object obj49 = numberFormat19.parseObject("\u52a0\u62ff\u5927", parsePosition45);
        fractionFormat3.setDenominatorFormat(numberFormat19);
        java.util.Locale locale54 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        int int56 = numberFormat55.getMaximumIntegerDigits();
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance(locale57);
        boolean boolean59 = numberFormat58.isGroupingUsed();
        java.util.Currency currency60 = numberFormat58.getCurrency();
        numberFormat55.setCurrency(currency60);
        java.util.Currency currency62 = numberFormat55.getCurrency();
        java.math.RoundingMode roundingMode63 = numberFormat55.getRoundingMode();
        numberFormat55.setParseIntegerOnly(false);
        java.lang.Object obj66 = numberFormat55.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19, numberFormat55);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "100 0 / 1" + "'", str13, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "10,000%" + "'", str24, "10,000%");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + roundingMode29 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode29.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNull(number46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals(locale54.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(currency60);
        org.junit.Assert.assertEquals(currency60.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency62);
        org.junit.Assert.assertEquals(currency62.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode63 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode63.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj66);
    }

    @Test
    public void test09204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09204");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        java.util.Currency currency15 = numberFormat13.getCurrency();
        numberFormat10.setCurrency(currency15);
        java.util.Currency currency17 = numberFormat10.getCurrency();
        numberFormat2.setCurrency(currency17);
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        fractionFormat23.setDenominatorFormat(numberFormat28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2, numberFormat28);
        java.math.RoundingMode roundingMode32 = numberFormat2.getRoundingMode();
        int int33 = numberFormat2.getMinimumIntegerDigits();
        java.util.Locale locale37 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale37);
        numberFormat38.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency41 = numberFormat38.getCurrency();
        int int42 = numberFormat38.getMinimumIntegerDigits();
        int int43 = numberFormat38.getMinimumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2, numberFormat38);
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.util.Locale locale46 = java.util.Locale.PRC;
        java.lang.String str47 = locale45.getDisplayName(locale46);
        java.util.Set<java.lang.Character> charSet48 = locale45.getExtensionKeys();
        java.util.Locale locale51 = new java.util.Locale("Overflow trying to convert {0} to fraction ({1}/{2})", "anglais");
        java.lang.String str52 = locale45.getDisplayName(locale51);
        boolean boolean53 = locale45.hasExtensions();
        java.util.Set<java.lang.Character> charSet54 = locale45.getExtensionKeys();
        boolean boolean55 = locale45.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = numberFormat38.format((java.lang.Object) boolean55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode32 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode32.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals(locale37.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(currency41);
        org.junit.Assert.assertEquals(currency41.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str47, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(charSet48);
        org.junit.Assert.assertEquals(locale51.toString(), "overflow trying to convert {0} to fraction ({1}/{2})_ANGLAIS");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "English (Canada)" + "'", str52, "English (Canada)");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(charSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test09205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09205");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Locale locale7 = locale6.stripExtensions();
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.lang.String str12 = locale6.getDisplayName(locale9);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale6.getDisplayLanguage(locale15);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance(locale6);
        fractionFormat2.setNumeratorFormat(numberFormat19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19);
        java.lang.Object obj22 = numberFormat19.clone();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Korean" + "'", str12, "Korean");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str18, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(obj22);
    }

    @Test
    public void test09206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09206");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str3 = locale0.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale0);
        java.util.Set<java.lang.Character> charSet6 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zho" + "'", str3, "zho");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(charSet6);
    }

    @Test
    public void test09207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09207");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.util.Locale locale30 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.lang.String str33 = fractionFormat31.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat34 = fractionFormat31.getNumeratorFormat();
        java.text.NumberFormat numberFormat35 = fractionFormat31.getNumeratorFormat();
        java.text.NumberFormat numberFormat36 = fractionFormat31.getNumeratorFormat();
        java.lang.String str38 = numberFormat36.format((long) 2147483647);
        properFractionFormat28.setDenominatorFormat(numberFormat36);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        java.text.AttributedCharacterIterator attributedCharacterIterator44 = numberFormat41.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj45 = numberFormat41.clone();
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getCurrencyInstance(locale47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.text.ParsePosition parsePosition52 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction53 = properFractionFormat49.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition52);
        java.lang.Object obj54 = numberFormat41.parseObject("zh-TW", parsePosition52);
        properFractionFormat28.setDenominatorFormat(numberFormat41);
        java.util.Locale locale59 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        int int61 = numberFormat60.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode62 = numberFormat60.getRoundingMode();
        boolean boolean63 = numberFormat60.isGroupingUsed();
        properFractionFormat28.setWholeFormat(numberFormat60);
        java.text.NumberFormat.Field field65 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition66 = new java.text.FieldPosition((java.text.Format.Field) field65);
        int int67 = fieldPosition66.getEndIndex();
        int int68 = fieldPosition66.getField();
        fieldPosition66.setEndIndex(0);
        int int71 = fieldPosition66.getField();
        java.text.Format.Field field72 = fieldPosition66.getFieldAttribute();
        java.text.FieldPosition fieldPosition74 = new java.text.FieldPosition(field72, (int) (byte) 100);
        java.text.Format.Field field75 = fieldPosition74.getFieldAttribute();
        java.lang.StringBuffer stringBuffer76 = null;
        java.text.NumberFormat.Field field77 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition78 = new java.text.FieldPosition((java.text.Format.Field) field77);
        java.text.FieldPosition fieldPosition80 = new java.text.FieldPosition((java.text.Format.Field) field77, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer81 = properFractionFormat28.format((java.lang.Object) fieldPosition74, stringBuffer76, fieldPosition80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "100 0 / 1" + "'", str33, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2,147,483,647" + "'", str38, "2,147,483,647");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(attributedCharacterIterator44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNull(fraction53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertEquals(locale59.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode62 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode62.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(field65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(field72);
        org.junit.Assert.assertNotNull(field75);
        org.junit.Assert.assertNotNull(field77);
    }

    @Test
    public void test09208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09208");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        long long4 = fraction2.longValue();
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale14 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        numberFormat15.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency18 = numberFormat15.getCurrency();
        numberFormat9.setCurrency(currency18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        boolean boolean21 = fraction2.equals((java.lang.Object) properFractionFormat20);
        java.util.Locale locale25 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        int int27 = numberFormat26.getMaximumIntegerDigits();
        int int28 = numberFormat26.getMaximumFractionDigits();
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat30, numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = new org.apache.commons.math.fraction.FractionFormat(numberFormat26, numberFormat30);
        java.util.Currency currency35 = numberFormat26.getCurrency();
        properFractionFormat20.setWholeFormat(numberFormat26);
        java.text.NumberFormat numberFormat37 = properFractionFormat20.getWholeFormat();
        java.text.ParsePosition parsePosition40 = new java.text.ParsePosition(10000);
        int int41 = parsePosition40.getErrorIndex();
        java.lang.Object obj42 = numberFormat37.parseObject("french (canada) (JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(EXPONENT SIGN),BEGININDEX=0,ENDINDEX=0],97)", parsePosition40);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1 / 100" + "'", str3, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals(locale25.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(obj42);
    }

    @Test
    public void test09209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09209");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.util.Locale.setDefault(locale0);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getScript();
        java.lang.String str5 = locale0.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayName();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency11 = numberFormat10.getCurrency();
        java.lang.String str13 = numberFormat10.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale16);
        java.util.Currency currency19 = numberFormat18.getCurrency();
        numberFormat18.setMinimumIntegerDigits(1);
        numberFormat18.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj27 = numberFormat18.parseObject("Japan", parsePosition26);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException31 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str32 = fractionConversionException31.getPattern();
        java.lang.Throwable[] throwableArray33 = fractionConversionException31.getSuppressed();
        java.lang.Object[] objArray34 = fractionConversionException31.getArguments();
        boolean boolean35 = parsePosition26.equals((java.lang.Object) objArray34);
        int int36 = parsePosition26.getIndex();
        java.lang.Object obj37 = properFractionFormat14.parseObject("java.text.ParsePosition[index=35,errorIndex=34]", parsePosition26);
        int int38 = parsePosition26.getIndex();
        java.lang.Object obj39 = fractionFormat7.parseObject("-1 / 207,360,000", parsePosition26);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "English" + "'", str6, "English");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "100%" + "'", str13, "100%");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(currency19);
        org.junit.Assert.assertEquals(currency19.toString(), "TWD");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str32, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(obj39);
    }

    @Test
    public void test09210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09210");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getField();
        java.text.Format.Field field3 = fieldPosition1.getFieldAttribute();
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale4.toLanguageTag();
        java.lang.String str6 = locale4.getVariant();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder7.setScript("");
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.lang.String str13 = locale10.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder9.setLocale(locale10);
        java.lang.String str15 = locale4.getDisplayVariant(locale10);
        java.lang.String str16 = locale10.getScript();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getInstance(locale10);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale10);
        boolean boolean19 = fieldPosition1.equals((java.lang.Object) numberFormat18);
        java.text.NumberFormat.Field field20 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition21 = new java.text.FieldPosition((java.text.Format.Field) field20);
        int int22 = fieldPosition21.getEndIndex();
        fieldPosition21.setBeginIndex((int) (byte) 100);
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str29 = fractionFormat27.format((java.lang.Object) 100);
        boolean boolean30 = fieldPosition21.equals((java.lang.Object) fractionFormat27);
        java.text.Format.Field field31 = fieldPosition21.getFieldAttribute();
        java.text.Format.Field field32 = fieldPosition21.getFieldAttribute();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException36 = new org.apache.commons.math.fraction.FractionConversionException((double) (short) 100, 0L, (long) 3);
        java.lang.Object[] objArray37 = fractionConversionException36.getArguments();
        boolean boolean38 = fieldPosition21.equals((java.lang.Object) objArray37);
        java.text.Format.Field field39 = fieldPosition21.getFieldAttribute();
        boolean boolean40 = fieldPosition1.equals((java.lang.Object) field39);
        java.lang.String str41 = field39.toString();
        java.text.FieldPosition fieldPosition42 = new java.text.FieldPosition(field39);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Chinesisch" + "'", str13, "Chinesisch");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(field20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "100 0 / 1" + "'", str29, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(field31);
        org.junit.Assert.assertNotNull(field32);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 0, 3]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 0, 3]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(field39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str41, "java.text.NumberFormat$Field(currency)");
    }

    @Test
    public void test09211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09211");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str1 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction0);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction5.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction0.multiply(fraction11);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction0.negate();
        long long17 = fraction16.longValue();
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.add(fraction25);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction16.multiply(fraction19);
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.negate();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction31.add(fraction37);
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.negate();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction40.divide(fraction43);
        int int46 = fraction40.intValue();
        float float47 = fraction40.floatValue();
        int int48 = fraction40.intValue();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction40.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction19.divide(fraction49);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction49.abs();
        java.lang.String str52 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction49);
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1 / 1" + "'", str1, "1 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.016666668f + "'", float47 == 0.016666668f);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "60 / 1" + "'", str52, "60 / 1");
    }

    @Test
    public void test09212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09212");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction6 = properFractionFormat2.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition5);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        numberFormat13.setMaximumFractionDigits((int) (short) -1);
        int int16 = numberFormat13.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        numberFormat13.setGroupingUsed(true);
        java.util.Currency currency20 = numberFormat13.getCurrency();
        java.text.NumberFormat.Field field22 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field22);
        java.lang.String str24 = fieldPosition23.toString();
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = locale25.getDisplayName(locale26);
        boolean boolean29 = fieldPosition23.equals((java.lang.Object) locale26);
        fieldPosition23.setEndIndex((int) '#');
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction38 = properFractionFormat34.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition37);
        boolean boolean39 = fieldPosition23.equals((java.lang.Object) parsePosition37);
        parsePosition37.setErrorIndex((int) '#');
        java.lang.Object obj42 = numberFormat13.parseObject("ja-JP", parsePosition37);
        org.apache.commons.math.fraction.Fraction fraction43 = properFractionFormat2.parse("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]", parsePosition37);
        java.util.Locale locale48 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        int int50 = numberFormat49.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = new org.apache.commons.math.fraction.FractionFormat(numberFormat49);
        java.util.Locale locale56 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance(locale56);
        int int58 = numberFormat57.getMaximumIntegerDigits();
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        boolean boolean61 = numberFormat60.isGroupingUsed();
        java.util.Currency currency62 = numberFormat60.getCurrency();
        numberFormat57.setCurrency(currency62);
        java.util.Currency currency64 = numberFormat57.getCurrency();
        java.math.RoundingMode roundingMode65 = numberFormat57.getRoundingMode();
        java.text.ParsePosition parsePosition68 = new java.text.ParsePosition((int) 'a');
        java.lang.String str69 = parsePosition68.toString();
        java.lang.String str70 = parsePosition68.toString();
        java.lang.Object obj71 = numberFormat57.parseObject("zho", parsePosition68);
        java.lang.Object obj72 = fractionFormat51.parseObject("java.text.NumberFormat$Field(currency)", parsePosition68);
        org.apache.commons.math.fraction.Fraction fraction73 = properFractionFormat2.parse("", parsePosition68);
        java.text.NumberFormat numberFormat74 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat75 = properFractionFormat2.getNumeratorFormat();
        numberFormat75.setMinimumIntegerDigits(600);
        java.lang.String str79 = numberFormat75.format((double) (byte) 86);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNull(fraction6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str24, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Chinese (Taiwan)" + "'", str28, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNull(fraction38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertEquals(locale48.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertEquals(locale56.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(currency62);
        org.junit.Assert.assertEquals(currency62.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency64);
        org.junit.Assert.assertEquals(currency64.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode65 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode65.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str69, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str70, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNull(fraction73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\244000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,086.00" + "'", str79, "\244000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,086.00");
    }

    @Test
    public void test09213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09213");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.util.Locale locale12 = java.util.Locale.getDefault(category0);
        java.util.Locale locale13 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale13);
        java.util.Locale.Category category16 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale17 = java.util.Locale.getDefault(category16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale18);
        java.util.Locale.setDefault(category16, locale18);
        java.util.Locale locale21 = java.util.Locale.getDefault(category16);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.util.Locale.setDefault(category22, locale23);
        java.util.Locale.setDefault(category16, locale23);
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.lang.String str28 = locale27.getISO3Country();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getIntegerInstance(locale27);
        java.util.Locale.setDefault(category16, locale27);
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.util.Locale locale32 = locale31.stripExtensions();
        java.util.Locale.setDefault(category16, locale31);
        java.util.Locale.setDefault(category0, locale31);
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.util.Locale locale36 = locale35.stripExtensions();
        java.util.Locale locale38 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale38);
        java.lang.String str40 = locale38.getDisplayCountry();
        java.lang.String str41 = locale35.getDisplayName(locale38);
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.lang.String str43 = locale42.getDisplayScript();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale44.getISO3Language();
        java.lang.String str46 = locale42.getDisplayScript(locale44);
        java.lang.String str47 = locale35.getDisplayLanguage(locale44);
        java.util.Set<java.lang.String> strSet48 = locale35.getUnicodeLocaleKeys();
        java.lang.String str50 = locale35.getExtension('x');
        java.util.Locale.setDefault(category0, locale35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale35);
        java.text.NumberFormat numberFormat53 = fractionFormat52.getNumeratorFormat();
        java.text.ParsePosition parsePosition56 = new java.text.ParsePosition((int) 'a');
        java.lang.String str57 = parsePosition56.toString();
        java.lang.String str58 = parsePosition56.toString();
        parsePosition56.setErrorIndex((int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction61 = fractionFormat52.parse("JAVA.TEXT.PARSEPOSITION[INDEX=5,ERRORINDEX=5]", parsePosition56);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.FORMAT + "'", category16.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertEquals(locale38.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "English" + "'", str41, "English");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "kor" + "'", str45, "kor");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\uc601\uc5b4" + "'", str47, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str57, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str58, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(fraction61);
    }

    @Test
    public void test09214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09214");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        boolean boolean4 = numberFormat3.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7, numberFormat9);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj14 = numberFormat9.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition13);
        properFractionFormat5.setNumeratorFormat(numberFormat9);
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        int int21 = numberFormat20.getMaximumIntegerDigits();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        boolean boolean24 = numberFormat23.isGroupingUsed();
        java.util.Currency currency25 = numberFormat23.getCurrency();
        numberFormat20.setCurrency(currency25);
        java.util.Currency currency27 = numberFormat20.getCurrency();
        java.math.RoundingMode roundingMode28 = numberFormat20.getRoundingMode();
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition((int) 'a');
        java.lang.String str32 = parsePosition31.toString();
        java.lang.String str33 = parsePosition31.toString();
        java.lang.Object obj34 = numberFormat20.parseObject("zho", parsePosition31);
        properFractionFormat5.setWholeFormat(numberFormat20);
        boolean boolean36 = fraction1.equals((java.lang.Object) properFractionFormat5);
        java.text.NumberFormat numberFormat37 = properFractionFormat5.getWholeFormat();
        java.text.NumberFormat numberFormat38 = properFractionFormat5.getDenominatorFormat();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode28 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode28.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str32, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str33, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
    }

    @Test
    public void test09215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09215");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) 0.01f, (int) (short) 17);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction6.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.add(fraction12);
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction15.divide(fraction18);
        int int21 = fraction15.intValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction15.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction(35, 2);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction25.multiply(fraction28);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction15.divide(fraction28);
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.util.Locale locale32 = locale31.stripExtensions();
        java.util.Locale locale34 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale34);
        java.lang.String str36 = locale34.getDisplayCountry();
        java.lang.String str37 = locale31.getDisplayName(locale34);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = locale38.getDisplayScript();
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale40.getISO3Language();
        java.lang.String str42 = locale38.getDisplayScript(locale40);
        java.lang.String str43 = locale31.getDisplayLanguage(locale40);
        java.util.Set<java.lang.String> strSet44 = locale31.getUnicodeLocaleKeys();
        boolean boolean45 = fraction15.equals((java.lang.Object) strSet44);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction15.negate();
        long long47 = fraction46.longValue();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction2.divide(fraction46);
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.negate();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.abs();
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.negate();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.abs();
        long long59 = fraction57.longValue();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction53.multiply(fraction57);
        org.apache.commons.math.fraction.Fraction fraction61 = fraction53.abs();
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.negate();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.abs();
        org.apache.commons.math.fraction.Fraction fraction69 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction70 = fraction69.negate();
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.abs();
        long long72 = fraction70.longValue();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction66.multiply(fraction70);
        org.apache.commons.math.fraction.Fraction fraction74 = fraction53.multiply(fraction73);
        org.apache.commons.math.fraction.Fraction fraction77 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction78 = fraction77.negate();
        org.apache.commons.math.fraction.Fraction fraction79 = fraction78.abs();
        org.apache.commons.math.fraction.Fraction fraction80 = fraction78.abs();
        org.apache.commons.math.fraction.Fraction fraction83 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction84 = fraction83.negate();
        org.apache.commons.math.fraction.Fraction fraction85 = fraction84.abs();
        org.apache.commons.math.fraction.Fraction fraction86 = fraction84.abs();
        org.apache.commons.math.fraction.Fraction fraction87 = fraction78.add(fraction84);
        org.apache.commons.math.fraction.Fraction fraction90 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction91 = fraction90.negate();
        org.apache.commons.math.fraction.Fraction fraction92 = fraction87.divide(fraction90);
        int int93 = fraction92.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction94 = fraction92.reciprocal();
        boolean boolean95 = fraction73.equals((java.lang.Object) fraction94);
        org.apache.commons.math.fraction.Fraction fraction96 = fraction46.add(fraction94);
        float float97 = fraction94.floatValue();
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "English" + "'", str37, "English");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "kor" + "'", str41, "kor");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\uc601\uc5b4" + "'", str43, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertNotNull(fraction87);
        org.junit.Assert.assertNotNull(fraction90);
        org.junit.Assert.assertNotNull(fraction91);
        org.junit.Assert.assertNotNull(fraction92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(fraction94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(fraction96);
        org.junit.Assert.assertTrue("'" + float97 + "' != '" + (-0.5f) + "'", float97 == (-0.5f));
    }

    @Test
    public void test09216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09216");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        java.lang.Object obj14 = numberFormat4.clone();
        java.lang.Object obj16 = numberFormat4.parseObject("-100%");
        boolean boolean17 = numberFormat4.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        numberFormat4.setMaximumFractionDigits(0);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + (-1L) + "'", obj16, (-1L));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09217");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.PRC;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale0.getDisplayCountry(locale2);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale6.getISO3Language();
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        java.lang.String str9 = locale6.getDisplayLanguage();
        java.lang.String str10 = locale0.getDisplayScript(locale6);
        java.text.NumberFormat.Field field11 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition((java.text.Format.Field) field11);
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition((java.text.Format.Field) field11, 1);
        java.text.FieldPosition fieldPosition16 = new java.text.FieldPosition((java.text.Format.Field) field11, (int) (short) 100);
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayScript();
        java.lang.String str20 = locale17.getDisplayCountry(locale18);
        java.util.Set<java.lang.String> strSet21 = locale18.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        boolean boolean23 = field11.equals((java.lang.Object) locale18);
        boolean boolean24 = locale18.hasExtensions();
        java.lang.String str25 = locale0.getDisplayLanguage(locale18);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale18);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale18);
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder28.clearExtensions();
        java.util.Locale.Builder builder30 = builder28.clear();
        java.util.Locale.Builder builder31 = builder30.clearExtensions();
        java.util.Locale.Builder builder32 = builder31.clear();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale33.getISO3Language();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleKeys();
        java.lang.String str36 = locale33.getISO3Country();
        java.util.Locale.Builder builder37 = builder31.setLocale(locale33);
        java.util.Locale.Builder builder38 = builder37.clear();
        java.util.Locale locale39 = builder38.build();
        java.lang.String str40 = locale18.getDisplayLanguage(locale39);
        java.lang.String str41 = locale39.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str4, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Japan" + "'", str20, "Japan");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Italian" + "'", str25, "Italian");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "kor" + "'", str34, "kor");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test09218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09218");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str8 = fractionFormat6.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat9 = fractionFormat6.getNumeratorFormat();
        fractionFormat3.setNumeratorFormat(numberFormat9);
        java.util.Locale locale14 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        int int16 = numberFormat15.getMaximumIntegerDigits();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        boolean boolean19 = numberFormat18.isGroupingUsed();
        java.util.Currency currency20 = numberFormat18.getCurrency();
        numberFormat15.setCurrency(currency20);
        java.util.Currency currency22 = numberFormat15.getCurrency();
        int int23 = numberFormat15.getMaximumFractionDigits();
        java.lang.Object obj24 = numberFormat15.clone();
        java.util.Currency currency25 = numberFormat15.getCurrency();
        numberFormat9.setCurrency(currency25);
        java.text.ParsePosition parsePosition28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number29 = numberFormat9.parse("java.text.ParsePosition[index=52,errorIndex=10]", parsePosition28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100 0 / 1" + "'", str8, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
    }

    @Test
    public void test09219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09219");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        int int5 = numberFormat4.getMinimumFractionDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        numberFormat7.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat7);
        numberFormat4.setMaximumIntegerDigits(32);
        numberFormat4.setMinimumIntegerDigits((int) (short) -2);
        numberFormat4.setMaximumFractionDigits(10000);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.lang.Object obj21 = properFractionFormat20.clone();
        java.text.NumberFormat numberFormat22 = properFractionFormat20.getWholeFormat();
        int int23 = numberFormat22.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = locale25.getDisplayCountry(locale26);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale25);
        int int30 = numberFormat29.getMinimumFractionDigits();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        numberFormat32.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat29, numberFormat32);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException40 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException44 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str45 = fractionConversionException44.getPattern();
        java.lang.Throwable[] throwableArray46 = fractionConversionException44.getSuppressed();
        fractionConversionException40.addSuppressed((java.lang.Throwable) fractionConversionException44);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException51 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException55 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str56 = fractionConversionException55.getPattern();
        java.lang.Throwable[] throwableArray57 = fractionConversionException55.getSuppressed();
        fractionConversionException51.addSuppressed((java.lang.Throwable) fractionConversionException55);
        fractionConversionException44.addSuppressed((java.lang.Throwable) fractionConversionException55);
        java.lang.Throwable[] throwableArray60 = fractionConversionException55.getSuppressed();
        java.lang.String str61 = fractionConversionException55.getPattern();
        boolean boolean62 = numberFormat29.equals((java.lang.Object) str61);
        java.lang.String str64 = numberFormat29.format((double) 2L);
        java.lang.String str66 = numberFormat29.format((long) 2147483647);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat22, numberFormat29);
        org.apache.commons.math.fraction.Fraction fraction69 = new org.apache.commons.math.fraction.Fraction((double) (short) -120);
        java.lang.StringBuffer stringBuffer70 = null;
        java.text.NumberFormat.Field field71 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition73 = new java.text.FieldPosition((java.text.Format.Field) field71, (int) '#');
        java.text.Format.Field field74 = fieldPosition73.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction77 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction80 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction83 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction84 = fraction83.negate();
        org.apache.commons.math.fraction.Fraction fraction85 = fraction80.multiply(fraction84);
        org.apache.commons.math.fraction.Fraction fraction86 = fraction77.add(fraction84);
        boolean boolean87 = field74.equals((java.lang.Object) fraction77);
        java.text.FieldPosition fieldPosition88 = new java.text.FieldPosition(field74);
        java.text.Format.Field field89 = fieldPosition88.getFieldAttribute();
        int int90 = fieldPosition88.getEndIndex();
        int int91 = fieldPosition88.getBeginIndex();
        fieldPosition88.setBeginIndex((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer94 = properFractionFormat67.format(fraction69, stringBuffer70, fieldPosition88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Japan" + "'", str28, "Japan");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str45, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str56, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str61, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2" + "'", str64, "2");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2,147,483,647" + "'", str66, "2,147,483,647");
        org.junit.Assert.assertNotNull(field71);
        org.junit.Assert.assertNotNull(field74);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(field89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test09220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09220");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str8 = numberFormat4.format((double) 0.0f);
        java.util.Locale locale12 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        int int14 = numberFormat13.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13);
        java.text.NumberFormat numberFormat16 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat13, numberFormat16);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException20 = new org.apache.commons.math.fraction.FractionConversionException(0.0d, 10);
        boolean boolean21 = numberFormat13.equals((java.lang.Object) 10);
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23, numberFormat25);
        int int27 = numberFormat23.getMaximumIntegerDigits();
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayScript();
        java.lang.String str31 = locale28.getDisplayCountry(locale29);
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance(locale29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale29);
        java.util.Set<java.lang.Character> charSet35 = locale29.getExtensionKeys();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getIntegerInstance(locale29);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat23, numberFormat36);
        java.util.Locale locale39 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale39);
        java.lang.String str42 = fractionFormat40.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat43 = fractionFormat40.getNumeratorFormat();
        java.util.Locale locale44 = java.util.Locale.getDefault();
        java.util.Locale locale45 = locale44.stripExtensions();
        java.util.Locale locale47 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale47);
        java.lang.String str49 = locale47.getDisplayCountry();
        java.lang.String str50 = locale44.getDisplayName(locale47);
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale53.getISO3Language();
        java.lang.String str55 = locale51.getDisplayScript(locale53);
        java.lang.String str56 = locale44.getDisplayLanguage(locale53);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getNumberInstance(locale44);
        fractionFormat40.setNumeratorFormat(numberFormat57);
        properFractionFormat37.setDenominatorFormat(numberFormat57);
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = new org.apache.commons.math.fraction.FractionFormat(numberFormat57);
        numberFormat57.setMinimumIntegerDigits(96);
        java.util.Locale locale63 = java.util.Locale.JAPAN;
        java.util.Locale locale64 = java.util.Locale.ROOT;
        java.lang.String str65 = locale64.getDisplayScript();
        java.lang.String str66 = locale63.getDisplayCountry(locale64);
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getNumberInstance(locale63);
        java.lang.String str68 = locale63.getDisplayCountry();
        java.lang.String str69 = locale63.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale63);
        java.lang.String str71 = locale63.getVariant();
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getNumberInstance(locale63);
        java.lang.String str74 = numberFormat72.format(121.00840336134453d);
        int int75 = numberFormat72.getMaximumIntegerDigits();
        java.util.Locale locale79 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat80 = java.text.NumberFormat.getPercentInstance(locale79);
        int int81 = numberFormat80.getMaximumIntegerDigits();
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat83 = java.text.NumberFormat.getPercentInstance(locale82);
        boolean boolean84 = numberFormat83.isGroupingUsed();
        java.util.Currency currency85 = numberFormat83.getCurrency();
        numberFormat80.setCurrency(currency85);
        java.util.Currency currency87 = numberFormat80.getCurrency();
        int int88 = numberFormat80.getMaximumFractionDigits();
        java.lang.Object obj89 = numberFormat80.clone();
        java.util.Currency currency90 = numberFormat80.getCurrency();
        numberFormat72.setCurrency(currency90);
        org.apache.commons.math.fraction.FractionFormat fractionFormat92 = new org.apache.commons.math.fraction.FractionFormat(numberFormat57, numberFormat72);
        java.util.Locale locale94 = new java.util.Locale("java.text.parseexception: zh_tw");
        java.text.NumberFormat numberFormat95 = java.text.NumberFormat.getPercentInstance(locale94);
        fractionFormat92.setNumeratorFormat(numberFormat95);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0%" + "'", str8, "0%");
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Japan" + "'", str31, "Japan");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "100 0 / 1" + "'", str42, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale44);
// flaky:         org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertEquals(locale47.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Korean" + "'", str50, "Korean");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "kor" + "'", str54, "kor");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str56, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Japan" + "'", str66, "Japan");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\uc77c\ubcf8" + "'", str68, "\uc77c\ubcf8");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\uc77c\ubcf8" + "'", str69, "\uc77c\ubcf8");
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "121.008" + "'", str74, "121.008");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2147483647 + "'", int75 == 2147483647);
        org.junit.Assert.assertEquals(locale79.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2147483647 + "'", int81 == 2147483647);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(currency85);
        org.junit.Assert.assertEquals(currency85.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency87);
        org.junit.Assert.assertEquals(currency87.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertNotNull(currency90);
        org.junit.Assert.assertEquals(currency90.toString(), "XXX");
        org.junit.Assert.assertEquals(locale94.toString(), "java.text.parseexception: zh_tw");
        org.junit.Assert.assertNotNull(numberFormat95);
    }

    @Test
    public void test09221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09221");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction4.divide(fraction23);
        int int25 = fraction23.getNumerator();
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder26.setScript("");
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str30 = locale29.getDisplayLanguage();
        java.lang.String str31 = locale29.toLanguageTag();
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        java.lang.String str34 = locale32.getISO3Language();
        java.lang.String str35 = locale29.getDisplayScript(locale32);
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.lang.String str37 = locale29.getDisplayCountry(locale36);
        java.util.Locale.Builder builder38 = builder26.setLocale(locale36);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getInstance(locale36);
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.negate();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction42.multiply(fraction46);
        java.lang.String str48 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction42);
        java.lang.String str49 = numberFormat39.format((java.lang.Object) fraction42);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction42.abs();
        org.apache.commons.math.fraction.Fraction fraction53 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.negate();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.abs();
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.negate();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.abs();
        long long61 = fraction59.longValue();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction55.multiply(fraction59);
        org.apache.commons.math.fraction.Fraction fraction65 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.negate();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction66.abs();
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.negate();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction71.abs();
        long long73 = fraction71.longValue();
        org.apache.commons.math.fraction.Fraction fraction74 = fraction67.multiply(fraction71);
        org.apache.commons.math.fraction.Fraction fraction75 = fraction59.subtract(fraction74);
        org.apache.commons.math.fraction.Fraction fraction78 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction79 = fraction78.negate();
        double double80 = fraction78.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction84 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction85 = fraction78.multiply(fraction84);
        boolean boolean86 = fraction75.equals((java.lang.Object) fraction78);
        int int87 = fraction75.intValue();
        int int88 = fraction75.getDenominator();
        int int89 = fraction75.intValue();
        org.apache.commons.math.fraction.Fraction fraction90 = fraction42.divide(fraction75);
        org.apache.commons.math.fraction.Fraction fraction91 = fraction23.add(fraction75);
        org.apache.commons.math.fraction.Fraction fraction92 = fraction91.negate();
        org.apache.commons.math.fraction.Fraction fraction94 = new org.apache.commons.math.fraction.Fraction((-1.0d));
        int int95 = fraction94.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction97 = new org.apache.commons.math.fraction.Fraction((double) 9700L);
        org.apache.commons.math.fraction.Fraction fraction98 = fraction94.add(fraction97);
        org.apache.commons.math.fraction.Fraction fraction99 = fraction91.divide(fraction98);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str30, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zh-TW" + "'", str31, "zh-TW");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zho" + "'", str34, "zho");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Taiwan" + "'", str37, "Taiwan");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "20 / 7" + "'", str48, "20 / 7");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2,857" + "'", str49, "2,857");
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-0.008333333333333333d) + "'", double80 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 14400 + "'", int88 == 14400);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(fraction90);
        org.junit.Assert.assertNotNull(fraction91);
        org.junit.Assert.assertNotNull(fraction92);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertNotNull(fraction98);
        org.junit.Assert.assertNotNull(fraction99);
    }

    @Test
    public void test09222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09222");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (-1.0f), (double) 10, (int) (byte) -1);
        int int4 = fraction3.getNumerator();
        int int5 = fraction3.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction3.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.reciprocal();
        java.lang.String str9 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1 / 1" + "'", str9, "-1 / 1");
    }

    @Test
    public void test09223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09223");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.PRC;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale0.getDisplayCountry(locale2);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale6.getISO3Language();
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        java.lang.String str9 = locale6.getDisplayLanguage();
        java.lang.String str10 = locale0.getDisplayScript(locale6);
        java.text.NumberFormat.Field field11 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition((java.text.Format.Field) field11);
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition((java.text.Format.Field) field11, 1);
        java.text.FieldPosition fieldPosition16 = new java.text.FieldPosition((java.text.Format.Field) field11, (int) (short) 100);
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayScript();
        java.lang.String str20 = locale17.getDisplayCountry(locale18);
        java.util.Set<java.lang.String> strSet21 = locale18.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        boolean boolean23 = field11.equals((java.lang.Object) locale18);
        boolean boolean24 = locale18.hasExtensions();
        java.lang.String str25 = locale0.getDisplayLanguage(locale18);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale18);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale18);
        int int28 = numberFormat27.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.util.Currency currency30 = null;
        // The following exception was thrown during execution in test generation
        try {
            numberFormat27.setCurrency(currency30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str4, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Japan" + "'", str20, "Japan");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Italian" + "'", str25, "Italian");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test09224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09224");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.String str9 = locale0.getDisplayName();
        java.lang.String str10 = locale0.getCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayScript();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale14.getISO3Language();
        java.lang.String str16 = locale12.getDisplayScript(locale14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale12);
        numberFormat17.setParseIntegerOnly(false);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.text.NumberFormat numberFormat23 = properFractionFormat22.getWholeFormat();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean27 = numberFormat25.equals((java.lang.Object) numberFormat26);
        properFractionFormat22.setWholeFormat(numberFormat25);
        boolean boolean29 = numberFormat17.equals((java.lang.Object) properFractionFormat22);
        java.text.NumberFormat numberFormat30 = properFractionFormat22.getDenominatorFormat();
        java.util.Locale locale31 = java.util.Locale.TAIWAN;
        java.lang.String str32 = locale31.toLanguageTag();
        java.lang.String str33 = locale31.getDisplayLanguage();
        java.lang.String str34 = locale31.getISO3Country();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale31);
        properFractionFormat22.setDenominatorFormat(numberFormat35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = new org.apache.commons.math.fraction.FractionFormat(numberFormat35);
        java.lang.StringBuffer stringBuffer38 = null;
        java.text.FieldPosition fieldPosition40 = new java.text.FieldPosition(10);
        int int41 = fieldPosition40.getEndIndex();
        fieldPosition40.setBeginIndex((int) '#');
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.lang.String str45 = locale44.getScript();
        java.util.Locale locale49 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str50 = locale44.getDisplayScript(locale49);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getNumberInstance(locale49);
        int int52 = numberFormat51.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = new org.apache.commons.math.fraction.FractionFormat(numberFormat51);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        boolean boolean55 = fieldPosition40.equals((java.lang.Object) numberFormat51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer56 = numberFormat11.format((java.lang.Object) numberFormat35, stringBuffer38, fieldPosition40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zh-TW" + "'", str32, "zh-TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str33, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "TWN" + "'", str34, "TWN");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals(locale49.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test09225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09225");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale6);
        java.util.Currency currency9 = numberFormat8.getCurrency();
        numberFormat8.setMinimumIntegerDigits(1);
        int int12 = numberFormat8.getMinimumIntegerDigits();
        boolean boolean13 = fraction5.equals((java.lang.Object) numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09226");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        int int7 = numberFormat6.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test09227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09227");
        java.util.Locale locale2 = new java.util.Locale("France", "CHINESE (TAIWAN)");
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.lang.String str4 = locale2.getVariant();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getNumberInstance(locale2);
        numberFormat5.setParseIntegerOnly(false);
        java.util.Currency currency8 = numberFormat5.getCurrency();
        org.junit.Assert.assertEquals(locale2.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
    }

    @Test
    public void test09228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09228");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat7.parse("java.text.ParseException: zh_TW", parsePosition16);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.lang.String str26 = fractionFormat24.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat27 = fractionFormat24.getNumeratorFormat();
        numberFormat27.setMaximumFractionDigits((int) (short) -1);
        int int30 = numberFormat27.getMinimumFractionDigits();
        java.math.RoundingMode roundingMode31 = numberFormat27.getRoundingMode();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        boolean boolean37 = numberFormat36.isGroupingUsed();
        properFractionFormat34.setWholeFormat(numberFormat36);
        java.util.Locale locale39 = java.util.Locale.getDefault();
        java.util.Locale locale40 = locale39.stripExtensions();
        java.util.Locale locale42 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale42);
        java.lang.String str44 = locale42.getDisplayCountry();
        java.lang.String str45 = locale39.getDisplayName(locale42);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.lang.String str47 = locale46.getDisplayScript();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale48.getISO3Language();
        java.lang.String str50 = locale46.getDisplayScript(locale48);
        java.lang.String str51 = locale39.getDisplayLanguage(locale48);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getNumberInstance(locale39);
        java.util.Currency currency53 = numberFormat52.getCurrency();
        java.util.Locale locale57 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance(locale57);
        int int59 = numberFormat58.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = new org.apache.commons.math.fraction.FractionFormat(numberFormat58);
        numberFormat58.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode63 = numberFormat58.getRoundingMode();
        numberFormat52.setRoundingMode(roundingMode63);
        numberFormat36.setRoundingMode(roundingMode63);
        numberFormat27.setRoundingMode(roundingMode63);
        properFractionFormat7.setWholeFormat(numberFormat27);
        java.text.NumberFormat numberFormat68 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat69 = properFractionFormat7.getWholeFormat();
        java.util.Locale locale70 = java.util.Locale.TAIWAN;
        java.lang.String str71 = locale70.toLanguageTag();
        java.lang.String str72 = locale70.getVariant();
        java.util.Locale.Builder builder73 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder75 = builder73.setScript("");
        java.util.Locale locale76 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet77 = locale76.getUnicodeLocaleAttributes();
        java.util.Locale locale78 = java.util.Locale.GERMANY;
        java.lang.String str79 = locale76.getDisplayLanguage(locale78);
        java.util.Locale.Builder builder80 = builder75.setLocale(locale76);
        java.lang.String str81 = locale70.getDisplayVariant(locale76);
        java.lang.String str82 = locale76.getDisplayName();
        java.lang.String str83 = locale76.toLanguageTag();
        java.lang.String str84 = locale76.getDisplayCountry();
        java.text.NumberFormat numberFormat85 = java.text.NumberFormat.getPercentInstance(locale76);
        org.apache.commons.math.fraction.FractionFormat fractionFormat86 = new org.apache.commons.math.fraction.FractionFormat(numberFormat85);
        properFractionFormat7.setWholeFormat(numberFormat85);
        java.text.NumberFormat numberFormat88 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat89 = properFractionFormat7.getDenominatorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(fraction21);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100 0 / 1" + "'", str26, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + roundingMode31 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode31.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(locale39);
// flaky:         org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
// flaky:         org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals(locale42.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Korean" + "'", str45, "Korean");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "kor" + "'", str49, "kor");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str51, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "XXX");
        org.junit.Assert.assertEquals(locale57.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode63 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode63.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "zh-TW" + "'", str71, "zh-TW");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Chinesisch" + "'", str79, "Chinesisch");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str82, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "zh-TW" + "'", str83, "zh-TW");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\ub300\ub9cc" + "'", str84, "\ub300\ub9cc");
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertNotNull(numberFormat89);
    }

    @Test
    public void test09229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09229");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        boolean boolean16 = numberFormat15.isParseIntegerOnly();
        numberFormat15.setGroupingUsed(false);
        properFractionFormat3.setWholeFormat(numberFormat15);
        numberFormat15.setMinimumFractionDigits((int) 'u');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        boolean boolean26 = numberFormat25.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str29 = numberFormat25.format(0.008333333333333333d);
        boolean boolean30 = numberFormat25.isParseIntegerOnly();
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj34 = numberFormat25.parseObject("\u65e5\u6587", parsePosition33);
        int int35 = parsePosition33.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction36 = properFractionFormat22.parse("\uc601\uc5b4\uce90\ub098\ub2e4)", parsePosition33);
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) '#');
        java.lang.Object obj40 = properFractionFormat22.parseObject("java.text.NumberFormat$Field(exponent symbol)", parsePosition39);
        parsePosition39.setErrorIndex(0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1%" + "'", str29, "1%");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNull(fraction36);
        org.junit.Assert.assertNull(obj40);
    }

    @Test
    public void test09230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09230");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("fr");
        java.util.Locale locale2 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.lang.String str4 = locale1.getDisplayLanguage(locale2);
        java.util.Set<java.lang.String> strSet5 = locale1.getUnicodeLocaleKeys();
        java.lang.String str6 = locale1.getCountry();
        java.lang.String str7 = locale1.toLanguageTag();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fran\347ais" + "'", str4, "fran\347ais");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr" + "'", str7, "fr");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
    }

    @Test
    public void test09231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09231");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat10 = properFractionFormat9.getWholeFormat();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        numberFormat12.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale18.getISO3Language();
        java.util.Set<java.lang.Character> charSet20 = locale18.getExtensionKeys();
        java.util.Locale locale21 = java.util.Locale.US;
        java.lang.String str22 = locale21.getDisplayScript();
        java.lang.String str23 = locale18.getDisplayVariant(locale21);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getCurrencyInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance(locale27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat28, numberFormat30);
        java.text.ParsePosition parsePosition34 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj35 = numberFormat30.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition34);
        java.lang.String str36 = parsePosition34.toString();
        boolean boolean38 = parsePosition34.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction39 = properFractionFormat25.parse("java.text.ParseException: zh_TW", parsePosition34);
        java.lang.Object obj40 = fractionFormat16.parseObject("Italian", parsePosition34);
        org.apache.commons.math.fraction.Fraction fraction41 = properFractionFormat2.parse("9,700%", parsePosition34);
        java.util.Locale locale46 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance(locale46);
        int int48 = numberFormat47.getMaximumIntegerDigits();
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance(locale49);
        boolean boolean51 = numberFormat50.isGroupingUsed();
        java.util.Currency currency52 = numberFormat50.getCurrency();
        numberFormat47.setCurrency(currency52);
        java.util.Currency currency54 = numberFormat47.getCurrency();
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getInstance(locale56);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance(locale58);
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = new org.apache.commons.math.fraction.FractionFormat(numberFormat57, numberFormat59);
        java.text.ParsePosition parsePosition63 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj64 = numberFormat59.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition63);
        java.lang.String str65 = parsePosition63.toString();
        java.lang.Number number66 = numberFormat47.parse("Chinese", parsePosition63);
        org.apache.commons.math.fraction.Fraction fraction67 = properFractionFormat2.parse("JPN", parsePosition63);
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        java.lang.String str69 = locale68.getScript();
        java.util.Locale locale73 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str74 = locale68.getDisplayScript(locale73);
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getNumberInstance(locale73);
        numberFormat75.setParseIntegerOnly(true);
        numberFormat75.setParseIntegerOnly(false);
        java.lang.String str81 = numberFormat75.format((long) 6000);
        properFractionFormat2.setWholeFormat(numberFormat75);
        java.text.NumberFormat numberFormat83 = properFractionFormat2.getDenominatorFormat();
        java.util.Locale locale85 = java.util.Locale.forLanguageTag("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 100 to fraction (100/-1)");
        java.lang.String str86 = locale85.getDisplayLanguage();
        java.lang.String str87 = locale85.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str88 = properFractionFormat2.format((java.lang.Object) str87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str36, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(fraction39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertEquals(locale46.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency54);
        org.junit.Assert.assertEquals(currency54.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str65, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number66);
        org.junit.Assert.assertNull(fraction67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals(locale73.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "6,000" + "'", str81, "6,000");
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test09232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09232");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder7 = builder3.clear();
        java.util.Locale.Builder builder8 = builder3.clearExtensions();
        java.util.Locale locale9 = builder8.build();
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("0");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayScript();
        java.lang.String str14 = locale12.getScript();
        java.lang.String str15 = locale11.getDisplayCountry(locale12);
        java.lang.String str16 = locale11.getDisplayName();
        java.util.Locale.Category category17 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.util.Locale locale19 = locale18.stripExtensions();
        java.util.Locale locale21 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale21);
        java.lang.String str23 = locale21.getDisplayCountry();
        java.lang.String str24 = locale18.getDisplayName(locale21);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayScript();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale27.getISO3Language();
        java.lang.String str29 = locale25.getDisplayScript(locale27);
        java.lang.String str30 = locale18.getDisplayLanguage(locale27);
        java.lang.String str31 = locale18.toLanguageTag();
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getIntegerInstance(locale18);
        java.util.Locale.setDefault(category17, locale18);
        java.util.Locale locale34 = java.util.Locale.getDefault(category17);
        java.lang.String str35 = locale11.getDisplayScript(locale34);
        java.lang.String str36 = locale9.getDisplayScript(locale11);
        java.lang.String str37 = locale11.getLanguage();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.FORMAT + "'", category17.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale18);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Korean" + "'", str24, "Korean");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "kor" + "'", str28, "kor");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str30, "\ud55c\uad6d\uc5b4");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ko" + "'", str31, "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale34);
// flaky:         org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test09233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09233");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = numberFormat1.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale6.getISO3Language();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet10 = locale6.getUnicodeLocaleKeys();
        java.lang.String str11 = locale6.toLanguageTag();
        java.lang.String str12 = locale6.getDisplayLanguage();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale6);
        java.text.NumberFormat.Field field15 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition16 = new java.text.FieldPosition((java.text.Format.Field) field15);
        java.lang.String str17 = fieldPosition16.toString();
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale19.getDisplayScript();
        java.lang.String str21 = locale18.getDisplayName(locale19);
        boolean boolean22 = fieldPosition16.equals((java.lang.Object) locale19);
        fieldPosition16.setEndIndex((int) '#');
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getCurrencyInstance(locale25);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.text.ParsePosition parsePosition30 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction31 = properFractionFormat27.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition30);
        boolean boolean32 = fieldPosition16.equals((java.lang.Object) parsePosition30);
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.lang.String str34 = locale33.getScript();
        java.util.Locale locale38 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str39 = locale33.getDisplayScript(locale38);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getNumberInstance(locale38);
        java.util.Set<java.lang.String> strSet41 = locale38.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet42 = locale38.getExtensionKeys();
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.util.Locale locale44 = java.util.Locale.PRC;
        java.lang.String str45 = locale43.getDisplayName(locale44);
        java.lang.String str46 = locale38.getDisplayName(locale43);
        java.util.Locale locale47 = locale43.stripExtensions();
        java.util.Locale locale48 = java.util.Locale.JAPAN;
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = locale49.getDisplayScript();
        java.lang.String str51 = locale48.getDisplayCountry(locale49);
        java.util.Set<java.lang.String> strSet52 = locale49.getUnicodeLocaleAttributes();
        java.lang.String str53 = locale47.getDisplayVariant(locale49);
        java.lang.String str54 = locale47.getDisplayCountry();
        java.util.Locale.Category category55 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale56 = java.util.Locale.getDefault(category55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale57);
        java.util.Locale.setDefault(category55, locale57);
        java.util.Locale locale60 = java.util.Locale.getDefault(category55);
        java.util.Locale locale61 = java.util.Locale.JAPAN;
        java.util.Locale locale62 = java.util.Locale.ROOT;
        java.lang.String str63 = locale62.getDisplayScript();
        java.lang.String str64 = locale61.getDisplayCountry(locale62);
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getNumberInstance(locale61);
        java.lang.String str66 = locale60.getDisplayCountry(locale61);
        java.lang.String str67 = locale61.getDisplayName();
        java.lang.String str68 = locale61.getCountry();
        java.lang.String str69 = locale47.getDisplayVariant(locale61);
        boolean boolean70 = parsePosition30.equals((java.lang.Object) locale47);
        int int71 = parsePosition30.getIndex();
        java.lang.Object obj72 = numberFormat13.parseObject("10 / 1", parsePosition30);
        int int73 = numberFormat13.getMaximumFractionDigits();
        properFractionFormat3.setWholeFormat(numberFormat13);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ko" + "'", str11, "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(field15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str17, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Chinese (Taiwan)" + "'", str21, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNull(fraction31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals(locale38.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str45, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str46, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Japan" + "'", str51, "Japan");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\uce90\ub098\ub2e4" + "'", str54, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertTrue("'" + category55 + "' != '" + java.util.Locale.Category.FORMAT + "'", category55.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale56);
// flaky:         org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Japan" + "'", str64, "Japan");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\uc77c\ubcf8\uc5b4\uc77c\ubcf8)" + "'", str67, "\uc77c\ubcf8\uc5b4\uc77c\ubcf8)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "JP" + "'", str68, "JP");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertEquals("'" + obj72 + "' != '" + 0L + "'", obj72, 0L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
    }

    @Test
    public void test09234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09234");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 6000L, (double) (short) 10, (int) (short) 17);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "6,000 / 1" + "'", str4, "6,000 / 1");
    }

    @Test
    public void test09235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09235");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder9 = builder7.setLanguage("coreano");
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.setLanguageTag("en");
        java.util.Locale.Builder builder15 = builder10.setExtension('a', "Korean");
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale16.getDisplayScript();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale18.getISO3Language();
        java.lang.String str20 = locale16.getDisplayScript(locale18);
        java.lang.String str21 = locale16.toLanguageTag();
        java.lang.String str22 = locale16.getDisplayVariant();
        boolean boolean23 = locale16.hasExtensions();
        java.util.Locale.Builder builder24 = builder15.setLocale(locale16);
        java.util.Locale locale25 = builder15.build();
        java.util.Locale.Builder builder26 = builder15.clear();
        java.text.NumberFormat.Field field27 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition28 = new java.text.FieldPosition((java.text.Format.Field) field27);
        java.util.Locale locale29 = java.util.Locale.CHINA;
        boolean boolean30 = field27.equals((java.lang.Object) locale29);
        java.lang.String str31 = locale29.getCountry();
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        java.util.Locale locale34 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str35 = locale32.getDisplayScript(locale34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale32);
        java.lang.String str37 = locale29.getDisplayVariant(locale32);
        java.lang.String str38 = locale29.getVariant();
        java.util.Locale.Builder builder39 = builder15.setLocale(locale29);
        java.util.Locale.Builder builder40 = builder9.setLocale(locale29);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "und" + "'", str21, "und");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(field27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "CN" + "'", str31, "CN");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test09236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09236");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet9 = locale5.getExtensionKeys();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = locale5.getDisplayName(locale10);
        java.util.Locale locale14 = locale10.stripExtensions();
        java.util.Locale locale18 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str19 = locale18.getDisplayVariant();
        java.util.Locale locale23 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.util.Locale locale25 = locale23.stripExtensions();
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale26);
        java.util.Set<java.lang.String> strSet28 = locale26.getUnicodeLocaleKeys();
        boolean boolean29 = locale26.hasExtensions();
        java.lang.String str30 = locale23.getDisplayScript(locale26);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale26);
        java.lang.String str32 = locale18.getDisplayScript(locale26);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str34 = locale14.getDisplayScript(locale18);
        java.lang.String str35 = locale18.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str12, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str13, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale18.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "10,000%" + "'", str19, "10,000%");
        org.junit.Assert.assertEquals(locale23.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "taiwan" + "'", str35, "taiwan");
    }

    @Test
    public void test09237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09237");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency7 = numberFormat4.getCurrency();
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getISO3Language();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale12);
        java.util.Currency currency15 = numberFormat14.getCurrency();
        numberFormat14.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat14);
        java.lang.String str21 = numberFormat11.format(0.0d);
        java.lang.String str23 = numberFormat11.format((long) 96);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        numberFormat24.setParseIntegerOnly(true);
        java.math.RoundingMode roundingMode27 = numberFormat24.getRoundingMode();
        int int28 = numberFormat24.getMinimumIntegerDigits();
        java.lang.Object obj29 = numberFormat24.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat11, numberFormat24);
        numberFormat4.setMaximumIntegerDigits((int) (short) 60);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zho" + "'", str10, "zho");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "TWD");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "96" + "'", str23, "96");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + roundingMode27 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode27.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(obj29);
    }

    @Test
    public void test09238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09238");
        java.util.Locale locale2 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale12);
        numberFormat15.setMinimumIntegerDigits(0);
        java.lang.String str19 = numberFormat15.format(1.0d);
        java.util.Locale locale20 = java.util.Locale.getDefault();
        java.util.Locale locale21 = locale20.stripExtensions();
        java.util.Locale locale23 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.lang.String str25 = locale23.getDisplayCountry();
        java.lang.String str26 = locale20.getDisplayName(locale23);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale27.getDisplayScript();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale29.getISO3Language();
        java.lang.String str31 = locale27.getDisplayScript(locale29);
        java.lang.String str32 = locale20.getDisplayLanguage(locale29);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getNumberInstance(locale20);
        java.util.Currency currency34 = numberFormat33.getCurrency();
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.abs();
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.negate();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.abs();
        long long45 = fraction43.longValue();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction39.multiply(fraction43);
        boolean boolean47 = numberFormat33.equals((java.lang.Object) fraction39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat15, numberFormat33);
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance();
        numberFormat49.setMaximumIntegerDigits(2147483647);
        java.lang.String str53 = numberFormat49.format((long) 2147483647);
        java.util.Locale locale57 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance(locale57);
        int int59 = numberFormat58.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = new org.apache.commons.math.fraction.FractionFormat(numberFormat58);
        numberFormat58.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode63 = numberFormat58.getRoundingMode();
        numberFormat49.setRoundingMode(roundingMode63);
        numberFormat15.setRoundingMode(roundingMode63);
        numberFormat3.setRoundingMode(roundingMode63);
        java.util.Locale locale67 = java.util.Locale.CANADA;
        java.util.Locale locale68 = locale67.stripExtensions();
        java.lang.String str69 = locale67.getScript();
        java.lang.StringBuffer stringBuffer70 = null;
        java.text.NumberFormat.Field field71 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition72 = new java.text.FieldPosition((java.text.Format.Field) field71);
        java.text.FieldPosition fieldPosition74 = new java.text.FieldPosition((java.text.Format.Field) field71, (int) (short) 0);
        java.text.Format.Field field75 = fieldPosition74.getFieldAttribute();
        fieldPosition74.setBeginIndex(60);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer78 = numberFormat3.format((java.lang.Object) str69, stringBuffer70, fieldPosition74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kor" + "'", str5, "kor");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(locale20);
// flaky:         org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Korean" + "'", str26, "Korean");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "kor" + "'", str30, "kor");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str32, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "214,748,364,700%" + "'", str53, "214,748,364,700%");
        org.junit.Assert.assertEquals(locale57.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode63 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode63.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(field71);
        org.junit.Assert.assertNotNull(field75);
    }

    @Test
    public void test09239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09239");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.lang.String str9 = locale6.getDisplayCountry(locale7);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getNumberInstance(locale6);
        java.lang.String str11 = locale5.getDisplayCountry(locale6);
        java.lang.String str12 = locale5.getDisplayScript();
        java.util.Locale locale15 = new java.util.Locale("java.text.ParsePosition[index=1,errorIndex=0]", "cinese");
        java.util.Locale.Category category16 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale17 = java.util.Locale.getDefault(category16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale18);
        java.util.Locale.setDefault(category16, locale18);
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale21.getDisplayScript(locale22);
        java.util.Locale.setDefault(category16, locale21);
        java.util.Locale locale28 = new java.util.Locale("Japanese (Japan)", "chinois", "-1 / 120");
        java.util.Locale.setDefault(category16, locale28);
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getInstance(locale30);
        java.util.Locale locale33 = locale30.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        java.lang.String str36 = locale33.getDisplayName(locale34);
        java.util.Locale.setDefault(category16, locale33);
        java.lang.String str38 = locale15.getDisplayCountry(locale33);
        java.lang.String str39 = locale5.getDisplayCountry(locale33);
        java.lang.String str41 = locale33.getExtension('x');
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(locale15.toString(), "java.text.parseposition[index=1,errorindex=0]_CINESE");
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.FORMAT + "'", category16.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals(locale28.toString(), "japanese (japan)_CHINOIS_-1 / 120");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str36, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CINESE" + "'", str38, "CINESE");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test09240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09240");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        java.lang.String str3 = numberFormat0.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        java.lang.String[] strArray10 = java.util.Locale.getISOCountries();
        boolean boolean11 = numberFormat9.equals((java.lang.Object) strArray10);
        java.util.Locale locale15 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        int int17 = numberFormat16.getMaximumIntegerDigits();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        boolean boolean20 = numberFormat19.isGroupingUsed();
        java.util.Currency currency21 = numberFormat19.getCurrency();
        numberFormat16.setCurrency(currency21);
        java.util.Currency currency23 = numberFormat16.getCurrency();
        java.math.RoundingMode roundingMode24 = numberFormat16.getRoundingMode();
        numberFormat9.setRoundingMode(roundingMode24);
        boolean boolean26 = numberFormat9.isParseIntegerOnly();
        properFractionFormat4.setWholeFormat(numberFormat9);
        java.text.NumberFormat numberFormat28 = properFractionFormat4.getWholeFormat();
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        java.util.Locale locale33 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.lang.String str35 = locale33.getDisplayCountry();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getIntegerInstance(locale33);
        java.lang.String str37 = locale30.getDisplayCountry(locale33);
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale30);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = new org.apache.commons.math.fraction.FractionFormat(numberFormat38);
        java.text.ParsePosition parsePosition42 = new java.text.ParsePosition((int) '4');
        parsePosition42.setErrorIndex(600);
        int int45 = parsePosition42.getIndex();
        java.lang.Object obj46 = fractionFormat39.parseObject("it", parsePosition42);
        java.lang.String str47 = parsePosition42.toString();
        java.lang.Object obj48 = numberFormat28.parseObject("", parsePosition42);
        java.text.NumberFormat.Field field49 = java.text.NumberFormat.Field.DECIMAL_SEPARATOR;
        java.text.FieldPosition fieldPosition50 = new java.text.FieldPosition((java.text.Format.Field) field49);
        java.lang.String str51 = field49.toString();
        java.text.FieldPosition fieldPosition52 = new java.text.FieldPosition((java.text.Format.Field) field49);
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        java.util.List<java.lang.String> strList63 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.lang.String>) strList61);
        java.lang.String str64 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.lang.String>) strList63);
        java.util.Locale.LanguageRange[] languageRangeArray65 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList66 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66, languageRangeArray65);
        java.util.Locale locale68 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet69 = locale68.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList70 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, (java.util.Collection<java.lang.String>) strSet69);
        java.util.List<java.lang.String> strList71 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.lang.String>) strList70);
        java.text.NumberFormat.Field field72 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition73 = new java.text.FieldPosition((java.text.Format.Field) field72);
        java.util.Locale locale74 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getInstance(locale74);
        boolean boolean76 = field72.equals((java.lang.Object) locale74);
        java.util.Set<java.lang.String> strSet77 = locale74.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList78 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.lang.String>) strSet77);
        boolean boolean79 = field49.equals((java.lang.Object) strSet77);
        java.util.Locale locale80 = java.util.Locale.TAIWAN;
        java.lang.String str81 = locale80.toLanguageTag();
        java.lang.String str83 = locale80.getExtension('x');
        java.util.Locale locale85 = java.util.Locale.forLanguageTag("9,700%");
        java.lang.String str86 = locale85.getDisplayLanguage();
        java.lang.String str87 = locale85.getVariant();
        java.lang.String str88 = locale80.getDisplayVariant(locale85);
        java.lang.String str89 = locale80.getISO3Country();
        java.text.NumberFormat numberFormat90 = java.text.NumberFormat.getCurrencyInstance(locale80);
        java.text.NumberFormat numberFormat91 = java.text.NumberFormat.getCurrencyInstance(locale80);
        boolean boolean92 = field49.equals((java.lang.Object) numberFormat91);
        boolean boolean93 = parsePosition42.equals((java.lang.Object) boolean92);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
        org.junit.Assert.assertEquals(currency1.toString(), "TWD");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100%" + "'", str3, "100%");
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode24 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode24.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "France" + "'", str37, "France");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "java.text.ParsePosition[index=52,errorIndex=51]" + "'", str47, "java.text.ParsePosition[index=52,errorIndex=51]");
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(field49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.text.NumberFormat$Field(decimal separator)" + "'", str51, "java.text.NumberFormat$Field(decimal separator)");
        org.junit.Assert.assertNotNull(languageRangeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(languageRangeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(locale68);
// flaky:         org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(field72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "zh-TW" + "'", str81, "zh-TW");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "TWN" + "'", str89, "TWN");
        org.junit.Assert.assertNotNull(numberFormat90);
        org.junit.Assert.assertNotNull(numberFormat91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test09241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09241");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        numberFormat1.setMaximumFractionDigits((int) (byte) 100);
        numberFormat1.setMaximumFractionDigits((int) (byte) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        int int10 = numberFormat1.getMaximumIntegerDigits();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency12 = numberFormat11.getCurrency();
        java.lang.String str14 = numberFormat11.format(1.0d);
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale16);
        java.util.Currency currency19 = numberFormat18.getCurrency();
        numberFormat18.setMinimumIntegerDigits(1);
        numberFormat18.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj27 = numberFormat18.parseObject("Japan", parsePosition26);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException31 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str32 = fractionConversionException31.getPattern();
        java.lang.Throwable[] throwableArray33 = fractionConversionException31.getSuppressed();
        java.lang.Object[] objArray34 = fractionConversionException31.getArguments();
        boolean boolean35 = parsePosition26.equals((java.lang.Object) objArray34);
        int int36 = parsePosition26.getIndex();
        java.lang.String str37 = parsePosition26.toString();
        java.lang.Object obj38 = numberFormat11.parseObject("java.text.ParsePosition[index=52,errorIndex=-1]", parsePosition26);
        java.util.Locale locale40 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale40);
        java.lang.String str43 = fractionFormat41.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat44 = fractionFormat41.getNumeratorFormat();
        numberFormat44.setMaximumFractionDigits((int) (short) -1);
        int int47 = numberFormat44.getMinimumFractionDigits();
        java.math.RoundingMode roundingMode48 = numberFormat44.getRoundingMode();
        numberFormat11.setRoundingMode(roundingMode48);
        numberFormat1.setRoundingMode(roundingMode48);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "TWD");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "100%" + "'", str14, "100%");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(currency19);
        org.junit.Assert.assertEquals(currency19.toString(), "TWD");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str32, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str37, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "100 0 / 1" + "'", str43, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + roundingMode48 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode48.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test09242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09242");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.setVariant("Korean");
        java.util.Locale locale10 = builder7.build();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        boolean boolean16 = numberFormat15.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        boolean boolean18 = numberFormat15.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13, numberFormat15);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getCurrencyInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.util.Currency currency23 = numberFormat21.getCurrency();
        fractionFormat19.setNumeratorFormat(numberFormat21);
        fractionFormat11.setDenominatorFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21);
        java.text.NumberFormat numberFormat27 = fractionFormat26.getDenominatorFormat();
        java.util.Currency currency28 = numberFormat27.getCurrency();
        java.util.Locale locale31 = new java.util.Locale("\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)", "\244120.00000000000000000000000000000000000");
        boolean boolean32 = numberFormat27.equals((java.lang.Object) locale31);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "XXX");
        org.junit.Assert.assertEquals(locale31.toString(), "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)_\244120.00000000000000000000000000000000000");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test09243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09243");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        numberFormat2.setMinimumIntegerDigits(1728000);
        boolean boolean5 = numberFormat2.isGroupingUsed();
        numberFormat2.setMaximumFractionDigits((int) (short) -14400);
        java.lang.String str9 = numberFormat2.format((double) (byte) 100);
        java.util.Locale locale10 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13, numberFormat15);
        boolean boolean17 = numberFormat15.isGroupingUsed();
        boolean boolean18 = numberFormat15.isGroupingUsed();
        fractionFormat11.setNumeratorFormat(numberFormat15);
        java.util.Locale locale24 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        int int26 = numberFormat25.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25);
        java.util.Locale locale32 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale32);
        int int34 = numberFormat33.getMaximumIntegerDigits();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        boolean boolean37 = numberFormat36.isGroupingUsed();
        java.util.Currency currency38 = numberFormat36.getCurrency();
        numberFormat33.setCurrency(currency38);
        java.util.Currency currency40 = numberFormat33.getCurrency();
        java.math.RoundingMode roundingMode41 = numberFormat33.getRoundingMode();
        java.text.ParsePosition parsePosition44 = new java.text.ParsePosition((int) 'a');
        java.lang.String str45 = parsePosition44.toString();
        java.lang.String str46 = parsePosition44.toString();
        java.lang.Object obj47 = numberFormat33.parseObject("zho", parsePosition44);
        java.lang.Object obj48 = fractionFormat27.parseObject("java.text.NumberFormat$Field(currency)", parsePosition44);
        java.lang.Object obj49 = numberFormat15.parseObject("Italian", parsePosition44);
        java.text.NumberFormat numberFormat50 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat15, numberFormat50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance(locale52);
        boolean boolean54 = numberFormat53.isGroupingUsed();
        java.util.Currency currency55 = numberFormat53.getCurrency();
        int int56 = numberFormat53.getMinimumFractionDigits();
        int int57 = numberFormat53.getMinimumIntegerDigits();
        numberFormat53.setMaximumIntegerDigits(11);
        java.util.Locale.LanguageRange languageRange61 = new java.util.Locale.LanguageRange("zh-TW");
        java.lang.String str62 = languageRange61.getRange();
        java.util.Locale.LanguageRange languageRange64 = new java.util.Locale.LanguageRange("zh-TW");
        double double65 = languageRange64.getWeight();
        double double66 = languageRange64.getWeight();
        java.util.Locale.LanguageRange languageRange68 = new java.util.Locale.LanguageRange("eng");
        java.util.Locale.LanguageRange languageRange70 = new java.util.Locale.LanguageRange("zh-TW");
        java.lang.String str71 = languageRange70.getRange();
        java.lang.String str72 = languageRange70.getRange();
        java.util.Locale.LanguageRange[] languageRangeArray73 = new java.util.Locale.LanguageRange[] { languageRange61, languageRange64, languageRange68, languageRange70 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList74 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList74, languageRangeArray73);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap76 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList77 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList74, strMap76);
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.lang.String str79 = locale78.getISO3Language();
        java.util.Set<java.lang.String> strSet80 = locale78.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList81 = java.util.Locale.filterTags(languageRangeList77, (java.util.Collection<java.lang.String>) strSet80);
        boolean boolean82 = numberFormat53.equals((java.lang.Object) strSet80);
        java.lang.Object obj83 = numberFormat53.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        properFractionFormat51.setWholeFormat(numberFormat53);
        boolean boolean86 = numberFormat53.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,100" + "'", str9, "000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,100");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals(locale24.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertEquals(locale32.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(currency38);
        org.junit.Assert.assertEquals(currency38.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency40);
        org.junit.Assert.assertEquals(currency40.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode41 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode41.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str45, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str46, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(currency55);
        org.junit.Assert.assertEquals(currency55.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zh-tw" + "'", str62, "zh-tw");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "zh-tw" + "'", str71, "zh-tw");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "zh-tw" + "'", str72, "zh-tw");
        org.junit.Assert.assertNotNull(languageRangeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(languageRangeList77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "kor" + "'", str79, "kor");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test09244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09244");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = numberFormat1.isGroupingUsed();
        java.util.Currency currency3 = numberFormat1.getCurrency();
        int int4 = numberFormat1.getMinimumFractionDigits();
        int int5 = numberFormat1.getMaximumIntegerDigits();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        boolean boolean12 = numberFormat11.isGroupingUsed();
        properFractionFormat9.setWholeFormat(numberFormat11);
        java.text.NumberFormat numberFormat14 = properFractionFormat9.getWholeFormat();
        java.text.NumberFormat numberFormat15 = properFractionFormat9.getWholeFormat();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency18 = numberFormat17.getCurrency();
        numberFormat17.setGroupingUsed(true);
        int int21 = numberFormat17.getMaximumIntegerDigits();
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition(120);
        java.lang.Object obj25 = numberFormat17.parseObject("10 / 1", parsePosition24);
        parsePosition24.setErrorIndex(5);
        java.lang.Object obj28 = numberFormat15.parseObject("java.text.ParseException: Taiwan", parsePosition24);
        java.lang.Object obj29 = numberFormat1.parseObject("204,000%", parsePosition24);
        java.lang.String str30 = parsePosition24.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency18);
// flaky:         org.junit.Assert.assertEquals(currency18.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.text.ParsePosition[index=120,errorIndex=120]" + "'", str30, "java.text.ParsePosition[index=120,errorIndex=120]");
    }

    @Test
    public void test09245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09245");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.util.Locale.setDefault(category5, locale7);
        java.util.Locale locale10 = java.util.Locale.getDefault(category5);
        java.util.Locale locale14 = new java.util.Locale("zh_TW", "Taiwan", "hi!");
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getISO3Language();
        java.lang.String str19 = locale15.getDisplayScript(locale17);
        java.lang.String str20 = locale15.toLanguageTag();
        java.lang.String str21 = locale15.getDisplayVariant();
        boolean boolean22 = locale15.hasExtensions();
        java.lang.String str23 = locale14.getDisplayLanguage(locale15);
        java.lang.String str24 = locale14.getCountry();
        java.util.Locale.setDefault(category5, locale14);
        java.lang.String str26 = locale4.getDisplayScript(locale14);
        java.lang.String str27 = locale0.getDisplayName(locale4);
        java.util.Set<java.lang.String> strSet28 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "kor");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals(locale14.toString(), "zh_tw_TAIWAN_hi!");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "und" + "'", str20, "und");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh_tw" + "'", str23, "zh_tw");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "TAIWAN" + "'", str24, "TAIWAN");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Chinese (Taiwan)" + "'", str27, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(strSet28);
    }

    @Test
    public void test09246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09246");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        int int1 = numberFormat0.getMaximumFractionDigits();
        boolean boolean2 = numberFormat0.isParseIntegerOnly();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance();
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str8 = fractionFormat6.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat9 = fractionFormat6.getNumeratorFormat();
        numberFormat9.setMaximumFractionDigits((int) (short) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat3, numberFormat9);
        java.text.NumberFormat.Field field13 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition((java.text.Format.Field) field13);
        int int15 = fieldPosition14.getBeginIndex();
        int int16 = fieldPosition14.getField();
        java.text.Format.Field field17 = fieldPosition14.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction19 = new org.apache.commons.math.fraction.Fraction((double) 10.0f);
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction19.abs();
        boolean boolean22 = fieldPosition14.equals((java.lang.Object) fraction21);
        java.lang.StringBuffer stringBuffer23 = null;
        java.text.NumberFormat.Field field24 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition((java.text.Format.Field) field24);
        int int26 = fieldPosition25.getField();
        java.text.Format.Field field27 = fieldPosition25.getFieldAttribute();
        fieldPosition25.setEndIndex((int) 'a');
        java.text.Format.Field field30 = fieldPosition25.getFieldAttribute();
        fieldPosition25.setBeginIndex(119);
        int int33 = fieldPosition25.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer34 = properFractionFormat12.format(fraction21, stringBuffer23, fieldPosition25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100 0 / 1" + "'", str8, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(field13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(field17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(field24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(field27);
        org.junit.Assert.assertNotNull(field30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 119 + "'", int33 == 119);
    }

    @Test
    public void test09247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09247");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Language();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale4);
        java.util.Currency currency7 = numberFormat6.getCurrency();
        numberFormat6.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat6);
        java.lang.String str13 = numberFormat3.format(0.0d);
        numberFormat3.setMaximumIntegerDigits(0);
        java.lang.String str17 = numberFormat3.format((double) 300L);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        numberFormat3.setMaximumIntegerDigits(87);
        java.math.RoundingMode roundingMode21 = numberFormat3.getRoundingMode();
        numberFormat3.setMinimumIntegerDigits(0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "TWD");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + roundingMode21 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode21.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test09248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09248");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        java.lang.String str9 = numberFormat1.format((long) 2147483647);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleKeys();
        java.lang.String str15 = locale12.getISO3Country();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getNumberInstance(locale12);
        java.util.Locale locale20 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        int int22 = numberFormat21.getMaximumIntegerDigits();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        boolean boolean25 = numberFormat24.isGroupingUsed();
        java.util.Currency currency26 = numberFormat24.getCurrency();
        numberFormat21.setCurrency(currency26);
        java.util.Currency currency28 = numberFormat21.getCurrency();
        int int29 = numberFormat21.getMaximumFractionDigits();
        java.lang.Object obj30 = numberFormat21.clone();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        numberFormat32.setMaximumFractionDigits(100);
        numberFormat32.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str39 = numberFormat32.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16, numberFormat21, numberFormat32);
        java.util.Locale locale42 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale42);
        java.lang.String str45 = fractionFormat43.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat46 = fractionFormat43.getNumeratorFormat();
        java.text.NumberFormat numberFormat47 = fractionFormat43.getNumeratorFormat();
        java.text.NumberFormat numberFormat48 = fractionFormat43.getNumeratorFormat();
        java.lang.String str50 = numberFormat48.format((long) 2147483647);
        properFractionFormat40.setDenominatorFormat(numberFormat48);
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getInstance(locale53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance(locale55);
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = new org.apache.commons.math.fraction.FractionFormat(numberFormat54, numberFormat56);
        java.text.ParsePosition parsePosition60 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj61 = numberFormat56.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition60);
        java.lang.String str62 = parsePosition60.toString();
        java.lang.String str63 = parsePosition60.toString();
        int int64 = parsePosition60.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction65 = properFractionFormat40.parse("214,748,364,700%", parsePosition60);
        parsePosition60.setErrorIndex((int) (short) -2);
        org.apache.commons.math.fraction.Fraction fraction68 = properFractionFormat10.parse("org.apache.commons.math.fraction.FractionConversionException: Unable to convert 970,000 to fraction after 14,400 iterations", parsePosition60);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "214,748,364,700%" + "'", str9, "214,748,364,700%");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals(locale20.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(currency26);
        org.junit.Assert.assertEquals(currency26.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "100%" + "'", str39, "100%");
        org.junit.Assert.assertEquals(locale42.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "100 0 / 1" + "'", str45, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2,147,483,647" + "'", str50, "2,147,483,647");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str62, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str63, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNull(fraction68);
    }

    @Test
    public void test09249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09249");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.toLanguageTag();
        java.lang.String str2 = locale0.getISO3Country();
        java.lang.String str3 = locale0.toLanguageTag();
        java.lang.String str4 = locale0.getDisplayVariant();
        java.util.Set<java.lang.String> strSet5 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale0);
        numberFormat7.setMaximumFractionDigits(100);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh-TW" + "'", str1, "zh-TW");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "TWN" + "'", str2, "TWN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh-TW" + "'", str3, "zh-TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
    }

    @Test
    public void test09250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09250");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction12.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction12.abs();
        long long26 = fraction12.longValue();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction29.add(fraction35);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction12.add(fraction36);
        java.util.Locale locale39 = java.util.Locale.JAPAN;
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale40.getDisplayScript();
        java.lang.String str42 = locale39.getDisplayCountry(locale40);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getNumberInstance(locale39);
        java.util.Locale locale46 = new java.util.Locale("hi!", "org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (0/-1)");
        java.util.Locale locale47 = java.util.Locale.getDefault();
        java.util.Locale locale48 = locale47.stripExtensions();
        java.util.Locale locale50 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale50);
        java.lang.String str52 = locale50.getDisplayCountry();
        java.lang.String str53 = locale47.getDisplayName(locale50);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = locale54.getDisplayScript();
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale56.getISO3Language();
        java.lang.String str58 = locale54.getDisplayScript(locale56);
        java.lang.String str59 = locale47.getDisplayLanguage(locale56);
        java.util.Locale locale62 = new java.util.Locale("hi!", "org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (0/-1)");
        java.lang.String str63 = locale56.getDisplayVariant(locale62);
        java.lang.String str64 = locale46.getDisplayName(locale62);
        java.lang.String str65 = locale39.getDisplayLanguage(locale46);
        java.lang.String str66 = locale39.getScript();
        java.util.Locale.setDefault(locale39);
        boolean boolean68 = fraction12.equals((java.lang.Object) locale39);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Japan" + "'", str42, "Japan");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals(locale46.toString(), "hi!_ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1)");
        org.junit.Assert.assertNotNull(locale47);
// flaky:         org.junit.Assert.assertEquals(locale47.toString(), "kor");
        org.junit.Assert.assertNotNull(locale48);
// flaky:         org.junit.Assert.assertEquals(locale48.toString(), "kor");
        org.junit.Assert.assertEquals(locale50.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Korean" + "'", str53, "Korean");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "kor" + "'", str57, "kor");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str59, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals(locale62.toString(), "hi!_ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi! (ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1))" + "'", str64, "hi! (ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1))");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Japanese" + "'", str65, "Japanese");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test09251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09251");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat5);
        boolean boolean7 = numberFormat5.isGroupingUsed();
        boolean boolean8 = numberFormat5.isGroupingUsed();
        fractionFormat1.setNumeratorFormat(numberFormat5);
        java.lang.Object obj10 = numberFormat5.clone();
        java.lang.Object obj11 = numberFormat5.clone();
        boolean boolean12 = numberFormat5.isParseIntegerOnly();
        boolean boolean13 = numberFormat5.isGroupingUsed();
        int int14 = numberFormat5.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode15 = numberFormat5.getRoundingMode();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode15 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode15.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test09252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09252");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.lang.String str9 = locale6.getDisplayCountry(locale7);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getNumberInstance(locale6);
        java.lang.String str11 = locale5.getDisplayCountry(locale6);
        java.lang.String str12 = locale6.getDisplayName();
        java.lang.String str13 = locale6.getCountry();
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = java.util.Locale.getDefault(category14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale16);
        java.util.Locale.setDefault(category14, locale16);
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category14, locale19);
        java.lang.String str21 = locale19.getISO3Language();
        java.util.Locale locale24 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getIntegerInstance(locale24);
        java.lang.String str26 = locale19.getDisplayScript(locale24);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale19);
        java.lang.String str28 = locale6.getDisplayScript(locale19);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance(locale19);
        numberFormat29.setMaximumIntegerDigits(240);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str12, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JP" + "'", str13, "JP");
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fra" + "'", str21, "fra");
        org.junit.Assert.assertEquals(locale24.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(numberFormat29);
    }

    @Test
    public void test09253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09253");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat4 = properFractionFormat2.getWholeFormat();
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayScript();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = locale5.getDisplayScript(locale7);
        java.lang.String str10 = locale5.toLanguageTag();
        java.util.Set<java.lang.String> strSet11 = locale5.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getCurrencyInstance(locale5);
        java.lang.Object obj13 = numberFormat12.clone();
        java.util.Locale locale17 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        int int19 = numberFormat18.getMaximumIntegerDigits();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        boolean boolean22 = numberFormat21.isGroupingUsed();
        java.util.Currency currency23 = numberFormat21.getCurrency();
        numberFormat18.setCurrency(currency23);
        java.util.Currency currency25 = numberFormat18.getCurrency();
        numberFormat12.setCurrency(currency25);
        properFractionFormat2.setWholeFormat(numberFormat12);
        java.text.NumberFormat numberFormat28 = properFractionFormat2.getWholeFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "und" + "'", str10, "und");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(locale17.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat28);
    }

    @Test
    public void test09254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09254");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.lang.String str2 = locale1.toLanguageTag();
        java.lang.String str3 = locale1.getVariant();
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder4.setScript("");
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        java.util.Locale locale9 = java.util.Locale.GERMANY;
        java.lang.String str10 = locale7.getDisplayLanguage(locale9);
        java.util.Locale.Builder builder11 = builder6.setLocale(locale7);
        java.lang.String str12 = locale1.getDisplayVariant(locale7);
        java.lang.String str13 = locale7.getScript();
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale.setDefault(locale7);
        java.util.Locale locale19 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str20 = locale19.getDisplayVariant();
        java.util.Locale locale24 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale24);
        java.util.Locale locale26 = locale24.stripExtensions();
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale27);
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleKeys();
        boolean boolean30 = locale27.hasExtensions();
        java.lang.String str31 = locale24.getDisplayScript(locale27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale27);
        java.lang.String str33 = locale19.getDisplayScript(locale27);
        java.lang.String str34 = locale7.getDisplayLanguage(locale19);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinesisch" + "'", str10, "Chinesisch");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals(locale19.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "10,000%" + "'", str20, "10,000%");
        org.junit.Assert.assertEquals(locale24.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese" + "'", str34, "Chinese");
    }

    @Test
    public void test09255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09255");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        numberFormat4.setMinimumFractionDigits((int) (short) 1);
        java.util.Currency currency16 = numberFormat4.getCurrency();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.text.NumberFormat numberFormat20 = properFractionFormat19.getWholeFormat();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean24 = numberFormat22.equals((java.lang.Object) numberFormat23);
        properFractionFormat19.setWholeFormat(numberFormat22);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getInstance(locale26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27, numberFormat29);
        int int31 = numberFormat27.getMaximumIntegerDigits();
        properFractionFormat19.setDenominatorFormat(numberFormat27);
        java.text.NumberFormat numberFormat33 = properFractionFormat19.getNumeratorFormat();
        java.text.NumberFormat.Field field34 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition35 = new java.text.FieldPosition((java.text.Format.Field) field34);
        java.lang.String str36 = fieldPosition35.toString();
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = locale38.getDisplayScript();
        java.lang.String str40 = locale37.getDisplayName(locale38);
        boolean boolean41 = fieldPosition35.equals((java.lang.Object) locale38);
        java.text.NumberFormat.Field field42 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition43 = new java.text.FieldPosition((java.text.Format.Field) field42);
        java.text.FieldPosition fieldPosition45 = new java.text.FieldPosition((java.text.Format.Field) field42, (int) (byte) 10);
        boolean boolean46 = fieldPosition35.equals((java.lang.Object) field42);
        java.text.FieldPosition fieldPosition47 = new java.text.FieldPosition((java.text.Format.Field) field42);
        boolean boolean48 = numberFormat33.equals((java.lang.Object) fieldPosition47);
        java.util.Locale locale51 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale51);
        java.lang.String str54 = fractionFormat52.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat55 = fractionFormat52.getNumeratorFormat();
        numberFormat55.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency58 = numberFormat55.getCurrency();
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getPercentInstance(locale60);
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean63 = numberFormat61.equals((java.lang.Object) numberFormat62);
        java.util.Locale locale68 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getPercentInstance(locale68);
        int int70 = numberFormat69.getMaximumIntegerDigits();
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getPercentInstance(locale71);
        boolean boolean73 = numberFormat72.isGroupingUsed();
        java.util.Currency currency74 = numberFormat72.getCurrency();
        numberFormat69.setCurrency(currency74);
        java.util.Currency currency76 = numberFormat69.getCurrency();
        java.math.RoundingMode roundingMode77 = numberFormat69.getRoundingMode();
        java.text.ParsePosition parsePosition80 = new java.text.ParsePosition((int) 'a');
        java.lang.String str81 = parsePosition80.toString();
        java.lang.String str82 = parsePosition80.toString();
        java.lang.Object obj83 = numberFormat69.parseObject("zho", parsePosition80);
        java.lang.String str84 = parsePosition80.toString();
        java.lang.Number number85 = numberFormat62.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition80);
        java.lang.Number number86 = numberFormat55.parse("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]", parsePosition80);
        parsePosition80.setIndex((int) (byte) 87);
        parsePosition80.setIndex((int) (byte) 88);
        java.lang.Number number91 = numberFormat33.parse("java.text.fieldposition[field=100,attribute=null,beginindex=0,endindex=0]", parsePosition80);
        java.lang.StringBuffer stringBuffer92 = null;
        java.text.NumberFormat.Field field93 = java.text.NumberFormat.Field.PERMILLE;
        java.text.NumberFormat.Field field94 = java.text.NumberFormat.Field.CURRENCY;
        boolean boolean95 = field93.equals((java.lang.Object) field94);
        java.text.FieldPosition fieldPosition96 = new java.text.FieldPosition((java.text.Format.Field) field93);
        java.text.FieldPosition fieldPosition97 = new java.text.FieldPosition((java.text.Format.Field) field93);
        java.text.Format.Field field98 = fieldPosition97.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer99 = numberFormat4.format((java.lang.Object) numberFormat33, stringBuffer92, fieldPosition97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(field34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str36, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese (Taiwan)" + "'", str40, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(field42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals(locale51.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "100 0 / 1" + "'", str54, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(currency58);
        org.junit.Assert.assertEquals(currency58.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals(locale68.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(currency74);
        org.junit.Assert.assertEquals(currency74.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency76);
        org.junit.Assert.assertEquals(currency76.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode77 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode77.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str81, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str82, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str84, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number85);
        org.junit.Assert.assertNull(number86);
        org.junit.Assert.assertNull(number91);
        org.junit.Assert.assertNotNull(field93);
        org.junit.Assert.assertNotNull(field94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(field98);
    }

    @Test
    public void test09256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09256");
        java.util.Locale locale1 = new java.util.Locale("0%");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.lang.String str6 = locale4.getDisplayCountry();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getIntegerInstance(locale4);
        numberFormat7.setMinimumIntegerDigits(0);
        java.lang.String str11 = numberFormat7.format(1.0d);
        numberFormat7.setMaximumFractionDigits((int) ' ');
        boolean boolean14 = numberFormat7.isGroupingUsed();
        fractionFormat2.setNumeratorFormat(numberFormat7);
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale17);
        java.util.Currency currency20 = numberFormat19.getCurrency();
        numberFormat19.setMinimumIntegerDigits(1);
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        int int28 = numberFormat27.getMaximumIntegerDigits();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        boolean boolean31 = numberFormat30.isGroupingUsed();
        java.util.Currency currency32 = numberFormat30.getCurrency();
        numberFormat27.setCurrency(currency32);
        java.util.Currency currency34 = numberFormat27.getCurrency();
        numberFormat19.setCurrency(currency34);
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getInstance(locale37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = new org.apache.commons.math.fraction.FractionFormat(numberFormat38, numberFormat40);
        numberFormat40.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field45 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition46 = new java.text.FieldPosition((java.text.Format.Field) field45);
        java.lang.String str47 = fieldPosition46.toString();
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = locale49.getDisplayScript();
        java.lang.String str51 = locale48.getDisplayName(locale49);
        boolean boolean52 = fieldPosition46.equals((java.lang.Object) locale49);
        fieldPosition46.setEndIndex((int) '#');
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getCurrencyInstance(locale55);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat56);
        java.text.ParsePosition parsePosition60 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction61 = properFractionFormat57.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition60);
        boolean boolean62 = fieldPosition46.equals((java.lang.Object) parsePosition60);
        java.lang.Number number63 = numberFormat40.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition60);
        int int64 = parsePosition60.getIndex();
        java.lang.String str65 = parsePosition60.toString();
        java.lang.Object obj66 = null;
        boolean boolean67 = parsePosition60.equals(obj66);
        java.lang.Number number68 = numberFormat19.parse("chinese (taiwan)", parsePosition60);
        int int69 = parsePosition60.getErrorIndex();
        int int70 = parsePosition60.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction71 = fractionFormat2.parse("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition60);
        org.junit.Assert.assertEquals(locale1.toString(), "0%");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "TWD");
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(currency32);
        org.junit.Assert.assertEquals(currency32.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(field45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str47, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Chinese (Taiwan)" + "'", str51, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNull(fraction61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(number63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str65, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(number68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNull(fraction71);
    }

    @Test
    public void test09257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09257");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction6 = properFractionFormat2.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition5);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        numberFormat13.setMaximumFractionDigits((int) (short) -1);
        int int16 = numberFormat13.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        numberFormat13.setGroupingUsed(true);
        java.util.Currency currency20 = numberFormat13.getCurrency();
        java.text.NumberFormat.Field field22 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field22);
        java.lang.String str24 = fieldPosition23.toString();
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = locale25.getDisplayName(locale26);
        boolean boolean29 = fieldPosition23.equals((java.lang.Object) locale26);
        fieldPosition23.setEndIndex((int) '#');
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction38 = properFractionFormat34.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition37);
        boolean boolean39 = fieldPosition23.equals((java.lang.Object) parsePosition37);
        parsePosition37.setErrorIndex((int) '#');
        java.lang.Object obj42 = numberFormat13.parseObject("ja-JP", parsePosition37);
        org.apache.commons.math.fraction.Fraction fraction43 = properFractionFormat2.parse("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]", parsePosition37);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        boolean boolean46 = numberFormat45.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        java.lang.String str49 = numberFormat45.format(0.008333333333333333d);
        java.math.RoundingMode roundingMode50 = numberFormat45.getRoundingMode();
        properFractionFormat2.setWholeFormat(numberFormat45);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance();
        numberFormat52.setMaximumIntegerDigits(2147483647);
        java.lang.String str56 = numberFormat52.format((long) 2147483647);
        properFractionFormat2.setNumeratorFormat(numberFormat52);
        int int58 = numberFormat52.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNull(fraction6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str24, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Chinese (Taiwan)" + "'", str28, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNull(fraction38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1%" + "'", str49, "1%");
        org.junit.Assert.assertTrue("'" + roundingMode50 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode50.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "214,748,364,700%" + "'", str56, "214,748,364,700%");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test09258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09258");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        long long4 = fraction2.longValue();
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale14 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        numberFormat15.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency18 = numberFormat15.getCurrency();
        numberFormat9.setCurrency(currency18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        boolean boolean21 = fraction2.equals((java.lang.Object) properFractionFormat20);
        java.util.Locale locale25 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        int int27 = numberFormat26.getMaximumIntegerDigits();
        int int28 = numberFormat26.getMaximumFractionDigits();
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat30, numberFormat32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = new org.apache.commons.math.fraction.FractionFormat(numberFormat26, numberFormat30);
        java.util.Currency currency35 = numberFormat26.getCurrency();
        properFractionFormat20.setWholeFormat(numberFormat26);
        java.text.NumberFormat numberFormat37 = properFractionFormat20.getWholeFormat();
        java.text.NumberFormat numberFormat38 = properFractionFormat20.getNumeratorFormat();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1 / 100" + "'", str3, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals(locale25.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
    }

    @Test
    public void test09259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09259");
        java.util.Locale locale2 = new java.util.Locale("\uc774\ud0c8\ub9ac\uc544\uc5b4", "JAVA.TEXT.PARSEPOSITION[INDEX=-2,ERRORINDEX=3]");
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction(35, 20);
        java.lang.StringBuffer stringBuffer7 = null;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((int) (short) -14400);
        fieldPosition9.setEndIndex(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer12 = fractionFormat3.format(fraction6, stringBuffer7, fieldPosition9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "\uc774\ud0c8\ub9ac\uc544\uc5b4_JAVA.TEXT.PARSEPOSITION[INDEX=-2,ERRORINDEX=3]");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fraction6);
    }

    @Test
    public void test09260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09260");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.Format.Field field2 = fieldPosition1.getFieldAttribute();
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale3);
        boolean boolean5 = numberFormat4.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8, numberFormat10);
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj15 = numberFormat10.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition14);
        properFractionFormat6.setNumeratorFormat(numberFormat10);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getCurrencyInstance(locale17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.util.Locale locale21 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale21);
        java.lang.String str24 = fractionFormat22.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat25 = fractionFormat22.getNumeratorFormat();
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.util.Locale locale27 = locale26.stripExtensions();
        java.util.Locale locale29 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale29);
        java.lang.String str31 = locale29.getDisplayCountry();
        java.lang.String str32 = locale26.getDisplayName(locale29);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.lang.String str34 = locale33.getDisplayScript();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale35.getISO3Language();
        java.lang.String str37 = locale33.getDisplayScript(locale35);
        java.lang.String str38 = locale26.getDisplayLanguage(locale35);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getNumberInstance(locale26);
        fractionFormat22.setNumeratorFormat(numberFormat39);
        properFractionFormat19.setWholeFormat(numberFormat39);
        properFractionFormat6.setWholeFormat(numberFormat39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.text.NumberFormat numberFormat44 = properFractionFormat43.getDenominatorFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat43.getNumeratorFormat();
        java.text.NumberFormat numberFormat46 = properFractionFormat43.getNumeratorFormat();
        java.text.NumberFormat numberFormat47 = properFractionFormat43.getNumeratorFormat();
        boolean boolean48 = field2.equals((java.lang.Object) numberFormat47);
        java.util.Locale locale49 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale49);
        java.util.Locale locale51 = locale49.stripExtensions();
        java.lang.String str52 = locale49.getDisplayName();
        java.util.Locale locale53 = java.util.Locale.TAIWAN;
        java.lang.String str54 = locale53.toLanguageTag();
        java.lang.String str55 = locale53.getDisplayLanguage();
        java.lang.String str56 = locale53.getISO3Country();
        java.lang.String str57 = locale49.getDisplayScript(locale53);
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getInstance(locale49);
        numberFormat58.setMinimumIntegerDigits((int) (byte) 88);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = new org.apache.commons.math.fraction.FractionFormat(numberFormat47, numberFormat58);
        org.apache.commons.math.fraction.Fraction fraction64 = new org.apache.commons.math.fraction.Fraction((-100), (int) '#');
        java.lang.String str65 = numberFormat47.format((java.lang.Object) fraction64);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100 0 / 1" + "'", str24, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale29.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (Taiwan)" + "'", str32, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "kor" + "'", str36, "kor");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str38, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str52, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "zh-TW" + "'", str54, "zh-TW");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u4e2d\u6587" + "'", str55, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "TWN" + "'", str56, "TWN");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-2.857" + "'", str65, "-2.857");
    }

    @Test
    public void test09261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09261");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.clear();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale locale9 = builder8.build();
        java.util.Locale locale10 = builder8.build();
        java.lang.String str11 = locale0.getDisplayScript(locale10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale10);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(fractionFormat12);
    }

    @Test
    public void test09262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09262");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = numberFormat1.isGroupingUsed();
        java.util.Currency currency3 = numberFormat1.getCurrency();
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        numberFormat8.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str12 = numberFormat8.format((double) 0.0f);
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        int int18 = numberFormat17.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17);
        java.text.NumberFormat numberFormat20 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8, numberFormat17, numberFormat20);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.lang.String str25 = locale23.getDisplayCountry();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getIntegerInstance(locale23);
        numberFormat26.setMinimumIntegerDigits(0);
        numberFormat26.setMinimumIntegerDigits(0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat20, numberFormat26);
        boolean boolean32 = numberFormat1.isGroupingUsed();
        java.lang.String str34 = numberFormat1.format(600L);
        int int35 = numberFormat1.getMinimumFractionDigits();
        numberFormat1.setMaximumFractionDigits((int) (byte) 35);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "XXX");
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0%" + "'", str12, "0%");
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "60,000%" + "'", str34, "60,000%");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test09263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09263");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction2.multiply(fraction6);
        java.lang.String str8 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        int int9 = fraction2.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        long long20 = fraction18.longValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction14.multiply(fraction18);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        long long32 = fraction30.longValue();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction26.multiply(fraction30);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction18.subtract(fraction33);
        org.apache.commons.math.fraction.Fraction fraction37 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str38 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction37);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction18.subtract(fraction37);
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.negate();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.abs();
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.negate();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.abs();
        long long50 = fraction48.longValue();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction44.multiply(fraction48);
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.negate();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.abs();
        org.apache.commons.math.fraction.Fraction fraction59 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.negate();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.abs();
        long long62 = fraction60.longValue();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction56.multiply(fraction60);
        org.apache.commons.math.fraction.Fraction fraction64 = fraction48.subtract(fraction63);
        org.apache.commons.math.fraction.Fraction fraction67 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str68 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction67);
        org.apache.commons.math.fraction.Fraction fraction69 = fraction48.subtract(fraction67);
        org.apache.commons.math.fraction.Fraction fraction70 = fraction37.divide(fraction69);
        org.apache.commons.math.fraction.Fraction fraction71 = fraction2.subtract(fraction37);
        org.apache.commons.math.fraction.Fraction fraction72 = fraction71.negate();
        java.lang.String str73 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction72);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "20 / 7" + "'", str8, "20 / 7");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1 / 100" + "'", str38, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "-1 / 100" + "'", str68, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "-2,007 / 700" + "'", str73, "-2,007 / 700");
    }

    @Test
    public void test09264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09264");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.Object obj7 = numberFormat2.clone();
        java.lang.String str9 = numberFormat2.format((long) '4');
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        numberFormat11.setMaximumFractionDigits(100);
        java.lang.String str16 = numberFormat11.format((long) 100);
        int int17 = numberFormat11.getMaximumFractionDigits();
        numberFormat11.setMinimumFractionDigits((int) (short) 0);
        int int20 = numberFormat11.getMaximumFractionDigits();
        int int21 = numberFormat11.getMinimumFractionDigits();
        java.text.AttributedCharacterIterator attributedCharacterIterator22 = numberFormat2.formatToCharacterIterator((java.lang.Object) int21);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "52" + "'", str9, "52");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "10,000%" + "'", str16, "10,000%");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(attributedCharacterIterator22);
    }

    @Test
    public void test09265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09265");
        java.util.Locale locale3 = new java.util.Locale("zh_TW", "Taiwan", "hi!");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale6.getISO3Language();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        java.lang.String str9 = locale4.toLanguageTag();
        java.lang.String str10 = locale4.getDisplayVariant();
        boolean boolean11 = locale4.hasExtensions();
        java.lang.String str12 = locale3.getDisplayLanguage(locale4);
        java.lang.String str13 = locale3.getCountry();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.util.Locale locale15 = locale3.stripExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale17);
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleKeys();
        boolean boolean20 = locale17.hasExtensions();
        java.util.Set<java.lang.String> strSet21 = locale17.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getCurrencyInstance(locale17);
        java.lang.StringBuffer stringBuffer23 = null;
        java.text.NumberFormat.Field field24 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition((java.text.Format.Field) field24);
        int int26 = fieldPosition25.getBeginIndex();
        int int27 = fieldPosition25.getField();
        fieldPosition25.setEndIndex(117);
        int int30 = fieldPosition25.getEndIndex();
        java.text.Format.Field field31 = fieldPosition25.getFieldAttribute();
        int int32 = fieldPosition25.getBeginIndex();
        int int33 = fieldPosition25.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer34 = fractionFormat16.format((java.lang.Object) numberFormat22, stringBuffer23, fieldPosition25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "zh_tw_TAIWAN_hi!");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "und" + "'", str9, "und");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh_tw" + "'", str12, "zh_tw");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "TAIWAN" + "'", str13, "TAIWAN");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_tw_TAIWAN_hi!");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(field24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 117 + "'", int30 == 117);
        org.junit.Assert.assertNotNull(field31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 117 + "'", int33 == 117);
    }

    @Test
    public void test09266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09266");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.getDefault(category2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.util.Locale.setDefault(category2, locale4);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category2, locale7);
        java.lang.String str9 = locale7.getISO3Language();
        java.util.Locale locale12 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.lang.String str14 = locale7.getDisplayScript(locale12);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat15);
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition(2);
        java.lang.String str20 = parsePosition19.toString();
        org.apache.commons.math.fraction.Fraction fraction21 = fractionFormat16.parse("20 / 7", parsePosition19);
        parsePosition19.setErrorIndex(60);
        parsePosition19.setIndex((int) (byte) 64);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fra" + "'", str9, "fra");
        org.junit.Assert.assertEquals(locale12.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.text.ParsePosition[index=2,errorIndex=-1]" + "'", str20, "java.text.ParsePosition[index=2,errorIndex=-1]");
        org.junit.Assert.assertNull(fraction21);
    }

    @Test
    public void test09267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09267");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumFractionDigits((int) (short) -1);
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        java.util.Currency currency15 = numberFormat13.getCurrency();
        numberFormat10.setCurrency(currency15);
        java.util.Currency currency17 = numberFormat10.getCurrency();
        numberFormat2.setCurrency(currency17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        java.lang.String str25 = numberFormat20.format((long) 100);
        int int26 = numberFormat20.getMaximumFractionDigits();
        numberFormat20.setMinimumFractionDigits((int) (short) 0);
        int int29 = numberFormat20.getMaximumFractionDigits();
        java.math.RoundingMode roundingMode30 = numberFormat20.getRoundingMode();
        numberFormat20.setGroupingUsed(false);
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getCurrencyInstance(locale33);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction39 = properFractionFormat35.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition38);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale43);
        boolean boolean45 = numberFormat44.isGroupingUsed();
        properFractionFormat42.setWholeFormat(numberFormat44);
        java.text.NumberFormat numberFormat47 = properFractionFormat42.getWholeFormat();
        properFractionFormat35.setWholeFormat(numberFormat47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat20, numberFormat47);
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.util.Locale locale51 = locale50.stripExtensions();
        java.util.Locale locale53 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale53);
        java.lang.String str55 = locale53.getDisplayCountry();
        java.lang.String str56 = locale50.getDisplayName(locale53);
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.lang.String str58 = locale57.getDisplayScript();
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale59.getISO3Language();
        java.lang.String str61 = locale57.getDisplayScript(locale59);
        java.lang.String str62 = locale50.getDisplayLanguage(locale59);
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getNumberInstance(locale50);
        java.util.Currency currency64 = numberFormat63.getCurrency();
        properFractionFormat49.setWholeFormat(numberFormat63);
        numberFormat63.setMaximumIntegerDigits(0);
        boolean boolean68 = numberFormat63.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "10,000%" + "'", str25, "10,000%");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + roundingMode30 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode30.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNull(fraction39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale53.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Chinese (Taiwan)" + "'", str56, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "kor" + "'", str60, "kor");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str62, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(currency64);
        org.junit.Assert.assertEquals(currency64.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test09268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09268");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.lang.Class<?> wildcardClass8 = locale4.getClass();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kor" + "'", str5, "kor");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test09269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09269");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction12.add(fraction18);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction21.divide(fraction24);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = locale27.getScript();
        boolean boolean30 = fraction26.equals((java.lang.Object) locale27);
        java.util.Locale.setDefault(category0, locale27);
        java.util.Locale locale32 = java.util.Locale.getDefault(category0);
        java.text.NumberFormat.Field field33 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition34 = new java.text.FieldPosition((java.text.Format.Field) field33);
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getInstance(locale35);
        boolean boolean37 = field33.equals((java.lang.Object) locale35);
        java.util.Set<java.lang.String> strSet38 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str39 = locale35.getISO3Language();
        java.util.Locale locale40 = locale35.stripExtensions();
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("Germany");
        java.lang.String str43 = locale35.getDisplayLanguage(locale42);
        java.util.Locale locale45 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale45);
        java.lang.String str47 = locale45.getDisplayCountry();
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getIntegerInstance(locale45);
        java.lang.String str49 = locale45.toLanguageTag();
        java.util.Locale.Builder builder50 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder50.clearExtensions();
        java.util.Locale locale52 = builder50.build();
        java.lang.String str53 = locale52.getScript();
        java.util.Locale locale54 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str55 = locale54.getDisplayLanguage();
        java.lang.String str56 = locale54.toLanguageTag();
        java.util.Locale locale57 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleAttributes();
        java.lang.String str59 = locale57.getISO3Language();
        java.lang.String str60 = locale54.getDisplayScript(locale57);
        java.util.Locale locale61 = java.util.Locale.ITALIAN;
        java.lang.String str62 = locale54.getDisplayCountry(locale61);
        java.util.Locale locale64 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str65 = locale61.getDisplayLanguage(locale64);
        java.lang.String str66 = locale52.getDisplayCountry(locale64);
        java.lang.String str67 = locale45.getDisplayVariant(locale52);
        java.lang.String str68 = locale52.getLanguage();
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getInstance(locale52);
        java.lang.String str70 = locale35.getDisplayLanguage(locale52);
        boolean boolean71 = locale35.hasExtensions();
        java.util.Locale.setDefault(category0, locale35);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(field33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "eng" + "'", str39, "eng");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "germany");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "English" + "'", str43, "English");
        org.junit.Assert.assertEquals(locale45.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "und" + "'", str49, "und");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u4e2d\u6587" + "'", str55, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "zh-TW" + "'", str56, "zh-TW");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "zho" + "'", str59, "zho");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Taiwan" + "'", str62, "Taiwan");
        org.junit.Assert.assertEquals(locale64.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Italian" + "'", str65, "Italian");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "English" + "'", str70, "English");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test09270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09270");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder8 = builder5.clear();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("9,700%");
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.util.Locale.Builder builder12 = builder8.setLocale(locale10);
        java.util.Locale.Builder builder13 = builder8.clearExtensions();
        java.util.Locale.Builder builder15 = builder8.setLanguage("CHN");
        java.util.Locale.Builder builder18 = builder15.setExtension('a', "");
        java.util.Locale.Builder builder19 = builder18.clear();
        java.util.Locale locale21 = new java.util.Locale("java.text.parseexception: zh_tw");
        java.lang.String str23 = locale21.getExtension('x');
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Locale locale25 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale25);
        java.lang.String str27 = locale24.getDisplayName(locale25);
        java.util.Locale locale28 = java.util.Locale.TAIWAN;
        java.lang.String str29 = locale28.toLanguageTag();
        java.lang.String str30 = locale28.getVariant();
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder31.setScript("");
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = locale34.getDisplayLanguage(locale36);
        java.util.Locale.Builder builder38 = builder33.setLocale(locale34);
        java.lang.String str39 = locale28.getDisplayVariant(locale34);
        java.lang.String str40 = locale34.getDisplayName();
        java.lang.String str41 = locale34.getDisplayName();
        java.lang.String str42 = locale25.getDisplayScript(locale34);
        java.lang.String str43 = locale21.getDisplayScript(locale25);
        java.util.Locale.Builder builder44 = builder19.setLocale(locale25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = locale25.getUnicodeLocaleType("\ub300\ub9cc)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=35] (?????)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals(locale21.toString(), "java.text.parseexception: zh_tw");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "francese (Francia)" + "'", str27, "francese (Francia)");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "zh-TW" + "'", str29, "zh-TW");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinesisch" + "'", str37, "Chinesisch");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str40, "\u4e2d\u6587\u53f0\u7063)");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str41, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test09271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09271");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        java.util.Currency currency15 = numberFormat13.getCurrency();
        numberFormat10.setCurrency(currency15);
        java.util.Currency currency17 = numberFormat10.getCurrency();
        numberFormat2.setCurrency(currency17);
        boolean boolean19 = numberFormat2.isParseIntegerOnly();
        numberFormat2.setMinimumFractionDigits(120);
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = new java.util.Locale("zho", "Chinese (Taiwan)", "Overflow trying to convert {0} to fraction ({1}/{2})");
        java.lang.String str27 = locale22.getDisplayLanguage(locale26);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale26);
        int int29 = numberFormat28.getMaximumFractionDigits();
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getInstance(locale30);
        boolean boolean32 = numberFormat31.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance(locale34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat35, numberFormat37);
        java.text.ParsePosition parsePosition41 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj42 = numberFormat37.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition41);
        properFractionFormat33.setNumeratorFormat(numberFormat37);
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getInstance(locale44);
        boolean boolean46 = numberFormat45.isParseIntegerOnly();
        numberFormat45.setGroupingUsed(false);
        properFractionFormat33.setWholeFormat(numberFormat45);
        java.util.Locale locale51 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getCurrencyInstance(locale51);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52);
        java.util.Locale locale55 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale55);
        java.lang.String str58 = fractionFormat56.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat59 = fractionFormat56.getNumeratorFormat();
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.util.Locale locale61 = locale60.stripExtensions();
        java.util.Locale locale63 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale63);
        java.lang.String str65 = locale63.getDisplayCountry();
        java.lang.String str66 = locale60.getDisplayName(locale63);
        java.util.Locale locale67 = java.util.Locale.ROOT;
        java.lang.String str68 = locale67.getDisplayScript();
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.lang.String str70 = locale69.getISO3Language();
        java.lang.String str71 = locale67.getDisplayScript(locale69);
        java.lang.String str72 = locale60.getDisplayLanguage(locale69);
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getNumberInstance(locale60);
        fractionFormat56.setNumeratorFormat(numberFormat73);
        properFractionFormat53.setWholeFormat(numberFormat73);
        java.util.Locale locale77 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat78 = java.text.NumberFormat.getInstance(locale77);
        boolean boolean79 = numberFormat78.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat78);
        java.text.ParsePosition parsePosition83 = new java.text.ParsePosition((int) '4');
        org.apache.commons.math.fraction.Fraction fraction84 = properFractionFormat80.parse("0%", parsePosition83);
        java.lang.Object obj85 = properFractionFormat53.parseObject("\u6cd5\u6587\u6cd5\u570b)", parsePosition83);
        java.lang.Object obj86 = numberFormat45.parseObject("Chinese (China)", parsePosition83);
        java.lang.String str88 = numberFormat45.format(6.944444444444444E-5d);
        org.apache.commons.math.fraction.FractionFormat fractionFormat89 = new org.apache.commons.math.fraction.FractionFormat(numberFormat28, numberFormat45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = numberFormat2.format((java.lang.Object) numberFormat45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale26.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Japanese" + "'", str27, "Japanese");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals(locale55.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "100 0 / 1" + "'", str58, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale63.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Chinese (Taiwan)" + "'", str66, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "kor" + "'", str70, "kor");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str72, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(fraction84);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "0" + "'", str88, "0");
    }

    @Test
    public void test09272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09272");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale1);
        int int6 = numberFormat5.getMaximumIntegerDigits();
        boolean boolean7 = numberFormat5.isParseIntegerOnly();
        int int8 = numberFormat5.getMaximumFractionDigits();
        numberFormat5.setMinimumIntegerDigits(52);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12, numberFormat14);
        numberFormat14.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field19 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition20 = new java.text.FieldPosition((java.text.Format.Field) field19);
        java.lang.String str21 = fieldPosition20.toString();
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale23.getDisplayScript();
        java.lang.String str25 = locale22.getDisplayName(locale23);
        boolean boolean26 = fieldPosition20.equals((java.lang.Object) locale23);
        fieldPosition20.setEndIndex((int) '#');
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getCurrencyInstance(locale29);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.text.ParsePosition parsePosition34 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction35 = properFractionFormat31.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition34);
        boolean boolean36 = fieldPosition20.equals((java.lang.Object) parsePosition34);
        java.lang.Number number37 = numberFormat14.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition34);
        java.lang.String str39 = numberFormat14.format((long) '#');
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str41 = locale40.getDisplayLanguage();
        java.lang.String str42 = locale40.toLanguageTag();
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.lang.String str45 = locale43.getISO3Language();
        java.lang.String str46 = locale40.getDisplayScript(locale43);
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.lang.String str48 = locale40.getDisplayCountry(locale47);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale40);
        java.text.NumberFormat numberFormat50 = fractionFormat49.getDenominatorFormat();
        java.math.RoundingMode roundingMode51 = numberFormat50.getRoundingMode();
        numberFormat14.setRoundingMode(roundingMode51);
        numberFormat5.setRoundingMode(roundingMode51);
        java.math.RoundingMode roundingMode54 = numberFormat5.getRoundingMode();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(field19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str21, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinese (Taiwan)" + "'", str25, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNull(fraction35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(number37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "3,500.0000000000000000000000000000000000000000000000000000%" + "'", str39, "3,500.0000000000000000000000000000000000000000000000000000%");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u4e2d\u6587" + "'", str41, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zh-TW" + "'", str42, "zh-TW");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "zho" + "'", str45, "zho");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Taiwan" + "'", str48, "Taiwan");
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertTrue("'" + roundingMode51 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode51.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + roundingMode54 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode54.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test09273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09273");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayName(locale4);
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale4);
        fieldPosition1.setEndIndex((int) '#');
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction16 = properFractionFormat12.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition15);
        boolean boolean17 = fieldPosition1.equals((java.lang.Object) parsePosition15);
        int int18 = fieldPosition1.getEndIndex();
        int int19 = fieldPosition1.getEndIndex();
        fieldPosition1.setEndIndex((-1));
        fieldPosition1.setBeginIndex(10000);
        fieldPosition1.setBeginIndex((int) (short) 60);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNull(fraction16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
    }

    @Test
    public void test09274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09274");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getNumberInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        numberFormat2.setGroupingUsed(false);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        numberFormat7.setMaximumFractionDigits(100);
        java.lang.String str12 = numberFormat7.format((long) 100);
        int int13 = numberFormat7.getMaximumFractionDigits();
        numberFormat7.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        boolean boolean25 = numberFormat24.isGroupingUsed();
        properFractionFormat22.setWholeFormat(numberFormat24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat17, numberFormat24);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat30, numberFormat32);
        numberFormat32.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field37 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition38 = new java.text.FieldPosition((java.text.Format.Field) field37);
        java.lang.String str39 = fieldPosition38.toString();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale41.getDisplayScript();
        java.lang.String str43 = locale40.getDisplayName(locale41);
        boolean boolean44 = fieldPosition38.equals((java.lang.Object) locale41);
        fieldPosition38.setEndIndex((int) '#');
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getCurrencyInstance(locale47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.text.ParsePosition parsePosition52 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction53 = properFractionFormat49.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition52);
        boolean boolean54 = fieldPosition38.equals((java.lang.Object) parsePosition52);
        java.lang.Number number55 = numberFormat32.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition52);
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.negate();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.abs();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction59.abs();
        java.util.Locale locale62 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getInstance(locale62);
        java.util.Locale locale64 = java.util.Locale.getDefault();
        boolean boolean65 = numberFormat63.equals((java.lang.Object) locale64);
        boolean boolean66 = fraction61.equals((java.lang.Object) locale64);
        boolean boolean67 = parsePosition52.equals((java.lang.Object) locale64);
        java.lang.Object obj68 = properFractionFormat27.parseObject("\uc911\uad6d\uc5b4", parsePosition52);
        java.text.NumberFormat numberFormat69 = properFractionFormat27.getWholeFormat();
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat72 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale71);
        java.text.NumberFormat numberFormat73 = fractionFormat72.getDenominatorFormat();
        numberFormat73.setMinimumIntegerDigits(1728000);
        boolean boolean76 = numberFormat73.isGroupingUsed();
        numberFormat73.setMaximumIntegerDigits((int) (short) 1);
        int int79 = numberFormat73.getMaximumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat80 = new org.apache.commons.math.fraction.FractionFormat(numberFormat73);
        java.text.ParsePosition parsePosition83 = new java.text.ParsePosition(119);
        int int84 = parsePosition83.getIndex();
        org.apache.commons.math.fraction.Fraction fraction85 = fractionFormat80.parse("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]", parsePosition83);
        java.lang.Number number86 = numberFormat69.parse("ZH-TW", parsePosition83);
        java.lang.Object obj87 = numberFormat2.parseObject("java.text.FieldPosition[field=1,attribute=null,beginIndex=6000,endIndex=0]", parsePosition83);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "10,000%" + "'", str12, "10,000%");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(field37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str39, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinese (Taiwan)" + "'", str43, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNull(fraction53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(number55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 119 + "'", int84 == 119);
        org.junit.Assert.assertNull(fraction85);
        org.junit.Assert.assertNull(number86);
        org.junit.Assert.assertNull(obj87);
    }

    @Test
    public void test09275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09275");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category0, locale5);
        java.lang.String str7 = locale5.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.lang.String str9 = locale5.getCountry();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition(2);
        int int14 = parsePosition13.getIndex();
        java.lang.Number number15 = numberFormat10.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition13);
        java.lang.String str16 = parsePosition13.toString();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fra" + "'", str7, "fra");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CA" + "'", str9, "CA");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNull(number15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.ParsePosition[index=2,errorIndex=2]" + "'", str16, "java.text.ParsePosition[index=2,errorIndex=2]");
    }

    @Test
    public void test09276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09276");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayName(locale4);
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale4);
        fieldPosition1.setEndIndex((int) '#');
        java.text.Format.Field field10 = fieldPosition1.getFieldAttribute();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.text.NumberFormat numberFormat14 = properFractionFormat13.getWholeFormat();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale15);
        java.util.Locale locale17 = java.util.Locale.getDefault();
        boolean boolean18 = numberFormat16.equals((java.lang.Object) locale17);
        properFractionFormat13.setNumeratorFormat(numberFormat16);
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getCurrencyInstance(locale21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction27 = properFractionFormat23.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition26);
        java.text.NumberFormat numberFormat28 = properFractionFormat23.getWholeFormat();
        java.util.Locale locale33 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        numberFormat34.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str38 = numberFormat34.format((double) 0.0f);
        java.util.Locale locale42 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        int int44 = numberFormat43.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = new org.apache.commons.math.fraction.FractionFormat(numberFormat43);
        java.text.NumberFormat numberFormat46 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34, numberFormat43, numberFormat46);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException50 = new org.apache.commons.math.fraction.FractionConversionException(0.0d, 10);
        boolean boolean51 = numberFormat43.equals((java.lang.Object) 10);
        java.util.Locale locale52 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getInstance(locale52);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = new org.apache.commons.math.fraction.FractionFormat(numberFormat53, numberFormat55);
        int int57 = numberFormat53.getMaximumIntegerDigits();
        java.util.Locale locale58 = java.util.Locale.JAPAN;
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = locale59.getDisplayScript();
        java.lang.String str61 = locale58.getDisplayCountry(locale59);
        java.util.Set<java.lang.String> strSet62 = locale59.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getIntegerInstance(locale59);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getInstance(locale59);
        java.util.Set<java.lang.Character> charSet65 = locale59.getExtensionKeys();
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getIntegerInstance(locale59);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43, numberFormat53, numberFormat66);
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getCurrencyInstance(locale69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat71 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat70);
        java.text.ParsePosition parsePosition74 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction75 = properFractionFormat71.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition74);
        org.apache.commons.math.fraction.Fraction fraction76 = properFractionFormat67.parse("java.text.NumberFormat$Field(exponent symbol)", parsePosition74);
        org.apache.commons.math.fraction.Fraction fraction77 = properFractionFormat23.parse("\uc77c\ubcf8,1 / 1)", parsePosition74);
        int int78 = parsePosition74.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction79 = properFractionFormat13.parse("9,700%", parsePosition74);
        boolean boolean80 = field10.equals((java.lang.Object) "9,700%");
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNull(fraction27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals(locale33.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0%" + "'", str38, "0%");
        org.junit.Assert.assertEquals(locale42.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Japan" + "'", str61, "Japan");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(charSet65);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNull(fraction75);
        org.junit.Assert.assertNull(fraction76);
        org.junit.Assert.assertNull(fraction77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test09277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09277");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        long long4 = fraction2.longValue();
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale14 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        numberFormat15.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency18 = numberFormat15.getCurrency();
        numberFormat9.setCurrency(currency18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        boolean boolean21 = fraction2.equals((java.lang.Object) properFractionFormat20);
        org.apache.commons.math.fraction.Fraction fraction23 = properFractionFormat20.parse("9.700%");
        java.text.NumberFormat numberFormat24 = properFractionFormat20.getDenominatorFormat();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1 / 100" + "'", str3, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(numberFormat24);
    }

    @Test
    public void test09278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09278");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        boolean boolean16 = numberFormat15.isParseIntegerOnly();
        numberFormat15.setGroupingUsed(false);
        properFractionFormat3.setWholeFormat(numberFormat15);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        boolean boolean26 = numberFormat25.isGroupingUsed();
        properFractionFormat23.setWholeFormat(numberFormat25);
        java.text.NumberFormat numberFormat28 = properFractionFormat23.getWholeFormat();
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number32 = numberFormat28.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition31);
        java.lang.Object obj33 = properFractionFormat3.parseObject("2,147,483,647 / 1", parsePosition31);
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance(locale34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat35, numberFormat37);
        boolean boolean39 = numberFormat37.isGroupingUsed();
        boolean boolean40 = numberFormat37.isGroupingUsed();
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj44 = numberFormat37.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition43);
        numberFormat37.setParseIntegerOnly(false);
        properFractionFormat3.setDenominatorFormat(numberFormat37);
        java.text.ParsePosition parsePosition50 = new java.text.ParsePosition((int) (short) 0);
        org.apache.commons.math.fraction.Fraction fraction51 = properFractionFormat3.parse("59\240999 %", parsePosition50);
        java.text.NumberFormat numberFormat52 = properFractionFormat3.getWholeFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNull(number32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(fraction51);
        org.junit.Assert.assertNotNull(numberFormat52);
    }

    @Test
    public void test09279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09279");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction(100.0d, (double) 0.008263889f, 0);
        int int4 = fraction3.intValue();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.abs();
        long long15 = fraction13.longValue();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction9.multiply(fraction13);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        long long27 = fraction25.longValue();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction21.multiply(fraction25);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction9.divide(fraction28);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction9.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction32 = new org.apache.commons.math.fraction.Fraction((double) 1L);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction30.divide(fraction32);
        double double34 = fraction32.doubleValue();
        int int35 = fraction32.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction32.abs();
        long long37 = fraction36.longValue();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction(1, (int) (byte) -120);
        int int42 = fraction41.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction36.multiply(fraction41);
        org.apache.commons.math.fraction.Fraction fraction46 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str47 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction46);
        long long48 = fraction46.longValue();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction46.abs();
        int int50 = fraction46.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction46.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction51.abs();
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str55 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction54);
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.negate();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.abs();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction59.abs();
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.negate();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.abs();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction65.abs();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction59.add(fraction65);
        org.apache.commons.math.fraction.Fraction fraction69 = fraction54.multiply(fraction65);
        org.apache.commons.math.fraction.Fraction fraction70 = fraction54.negate();
        long long71 = fraction70.longValue();
        org.apache.commons.math.fraction.Fraction fraction74 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str75 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction74);
        long long76 = fraction74.longValue();
        org.apache.commons.math.fraction.Fraction fraction77 = fraction74.abs();
        org.apache.commons.math.fraction.Fraction fraction78 = fraction70.divide(fraction77);
        org.apache.commons.math.fraction.Fraction fraction79 = fraction51.add(fraction70);
        org.apache.commons.math.fraction.Fraction fraction80 = fraction41.subtract(fraction70);
        org.apache.commons.math.fraction.Fraction fraction81 = fraction3.add(fraction70);
        org.apache.commons.math.fraction.Fraction fraction82 = fraction3.negate();
        byte byte83 = fraction3.byteValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-1 / 100" + "'", str47, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1 / 1" + "'", str55, "1 / 1");
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "-1 / 100" + "'", str75, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertTrue("'" + byte83 + "' != '" + (byte) 100 + "'", byte83 == (byte) 100);
    }

    @Test
    public void test09280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09280");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getCurrencyInstance(locale9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.util.Currency currency12 = numberFormat10.getCurrency();
        properFractionFormat8.setNumeratorFormat(numberFormat10);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) '4');
        parsePosition16.setErrorIndex(600);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.util.Locale locale22 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        java.lang.String str24 = locale22.getDisplayCountry();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getIntegerInstance(locale22);
        java.lang.String str26 = locale19.getDisplayCountry(locale22);
        java.lang.String str27 = locale19.getISO3Language();
        java.lang.String str28 = locale19.getDisplayName();
        java.lang.String str30 = locale19.getExtension('x');
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction34.abs();
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getInstance(locale37);
        java.util.Locale locale39 = java.util.Locale.getDefault();
        boolean boolean40 = numberFormat38.equals((java.lang.Object) locale39);
        boolean boolean41 = fraction36.equals((java.lang.Object) locale39);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction36.abs();
        java.util.Locale locale43 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale43);
        boolean boolean45 = fraction42.equals((java.lang.Object) locale43);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale43);
        java.lang.String str47 = locale19.getDisplayScript(locale43);
        boolean boolean48 = parsePosition16.equals((java.lang.Object) str47);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance(locale49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance(locale52);
        boolean boolean54 = numberFormat53.isGroupingUsed();
        properFractionFormat51.setWholeFormat(numberFormat53);
        java.text.NumberFormat numberFormat56 = properFractionFormat51.getWholeFormat();
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number60 = numberFormat56.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition59);
        int int61 = parsePosition59.getIndex();
        int int62 = parsePosition59.getErrorIndex();
        boolean boolean63 = parsePosition16.equals((java.lang.Object) parsePosition59);
        int int64 = parsePosition59.getIndex();
        org.apache.commons.math.fraction.Fraction fraction65 = properFractionFormat8.parse("-800%", parsePosition59);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u4e2d\u6587" + "'", str1, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "France" + "'", str26, "France");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fra" + "'", str27, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u6cd5\u6587\u6cd5\u570b)" + "'", str28, "\u6cd5\u6587\u6cd5\u570b)");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNull(number60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNull(fraction65);
    }

    @Test
    public void test09281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09281");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (-2), (double) 1, 14400);
        float float4 = fraction3.floatValue();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction(1, (int) (byte) -120);
        int int8 = fraction7.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        long long19 = fraction17.longValue();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction13.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        long long31 = fraction29.longValue();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction25.multiply(fraction29);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction17.subtract(fraction32);
        org.apache.commons.math.fraction.Fraction fraction36 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str37 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction36);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction17.subtract(fraction36);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction7.subtract(fraction36);
        int int40 = fraction7.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction3.add(fraction7);
        long long42 = fraction3.longValue();
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + (-2.0f) + "'", float4 == (-2.0f));
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1 / 100" + "'", str37, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-2L) + "'", long42 == (-2L));
    }

    @Test
    public void test09282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09282");
        java.util.Locale locale3 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str8 = locale6.getDisplayCountry();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getIntegerInstance(locale6);
        java.lang.String str10 = locale6.toLanguageTag();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale locale13 = builder11.build();
        java.lang.String str14 = locale13.getScript();
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str17 = locale15.toLanguageTag();
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale18.getISO3Language();
        java.lang.String str21 = locale15.getDisplayScript(locale18);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale15.getDisplayCountry(locale22);
        java.util.Locale locale25 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str26 = locale22.getDisplayLanguage(locale25);
        java.lang.String str27 = locale13.getDisplayCountry(locale25);
        java.lang.String str28 = locale6.getDisplayVariant(locale13);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale30 = locale6.stripExtensions();
        java.lang.String str31 = locale3.getDisplayLanguage(locale6);
        java.lang.String str32 = locale3.getDisplayScript();
        org.junit.Assert.assertEquals(locale3.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "und" + "'", str10, "und");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u4e2d\u6587" + "'", str16, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh-TW" + "'", str17, "zh-TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zho" + "'", str20, "zho");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Taiwan" + "'", str23, "Taiwan");
        org.junit.Assert.assertEquals(locale25.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Italian" + "'", str26, "Italian");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1 / 1" + "'", str31, "1 / 1");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test09283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09283");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        java.lang.String str3 = numberFormat0.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat5 = properFractionFormat4.getWholeFormat();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        numberFormat8.setMinimumIntegerDigits(1728000);
        boolean boolean11 = numberFormat8.isGroupingUsed();
        properFractionFormat4.setWholeFormat(numberFormat8);
        boolean boolean13 = numberFormat8.isParseIntegerOnly();
        java.util.Locale locale17 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        int int19 = numberFormat18.getMaximumIntegerDigits();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        boolean boolean22 = numberFormat21.isGroupingUsed();
        java.util.Currency currency23 = numberFormat21.getCurrency();
        numberFormat18.setCurrency(currency23);
        java.util.Currency currency25 = numberFormat18.getCurrency();
        int int26 = numberFormat18.getMaximumFractionDigits();
        java.lang.Object obj27 = numberFormat18.clone();
        numberFormat18.setMinimumFractionDigits((int) (short) 1);
        boolean boolean30 = numberFormat18.isGroupingUsed();
        boolean boolean31 = numberFormat18.isParseIntegerOnly();
        boolean boolean32 = numberFormat18.isParseIntegerOnly();
        java.lang.Object obj33 = numberFormat18.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8, numberFormat18);
        java.text.NumberFormat numberFormat35 = fractionFormat34.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number37 = numberFormat35.parse("\ub300\ub9cc)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=35] (?????)\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
        org.junit.Assert.assertEquals(currency1.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100 %" + "'", str3, "100 %");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals(locale17.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(numberFormat35);
    }

    @Test
    public void test09284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09284");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        int int6 = numberFormat2.getMaximumFractionDigits();
        int int7 = numberFormat2.getMinimumFractionDigits();
        java.lang.Number number9 = numberFormat2.parse("600");
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        int int15 = numberFormat14.getMaximumIntegerDigits();
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        numberFormat20.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency23 = numberFormat20.getCurrency();
        numberFormat14.setCurrency(currency23);
        numberFormat14.setGroupingUsed(false);
        java.lang.String str28 = numberFormat14.format((double) (short) 2);
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition((int) (byte) 0);
        java.lang.Object obj32 = numberFormat14.parseObject("1%", parsePosition31);
        numberFormat14.setParseIntegerOnly(true);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2, numberFormat14);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale36.getISO3Language();
        java.util.Set<java.lang.Character> charSet38 = locale36.getExtensionKeys();
        java.util.Locale locale39 = java.util.Locale.US;
        java.lang.String str40 = locale39.getDisplayScript();
        java.lang.String str41 = locale36.getDisplayVariant(locale39);
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getCurrencyInstance(locale36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getInstance(locale45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = new org.apache.commons.math.fraction.FractionFormat(numberFormat46, numberFormat48);
        java.text.ParsePosition parsePosition52 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj53 = numberFormat48.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition52);
        java.lang.String str54 = parsePosition52.toString();
        boolean boolean56 = parsePosition52.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction57 = properFractionFormat43.parse("java.text.ParseException: zh_TW", parsePosition52);
        java.text.NumberFormat numberFormat58 = properFractionFormat43.getWholeFormat();
        numberFormat58.setMinimumIntegerDigits((int) 'u');
        int int61 = numberFormat58.getMinimumIntegerDigits();
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance(locale62);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance(locale65);
        boolean boolean67 = numberFormat66.isGroupingUsed();
        properFractionFormat64.setWholeFormat(numberFormat66);
        java.lang.Object obj69 = numberFormat66.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat58, numberFormat66);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + number9 + "' != '" + 600L + "'", number9, 600L);
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "200%" + "'", str28, "200%");
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + 0.01d + "'", obj32, 0.01d);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "kor" + "'", str37, "kor");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str54, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(fraction57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 117 + "'", int61 == 117);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(obj69);
    }

    @Test
    public void test09285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09285");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction(0.008263888888888888d);
        java.lang.String str2 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1 / 121" + "'", str2, "1 / 121");
    }

    @Test
    public void test09286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09286");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale2 = locale0.stripExtensions();
        java.lang.String str3 = locale0.getDisplayName();
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale4.toLanguageTag();
        java.lang.String str6 = locale4.getDisplayLanguage();
        java.lang.String str7 = locale4.getISO3Country();
        java.lang.String str8 = locale0.getDisplayScript(locale4);
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.util.Locale locale11 = locale9.stripExtensions();
        java.util.Locale locale12 = locale9.stripExtensions();
        java.lang.String str13 = locale0.getDisplayVariant(locale12);
        java.util.Locale locale16 = new java.util.Locale("1,396,801 / 14,400", "java.text.FieldPosition[field=100,attribute=null,beginIndex=117,endIndex=0]");
        java.lang.String str17 = locale12.getDisplayLanguage(locale16);
        java.util.Locale.Category category18 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale19 = java.util.Locale.getDefault(category18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale20);
        java.util.Locale.setDefault(category18, locale20);
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.lang.String str25 = locale23.getDisplayScript(locale24);
        java.util.Locale.setDefault(category18, locale23);
        java.util.Locale locale30 = new java.util.Locale("Japanese (Japan)", "chinois", "-1 / 120");
        java.util.Locale.setDefault(category18, locale30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale32.getDisplayCountry();
        java.util.Locale locale35 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str37 = locale35.getISO3Language();
        java.lang.String str38 = locale32.getDisplayScript(locale35);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale35);
        java.util.Locale.setDefault(category18, locale35);
        java.util.Locale locale43 = new java.util.Locale("0 / 1", "\u53f0\u6e7e");
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.lang.String str45 = locale44.getScript();
        java.util.Locale locale49 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str50 = locale44.getDisplayScript(locale49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale44);
        java.lang.String str52 = locale44.getCountry();
        java.util.Locale locale53 = java.util.Locale.ITALIAN;
        java.lang.String str54 = locale53.getDisplayCountry();
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.util.Locale locale56 = java.util.Locale.PRC;
        java.lang.String str57 = locale55.getDisplayName(locale56);
        java.lang.String str58 = locale53.getDisplayCountry(locale55);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale59.getISO3Language();
        java.util.Set<java.lang.String> strSet61 = locale59.getUnicodeLocaleKeys();
        java.lang.String str62 = locale59.getDisplayLanguage();
        java.lang.String str63 = locale53.getDisplayScript(locale59);
        java.lang.String str64 = locale44.getDisplayScript(locale53);
        java.lang.String str65 = locale43.getDisplayName(locale44);
        java.util.Locale.setDefault(category18, locale43);
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getCurrencyInstance(locale43);
        java.lang.String str68 = locale12.getDisplayScript(locale43);
        java.util.Locale.Builder builder69 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder70 = builder69.clearExtensions();
        java.util.Locale locale71 = builder69.build();
        java.util.Locale.Builder builder72 = builder69.clearExtensions();
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.lang.String str74 = locale73.getISO3Language();
        java.util.Locale.Builder builder75 = builder69.setLocale(locale73);
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale73);
        java.lang.String str77 = locale73.getDisplayScript();
        java.lang.String str78 = locale12.getDisplayName(locale73);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str3, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u4e2d\u6587" + "'", str6, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "TWN" + "'", str7, "TWN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals(locale16.toString(), "1,396,801 / 14,400_JAVA.TEXT.FIELDPOSITION[FIELD=100,ATTRIBUTE=NULL,BEGININDEX=117,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese" + "'", str17, "Chinese");
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.FORMAT + "'", category18.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(locale30.toString(), "japanese (japan)_CHINOIS_-1 / 120");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "zho" + "'", str37, "zho");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(numberFormat39);
// flaky:         org.junit.Assert.assertEquals(locale43.toString(), "\u53f0\u6e7e");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals(locale49.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str57, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "kor" + "'", str60, "kor");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u97d3\u6587" + "'", str62, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u53f0\u6e7e)" + "'", str65, "\u53f0\u6e7e)");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "kor" + "'", str74, "kor");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(fractionFormat76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str78, "\uc911\uad6d\uc5b4\uc911\uad6d)");
    }

    @Test
    public void test09287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09287");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.util.Locale locale30 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.lang.String str33 = fractionFormat31.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat34 = fractionFormat31.getNumeratorFormat();
        java.text.NumberFormat numberFormat35 = fractionFormat31.getNumeratorFormat();
        java.text.NumberFormat numberFormat36 = fractionFormat31.getNumeratorFormat();
        java.lang.String str38 = numberFormat36.format((long) 2147483647);
        properFractionFormat28.setDenominatorFormat(numberFormat36);
        java.text.ParsePosition parsePosition42 = new java.text.ParsePosition((int) '4');
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = locale43.getDisplayScript();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.lang.String str46 = locale45.getISO3Language();
        java.lang.String str47 = locale43.getDisplayScript(locale45);
        java.lang.String str48 = locale43.toLanguageTag();
        java.util.Set<java.lang.String> strSet49 = locale43.getUnicodeLocaleKeys();
        boolean boolean50 = parsePosition42.equals((java.lang.Object) locale43);
        java.lang.Object obj51 = numberFormat36.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=0,endIndex=0]", parsePosition42);
        numberFormat36.setMaximumIntegerDigits((-120));
        java.text.AttributedCharacterIterator attributedCharacterIterator55 = numberFormat36.formatToCharacterIterator((java.lang.Object) 1728000.0d);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "100 0 / 1" + "'", str33, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2,147,483,647" + "'", str38, "2,147,483,647");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "kor" + "'", str46, "kor");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "und" + "'", str48, "und");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(attributedCharacterIterator55);
    }

    @Test
    public void test09288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09288");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str8 = numberFormat4.format((double) 0.0f);
        java.util.Locale locale12 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        int int14 = numberFormat13.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13);
        java.text.NumberFormat numberFormat16 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat13, numberFormat16);
        java.math.RoundingMode roundingMode18 = numberFormat4.getRoundingMode();
        java.math.RoundingMode roundingMode19 = numberFormat4.getRoundingMode();
        numberFormat4.setMinimumIntegerDigits(88);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0%" + "'", str8, "0%");
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode18 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode18.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + roundingMode19 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode19.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test09289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09289");
        java.util.Locale locale1 = new java.util.Locale("en_CA");
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str3 = locale1.getCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.util.Locale locale6 = java.util.Locale.US;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getScript();
        java.lang.String str9 = locale6.getDisplayName(locale7);
        java.lang.String str10 = locale6.getScript();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale6);
        fractionFormat5.setDenominatorFormat(numberFormat11);
        org.junit.Assert.assertEquals(locale1.toString(), "en_ca");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en_ca" + "'", str2, "en_ca");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc601\uc5b4\ubbf8\uad6d)" + "'", str9, "\uc601\uc5b4\ubbf8\uad6d)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
    }

    @Test
    public void test09290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09290");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayName(locale3);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale9.getISO3Language();
        java.lang.String str11 = locale7.getDisplayScript(locale9);
        java.lang.String str12 = locale0.getDisplayLanguage(locale9);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str14 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str12, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh-TW" + "'", str14, "zh-TW");
    }

    @Test
    public void test09291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09291");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        java.lang.Object obj5 = numberFormat3.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.util.Locale locale11 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str14 = fractionFormat12.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat15 = fractionFormat12.getNumeratorFormat();
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Locale locale17 = locale16.stripExtensions();
        java.util.Locale locale19 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale19);
        java.lang.String str21 = locale19.getDisplayCountry();
        java.lang.String str22 = locale16.getDisplayName(locale19);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale23.getDisplayScript();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale25.getISO3Language();
        java.lang.String str27 = locale23.getDisplayScript(locale25);
        java.lang.String str28 = locale16.getDisplayLanguage(locale25);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale16);
        fractionFormat12.setNumeratorFormat(numberFormat29);
        properFractionFormat9.setWholeFormat(numberFormat29);
        fractionFormat6.setNumeratorFormat(numberFormat29);
        java.lang.String str34 = numberFormat29.format((-1.0d));
        boolean boolean35 = numberFormat1.equals((java.lang.Object) numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat37 = fractionFormat36.getNumeratorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "100 0 / 1" + "'", str14, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinese (Taiwan)" + "'", str22, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str28, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1" + "'", str34, "-1");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(numberFormat37);
    }

    @Test
    public void test09292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09292");
        java.util.Locale locale2 = new java.util.Locale("anglais", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]");
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getCurrencyInstance(locale2);
        java.util.Locale locale4 = locale2.stripExtensions();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale11 = java.util.Locale.getDefault(category6);
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.lang.String str15 = locale12.getDisplayCountry(locale13);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getNumberInstance(locale12);
        java.lang.String str17 = locale11.getDisplayCountry(locale12);
        java.lang.String str18 = locale12.getDisplayName();
        java.lang.String str19 = locale2.getDisplayLanguage(locale12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = locale2.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for anglais");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "anglais_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "anglais_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "\u53f0\u6e7e");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Japan" + "'", str15, "Japan");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str18, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "anglais" + "'", str19, "anglais");
    }

    @Test
    public void test09293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09293");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction8.add(fraction14);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction3.multiply(fraction14);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ONE;
        long long20 = fraction19.longValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction3.multiply(fraction19);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction2.subtract(fraction21);
        java.lang.String str23 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction21);
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.negate();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.abs();
        long long34 = fraction32.longValue();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction28.multiply(fraction32);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction28.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.negate();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.abs();
        long long47 = fraction45.longValue();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction41.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction28.multiply(fraction48);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction21.add(fraction49);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.abs();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1 / 1" + "'", str4, "1 / 1");
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1 / 1" + "'", str23, "1 / 1");
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
    }

    @Test
    public void test09294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09294");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) '#');
        java.text.Format.Field field3 = fieldPosition2.getFieldAttribute();
        java.text.Format.Field field4 = fieldPosition2.getFieldAttribute();
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition(field4, 599);
        int int7 = fieldPosition6.getField();
        fieldPosition6.setBeginIndex((int) (byte) 60);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder10.build();
        java.lang.String str13 = locale12.getScript();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.lang.String str16 = locale14.toLanguageTag();
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale17.getISO3Language();
        java.lang.String str20 = locale14.getDisplayScript(locale17);
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale14.getDisplayCountry(locale21);
        java.util.Locale locale24 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str25 = locale21.getDisplayLanguage(locale24);
        java.lang.String str26 = locale12.getDisplayCountry(locale24);
        java.util.Locale locale30 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.util.Locale locale32 = locale30.stripExtensions();
        java.util.Locale locale33 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale33);
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleKeys();
        boolean boolean36 = locale33.hasExtensions();
        java.lang.String str37 = locale30.getDisplayScript(locale33);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale33);
        java.lang.String str39 = locale33.getISO3Country();
        java.lang.String str40 = locale33.getISO3Country();
        java.lang.String str41 = locale12.getDisplayScript(locale33);
        boolean boolean42 = fieldPosition6.equals((java.lang.Object) str41);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException46 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException50 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str51 = fractionConversionException50.getPattern();
        java.lang.Throwable[] throwableArray52 = fractionConversionException50.getSuppressed();
        fractionConversionException46.addSuppressed((java.lang.Throwable) fractionConversionException50);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException57 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException61 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str62 = fractionConversionException61.getPattern();
        java.lang.Throwable[] throwableArray63 = fractionConversionException61.getSuppressed();
        fractionConversionException57.addSuppressed((java.lang.Throwable) fractionConversionException61);
        fractionConversionException50.addSuppressed((java.lang.Throwable) fractionConversionException61);
        java.lang.String str66 = fractionConversionException61.getPattern();
        java.text.ParseException parseException69 = new java.text.ParseException("10,000%", 10);
        fractionConversionException61.addSuppressed((java.lang.Throwable) parseException69);
        java.lang.Throwable[] throwableArray71 = fractionConversionException61.getSuppressed();
        java.lang.String str72 = fractionConversionException61.getPattern();
        java.lang.Object[] objArray73 = fractionConversionException61.getArguments();
        boolean boolean74 = fieldPosition6.equals((java.lang.Object) objArray73);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertNotNull(field4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 599 + "'", int7 == 599);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u4e2d\u6587" + "'", str15, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh-TW" + "'", str16, "zh-TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zho" + "'", str19, "zho");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Taiwan" + "'", str22, "Taiwan");
        org.junit.Assert.assertEquals(locale24.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Italian" + "'", str25, "Italian");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals(locale30.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CAN" + "'", str39, "CAN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CAN" + "'", str40, "CAN");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str51, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str62, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str66, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str72, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test09295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09295");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str8 = numberFormat4.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getISO3Language();
        java.util.Set<java.lang.Character> charSet12 = locale10.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet13 = locale10.getExtensionKeys();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getCurrencyInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        fractionFormat9.setNumeratorFormat(numberFormat14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat19 = properFractionFormat18.getWholeFormat();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        numberFormat21.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19, numberFormat21);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale27.getISO3Language();
        java.util.Set<java.lang.Character> charSet29 = locale27.getExtensionKeys();
        java.util.Locale locale30 = java.util.Locale.US;
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = locale27.getDisplayVariant(locale30);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance(locale27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getInstance(locale36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat37, numberFormat39);
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj44 = numberFormat39.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition43);
        java.lang.String str45 = parsePosition43.toString();
        boolean boolean47 = parsePosition43.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction48 = properFractionFormat34.parse("java.text.ParseException: zh_TW", parsePosition43);
        java.lang.Object obj49 = fractionFormat25.parseObject("Italian", parsePosition43);
        org.apache.commons.math.fraction.Fraction fraction50 = fractionFormat9.parse("overflow trying to convert {0} to fraction ({1}/{2})_ANGLAIS", parsePosition43);
        int int51 = parsePosition43.getIndex();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0%" + "'", str8, "0%");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "kor" + "'", str11, "kor");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "kor" + "'", str28, "kor");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str45, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(fraction48);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(fraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test09296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09296");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("zh-tw", strMap1);
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.util.Locale locale7 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.lang.String str9 = locale7.getDisplayCountry();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.lang.String str11 = locale3.getDisplayLanguage(locale7);
        java.util.Set<java.lang.String> strSet12 = locale7.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet12);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.parse("kor");
        java.util.Locale locale19 = new java.util.Locale("zho", "Chinese (Taiwan)", "Overflow trying to convert {0} to fraction ({1}/{2})");
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags(languageRangeList15, (java.util.Collection<java.lang.String>) strSet20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale22.getISO3Language();
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleKeys();
        java.lang.String str25 = locale22.getISO3Country();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getNumberInstance(locale22);
        java.util.Set<java.lang.String> strSet27 = locale22.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags(languageRangeList15, (java.util.Collection<java.lang.String>) strSet27);
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strList28);
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strList41);
        java.util.Locale.FilteringMode filteringMode44 = null;
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.lang.String>) strList41, filteringMode44);
        java.util.Collection<java.lang.String> strCollection46 = null;
        java.util.Locale.FilteringMode filteringMode47 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, strCollection46, filteringMode47);
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet32, filteringMode47);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese" + "'", str11, "Chinese");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertEquals(locale19.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "kor" + "'", str23, "kor");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + filteringMode47 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode47.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strList49);
    }

    @Test
    public void test09297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09297");
        java.util.Locale locale1 = new java.util.Locale("Japan");
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        boolean boolean5 = numberFormat3.equals((java.lang.Object) locale4);
        java.util.Locale locale7 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.lang.String str9 = locale7.getDisplayCountry();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.lang.String str11 = locale4.getDisplayVariant(locale7);
        java.lang.String str12 = locale1.getDisplayScript(locale4);
        java.util.Set<java.lang.Character> charSet13 = locale4.getExtensionKeys();
        java.lang.String str15 = locale4.getExtension('u');
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean21 = numberFormat19.equals((java.lang.Object) numberFormat20);
        java.lang.Object obj22 = numberFormat20.clone();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.util.Set<java.lang.Character> charSet25 = locale23.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet26 = locale23.getExtensionKeys();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getCurrencyInstance(locale23);
        java.util.Locale locale29 = new java.util.Locale("Chinese (Taiwan)");
        java.util.Locale locale32 = new java.util.Locale("Chinese", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        java.lang.String str33 = locale29.getDisplayCountry(locale32);
        java.util.Locale locale35 = new java.util.Locale("hi!");
        java.lang.String str36 = locale35.getDisplayLanguage();
        java.lang.String str37 = locale29.getDisplayLanguage(locale35);
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getCurrencyInstance(locale29);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale39);
        java.text.NumberFormat numberFormat41 = fractionFormat40.getDenominatorFormat();
        numberFormat41.setMinimumIntegerDigits(1728000);
        java.util.Currency currency44 = numberFormat41.getCurrency();
        numberFormat38.setCurrency(currency44);
        java.lang.String str47 = numberFormat38.format(1L);
        java.util.Locale locale51 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        numberFormat52.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str56 = numberFormat52.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = new org.apache.commons.math.fraction.FractionFormat(numberFormat52);
        int int58 = numberFormat52.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27, numberFormat38, numberFormat52);
        numberFormat27.setMaximumIntegerDigits((int) (byte) 120);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17, numberFormat20, numberFormat27);
        boolean boolean63 = numberFormat17.isParseIntegerOnly();
        java.util.Locale locale64 = java.util.Locale.ENGLISH;
        java.lang.String str65 = locale64.getScript();
        java.util.Locale locale69 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str70 = locale64.getDisplayScript(locale69);
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getNumberInstance(locale69);
        java.util.Set<java.lang.String> strSet72 = locale69.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet73 = locale69.getExtensionKeys();
        java.util.Locale locale74 = java.util.Locale.CANADA;
        java.util.Locale locale75 = java.util.Locale.PRC;
        java.lang.String str76 = locale74.getDisplayName(locale75);
        java.lang.String str77 = locale69.getDisplayName(locale74);
        java.util.Locale locale78 = locale74.stripExtensions();
        java.util.Locale locale79 = java.util.Locale.JAPAN;
        java.util.Locale locale80 = java.util.Locale.ROOT;
        java.lang.String str81 = locale80.getDisplayScript();
        java.lang.String str82 = locale79.getDisplayCountry(locale80);
        java.util.Set<java.lang.String> strSet83 = locale80.getUnicodeLocaleAttributes();
        java.lang.String str84 = locale78.getDisplayVariant(locale80);
        java.lang.String str85 = locale78.getDisplayCountry();
        java.lang.String str86 = locale78.getScript();
        java.lang.String str87 = locale78.getLanguage();
        java.util.Locale locale91 = new java.util.Locale("zho", "Chinese (Taiwan)", "Overflow trying to convert {0} to fraction ({1}/{2})");
        java.util.Set<java.lang.String> strSet92 = locale91.getUnicodeLocaleKeys();
        java.lang.String str93 = locale78.getDisplayVariant(locale91);
        boolean boolean94 = numberFormat17.equals((java.lang.Object) locale91);
        java.lang.String str95 = locale91.getVariant();
        org.junit.Assert.assertEquals(locale1.toString(), "japan");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals(locale29.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals(locale32.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals(locale35.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "chinese (taiwan)" + "'", str37, "chinese (taiwan)");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\244 1.00" + "'", str47, "\244 1.00");
        org.junit.Assert.assertEquals(locale51.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0%" + "'", str56, "0%");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals(locale69.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(charSet73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str76, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str77, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Japan" + "'", str82, "Japan");
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u52a0\u62ff\u5927" + "'", str85, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "en" + "'", str87, "en");
        org.junit.Assert.assertEquals(locale91.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str95, "Overflow trying to convert {0} to fraction ({1}/{2})");
    }

    @Test
    public void test09298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09298");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat7.parse("java.text.ParseException: zh_TW", parsePosition16);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.lang.String str26 = fractionFormat24.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat27 = fractionFormat24.getNumeratorFormat();
        numberFormat27.setMaximumFractionDigits((int) (short) -1);
        int int30 = numberFormat27.getMinimumFractionDigits();
        java.math.RoundingMode roundingMode31 = numberFormat27.getRoundingMode();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        boolean boolean37 = numberFormat36.isGroupingUsed();
        properFractionFormat34.setWholeFormat(numberFormat36);
        java.util.Locale locale39 = java.util.Locale.getDefault();
        java.util.Locale locale40 = locale39.stripExtensions();
        java.util.Locale locale42 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale42);
        java.lang.String str44 = locale42.getDisplayCountry();
        java.lang.String str45 = locale39.getDisplayName(locale42);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.lang.String str47 = locale46.getDisplayScript();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale48.getISO3Language();
        java.lang.String str50 = locale46.getDisplayScript(locale48);
        java.lang.String str51 = locale39.getDisplayLanguage(locale48);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getNumberInstance(locale39);
        java.util.Currency currency53 = numberFormat52.getCurrency();
        java.util.Locale locale57 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance(locale57);
        int int59 = numberFormat58.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = new org.apache.commons.math.fraction.FractionFormat(numberFormat58);
        numberFormat58.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode63 = numberFormat58.getRoundingMode();
        numberFormat52.setRoundingMode(roundingMode63);
        numberFormat36.setRoundingMode(roundingMode63);
        numberFormat27.setRoundingMode(roundingMode63);
        properFractionFormat7.setWholeFormat(numberFormat27);
        java.text.NumberFormat numberFormat68 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat69 = properFractionFormat7.getWholeFormat();
        java.util.Locale locale70 = java.util.Locale.TAIWAN;
        java.lang.String str71 = locale70.toLanguageTag();
        java.lang.String str72 = locale70.getVariant();
        java.util.Locale.Builder builder73 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder75 = builder73.setScript("");
        java.util.Locale locale76 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet77 = locale76.getUnicodeLocaleAttributes();
        java.util.Locale locale78 = java.util.Locale.GERMANY;
        java.lang.String str79 = locale76.getDisplayLanguage(locale78);
        java.util.Locale.Builder builder80 = builder75.setLocale(locale76);
        java.lang.String str81 = locale70.getDisplayVariant(locale76);
        java.lang.String str82 = locale76.getDisplayName();
        java.lang.String str83 = locale76.toLanguageTag();
        java.lang.String str84 = locale76.getDisplayCountry();
        java.text.NumberFormat numberFormat85 = java.text.NumberFormat.getPercentInstance(locale76);
        org.apache.commons.math.fraction.FractionFormat fractionFormat86 = new org.apache.commons.math.fraction.FractionFormat(numberFormat85);
        properFractionFormat7.setWholeFormat(numberFormat85);
        java.text.NumberFormat numberFormat88 = properFractionFormat7.getWholeFormat();
        java.text.ParsePosition parsePosition91 = new java.text.ParsePosition((int) (short) 3);
        org.apache.commons.math.fraction.Fraction fraction92 = properFractionFormat7.parse("100 / 1", parsePosition91);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(fraction21);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100 0 / 1" + "'", str26, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + roundingMode31 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode31.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale42.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Chinese (Taiwan)" + "'", str45, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "kor" + "'", str49, "kor");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str51, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "TWD");
        org.junit.Assert.assertEquals(locale57.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode63 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode63.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "zh-TW" + "'", str71, "zh-TW");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Chinesisch" + "'", str79, "Chinesisch");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str82, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "zh-TW" + "'", str83, "zh-TW");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u53f0\u7063" + "'", str84, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertNull(fraction92);
    }

    @Test
    public void test09299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09299");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str8 = locale6.getDisplayCountry();
        java.lang.String str9 = locale3.getDisplayName(locale6);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale10.getDisplayScript();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        java.lang.String str14 = locale10.getDisplayScript(locale12);
        java.lang.String str15 = locale3.getDisplayLanguage(locale12);
        java.lang.String str16 = locale3.toLanguageTag();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.String str18 = locale3.toLanguageTag();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance(locale3);
        java.lang.String str20 = locale1.getDisplayVariant(locale3);
        java.lang.String str21 = locale1.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (Taiwan)" + "'", str9, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str15, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh-TW" + "'", str16, "zh-TW");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh-TW" + "'", str18, "zh-TW");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "TWN" + "'", str21, "TWN");
    }

    @Test
    public void test09300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09300");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        numberFormat4.setMinimumIntegerDigits(0);
        java.lang.String str8 = numberFormat4.format(1.0d);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat13);
        boolean boolean15 = numberFormat13.isGroupingUsed();
        boolean boolean16 = numberFormat13.isGroupingUsed();
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj20 = numberFormat13.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition19);
        java.lang.Object obj21 = numberFormat4.parseObject("Taiwan", parsePosition19);
        numberFormat4.setParseIntegerOnly(true);
        int int24 = numberFormat4.getMaximumIntegerDigits();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
    }

    @Test
    public void test09301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09301");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        properFractionFormat11.setWholeFormat(numberFormat13);
        java.text.NumberFormat numberFormat16 = properFractionFormat11.getWholeFormat();
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number20 = numberFormat16.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition19);
        parsePosition19.setErrorIndex(0);
        int int23 = parsePosition19.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction24 = properFractionFormat7.parse("\u65e5\u6587", parsePosition19);
        java.lang.String str25 = parsePosition19.toString();
        parsePosition19.setErrorIndex((int) (short) 0);
        java.text.NumberFormat.Field field28 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition29 = new java.text.FieldPosition((java.text.Format.Field) field28);
        java.text.FieldPosition fieldPosition31 = new java.text.FieldPosition((java.text.Format.Field) field28, 1);
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition((java.text.Format.Field) field28, (int) (short) 100);
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale35.getDisplayScript();
        java.lang.String str37 = locale34.getDisplayCountry(locale35);
        java.util.Set<java.lang.String> strSet38 = locale35.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale35);
        boolean boolean40 = field28.equals((java.lang.Object) locale35);
        java.text.FieldPosition fieldPosition41 = new java.text.FieldPosition((java.text.Format.Field) field28);
        fieldPosition41.setBeginIndex((int) 'a');
        fieldPosition41.setEndIndex((int) (short) 10000);
        boolean boolean46 = parsePosition19.equals((java.lang.Object) (short) 10000);
        int int47 = parsePosition19.getIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNull(number20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(fraction24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str25, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNotNull(field28);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Japan" + "'", str37, "Japan");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
    }

    @Test
    public void test09302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09302");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat7.parse("java.text.ParseException: zh_TW", parsePosition16);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.lang.String str26 = fractionFormat24.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat27 = fractionFormat24.getNumeratorFormat();
        numberFormat27.setMaximumFractionDigits((int) (short) -1);
        int int30 = numberFormat27.getMinimumFractionDigits();
        java.math.RoundingMode roundingMode31 = numberFormat27.getRoundingMode();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        boolean boolean37 = numberFormat36.isGroupingUsed();
        properFractionFormat34.setWholeFormat(numberFormat36);
        java.util.Locale locale39 = java.util.Locale.getDefault();
        java.util.Locale locale40 = locale39.stripExtensions();
        java.util.Locale locale42 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale42);
        java.lang.String str44 = locale42.getDisplayCountry();
        java.lang.String str45 = locale39.getDisplayName(locale42);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.lang.String str47 = locale46.getDisplayScript();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale48.getISO3Language();
        java.lang.String str50 = locale46.getDisplayScript(locale48);
        java.lang.String str51 = locale39.getDisplayLanguage(locale48);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getNumberInstance(locale39);
        java.util.Currency currency53 = numberFormat52.getCurrency();
        java.util.Locale locale57 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance(locale57);
        int int59 = numberFormat58.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = new org.apache.commons.math.fraction.FractionFormat(numberFormat58);
        numberFormat58.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode63 = numberFormat58.getRoundingMode();
        numberFormat52.setRoundingMode(roundingMode63);
        numberFormat36.setRoundingMode(roundingMode63);
        numberFormat27.setRoundingMode(roundingMode63);
        properFractionFormat7.setWholeFormat(numberFormat27);
        java.text.NumberFormat numberFormat68 = properFractionFormat7.getWholeFormat();
        java.text.NumberFormat numberFormat69 = properFractionFormat7.getWholeFormat();
        java.util.Locale locale70 = java.util.Locale.ITALIAN;
        java.lang.String str71 = locale70.getISO3Country();
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getIntegerInstance(locale70);
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getInstance(locale70);
        org.apache.commons.math.fraction.FractionFormat fractionFormat74 = new org.apache.commons.math.fraction.FractionFormat(numberFormat73);
        java.util.Locale locale75 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale75);
        java.util.Locale locale77 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat78 = java.text.NumberFormat.getInstance(locale77);
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat80 = java.text.NumberFormat.getPercentInstance(locale79);
        org.apache.commons.math.fraction.FractionFormat fractionFormat81 = new org.apache.commons.math.fraction.FractionFormat(numberFormat78, numberFormat80);
        boolean boolean82 = numberFormat80.isGroupingUsed();
        boolean boolean83 = numberFormat80.isGroupingUsed();
        fractionFormat76.setNumeratorFormat(numberFormat80);
        java.util.Locale locale85 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat86 = java.text.NumberFormat.getIntegerInstance(locale85);
        java.lang.String str88 = numberFormat86.format(0.0d);
        java.util.Locale locale89 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet90 = locale89.getUnicodeLocaleAttributes();
        boolean boolean91 = numberFormat86.equals((java.lang.Object) strSet90);
        org.apache.commons.math.fraction.FractionFormat fractionFormat92 = new org.apache.commons.math.fraction.FractionFormat(numberFormat80, numberFormat86);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat93 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat86);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat94 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat69, numberFormat73, numberFormat86);
        org.apache.commons.math.fraction.FractionFormat fractionFormat95 = new org.apache.commons.math.fraction.FractionFormat(numberFormat73);
        int int96 = numberFormat73.getMaximumIntegerDigits();
        numberFormat73.setMinimumFractionDigits((int) (byte) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat99 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat73);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(fraction21);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100 0 / 1" + "'", str26, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + roundingMode31 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode31.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale42.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Chinese (Taiwan)" + "'", str45, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "kor" + "'", str49, "kor");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str51, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "TWD");
        org.junit.Assert.assertEquals(locale57.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode63 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode63.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "0" + "'", str88, "0");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2147483647 + "'", int96 == 2147483647);
    }

    @Test
    public void test09303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09303");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.lang.String str7 = locale0.getDisplayName();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale0);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.lang.String str12 = locale10.toLanguageTag();
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale13.getISO3Language();
        java.lang.String str16 = locale10.getDisplayScript(locale13);
        java.lang.String str17 = locale10.getVariant();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale10);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.lang.String str23 = locale20.getISO3Country();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale20);
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        int int30 = numberFormat29.getMaximumIntegerDigits();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        boolean boolean33 = numberFormat32.isGroupingUsed();
        java.util.Currency currency34 = numberFormat32.getCurrency();
        numberFormat29.setCurrency(currency34);
        java.util.Currency currency36 = numberFormat29.getCurrency();
        int int37 = numberFormat29.getMaximumFractionDigits();
        java.lang.Object obj38 = numberFormat29.clone();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        numberFormat40.setMaximumFractionDigits(100);
        numberFormat40.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str47 = numberFormat40.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat29, numberFormat40);
        java.text.NumberFormat numberFormat49 = properFractionFormat48.getWholeFormat();
        java.util.Locale locale53 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance(locale53);
        int int55 = numberFormat54.getMaximumIntegerDigits();
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance(locale56);
        boolean boolean58 = numberFormat57.isGroupingUsed();
        java.util.Currency currency59 = numberFormat57.getCurrency();
        numberFormat54.setCurrency(currency59);
        java.util.Currency currency61 = numberFormat54.getCurrency();
        java.math.RoundingMode roundingMode62 = numberFormat54.getRoundingMode();
        properFractionFormat48.setWholeFormat(numberFormat54);
        java.text.NumberFormat numberFormat64 = properFractionFormat48.getWholeFormat();
        java.util.Locale locale66 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getInstance(locale66);
        boolean boolean68 = numberFormat67.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        java.text.ParsePosition parsePosition72 = new java.text.ParsePosition((int) '4');
        org.apache.commons.math.fraction.Fraction fraction73 = properFractionFormat69.parse("0%", parsePosition72);
        java.lang.Object obj74 = properFractionFormat48.parseObject("", parsePosition72);
        java.lang.Object obj75 = fractionFormat18.parseObject("", parsePosition72);
        java.lang.Object obj76 = numberFormat8.parseObject("java.text.FieldPosition[field=120,attribute=null,beginIndex=0,endIndex=0]", parsePosition72);
        java.lang.String str77 = parsePosition72.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u4e2d\u6587" + "'", str1, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str7, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u6587" + "'", str11, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh-TW" + "'", str12, "zh-TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zho" + "'", str15, "zho");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100%" + "'", str47, "100%");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertEquals(locale53.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(currency59);
        org.junit.Assert.assertEquals(currency59.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency61);
        org.junit.Assert.assertEquals(currency61.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode62 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode62.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(fraction73);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "java.text.ParsePosition[index=52,errorIndex=52]" + "'", str77, "java.text.ParsePosition[index=52,errorIndex=52]");
    }

    @Test
    public void test09304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09304");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        int int18 = fraction12.intValue();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction12.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction(35, 2);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction22.multiply(fraction25);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction12.divide(fraction25);
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Locale locale29 = locale28.stripExtensions();
        java.util.Locale locale31 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale31);
        java.lang.String str33 = locale31.getDisplayCountry();
        java.lang.String str34 = locale28.getDisplayName(locale31);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale35.getDisplayScript();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale37.getISO3Language();
        java.lang.String str39 = locale35.getDisplayScript(locale37);
        java.lang.String str40 = locale28.getDisplayLanguage(locale37);
        java.util.Set<java.lang.String> strSet41 = locale28.getUnicodeLocaleKeys();
        boolean boolean42 = fraction12.equals((java.lang.Object) strSet41);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction12.negate();
        float float44 = fraction12.floatValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese (Taiwan)" + "'", str34, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "kor" + "'", str38, "kor");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str40, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 0.016666668f + "'", float44 == 0.016666668f);
    }

    @Test
    public void test09305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09305");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat4 = properFractionFormat2.getDenominatorFormat();
        java.util.Locale locale6 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale9);
        java.util.Currency currency12 = numberFormat11.getCurrency();
        numberFormat11.setMinimumIntegerDigits(1);
        numberFormat11.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj20 = numberFormat11.parseObject("Japan", parsePosition19);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException24 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str25 = fractionConversionException24.getPattern();
        java.lang.Throwable[] throwableArray26 = fractionConversionException24.getSuppressed();
        java.lang.Object[] objArray27 = fractionConversionException24.getArguments();
        boolean boolean28 = parsePosition19.equals((java.lang.Object) objArray27);
        int int29 = parsePosition19.getIndex();
        int int30 = parsePosition19.getIndex();
        java.lang.Object obj31 = fractionFormat7.parseObject("\ud55c\uad6d\uc5b4", parsePosition19);
        parsePosition19.setErrorIndex(14400);
        org.apache.commons.math.fraction.Fraction fraction34 = properFractionFormat2.parse("\u65e5\u6587", parsePosition19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat36 = properFractionFormat35.getWholeFormat();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        numberFormat38.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = new org.apache.commons.math.fraction.FractionFormat(numberFormat36, numberFormat38);
        properFractionFormat2.setDenominatorFormat(numberFormat36);
        java.text.NumberFormat numberFormat44 = properFractionFormat2.getWholeFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "TWD");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str25, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(fraction34);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat44);
    }

    @Test
    public void test09306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09306");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getCurrencyInstance(locale4);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat6.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition9);
        org.apache.commons.math.fraction.Fraction fraction11 = properFractionFormat2.parse("zh_TW", parsePosition9);
        java.text.NumberFormat numberFormat12 = properFractionFormat2.getWholeFormat();
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        int int18 = numberFormat17.getMaximumIntegerDigits();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        boolean boolean21 = numberFormat20.isGroupingUsed();
        java.util.Currency currency22 = numberFormat20.getCurrency();
        numberFormat17.setCurrency(currency22);
        java.util.Currency currency24 = numberFormat17.getCurrency();
        int int25 = numberFormat17.getMaximumFractionDigits();
        properFractionFormat2.setNumeratorFormat(numberFormat17);
        org.apache.commons.math.fraction.Fraction fraction30 = new org.apache.commons.math.fraction.Fraction((double) 2000L, (double) 11700L, (int) (short) 97);
        java.lang.StringBuffer stringBuffer31 = null;
        java.text.NumberFormat.Field field32 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition((java.text.Format.Field) field32);
        java.lang.String str34 = fieldPosition33.toString();
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale36.getDisplayScript();
        java.lang.String str38 = locale35.getDisplayName(locale36);
        boolean boolean39 = fieldPosition33.equals((java.lang.Object) locale36);
        java.text.NumberFormat.Field field40 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition41 = new java.text.FieldPosition((java.text.Format.Field) field40);
        java.text.FieldPosition fieldPosition43 = new java.text.FieldPosition((java.text.Format.Field) field40, (int) (byte) 10);
        boolean boolean44 = fieldPosition33.equals((java.lang.Object) field40);
        java.text.NumberFormat.Field field45 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition47 = new java.text.FieldPosition((java.text.Format.Field) field45, (int) '#');
        java.text.Format.Field field48 = fieldPosition47.getFieldAttribute();
        boolean boolean49 = field40.equals((java.lang.Object) fieldPosition47);
        java.lang.String str50 = fieldPosition47.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer51 = numberFormat17.format((java.lang.Object) 2000L, stringBuffer31, fieldPosition47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNull(fraction10);
        org.junit.Assert.assertNull(fraction11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency24);
        org.junit.Assert.assertEquals(currency24.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(field32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str34, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Chinese (Taiwan)" + "'", str38, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(field40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(field45);
        org.junit.Assert.assertNotNull(field48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java.text.FieldPosition[field=35,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str50, "java.text.FieldPosition[field=35,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test09307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09307");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder8 = builder5.clear();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("9,700%");
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.util.Locale.Builder builder12 = builder8.setLocale(locale10);
        java.util.Locale.Builder builder13 = builder8.clearExtensions();
        java.util.Locale.Builder builder15 = builder8.setLanguage("CHN");
        java.util.Locale.Builder builder18 = builder15.setExtension('a', "");
        java.util.Locale.Builder builder19 = builder18.clear();
        java.util.Locale locale21 = new java.util.Locale("java.text.parseexception: zh_tw");
        java.lang.String str23 = locale21.getExtension('x');
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Locale locale25 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale25);
        java.lang.String str27 = locale24.getDisplayName(locale25);
        java.util.Locale locale28 = java.util.Locale.TAIWAN;
        java.lang.String str29 = locale28.toLanguageTag();
        java.lang.String str30 = locale28.getVariant();
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder31.setScript("");
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = locale34.getDisplayLanguage(locale36);
        java.util.Locale.Builder builder38 = builder33.setLocale(locale34);
        java.lang.String str39 = locale28.getDisplayVariant(locale34);
        java.lang.String str40 = locale34.getDisplayName();
        java.lang.String str41 = locale34.getDisplayName();
        java.lang.String str42 = locale25.getDisplayScript(locale34);
        java.lang.String str43 = locale21.getDisplayScript(locale25);
        java.util.Locale.Builder builder44 = builder19.setLocale(locale25);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder47 = builder44.setUnicodeLocaleKeyword("java.text.FieldPosition[field=100,attribute=null,beginIndex=-1,endIndex=0]", "");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: java.text.FieldPosition[field=100,attribute=null,beginIndex=-1,endIndex=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals(locale21.toString(), "java.text.parseexception: zh_tw");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "francese (Francia)" + "'", str27, "francese (Francia)");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "zh-TW" + "'", str29, "zh-TW");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinesisch" + "'", str37, "Chinesisch");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str40, "\u4e2d\u6587\u53f0\u7063)");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str41, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test09308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09308");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str1 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction0);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction5.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction0.multiply(fraction11);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.ONE;
        long long17 = fraction16.longValue();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction0.multiply(fraction16);
        double double19 = fraction16.doubleValue();
        int int20 = fraction16.getDenominator();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1 / 1" + "'", str1, "1 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test09309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09309");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction(35, 2);
        org.apache.commons.math.fraction.Fraction fraction6 = fraction2.multiply(fraction5);
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.negate();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        long long16 = fraction14.longValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction11.subtract(fraction14);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction5.subtract(fraction14);
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 100);
        java.lang.String str22 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction21);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction5.subtract(fraction25);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.abs();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0 / 1" + "'", str22, "0 / 1");
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
    }

    @Test
    public void test09310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09310");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.String str6 = numberFormat4.format((double) 10L);
        java.util.Currency currency7 = numberFormat4.getCurrency();
        numberFormat4.setMaximumIntegerDigits(0);
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        int int15 = numberFormat14.getMaximumIntegerDigits();
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        boolean boolean18 = numberFormat17.isGroupingUsed();
        java.util.Currency currency19 = numberFormat17.getCurrency();
        numberFormat14.setCurrency(currency19);
        java.util.Currency currency21 = numberFormat14.getCurrency();
        int int22 = numberFormat14.getMaximumFractionDigits();
        java.lang.Object obj23 = numberFormat14.clone();
        java.lang.Object obj24 = numberFormat14.clone();
        int int25 = numberFormat14.getMaximumIntegerDigits();
        java.lang.Number number27 = numberFormat14.parse("100%");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance();
        numberFormat28.setMaximumIntegerDigits(2147483647);
        java.lang.String str32 = numberFormat28.format((long) 'a');
        int int33 = numberFormat28.getMinimumFractionDigits();
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = locale34.getDisplayScript();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale36.getISO3Language();
        java.lang.String str38 = locale34.getDisplayScript(locale36);
        java.lang.String str39 = locale34.toLanguageTag();
        java.util.Set<java.lang.String> strSet40 = locale34.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getCurrencyInstance(locale34);
        java.lang.Object obj42 = numberFormat41.clone();
        numberFormat41.setMaximumIntegerDigits((int) (short) 0);
        java.util.Currency currency45 = numberFormat41.getCurrency();
        numberFormat28.setCurrency(currency45);
        numberFormat14.setCurrency(currency45);
        numberFormat4.setCurrency(currency45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1,000%" + "'", str6, "1,000%");
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "XXX");
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(currency19);
        org.junit.Assert.assertEquals(currency19.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertEquals("'" + number27 + "' != '" + 1L + "'", number27, 1L);
        org.junit.Assert.assertNotNull(numberFormat28);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "9\240700 %" + "'", str32, "9\240700 %");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "kor" + "'", str37, "kor");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "und" + "'", str39, "und");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(currency45);
        org.junit.Assert.assertEquals(currency45.toString(), "XXX");
    }

    @Test
    public void test09311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09311");
        java.util.Locale locale3 = new java.util.Locale("1 / 100", "france (CHINESE (TAIWAN))", "java.text.FieldPosition[field=10,attribute=java.text.NumberFormat$Field(currency),beginIndex=10,endIndex=0]");
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.util.Locale locale6 = java.util.Locale.getDefault(category4);
        java.lang.String str7 = locale6.getLanguage();
        java.lang.String str8 = locale3.getDisplayCountry(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getNumeratorFormat();
        java.text.NumberFormat numberFormat12 = fractionFormat10.getNumeratorFormat();
        numberFormat12.setGroupingUsed(false);
        fractionFormat9.setDenominatorFormat(numberFormat12);
        numberFormat12.setMinimumFractionDigits(1727999);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.lang.String str20 = numberFormat12.format((long) (byte) 52);
        org.junit.Assert.assertEquals(locale3.toString(), "1 / 100_FRANCE (CHINESE (TAIWAN))_java.text.FieldPosition[field=10,attribute=java.text.NumberFormat$Field(currency),beginIndex=10,endIndex=0]");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr" + "'", str7, "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FRANCE (CHINESE (TAIWAN))" + "'", str8, "FRANCE (CHINESE (TAIWAN))");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "52.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" + "'", str20, "52.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    }

    @Test
    public void test09312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09312");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.lang.String str9 = locale7.getDisplayName(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale7);
        java.lang.String str12 = locale5.getDisplayName(locale7);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getCurrencyInstance(locale7);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance(locale7);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str9, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "eng" + "'", str10, "eng");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Korean" + "'", str12, "Korean");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
    }

    @Test
    public void test09313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09313");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat3 = properFractionFormat2.getWholeFormat();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean7 = numberFormat5.equals((java.lang.Object) numberFormat6);
        properFractionFormat2.setWholeFormat(numberFormat5);
        numberFormat5.setMaximumFractionDigits((-1));
        boolean boolean11 = numberFormat5.isGroupingUsed();
        numberFormat5.setMaximumIntegerDigits(10);
        java.util.Locale locale15 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale15);
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance(locale18);
        java.util.Currency currency21 = numberFormat20.getCurrency();
        numberFormat20.setMinimumIntegerDigits(1);
        numberFormat20.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition28 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj29 = numberFormat20.parseObject("Japan", parsePosition28);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException33 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str34 = fractionConversionException33.getPattern();
        java.lang.Throwable[] throwableArray35 = fractionConversionException33.getSuppressed();
        java.lang.Object[] objArray36 = fractionConversionException33.getArguments();
        boolean boolean37 = parsePosition28.equals((java.lang.Object) objArray36);
        int int38 = parsePosition28.getIndex();
        int int39 = parsePosition28.getIndex();
        java.lang.Object obj40 = fractionFormat16.parseObject("\ud55c\uad6d\uc5b4", parsePosition28);
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getInstance(locale42);
        java.util.Currency currency45 = numberFormat44.getCurrency();
        numberFormat44.setMinimumIntegerDigits(1);
        numberFormat44.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition52 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj53 = numberFormat44.parseObject("Japan", parsePosition52);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException57 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str58 = fractionConversionException57.getPattern();
        java.lang.Throwable[] throwableArray59 = fractionConversionException57.getSuppressed();
        java.lang.Object[] objArray60 = fractionConversionException57.getArguments();
        boolean boolean61 = parsePosition52.equals((java.lang.Object) objArray60);
        int int62 = parsePosition52.getIndex();
        java.lang.String str63 = parsePosition52.toString();
        org.apache.commons.math.fraction.Fraction fraction64 = fractionFormat16.parse("0%", parsePosition52);
        parsePosition52.setErrorIndex(600);
        java.lang.Object obj67 = numberFormat5.parseObject("java.text.FieldPosition[field=2,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]", parsePosition52);
        parsePosition52.setErrorIndex(1727999);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "TWD");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str34, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(currency45);
        org.junit.Assert.assertEquals(currency45.toString(), "TWD");
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str58, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str63, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(fraction64);
        org.junit.Assert.assertNull(obj67);
    }

    @Test
    public void test09314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09314");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleKeys();
        boolean boolean10 = locale7.hasExtensions();
        java.lang.String str11 = locale0.getDisplayVariant(locale7);
        java.lang.String str12 = locale0.getLanguage();
        java.util.Locale.setDefault(locale0);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale0);
        java.lang.String str15 = locale0.getCountry();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(numberFormat16);
    }

    @Test
    public void test09315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09315");
        java.util.Locale locale3 = new java.util.Locale("Japanese (Japan)", "chinois", "-1 / 120");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale3);
        numberFormat4.setMinimumFractionDigits(0);
        java.util.Locale locale8 = java.util.Locale.US;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale9.getScript();
        java.lang.String str11 = locale8.getDisplayName(locale9);
        java.lang.String str12 = locale8.getScript();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale8);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        numberFormat16.setMaximumFractionDigits(100);
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getCurrencyInstance(locale21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction27 = properFractionFormat23.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition26);
        int int28 = parsePosition26.getIndex();
        java.lang.Object obj29 = numberFormat16.parseObject("0%", parsePosition26);
        java.lang.Object obj30 = numberFormat13.parseObject("ZH_TW", parsePosition26);
        int int31 = parsePosition26.getIndex();
        int int32 = parsePosition26.getErrorIndex();
        java.lang.Object obj33 = numberFormat4.parseObject("giapponese (Giappone)", parsePosition26);
        java.lang.StringBuffer stringBuffer35 = null;
        java.text.FieldPosition fieldPosition37 = new java.text.FieldPosition((int) (short) 0);
        int int38 = fieldPosition37.getEndIndex();
        java.lang.String str39 = fieldPosition37.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer40 = numberFormat4.format((-12000.0d), stringBuffer35, fieldPosition37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "japanese (japan)_CHINOIS_-1 / 120");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\ubbf8\uad6d)" + "'", str11, "\uc601\uc5b4\ubbf8\uad6d)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNull(fraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]" + "'", str39, "java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]");
    }

    @Test
    public void test09316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09316");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category1, locale6);
        java.lang.String str8 = locale0.getDisplayLanguage(locale6);
        java.util.Set<java.lang.String> strSet9 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale10);
        java.lang.String str12 = locale10.getDisplayScript();
        java.lang.String str13 = locale0.getDisplayName(locale10);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction17.abs();
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance(locale20);
        java.util.Locale locale22 = java.util.Locale.getDefault();
        boolean boolean23 = numberFormat21.equals((java.lang.Object) locale22);
        boolean boolean24 = fraction19.equals((java.lang.Object) locale22);
        java.lang.String str25 = locale10.getDisplayVariant(locale22);
        java.lang.String str26 = locale10.getDisplayName();
        java.util.Locale locale27 = java.util.Locale.UK;
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance(locale28);
        java.util.Locale locale30 = java.util.Locale.getDefault();
        boolean boolean31 = numberFormat29.equals((java.lang.Object) locale30);
        java.util.Locale locale33 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.lang.String str35 = locale33.getDisplayCountry();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getIntegerInstance(locale33);
        java.lang.String str37 = locale30.getDisplayVariant(locale33);
        java.lang.String str38 = locale27.getDisplayVariant(locale30);
        java.lang.String str39 = locale10.getDisplayLanguage(locale30);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "anglais" + "'", str8, "anglais");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc601\uc5b4" + "'", str13, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Korean" + "'", str26, "Korean");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Korean" + "'", str39, "Korean");
    }

    @Test
    public void test09317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09317");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (byte) 88, (double) (byte) 88, (int) (short) 60);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "88 / 1" + "'", str4, "88 / 1");
    }

    @Test
    public void test09318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09318");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category0, locale5);
        java.lang.String str7 = locale5.getISO3Language();
        java.util.Locale locale10 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale10);
        java.lang.String str12 = locale5.getDisplayScript(locale10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13);
        numberFormat13.setMaximumIntegerDigits(97);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fra" + "'", str7, "fra");
        org.junit.Assert.assertEquals(locale10.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
    }

    @Test
    public void test09319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09319");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale.setDefault(locale0);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str7 = locale6.getDisplayLanguage();
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str9 = locale6.getDisplayCountry(locale8);
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category10, locale15);
        java.lang.String str17 = locale15.getISO3Language();
        java.lang.String str18 = locale6.getDisplayLanguage(locale15);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale15);
        properFractionFormat5.setWholeFormat(numberFormat19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        boolean boolean22 = numberFormat19.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u4e2d\u6587" + "'", str7, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Taiwan" + "'", str9, "Taiwan");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fra" + "'", str17, "fra");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "chinois" + "'", str18, "chinois");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09320");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        int int9 = numberFormat8.getMaximumIntegerDigits();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        boolean boolean12 = numberFormat11.isGroupingUsed();
        java.util.Currency currency13 = numberFormat11.getCurrency();
        numberFormat8.setCurrency(currency13);
        java.util.Currency currency15 = numberFormat8.getCurrency();
        fractionFormat3.setDenominatorFormat(numberFormat8);
        int int17 = numberFormat8.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getCurrencyInstance(locale21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.util.Locale locale25 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale25);
        java.lang.String str28 = fractionFormat26.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat29 = fractionFormat26.getNumeratorFormat();
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Locale locale33 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.lang.String str35 = locale33.getDisplayCountry();
        java.lang.String str36 = locale30.getDisplayName(locale33);
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.lang.String str38 = locale37.getDisplayScript();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale39.getISO3Language();
        java.lang.String str41 = locale37.getDisplayScript(locale39);
        java.lang.String str42 = locale30.getDisplayLanguage(locale39);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getNumberInstance(locale30);
        fractionFormat26.setNumeratorFormat(numberFormat43);
        properFractionFormat23.setWholeFormat(numberFormat43);
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getInstance(locale47);
        boolean boolean49 = numberFormat48.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.text.ParsePosition parsePosition53 = new java.text.ParsePosition((int) '4');
        org.apache.commons.math.fraction.Fraction fraction54 = properFractionFormat50.parse("0%", parsePosition53);
        java.lang.Object obj55 = properFractionFormat23.parseObject("\u6cd5\u6587\u6cd5\u570b)", parsePosition53);
        java.text.NumberFormat.Field field57 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition58 = new java.text.FieldPosition((java.text.Format.Field) field57);
        java.lang.String str59 = fieldPosition58.toString();
        java.util.Locale locale60 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.lang.String str62 = locale61.getDisplayScript();
        java.lang.String str63 = locale60.getDisplayName(locale61);
        boolean boolean64 = fieldPosition58.equals((java.lang.Object) locale61);
        fieldPosition58.setEndIndex((int) '#');
        java.util.Locale locale67 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getCurrencyInstance(locale67);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat68);
        java.text.ParsePosition parsePosition72 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction73 = properFractionFormat69.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition72);
        boolean boolean74 = fieldPosition58.equals((java.lang.Object) parsePosition72);
        java.lang.String str75 = parsePosition72.toString();
        int int76 = parsePosition72.getIndex();
        org.apache.commons.math.fraction.Fraction fraction77 = properFractionFormat23.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (0/-1)", parsePosition72);
        int int78 = parsePosition72.getIndex();
        org.apache.commons.math.fraction.Fraction fraction79 = properFractionFormat19.parse("-600 / 1", parsePosition72);
        int int80 = parsePosition72.getIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "100 0 / 1" + "'", str28, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese (Taiwan)" + "'", str36, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "kor" + "'", str40, "kor");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str42, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(fraction54);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(field57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str59, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Chinese (Taiwan)" + "'", str63, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNull(fraction73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str75, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNull(fraction77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNull(fraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test09321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09321");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = properFractionFormat2.clone();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj7 = properFractionFormat2.parseObject("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (10/97)", parsePosition6);
        java.util.Locale locale8 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat13);
        boolean boolean15 = numberFormat13.isGroupingUsed();
        boolean boolean16 = numberFormat13.isGroupingUsed();
        fractionFormat9.setNumeratorFormat(numberFormat13);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale18.getISO3Language();
        java.lang.String str20 = locale18.getDisplayCountry();
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.lang.String str23 = locale21.getISO3Language();
        java.lang.String str24 = locale18.getDisplayScript(locale21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getIntegerInstance(locale18);
        java.util.Currency currency27 = numberFormat26.getCurrency();
        numberFormat13.setCurrency(currency27);
        properFractionFormat2.setWholeFormat(numberFormat13);
        java.text.NumberFormat numberFormat30 = properFractionFormat2.getDenominatorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zho" + "'", str23, "zho");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat30);
    }

    @Test
    public void test09322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09322");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str10 = locale8.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.lang.String str12 = locale5.getDisplayCountry(locale8);
        java.lang.String str13 = locale5.getISO3Language();
        java.lang.String str14 = locale5.getDisplayName();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale16.getISO3Language();
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale20);
        java.lang.String str24 = locale16.getDisplayLanguage(locale20);
        java.lang.String str25 = locale16.getDisplayName();
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale.setDefault(locale16);
        java.lang.String str28 = locale16.getLanguage();
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder29.setScript("");
        java.util.Locale.Builder builder33 = builder31.setLanguage("en");
        java.util.Locale.Builder builder35 = builder33.setVariant("");
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str37 = locale36.getDisplayLanguage();
        java.lang.String str38 = locale36.toLanguageTag();
        java.util.Locale.Builder builder39 = builder33.setLocale(locale36);
        boolean boolean40 = locale36.hasExtensions();
        java.lang.String str41 = locale36.toLanguageTag();
        java.lang.String str42 = locale16.getDisplayVariant(locale36);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "France" + "'", str12, "France");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fra" + "'", str13, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u6cd5\u6587\u6cd5\u570b)" + "'", str14, "\u6cd5\u6587\u6cd5\u570b)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zho" + "'", str18, "zho");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese" + "'", str24, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str25, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "zh" + "'", str28, "zh");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zh-TW" + "'", str38, "zh-TW");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zh-TW" + "'", str41, "zh-TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test09323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09323");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.lang.String str10 = locale5.toLanguageTag();
        java.lang.String str11 = locale5.getDisplayScript();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getNumberInstance(locale5);
        java.util.Locale locale14 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str17 = fractionFormat15.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat18 = fractionFormat15.getNumeratorFormat();
        java.text.NumberFormat numberFormat19 = fractionFormat15.getNumeratorFormat();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23, numberFormat25);
        boolean boolean27 = numberFormat25.isGroupingUsed();
        boolean boolean28 = numberFormat25.isGroupingUsed();
        fractionFormat21.setNumeratorFormat(numberFormat25);
        java.lang.Object obj30 = numberFormat25.clone();
        java.lang.Object obj31 = numberFormat25.clone();
        boolean boolean32 = numberFormat25.isParseIntegerOnly();
        boolean boolean33 = numberFormat25.isGroupingUsed();
        int int34 = numberFormat25.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12, numberFormat19, numberFormat25);
        boolean boolean36 = numberFormat19.isGroupingUsed();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "und" + "'", str10, "und");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "100 0 / 1" + "'", str17, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test09324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09324");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.Object obj8 = numberFormat7.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        int int10 = numberFormat7.getMinimumIntegerDigits();
        int int11 = numberFormat7.getMinimumIntegerDigits();
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        int int18 = numberFormat17.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode19 = numberFormat17.getRoundingMode();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        numberFormat22.setParseIntegerOnly(true);
        java.math.RoundingMode roundingMode25 = numberFormat22.getRoundingMode();
        int int26 = numberFormat22.getMinimumIntegerDigits();
        java.lang.Object obj27 = numberFormat22.clone();
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getInstance(locale29);
        java.util.Currency currency32 = numberFormat31.getCurrency();
        numberFormat31.setMinimumIntegerDigits(1);
        numberFormat31.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj40 = numberFormat31.parseObject("Japan", parsePosition39);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException44 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str45 = fractionConversionException44.getPattern();
        java.lang.Throwable[] throwableArray46 = fractionConversionException44.getSuppressed();
        java.lang.Object[] objArray47 = fractionConversionException44.getArguments();
        boolean boolean48 = parsePosition39.equals((java.lang.Object) objArray47);
        java.lang.Object obj49 = numberFormat22.parseObject("600", parsePosition39);
        org.apache.commons.math.fraction.Fraction fraction50 = fractionFormat20.parse("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", parsePosition39);
        parsePosition39.setIndex(2147483647);
        java.lang.Number number53 = numberFormat7.parse("\u65e5\u672c,-1 / 100)", parsePosition39);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode19 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode19.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + roundingMode25 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode25.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(currency32);
        org.junit.Assert.assertEquals(currency32.toString(), "TWD");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str45, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + obj49 + "' != '" + 0L + "'", obj49, 0L);
        org.junit.Assert.assertNull(fraction50);
        org.junit.Assert.assertNull(number53);
    }

    @Test
    public void test09325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09325");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition((int) '4');
        parsePosition8.setIndex(0);
        java.lang.Object obj11 = properFractionFormat5.parseObject("und", parsePosition8);
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition(120);
        java.lang.String str14 = properFractionFormat5.format((java.lang.Object) 120);
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getISO3Language();
        java.lang.String str19 = locale15.getDisplayScript(locale17);
        java.lang.String str20 = locale15.toLanguageTag();
        java.util.Set<java.lang.String> strSet21 = locale15.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale15);
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        java.lang.String str25 = numberFormat23.format((double) (-100));
        properFractionFormat5.setDenominatorFormat(numberFormat23);
        java.text.NumberFormat numberFormat27 = properFractionFormat5.getWholeFormat();
        int int28 = numberFormat27.getMinimumIntegerDigits();
        numberFormat27.setMinimumFractionDigits(7260);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\244 120.00 \244 0.00 / \244 1.00" + "'", str14, "\244 120.00 \244 0.00 / \244 1.00");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "und" + "'", str20, "und");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-100" + "'", str25, "-100");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test09326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09326");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((int) (short) 0);
        int int10 = numberFormat1.getMaximumFractionDigits();
        int int11 = numberFormat1.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.Fraction fraction14 = new org.apache.commons.math.fraction.Fraction(1727999, (-14400));
        java.lang.StringBuffer stringBuffer15 = null;
        java.text.NumberFormat.Field field16 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition((java.text.Format.Field) field16);
        java.lang.String str18 = fieldPosition17.toString();
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.lang.String str21 = locale20.getDisplayScript();
        java.lang.String str22 = locale19.getDisplayName(locale20);
        boolean boolean23 = fieldPosition17.equals((java.lang.Object) locale20);
        java.text.NumberFormat.Field field24 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition((java.text.Format.Field) field24);
        java.text.FieldPosition fieldPosition27 = new java.text.FieldPosition((java.text.Format.Field) field24, (int) (byte) 10);
        boolean boolean28 = fieldPosition17.equals((java.lang.Object) field24);
        int int29 = fieldPosition17.getField();
        fieldPosition17.setEndIndex(0);
        java.text.Format.Field field32 = fieldPosition17.getFieldAttribute();
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition(field32);
        java.lang.String str34 = fieldPosition33.toString();
        int int35 = fieldPosition33.getField();
        java.lang.Object obj36 = null;
        boolean boolean37 = fieldPosition33.equals(obj36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer38 = numberFormat1.format((java.lang.Object) 1727999, stringBuffer15, fieldPosition33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(field16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str18, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinese (Taiwan)" + "'", str22, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(field24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(field32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str34, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test09327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09327");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category1, locale6);
        java.lang.String str8 = locale0.getDisplayLanguage(locale6);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale11.getISO3Language();
        java.util.Set<java.lang.Character> charSet13 = locale11.getExtensionKeys();
        java.util.Locale locale14 = java.util.Locale.US;
        java.lang.String str15 = locale14.getDisplayScript();
        java.lang.String str16 = locale11.getDisplayVariant(locale14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getCurrencyInstance(locale11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance(locale20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21, numberFormat23);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj28 = numberFormat23.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition27);
        java.lang.String str29 = parsePosition27.toString();
        boolean boolean31 = parsePosition27.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction32 = properFractionFormat18.parse("java.text.ParseException: zh_TW", parsePosition27);
        java.text.NumberFormat numberFormat33 = properFractionFormat18.getDenominatorFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat18.getWholeFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat18.getWholeFormat();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale37.getISO3Language();
        java.util.Set<java.lang.String> strSet39 = locale37.getUnicodeLocaleKeys();
        java.lang.String str40 = locale37.getISO3Country();
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getNumberInstance(locale37);
        numberFormat41.setMinimumFractionDigits(0);
        numberFormat41.setMaximumIntegerDigits(1728000);
        java.lang.String str47 = numberFormat41.format((long) 120);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance(locale49);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean52 = numberFormat50.equals((java.lang.Object) numberFormat51);
        java.lang.Object obj53 = numberFormat51.clone();
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance(locale55);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean58 = numberFormat56.equals((java.lang.Object) numberFormat57);
        java.util.Locale locale63 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance(locale63);
        int int65 = numberFormat64.getMaximumIntegerDigits();
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance(locale66);
        boolean boolean68 = numberFormat67.isGroupingUsed();
        java.util.Currency currency69 = numberFormat67.getCurrency();
        numberFormat64.setCurrency(currency69);
        java.util.Currency currency71 = numberFormat64.getCurrency();
        java.math.RoundingMode roundingMode72 = numberFormat64.getRoundingMode();
        java.text.ParsePosition parsePosition75 = new java.text.ParsePosition((int) 'a');
        java.lang.String str76 = parsePosition75.toString();
        java.lang.String str77 = parsePosition75.toString();
        java.lang.Object obj78 = numberFormat64.parseObject("zho", parsePosition75);
        java.lang.String str79 = parsePosition75.toString();
        java.lang.Number number80 = numberFormat57.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition75);
        java.lang.Object obj81 = numberFormat51.parseObject("cor\351en", parsePosition75);
        parsePosition75.setErrorIndex(600);
        int int84 = parsePosition75.getIndex();
        java.lang.Object obj85 = numberFormat41.parseObject("anglais (KOR)", parsePosition75);
        java.lang.String str86 = parsePosition75.toString();
        org.apache.commons.math.fraction.Fraction fraction87 = properFractionFormat18.parse("-120 / 1", parsePosition75);
        java.lang.Number number88 = numberFormat9.parse("14,400", parsePosition75);
        numberFormat9.setMaximumFractionDigits((-1));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\uc911\uad6d\uc5b4__Taiwan");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "anglais" + "'", str8, "anglais");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "kor" + "'", str12, "kor");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str29, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(fraction32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "kor" + "'", str38, "kor");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "120" + "'", str47, "120");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals(locale63.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(currency69);
        org.junit.Assert.assertEquals(currency69.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency71);
        org.junit.Assert.assertEquals(currency71.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode72 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode72.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str76, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str77, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str79, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number80);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 97 + "'", int84 == 97);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str86, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(fraction87);
        org.junit.Assert.assertNull(number88);
    }

    @Test
    public void test09328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09328");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (short) -16165, (-14399));
        double double3 = fraction2.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.negate();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.abs();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction7.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.abs();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction13.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction7.add(fraction13);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction16.divide(fraction19);
        java.util.Locale.Category category22 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale23 = java.util.Locale.getDefault(category22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale24);
        java.util.Locale.setDefault(category22, locale24);
        java.util.Locale locale27 = java.util.Locale.getDefault(category22);
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale27);
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction39.abs();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction33.add(fraction39);
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.negate();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction42.divide(fraction45);
        int int48 = fraction42.intValue();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction42.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction42.abs();
        int int51 = fraction42.getDenominator();
        java.lang.String str52 = numberFormat29.format((java.lang.Object) fraction42);
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.getReducedFraction(1, (int) (byte) -120);
        int int56 = fraction55.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction42.multiply(fraction55);
        org.apache.commons.math.fraction.Fraction fraction58 = fraction21.add(fraction42);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.negate();
        double double60 = fraction58.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction2.divide(fraction58);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.122647406069866d + "'", double3 == 1.122647406069866d);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.FORMAT + "'", category22.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 60 + "'", int51 == 60);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2%" + "'", str52, "2%");
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1.9833333333333334d) + "'", double60 == (-1.9833333333333334d));
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
    }

    @Test
    public void test09329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09329");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(1);
        java.text.NumberFormat.Field field2 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field2);
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field2, 1);
        int int6 = fieldPosition5.getEndIndex();
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) fieldPosition5);
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition(100);
        fieldPosition9.setBeginIndex((int) 'u');
        int int12 = fieldPosition9.getEndIndex();
        org.apache.commons.math.fraction.Fraction fraction15 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str16 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction15);
        long long17 = fraction15.longValue();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction15.abs();
        int int19 = fraction18.getDenominator();
        boolean boolean20 = fieldPosition9.equals((java.lang.Object) fraction18);
        org.apache.commons.math.fraction.Fraction fraction21 = fraction18.abs();
        boolean boolean22 = fieldPosition5.equals((java.lang.Object) fraction21);
        int int23 = fieldPosition5.getField();
        fieldPosition5.setBeginIndex((int) (byte) -51);
        java.text.Format.Field field26 = fieldPosition5.getFieldAttribute();
        org.junit.Assert.assertNotNull(field2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1 / 100" + "'", str16, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(field26);
    }

    @Test
    public void test09330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09330");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition((int) '4');
        parsePosition8.setIndex(0);
        java.lang.Object obj11 = properFractionFormat5.parseObject("und", parsePosition8);
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition(120);
        java.lang.String str14 = properFractionFormat5.format((java.lang.Object) 120);
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getISO3Language();
        java.lang.String str19 = locale15.getDisplayScript(locale17);
        java.lang.String str20 = locale15.toLanguageTag();
        java.util.Set<java.lang.String> strSet21 = locale15.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale15);
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        java.lang.String str25 = numberFormat23.format((double) (-100));
        properFractionFormat5.setDenominatorFormat(numberFormat23);
        java.text.NumberFormat numberFormat27 = properFractionFormat5.getNumeratorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\244 120.00 \244 0.00 / \244 1.00" + "'", str14, "\244 120.00 \244 0.00 / \244 1.00");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "und" + "'", str20, "und");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-100" + "'", str25, "-100");
        org.junit.Assert.assertNotNull(numberFormat27);
    }

    @Test
    public void test09331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09331");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction(4.656612875245797E-10d, 49371.42857142857d, 8);
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.negate();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        long long14 = fraction12.longValue();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction8.multiply(fraction12);
        long long16 = fraction12.longValue();
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.lang.String str18 = locale17.getDisplayScript();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale19.getISO3Language();
        java.lang.String str21 = locale17.getDisplayScript(locale19);
        java.lang.String str22 = locale17.toLanguageTag();
        java.lang.String str23 = locale17.getDisplayVariant();
        java.lang.String str24 = locale17.getVariant();
        boolean boolean25 = fraction12.equals((java.lang.Object) str24);
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        long long36 = fraction34.longValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction34);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.negate();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.abs();
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.negate();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.abs();
        long long48 = fraction46.longValue();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction42.multiply(fraction46);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction34.subtract(fraction49);
        org.apache.commons.math.fraction.Fraction fraction53 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str54 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction53);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction34.subtract(fraction53);
        org.apache.commons.math.fraction.Fraction fraction56 = fraction12.divide(fraction34);
        org.apache.commons.math.fraction.Fraction fraction59 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.abs();
        org.apache.commons.math.fraction.Fraction fraction68 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction69 = fraction68.negate();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction69.abs();
        long long71 = fraction69.longValue();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction65.multiply(fraction69);
        org.apache.commons.math.fraction.Fraction fraction75 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction76 = fraction75.negate();
        org.apache.commons.math.fraction.Fraction fraction77 = fraction76.abs();
        org.apache.commons.math.fraction.Fraction fraction80 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction81 = fraction80.negate();
        org.apache.commons.math.fraction.Fraction fraction82 = fraction81.abs();
        long long83 = fraction81.longValue();
        org.apache.commons.math.fraction.Fraction fraction84 = fraction77.multiply(fraction81);
        org.apache.commons.math.fraction.Fraction fraction85 = fraction69.subtract(fraction84);
        org.apache.commons.math.fraction.Fraction fraction88 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str89 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction88);
        org.apache.commons.math.fraction.Fraction fraction90 = fraction69.subtract(fraction88);
        long long91 = fraction88.longValue();
        org.apache.commons.math.fraction.Fraction fraction92 = fraction60.divide(fraction88);
        org.apache.commons.math.fraction.Fraction fraction93 = fraction60.negate();
        org.apache.commons.math.fraction.Fraction fraction94 = fraction34.divide(fraction60);
        int int95 = fraction34.getDenominator();
        double double96 = fraction34.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction97 = fraction34.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction98 = fraction3.divide(fraction97);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "kor" + "'", str20, "kor");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "und" + "'", str22, "und");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-1 / 100" + "'", str54, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "-1 / 100" + "'", str89, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNotNull(fraction92);
        org.junit.Assert.assertNotNull(fraction93);
        org.junit.Assert.assertNotNull(fraction94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 120 + "'", int95 == 120);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.008333333333333333d + "'", double96 == 0.008333333333333333d);
        org.junit.Assert.assertNotNull(fraction97);
        org.junit.Assert.assertNotNull(fraction98);
    }

    @Test
    public void test09332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09332");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.lang.String str10 = locale2.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale2);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getCurrencyInstance(locale2);
        java.util.Set<java.lang.Character> charSet13 = locale2.getExtensionKeys();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        boolean boolean16 = numberFormat15.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19, numberFormat21);
        java.text.ParsePosition parsePosition25 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj26 = numberFormat21.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition25);
        properFractionFormat17.setNumeratorFormat(numberFormat21);
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance(locale28);
        boolean boolean30 = numberFormat29.isParseIntegerOnly();
        numberFormat29.setGroupingUsed(false);
        properFractionFormat17.setWholeFormat(numberFormat29);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        boolean boolean40 = numberFormat39.isGroupingUsed();
        properFractionFormat37.setWholeFormat(numberFormat39);
        java.text.NumberFormat numberFormat42 = properFractionFormat37.getWholeFormat();
        java.text.ParsePosition parsePosition45 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number46 = numberFormat42.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition45);
        java.lang.Object obj47 = properFractionFormat17.parseObject("2,147,483,647 / 1", parsePosition45);
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getInstance(locale48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = new org.apache.commons.math.fraction.FractionFormat(numberFormat49, numberFormat51);
        boolean boolean53 = numberFormat51.isGroupingUsed();
        boolean boolean54 = numberFormat51.isGroupingUsed();
        java.text.ParsePosition parsePosition57 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj58 = numberFormat51.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition57);
        numberFormat51.setParseIntegerOnly(false);
        properFractionFormat17.setDenominatorFormat(numberFormat51);
        java.text.ParsePosition parsePosition64 = new java.text.ParsePosition((int) (short) 0);
        org.apache.commons.math.fraction.Fraction fraction65 = properFractionFormat17.parse("59\240999 %", parsePosition64);
        java.text.NumberFormat numberFormat66 = properFractionFormat17.getDenominatorFormat();
        boolean boolean67 = locale2.equals((java.lang.Object) numberFormat66);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u53f0\u7063" + "'", str10, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNull(number46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(fraction65);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test09333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09333");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.lang.String str10 = locale2.getDisplayCountry();
        java.util.Locale.setDefault(locale2);
        java.lang.String str13 = locale2.getExtension('u');
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.lang.String str15 = locale2.getDisplayVariant(locale14);
        java.lang.String str16 = locale14.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u53f0\u7063" + "'", str10, "\u53f0\u7063");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CHN" + "'", str16, "CHN");
    }

    @Test
    public void test09334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09334");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8, numberFormat10);
        boolean boolean12 = numberFormat10.isGroupingUsed();
        boolean boolean13 = numberFormat10.isGroupingUsed();
        fractionFormat6.setNumeratorFormat(numberFormat10);
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        int int21 = numberFormat20.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        boolean boolean32 = numberFormat31.isGroupingUsed();
        java.util.Currency currency33 = numberFormat31.getCurrency();
        numberFormat28.setCurrency(currency33);
        java.util.Currency currency35 = numberFormat28.getCurrency();
        java.math.RoundingMode roundingMode36 = numberFormat28.getRoundingMode();
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) 'a');
        java.lang.String str40 = parsePosition39.toString();
        java.lang.String str41 = parsePosition39.toString();
        java.lang.Object obj42 = numberFormat28.parseObject("zho", parsePosition39);
        java.lang.Object obj43 = fractionFormat22.parseObject("java.text.NumberFormat$Field(currency)", parsePosition39);
        java.lang.Object obj44 = numberFormat10.parseObject("Italian", parsePosition39);
        java.lang.Object obj45 = numberFormat1.parseObject("600", parsePosition39);
        java.util.Locale locale47 = new java.util.Locale("Chinese (Taiwan)");
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance(locale49);
        java.util.Currency currency52 = numberFormat51.getCurrency();
        numberFormat51.setMinimumIntegerDigits(1);
        numberFormat51.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj60 = numberFormat51.parseObject("Japan", parsePosition59);
        int int61 = numberFormat51.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat48, numberFormat51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = new org.apache.commons.math.fraction.FractionFormat(numberFormat51);
        java.lang.Object obj65 = numberFormat51.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(currency33);
        org.junit.Assert.assertEquals(currency33.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode36.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str40, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str41, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertEquals(locale47.toString(), "chinese (taiwan)");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "TWD");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(obj65);
    }

    @Test
    public void test09335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09335");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        boolean boolean19 = numberFormat18.isGroupingUsed();
        properFractionFormat16.setWholeFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat11, numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean27 = numberFormat25.equals((java.lang.Object) numberFormat26);
        java.lang.Object obj28 = numberFormat26.clone();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean33 = numberFormat31.equals((java.lang.Object) numberFormat32);
        java.util.Locale locale38 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        int int40 = numberFormat39.getMaximumIntegerDigits();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        boolean boolean43 = numberFormat42.isGroupingUsed();
        java.util.Currency currency44 = numberFormat42.getCurrency();
        numberFormat39.setCurrency(currency44);
        java.util.Currency currency46 = numberFormat39.getCurrency();
        java.math.RoundingMode roundingMode47 = numberFormat39.getRoundingMode();
        java.text.ParsePosition parsePosition50 = new java.text.ParsePosition((int) 'a');
        java.lang.String str51 = parsePosition50.toString();
        java.lang.String str52 = parsePosition50.toString();
        java.lang.Object obj53 = numberFormat39.parseObject("zho", parsePosition50);
        java.lang.String str54 = parsePosition50.toString();
        java.lang.Number number55 = numberFormat32.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition50);
        java.lang.Object obj56 = numberFormat26.parseObject("cor\351en", parsePosition50);
        parsePosition50.setErrorIndex(600);
        java.lang.Object obj59 = properFractionFormat22.parseObject("CHN", parsePosition50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj61 = properFractionFormat22.parseObject("java.text.FieldPosition[field=2,attribute=null,beginIndex=0,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals(locale38.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode47 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode47.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str51, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str52, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str54, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number55);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj59);
    }

    @Test
    public void test09336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09336");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, 1);
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 100);
        java.lang.String str6 = field0.toString();
        java.text.FieldPosition fieldPosition7 = new java.text.FieldPosition((java.text.Format.Field) field0);
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str12 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction11);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.abs();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction16.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction16.add(fraction22);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction11.multiply(fraction22);
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.ONE;
        long long28 = fraction27.longValue();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction11.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction10.subtract(fraction29);
        org.apache.commons.math.fraction.Fraction fraction33 = new org.apache.commons.math.fraction.Fraction(0.016666666666666666d, (int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction29.subtract(fraction33);
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -120, 599);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction33.add(fraction37);
        boolean boolean39 = field0.equals((java.lang.Object) fraction37);
        java.text.FieldPosition fieldPosition41 = new java.text.FieldPosition((java.text.Format.Field) field0, 8654399);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.text.NumberFormat$Field(grouping separator)" + "'", str6, "java.text.NumberFormat$Field(grouping separator)");
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1 / 1" + "'", str12, "1 / 1");
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test09337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09337");
        java.util.Locale locale3 = new java.util.Locale("20 / 7", "java.text.ParseException: ", "English (Canada)");
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        java.text.NumberFormat numberFormat6 = fractionFormat5.getDenominatorFormat();
        org.junit.Assert.assertEquals(locale3.toString(), "20 / 7_JAVA.TEXT.PARSEEXCEPTION: _English (Canada)");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
    }

    @Test
    public void test09338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09338");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str9 = locale3.getDisplayScript(locale8);
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str12 = locale10.getISO3Language();
        java.lang.String str13 = locale10.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale10);
        java.lang.String str16 = locale3.getDisplayScript(locale10);
        java.lang.String str17 = locale0.getDisplayName(locale10);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = locale18.getDisplayCountry();
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale locale21 = java.util.Locale.PRC;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.lang.String str23 = locale18.getDisplayCountry(locale20);
        java.lang.String str24 = locale20.getISO3Country();
        java.lang.String str25 = locale20.getDisplayLanguage();
        java.lang.String str26 = locale10.getDisplayVariant(locale20);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getInstance(locale10);
        java.lang.Object obj28 = numberFormat27.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jpn" + "'", str1, "jpn");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zho" + "'", str12, "zho");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zho" + "'", str13, "zho");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str17, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str22, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CAN" + "'", str24, "CAN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u82f1\u6587" + "'", str25, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(obj28);
    }

    @Test
    public void test09339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09339");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        java.lang.String str3 = numberFormat0.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat5 = properFractionFormat4.getWholeFormat();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        numberFormat8.setMinimumIntegerDigits(1728000);
        boolean boolean11 = numberFormat8.isGroupingUsed();
        properFractionFormat4.setWholeFormat(numberFormat8);
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.lang.String str16 = locale14.toLanguageTag();
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale17.getISO3Language();
        java.lang.String str20 = locale14.getDisplayScript(locale17);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.text.ParsePosition parsePosition25 = new java.text.ParsePosition((int) 'a');
        java.lang.String str26 = parsePosition25.toString();
        java.lang.String str27 = parsePosition25.toString();
        parsePosition25.setErrorIndex(3);
        org.apache.commons.math.fraction.Fraction fraction30 = properFractionFormat22.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition25);
        java.lang.Object obj31 = properFractionFormat4.parseObject("fra", parsePosition25);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        java.lang.String str34 = locale32.getISO3Language();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance(locale32);
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getInstance(locale36);
        java.util.Currency currency39 = numberFormat38.getCurrency();
        numberFormat38.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = new org.apache.commons.math.fraction.FractionFormat(numberFormat35, numberFormat38);
        java.lang.String str45 = numberFormat35.format(0.0d);
        numberFormat35.setMaximumIntegerDigits(0);
        java.lang.String str49 = numberFormat35.format((double) 300L);
        java.util.Currency currency50 = numberFormat35.getCurrency();
        properFractionFormat4.setDenominatorFormat(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
        org.junit.Assert.assertEquals(currency1.toString(), "TWD");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100%" + "'", str3, "100%");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u4e2d\u6587" + "'", str15, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh-TW" + "'", str16, "zh-TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zho" + "'", str19, "zho");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str26, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str27, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(fraction30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zho" + "'", str34, "zho");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "TWD");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertNotNull(currency50);
        org.junit.Assert.assertEquals(currency50.toString(), "TWD");
    }

    @Test
    public void test09340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09340");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        numberFormat3.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field8);
        java.lang.String str10 = fieldPosition9.toString();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayScript();
        java.lang.String str14 = locale11.getDisplayName(locale12);
        boolean boolean15 = fieldPosition9.equals((java.lang.Object) locale12);
        fieldPosition9.setEndIndex((int) '#');
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction24 = properFractionFormat20.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition23);
        boolean boolean25 = fieldPosition9.equals((java.lang.Object) parsePosition23);
        java.lang.Number number26 = numberFormat3.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition23);
        int int27 = numberFormat3.getMaximumIntegerDigits();
        java.lang.Object obj28 = numberFormat3.clone();
        java.text.ParseException parseException31 = new java.text.ParseException("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (10/97)", (-100));
        int int32 = parseException31.getErrorOffset();
        boolean boolean33 = numberFormat3.equals((java.lang.Object) int32);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str10, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese (Taiwan)" + "'", str14, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNull(fraction24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(number26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-100) + "'", int32 == (-100));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test09341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09341");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getCurrencyInstance(locale9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.util.Currency currency12 = numberFormat10.getCurrency();
        properFractionFormat8.setNumeratorFormat(numberFormat10);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale14.getISO3Language();
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleKeys();
        java.lang.String str17 = locale14.getISO3Country();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getNumberInstance(locale14);
        java.util.Locale locale22 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        int int24 = numberFormat23.getMaximumIntegerDigits();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        boolean boolean27 = numberFormat26.isGroupingUsed();
        java.util.Currency currency28 = numberFormat26.getCurrency();
        numberFormat23.setCurrency(currency28);
        java.util.Currency currency30 = numberFormat23.getCurrency();
        int int31 = numberFormat23.getMaximumFractionDigits();
        java.lang.Object obj32 = numberFormat23.clone();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        numberFormat34.setMaximumFractionDigits(100);
        numberFormat34.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str41 = numberFormat34.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat23, numberFormat34);
        numberFormat34.setMinimumIntegerDigits(600);
        boolean boolean45 = numberFormat34.isParseIntegerOnly();
        java.util.Locale locale47 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale47);
        java.lang.String str50 = fractionFormat48.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat51 = fractionFormat48.getNumeratorFormat();
        java.util.Locale locale52 = java.util.Locale.getDefault();
        java.util.Locale locale53 = locale52.stripExtensions();
        java.util.Locale locale55 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale55);
        java.lang.String str57 = locale55.getDisplayCountry();
        java.lang.String str58 = locale52.getDisplayName(locale55);
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = locale59.getDisplayScript();
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale61.getISO3Language();
        java.lang.String str63 = locale59.getDisplayScript(locale61);
        java.lang.String str64 = locale52.getDisplayLanguage(locale61);
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getNumberInstance(locale52);
        fractionFormat48.setNumeratorFormat(numberFormat65);
        java.util.Locale locale70 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getPercentInstance(locale70);
        numberFormat71.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str75 = numberFormat71.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = new org.apache.commons.math.fraction.FractionFormat(numberFormat71);
        int int77 = numberFormat71.getMinimumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat78 = new org.apache.commons.math.fraction.FractionFormat(numberFormat65, numberFormat71);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat34, numberFormat71);
        numberFormat71.setMaximumFractionDigits(99);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u4e2d\u6587" + "'", str1, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals(locale22.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "100%" + "'", str41, "100%");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals(locale47.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "100 0 / 1" + "'", str50, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale55.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Chinese (Taiwan)" + "'", str58, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "kor" + "'", str62, "kor");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str64, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals(locale70.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0%" + "'", str75, "0%");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test09342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09342");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Locale locale7 = locale6.stripExtensions();
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.lang.String str12 = locale6.getDisplayName(locale9);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale6.getDisplayLanguage(locale15);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance(locale6);
        fractionFormat2.setNumeratorFormat(numberFormat19);
        java.lang.String str22 = numberFormat19.format((long) 600);
        java.lang.String str24 = numberFormat19.format((double) 96);
        java.lang.String str26 = numberFormat19.format((double) (-2.0f));
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale27.getDisplayScript();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale29.getISO3Language();
        java.lang.String str31 = locale27.getDisplayScript(locale29);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale27);
        numberFormat32.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19, numberFormat32);
        java.lang.String str37 = numberFormat19.format(20L);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (Taiwan)" + "'", str12, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str18, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "600" + "'", str22, "600");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "96" + "'", str24, "96");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-2" + "'", str26, "-2");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "kor" + "'", str30, "kor");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "20" + "'", str37, "20");
    }

    @Test
    public void test09343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09343");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale3.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder7 = builder2.setLocale(locale3);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("chinois (Taiwan)");
        java.util.Locale.Builder builder10 = builder7.setLocale(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException16 = new org.apache.commons.math.fraction.FractionConversionException((double) (short) 100, (-1L), (long) (short) 1);
        java.lang.Object[] objArray17 = fractionConversionException16.getArguments();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException21 = new org.apache.commons.math.fraction.FractionConversionException((double) 'x', (long) (byte) 100, (long) (short) 100);
        fractionConversionException16.addSuppressed((java.lang.Throwable) fractionConversionException21);
        java.lang.Object[] objArray23 = fractionConversionException16.getArguments();
        java.lang.Object[] objArray24 = fractionConversionException16.getArguments();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException28 = new org.apache.commons.math.fraction.FractionConversionException((double) (byte) -1, (long) (short) -14400, (long) 120);
        fractionConversionException16.addSuppressed((java.lang.Throwable) fractionConversionException28);
        java.lang.StringBuffer stringBuffer30 = null;
        java.text.NumberFormat.Field field31 = java.text.NumberFormat.Field.PERMILLE;
        java.text.NumberFormat.Field field32 = java.text.NumberFormat.Field.CURRENCY;
        boolean boolean33 = field31.equals((java.lang.Object) field32);
        java.text.FieldPosition fieldPosition35 = new java.text.FieldPosition((java.text.Format.Field) field31, (-1));
        java.lang.String str36 = field31.toString();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale37.getISO3Language();
        java.util.Set<java.lang.Character> charSet39 = locale37.getExtensionKeys();
        java.util.Locale locale40 = java.util.Locale.US;
        java.lang.String str41 = locale40.getDisplayScript();
        java.lang.String str42 = locale37.getDisplayVariant(locale40);
        java.lang.String str43 = locale37.getDisplayCountry();
        boolean boolean44 = field31.equals((java.lang.Object) str43);
        java.text.FieldPosition fieldPosition45 = new java.text.FieldPosition((java.text.Format.Field) field31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer46 = fractionFormat12.format((java.lang.Object) fractionConversionException16, stringBuffer30, fieldPosition45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, -1, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, -1, 1]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, -1, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, -1, 1]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, -1, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, -1, 1]");
        org.junit.Assert.assertNotNull(field31);
        org.junit.Assert.assertNotNull(field32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str36, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "kor" + "'", str38, "kor");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test09344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09344");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getCurrencyInstance(locale4);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat6.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition9);
        org.apache.commons.math.fraction.Fraction fraction11 = properFractionFormat2.parse("zh_TW", parsePosition9);
        java.text.NumberFormat numberFormat12 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction14 = new org.apache.commons.math.fraction.Fraction((double) (-0.1f));
        org.apache.commons.math.fraction.Fraction fraction16 = new org.apache.commons.math.fraction.Fraction((-1.0d));
        int int17 = fraction16.getNumerator();
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale18.getISO3Language();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance(locale18);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.negate();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction27.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction24.add(fraction31);
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.abs();
        long long44 = fraction42.longValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction38.multiply(fraction42);
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.negate();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.abs();
        org.apache.commons.math.fraction.Fraction fraction53 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.negate();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.abs();
        long long56 = fraction54.longValue();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction50.multiply(fraction54);
        org.apache.commons.math.fraction.Fraction fraction58 = fraction42.subtract(fraction57);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction57.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.abs();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction33.add(fraction59);
        org.apache.commons.math.fraction.Fraction fraction62 = fraction59.abs();
        java.lang.String str63 = numberFormat21.format((java.lang.Object) fraction62);
        org.apache.commons.math.fraction.Fraction fraction64 = fraction16.subtract(fraction62);
        org.apache.commons.math.fraction.Fraction fraction65 = fraction62.negate();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.abs();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction14.multiply(fraction66);
        java.lang.String str68 = numberFormat12.format((java.lang.Object) fraction14);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNull(fraction10);
        org.junit.Assert.assertNull(fraction11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zho" + "'", str20, "zho");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "14,400" + "'", str63, "14,400");
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "-10%" + "'", str68, "-10%");
    }

    @Test
    public void test09345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09345");
        java.util.Locale locale2 = new java.util.Locale("Chinese", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        java.util.Locale locale4 = locale2.stripExtensions();
        java.util.Locale locale8 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str9 = locale8.getDisplayVariant();
        java.text.NumberFormat.Field field10 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field10);
        int int12 = fieldPosition11.getEndIndex();
        fieldPosition11.setBeginIndex((int) (byte) 100);
        java.util.Locale locale16 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale16);
        java.lang.String str19 = fractionFormat17.format((java.lang.Object) 100);
        boolean boolean20 = fieldPosition11.equals((java.lang.Object) fractionFormat17);
        java.text.Format.Field field21 = fieldPosition11.getFieldAttribute();
        java.util.Locale locale25 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale25);
        boolean boolean27 = fieldPosition11.equals((java.lang.Object) locale25);
        java.lang.String str28 = locale8.getDisplayCountry(locale25);
        java.lang.String str29 = locale4.getDisplayScript(locale8);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale4);
        boolean boolean31 = locale4.hasExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        org.junit.Assert.assertEquals(locale2.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertEquals(locale8.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10,000%" + "'", str9, "10,000%");
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "100 0 / 1" + "'", str19, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(field21);
        org.junit.Assert.assertEquals(locale25.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ZH_TW" + "'", str28, "ZH_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(fractionFormat32);
    }

    @Test
    public void test09346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09346");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getWholeFormat();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.text.AttributedCharacterIterator attributedCharacterIterator14 = numberFormat11.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj15 = numberFormat11.clone();
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getCurrencyInstance(locale17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.text.ParsePosition parsePosition22 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction23 = properFractionFormat19.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition22);
        java.lang.Object obj24 = numberFormat11.parseObject("zh-TW", parsePosition22);
        numberFormat11.setMinimumIntegerDigits((int) (byte) 0);
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance(locale27);
        boolean boolean29 = numberFormat28.isParseIntegerOnly();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale30.getISO3Language();
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleKeys();
        java.lang.String str33 = locale30.getISO3Country();
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getNumberInstance(locale30);
        java.util.Locale locale38 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        int int40 = numberFormat39.getMaximumIntegerDigits();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        boolean boolean43 = numberFormat42.isGroupingUsed();
        java.util.Currency currency44 = numberFormat42.getCurrency();
        numberFormat39.setCurrency(currency44);
        java.util.Currency currency46 = numberFormat39.getCurrency();
        int int47 = numberFormat39.getMaximumFractionDigits();
        java.lang.Object obj48 = numberFormat39.clone();
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance(locale49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        numberFormat50.setMaximumFractionDigits(100);
        numberFormat50.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str57 = numberFormat50.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34, numberFormat39, numberFormat50);
        numberFormat50.setMinimumIntegerDigits(600);
        numberFormat50.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11, numberFormat28, numberFormat50);
        numberFormat28.setMaximumFractionDigits((-12000));
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9, numberFormat28);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(attributedCharacterIterator14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNull(fraction23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "kor" + "'", str31, "kor");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals(locale38.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "100%" + "'", str57, "100%");
    }

    @Test
    public void test09347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09347");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.util.Locale locale12 = java.util.Locale.getDefault(category0);
        java.util.Locale locale16 = new java.util.Locale("119", "2,857", "ita");
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale locale18 = java.util.Locale.getDefault(category0);
        java.util.Locale.setDefault(locale18);
        org.apache.commons.math.fraction.Fraction fraction22 = new org.apache.commons.math.fraction.Fraction(0, (int) 'u');
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder23.setScript("");
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str27 = locale26.getDisplayLanguage();
        java.lang.String str28 = locale26.toLanguageTag();
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        java.lang.String str31 = locale29.getISO3Language();
        java.lang.String str32 = locale26.getDisplayScript(locale29);
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.lang.String str34 = locale26.getDisplayCountry(locale33);
        java.util.Locale.Builder builder35 = builder23.setLocale(locale33);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getInstance(locale33);
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.negate();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction39.multiply(fraction43);
        java.lang.String str45 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction39);
        java.lang.String str46 = numberFormat36.format((java.lang.Object) fraction39);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction39.abs();
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.negate();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.abs();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction51.abs();
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.negate();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.abs();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction57.abs();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction51.add(fraction57);
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction60.divide(fraction63);
        int int66 = fraction60.intValue();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction60.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction60.abs();
        int int69 = fraction60.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction39.subtract(fraction60);
        org.apache.commons.math.fraction.Fraction fraction71 = fraction22.subtract(fraction70);
        boolean boolean72 = locale18.equals((java.lang.Object) fraction71);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals(locale16.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Chinese" + "'", str27, "Chinese");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "zh-TW" + "'", str28, "zh-TW");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zho" + "'", str31, "zho");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Taiwan" + "'", str34, "Taiwan");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "20 / 7" + "'", str45, "20 / 7");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2,857" + "'", str46, "2,857");
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 60 + "'", int69 == 60);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test09348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09348");
        java.util.Locale locale3 = new java.util.Locale("\uc911\uad6d\uc5b4", "", "Taiwan");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale3);
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7, numberFormat9);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj14 = numberFormat9.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition13);
        java.lang.String str15 = parsePosition13.toString();
        boolean boolean17 = parsePosition13.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        java.lang.Object obj18 = numberFormat4.parseObject("\u6cd5\u6587\u6cd5\u570b)", parsePosition13);
        int int19 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale21.getISO3Language();
        java.util.Locale.setDefault(category20, locale21);
        java.lang.String str24 = locale21.getDisplayVariant();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getIntegerInstance(locale21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat25);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getInstance(locale29);
        java.util.Currency currency32 = numberFormat31.getCurrency();
        numberFormat31.setMinimumFractionDigits((int) (short) -1);
        java.util.Locale locale38 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        int int40 = numberFormat39.getMaximumIntegerDigits();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        boolean boolean43 = numberFormat42.isGroupingUsed();
        java.util.Currency currency44 = numberFormat42.getCurrency();
        numberFormat39.setCurrency(currency44);
        java.util.Currency currency46 = numberFormat39.getCurrency();
        numberFormat31.setCurrency(currency46);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        numberFormat49.setMaximumFractionDigits(100);
        java.lang.String str54 = numberFormat49.format((long) 100);
        int int55 = numberFormat49.getMaximumFractionDigits();
        numberFormat49.setMinimumFractionDigits((int) (short) 0);
        int int58 = numberFormat49.getMaximumFractionDigits();
        java.math.RoundingMode roundingMode59 = numberFormat49.getRoundingMode();
        numberFormat49.setGroupingUsed(false);
        java.util.Locale locale62 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getCurrencyInstance(locale62);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        java.text.ParsePosition parsePosition67 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction68 = properFractionFormat64.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition67);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getPercentInstance(locale69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat71 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat70);
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getPercentInstance(locale72);
        boolean boolean74 = numberFormat73.isGroupingUsed();
        properFractionFormat71.setWholeFormat(numberFormat73);
        java.text.NumberFormat numberFormat76 = properFractionFormat71.getWholeFormat();
        properFractionFormat64.setWholeFormat(numberFormat76);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31, numberFormat49, numberFormat76);
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat80 = java.text.NumberFormat.getPercentInstance(locale79);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat80);
        java.lang.Object obj82 = numberFormat80.clone();
        properFractionFormat78.setDenominatorFormat(numberFormat80);
        int int84 = numberFormat80.getMinimumIntegerDigits();
        properFractionFormat28.setWholeFormat(numberFormat80);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc911\uad6d\uc5b4__Taiwan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str15, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(currency32);
        org.junit.Assert.assertEquals(currency32.toString(), "TWD");
        org.junit.Assert.assertEquals(locale38.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "10,000%" + "'", str54, "10,000%");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertTrue("'" + roundingMode59 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode59.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNull(fraction68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test09349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09349");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder6 = builder3.setExtension('a', "TWN");
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("Canada");
        java.util.Locale.Builder builder10 = builder6.setRegion("US");
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.getDefault(category12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale14);
        java.util.Locale.setDefault(category12, locale14);
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category12, locale17);
        java.lang.String str19 = locale11.getDisplayLanguage(locale17);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance(locale11);
        java.lang.String str21 = locale11.getScript();
        java.util.Locale.Builder builder22 = builder10.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder10.addUnicodeLocaleAttribute("java.text.FieldPosition[field=97,attribute=java.text.NumberFormat$Field(currency),beginIndex=11,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: java.text.FieldPosition[field=97,attribute=java.text.NumberFormat$Field(currency),beginIndex=11,endIndex=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "anglais" + "'", str19, "anglais");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test09350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09350");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getScript();
        java.lang.String str3 = locale0.getDisplayName(locale1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.String str5 = locale4.getScript();
        java.util.Locale locale9 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str10 = locale4.getDisplayScript(locale9);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale9);
        java.util.Set<java.lang.String> strSet12 = locale9.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet13 = locale9.getExtensionKeys();
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.PRC;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.lang.String str17 = locale9.getDisplayName(locale14);
        java.util.Locale locale19 = new java.util.Locale("-1 / 120");
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder20.setScript("");
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str24 = locale23.getDisplayLanguage();
        java.lang.String str25 = locale23.toLanguageTag();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.lang.String str28 = locale26.getISO3Language();
        java.lang.String str29 = locale23.getDisplayScript(locale26);
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.lang.String str31 = locale23.getDisplayCountry(locale30);
        java.util.Locale.Builder builder32 = builder20.setLocale(locale30);
        java.lang.String str33 = locale30.getDisplayScript();
        java.lang.String str34 = locale19.getDisplayLanguage(locale30);
        java.lang.String str35 = locale19.getDisplayVariant();
        java.lang.String str36 = locale9.getDisplayName(locale19);
        java.lang.String str37 = locale1.getDisplayName(locale9);
        java.util.Locale locale38 = locale1.stripExtensions();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale39);
        java.lang.String str41 = locale39.getDisplayScript();
        java.lang.String str42 = locale38.getDisplayName(locale39);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\ubbf8\uad6d)" + "'", str3, "\uc601\uc5b4\ubbf8\uad6d)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals(locale9.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str16, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str17, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertEquals(locale19.toString(), "-1 / 120");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str24, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh-TW" + "'", str25, "zh-TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "zho" + "'", str28, "zho");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Taiwan" + "'", str31, "Taiwan");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1 / 120" + "'", str34, "-1 / 120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str36, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Korean" + "'", str37, "Korean");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str42, "\ud55c\uad6d\uc5b4");
    }

    @Test
    public void test09351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09351");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getWholeFormat();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        numberFormat3.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getISO3Language();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale12);
        java.util.Currency currency15 = numberFormat14.getCurrency();
        numberFormat14.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat14);
        fractionFormat7.setDenominatorFormat(numberFormat14);
        java.text.NumberFormat numberFormat21 = fractionFormat7.getNumeratorFormat();
        java.util.Currency currency22 = numberFormat21.getCurrency();
        numberFormat21.setMaximumFractionDigits((-3200));
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category27 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale28 = java.util.Locale.getDefault(category27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale29);
        java.util.Locale.setDefault(category27, locale29);
        java.util.Locale locale32 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category27, locale32);
        java.lang.String str34 = locale26.getDisplayLanguage(locale32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getCurrencyInstance(locale37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.text.ParsePosition parsePosition42 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction43 = properFractionFormat39.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition42);
        java.lang.Object obj44 = fractionFormat35.parseObject("214,748,364,700%", parsePosition42);
        java.lang.String str45 = parsePosition42.toString();
        parsePosition42.setIndex((-120));
        parsePosition42.setIndex((int) (byte) 88);
        java.lang.Object obj50 = numberFormat21.parseObject("200%", parsePosition42);
        parsePosition42.setIndex(59);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zho" + "'", str10, "zho");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "TWD");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertTrue("'" + category27 + "' != '" + java.util.Locale.Category.FORMAT + "'", category27.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "anglais" + "'", str34, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=3]" + "'", str45, "java.text.ParsePosition[index=1,errorIndex=3]");
        org.junit.Assert.assertNull(obj50);
    }

    @Test
    public void test09352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09352");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj8 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition7);
        parsePosition7.setIndex(119);
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale13 = java.util.Locale.getDefault(category11);
        boolean boolean14 = parsePosition7.equals((java.lang.Object) category11);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str20 = locale18.getDisplayCountry();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance(locale18);
        java.lang.String str22 = locale15.getDisplayCountry(locale18);
        java.util.Locale.setDefault(category11, locale18);
        java.util.Locale locale24 = java.util.Locale.getDefault(category11);
        java.util.Locale locale28 = new java.util.Locale("fr_CA", "java.text.ParsePosition[index=0,errorIndex=-1]", "zh-tw");
        java.lang.String str30 = locale28.getExtension('x');
        java.util.Locale.setDefault(category11, locale28);
        java.util.Locale locale32 = java.util.Locale.getDefault(category11);
        java.util.Locale locale35 = new java.util.Locale("French (Canada)", "java.text.NumberFormat$Field(currency)");
        java.lang.String str36 = locale35.getDisplayScript();
        java.lang.String str37 = locale35.getScript();
        java.util.Set<java.lang.Character> charSet38 = locale35.getExtensionKeys();
        java.util.Locale.setDefault(category11, locale35);
        boolean boolean40 = locale35.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "France" + "'", str22, "France");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertEquals(locale28.toString(), "fr_ca_JAVA.TEXT.PARSEPOSITION[INDEX=0,ERRORINDEX=-1]_zh-tw");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_ca_JAVA.TEXT.PARSEPOSITION[INDEX=0,ERRORINDEX=-1]_zh-tw");
        org.junit.Assert.assertEquals(locale35.toString(), "french (canada)_JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test09353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09353");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it-IT");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.util.Locale.Builder builder9 = builder6.setLocale(locale7);
        java.util.Locale locale10 = builder6.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder6.setUnicodeLocaleKeyword("9,600.0%", "java.text.FieldPosition[field=1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=40,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 9,600.0% [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
    }

    @Test
    public void test09354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09354");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getEndIndex();
        fieldPosition1.setBeginIndex((int) (byte) 100);
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str9 = fractionFormat7.format((java.lang.Object) 100);
        boolean boolean10 = fieldPosition1.equals((java.lang.Object) fractionFormat7);
        java.text.Format.Field field11 = fieldPosition1.getFieldAttribute();
        int int12 = fieldPosition1.getField();
        java.text.Format.Field field13 = fieldPosition1.getFieldAttribute();
        java.lang.String str14 = field13.toString();
        java.lang.String str15 = field13.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100 0 / 1" + "'", str9, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(field13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str14, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str15, "java.text.NumberFormat$Field(currency)");
    }

    @Test
    public void test09355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09355");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale2 = locale1.stripExtensions();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        boolean boolean6 = numberFormat5.isGroupingUsed();
        java.util.Currency currency7 = numberFormat5.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat5);
        numberFormat3.setMinimumIntegerDigits((int) (byte) 1);
        java.lang.Object obj11 = numberFormat3.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        java.text.NumberFormat numberFormat13 = fractionFormat12.getNumeratorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(numberFormat13);
    }

    @Test
    public void test09356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09356");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale3);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        boolean boolean6 = numberFormat4.equals((java.lang.Object) locale5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str10 = locale8.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.lang.String str12 = locale5.getDisplayVariant(locale8);
        java.lang.String str13 = locale5.getDisplayCountry();
        java.util.Locale.setDefault(locale5);
        java.lang.String str16 = locale5.getExtension('u');
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.lang.String str18 = locale5.getDisplayVariant(locale17);
        java.lang.String str19 = locale0.getDisplayCountry(locale5);
        java.lang.String str21 = locale5.getExtension('u');
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23, numberFormat25);
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj30 = numberFormat25.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition29);
        parsePosition29.setIndex(119);
        java.util.Locale.Category category33 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale34 = java.util.Locale.getDefault(category33);
        java.util.Locale locale35 = java.util.Locale.getDefault(category33);
        boolean boolean36 = parsePosition29.equals((java.lang.Object) category33);
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        java.util.Locale locale40 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale40);
        java.lang.String str42 = locale40.getDisplayCountry();
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getIntegerInstance(locale40);
        java.lang.String str44 = locale37.getDisplayCountry(locale40);
        java.util.Locale.setDefault(category33, locale40);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale40);
        java.lang.String str47 = locale5.getDisplayName(locale40);
        java.util.Set<java.lang.Character> charSet48 = locale40.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en" + "'", str2, "en");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "119_2,857_ita");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ita" + "'", str12, "ita");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2,857" + "'", str13, "2,857");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ita" + "'", str18, "ita");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.FORMAT + "'", category33.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "119_2,857_ita");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "France" + "'", str44, "France");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "119 (2,857,ita)" + "'", str47, "119 (2,857,ita)");
        org.junit.Assert.assertNotNull(charSet48);
    }

    @Test
    public void test09357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09357");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction12.add(fraction18);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction21.divide(fraction24);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = locale27.getScript();
        boolean boolean30 = fraction26.equals((java.lang.Object) locale27);
        java.util.Locale.setDefault(category0, locale27);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance(locale32);
        java.lang.String str34 = locale32.getISO3Language();
        java.util.Set<java.lang.String> strSet35 = locale32.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category0, locale32);
        java.util.Locale locale37 = locale32.stripExtensions();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
    }

    @Test
    public void test09358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09358");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        numberFormat2.setMinimumIntegerDigits(1728000);
        boolean boolean5 = numberFormat2.isGroupingUsed();
        numberFormat2.setGroupingUsed(true);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test09359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09359");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.lang.String str9 = numberFormat7.format((double) 1.0f);
        numberFormat7.setMaximumIntegerDigits((int) (byte) 100);
        int int12 = numberFormat7.getMaximumIntegerDigits();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16, numberFormat18);
        boolean boolean20 = numberFormat18.isGroupingUsed();
        boolean boolean21 = numberFormat18.isGroupingUsed();
        fractionFormat14.setNumeratorFormat(numberFormat18);
        java.lang.Object obj23 = numberFormat18.clone();
        java.lang.Object obj24 = numberFormat18.clone();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        numberFormat26.setMaximumFractionDigits(100);
        java.lang.String str31 = numberFormat26.format((long) 100);
        int int32 = numberFormat26.getMaximumFractionDigits();
        numberFormat26.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat36);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        boolean boolean44 = numberFormat43.isGroupingUsed();
        properFractionFormat41.setWholeFormat(numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26, numberFormat36, numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat18, numberFormat26);
        java.util.Currency currency48 = numberFormat26.getCurrency();
        numberFormat26.setMaximumFractionDigits(1);
        java.math.RoundingMode roundingMode51 = numberFormat26.getRoundingMode();
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getInstance(locale53);
        boolean boolean55 = numberFormat54.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getInstance(locale57);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = new org.apache.commons.math.fraction.FractionFormat(numberFormat58, numberFormat60);
        java.text.ParsePosition parsePosition64 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj65 = numberFormat60.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition64);
        properFractionFormat56.setNumeratorFormat(numberFormat60);
        java.util.Locale locale67 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getInstance(locale67);
        boolean boolean69 = numberFormat68.isParseIntegerOnly();
        numberFormat68.setGroupingUsed(false);
        properFractionFormat56.setWholeFormat(numberFormat68);
        java.text.NumberFormat.Field field74 = java.text.NumberFormat.Field.EXPONENT;
        java.text.ParsePosition parsePosition76 = new java.text.ParsePosition((int) (byte) 10);
        boolean boolean77 = field74.equals((java.lang.Object) parsePosition76);
        org.apache.commons.math.fraction.Fraction fraction78 = properFractionFormat56.parse("zh_tw", parsePosition76);
        int int79 = parsePosition76.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction83 = new org.apache.commons.math.fraction.Fraction((double) 120L, (double) 35, 2);
        int int84 = fraction83.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction85 = fraction83.negate();
        boolean boolean86 = parsePosition76.equals((java.lang.Object) fraction85);
        parsePosition76.setIndex((int) (byte) 88);
        parsePosition76.setErrorIndex(50112000);
        java.lang.Object obj91 = numberFormat26.parseObject("java.text.FieldPosition[field=600,attribute=null,beginIndex=0,endIndex=0]", parsePosition76);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100%" + "'", str9, "100%");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10,000%" + "'", str31, "10,000%");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode51 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode51.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(field74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(fraction78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test09360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09360");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction6 = properFractionFormat2.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition5);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        numberFormat13.setMaximumFractionDigits((int) (short) -1);
        int int16 = numberFormat13.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        numberFormat13.setGroupingUsed(true);
        java.util.Currency currency20 = numberFormat13.getCurrency();
        java.text.NumberFormat.Field field22 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field22);
        java.lang.String str24 = fieldPosition23.toString();
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = locale25.getDisplayName(locale26);
        boolean boolean29 = fieldPosition23.equals((java.lang.Object) locale26);
        fieldPosition23.setEndIndex((int) '#');
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction38 = properFractionFormat34.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition37);
        boolean boolean39 = fieldPosition23.equals((java.lang.Object) parsePosition37);
        parsePosition37.setErrorIndex((int) '#');
        java.lang.Object obj42 = numberFormat13.parseObject("ja-JP", parsePosition37);
        org.apache.commons.math.fraction.Fraction fraction43 = properFractionFormat2.parse("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]", parsePosition37);
        java.util.Locale locale48 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        int int50 = numberFormat49.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = new org.apache.commons.math.fraction.FractionFormat(numberFormat49);
        java.util.Locale locale56 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance(locale56);
        int int58 = numberFormat57.getMaximumIntegerDigits();
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        boolean boolean61 = numberFormat60.isGroupingUsed();
        java.util.Currency currency62 = numberFormat60.getCurrency();
        numberFormat57.setCurrency(currency62);
        java.util.Currency currency64 = numberFormat57.getCurrency();
        java.math.RoundingMode roundingMode65 = numberFormat57.getRoundingMode();
        java.text.ParsePosition parsePosition68 = new java.text.ParsePosition((int) 'a');
        java.lang.String str69 = parsePosition68.toString();
        java.lang.String str70 = parsePosition68.toString();
        java.lang.Object obj71 = numberFormat57.parseObject("zho", parsePosition68);
        java.lang.Object obj72 = fractionFormat51.parseObject("java.text.NumberFormat$Field(currency)", parsePosition68);
        org.apache.commons.math.fraction.Fraction fraction73 = properFractionFormat2.parse("", parsePosition68);
        java.text.NumberFormat numberFormat74 = properFractionFormat2.getWholeFormat();
        int int75 = numberFormat74.getMinimumIntegerDigits();
        boolean boolean76 = numberFormat74.isGroupingUsed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number78 = numberFormat74.parse("3,500.0%_2,147,483,647 / 1_100% (zh-tw)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"3,500.0%_2,147,483,647 / 1_100% (zh-tw)\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNull(fraction6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str24, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Chinese (Taiwan)" + "'", str28, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNull(fraction38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertEquals(locale48.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertEquals(locale56.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(currency62);
        org.junit.Assert.assertEquals(currency62.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency64);
        org.junit.Assert.assertEquals(currency64.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode65 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode65.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str69, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str70, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNull(fraction73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test09361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09361");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        boolean boolean4 = field0.equals((java.lang.Object) locale2);
        java.util.Set<java.lang.String> strSet5 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str6 = locale2.getISO3Language();
        java.util.Locale locale7 = locale2.stripExtensions();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("Germany");
        java.lang.String str10 = locale2.getDisplayLanguage(locale9);
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.lang.String str16 = locale12.toLanguageTag();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale locale19 = builder17.build();
        java.lang.String str20 = locale19.getScript();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale21.toLanguageTag();
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale24.getISO3Language();
        java.lang.String str27 = locale21.getDisplayScript(locale24);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale21.getDisplayCountry(locale28);
        java.util.Locale locale31 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str32 = locale28.getDisplayLanguage(locale31);
        java.lang.String str33 = locale19.getDisplayCountry(locale31);
        java.lang.String str34 = locale12.getDisplayVariant(locale19);
        java.lang.String str35 = locale19.getLanguage();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getInstance(locale19);
        java.lang.String str37 = locale2.getDisplayLanguage(locale19);
        java.lang.String str38 = locale19.getLanguage();
        java.util.Set<java.lang.Character> charSet39 = locale19.getExtensionKeys();
        java.lang.String str40 = locale19.getDisplayScript();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "germany");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinese" + "'", str22, "Chinese");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh-TW" + "'", str23, "zh-TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zho" + "'", str26, "zho");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Taiwan" + "'", str29, "Taiwan");
        org.junit.Assert.assertEquals(locale31.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Italian" + "'", str32, "Italian");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "English" + "'", str37, "English");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test09362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09362");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        numberFormat4.setMinimumIntegerDigits(0);
        numberFormat4.setMinimumIntegerDigits(0);
        org.apache.commons.math.fraction.Fraction fraction12 = new org.apache.commons.math.fraction.Fraction((double) 2147483647, (double) 100.0f, (int) 'u');
        java.lang.String str13 = numberFormat4.format((java.lang.Object) 100.0f);
        java.lang.Object obj14 = numberFormat4.clone();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance();
        numberFormat15.setParseIntegerOnly(true);
        java.math.RoundingMode roundingMode18 = numberFormat15.getRoundingMode();
        int int19 = numberFormat15.getMinimumIntegerDigits();
        numberFormat15.setMinimumFractionDigits(20);
        boolean boolean22 = numberFormat15.isGroupingUsed();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getCurrencyInstance();
        int int24 = numberFormat23.getMaximumFractionDigits();
        boolean boolean25 = numberFormat23.isParseIntegerOnly();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getIntegerInstance();
        java.util.Locale locale28 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale28);
        java.lang.String str31 = fractionFormat29.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat32 = fractionFormat29.getNumeratorFormat();
        numberFormat32.setMaximumFractionDigits((int) (short) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23, numberFormat26, numberFormat32);
        java.util.Locale locale37 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale37);
        java.lang.String str40 = fractionFormat38.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat41 = fractionFormat38.getNumeratorFormat();
        numberFormat41.setMaximumFractionDigits((int) (short) -1);
        int int44 = numberFormat41.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        numberFormat41.setGroupingUsed(true);
        java.util.Currency currency48 = numberFormat41.getCurrency();
        numberFormat41.setMaximumFractionDigits((int) (byte) 100);
        properFractionFormat35.setDenominatorFormat(numberFormat41);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat15, numberFormat41);
        org.apache.commons.math.fraction.Fraction fraction55 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) ' ');
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.negate();
        org.apache.commons.math.fraction.Fraction fraction60 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.negate();
        org.apache.commons.math.fraction.Fraction fraction64 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction65 = fraction60.divide(fraction64);
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance(locale66);
        boolean boolean68 = numberFormat67.isGroupingUsed();
        java.util.Currency currency69 = numberFormat67.getCurrency();
        int int70 = numberFormat67.getMinimumFractionDigits();
        int int71 = numberFormat67.getMinimumIntegerDigits();
        java.lang.Object obj72 = numberFormat67.clone();
        java.text.NumberFormat numberFormat73 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat74 = new org.apache.commons.math.fraction.FractionFormat(numberFormat67, numberFormat73);
        boolean boolean75 = fraction64.equals((java.lang.Object) numberFormat67);
        org.apache.commons.math.fraction.Fraction fraction76 = fraction56.add(fraction64);
        java.lang.StringBuffer stringBuffer77 = null;
        java.text.NumberFormat.Field field78 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition79 = new java.text.FieldPosition((java.text.Format.Field) field78);
        int int80 = fieldPosition79.getField();
        java.text.Format.Field field81 = fieldPosition79.getFieldAttribute();
        int int82 = fieldPosition79.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer83 = properFractionFormat52.format(fraction76, stringBuffer77, fieldPosition79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "100" + "'", str13, "100");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + roundingMode18 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode18.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100 0 / 1" + "'", str31, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals(locale37.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "100 0 / 1" + "'", str40, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(currency69);
        org.junit.Assert.assertEquals(currency69.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(field78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(field81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
    }

    @Test
    public void test09363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09363");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        numberFormat1.setMaximumFractionDigits((int) (byte) 100);
        numberFormat1.setMaximumFractionDigits((int) (byte) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        int int10 = numberFormat1.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayScript();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale14.getISO3Language();
        java.lang.String str16 = locale12.getDisplayScript(locale14);
        java.lang.String str17 = locale12.toLanguageTag();
        java.lang.String str18 = locale12.getISO3Country();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.lang.String str21 = numberFormat19.format((double) (short) -1);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.lang.String str26 = fractionFormat24.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat27 = fractionFormat24.getNumeratorFormat();
        numberFormat27.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency30 = numberFormat27.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27);
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        java.lang.String[] strArray37 = java.util.Locale.getISOCountries();
        boolean boolean38 = numberFormat36.equals((java.lang.Object) strArray37);
        java.util.Locale locale42 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        int int44 = numberFormat43.getMaximumIntegerDigits();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale45);
        boolean boolean47 = numberFormat46.isGroupingUsed();
        java.util.Currency currency48 = numberFormat46.getCurrency();
        numberFormat43.setCurrency(currency48);
        java.util.Currency currency50 = numberFormat43.getCurrency();
        java.math.RoundingMode roundingMode51 = numberFormat43.getRoundingMode();
        numberFormat36.setRoundingMode(roundingMode51);
        numberFormat27.setRoundingMode(roundingMode51);
        numberFormat19.setRoundingMode(roundingMode51);
        properFractionFormat11.setNumeratorFormat(numberFormat19);
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.lang.String str57 = locale56.getScript();
        java.util.Locale locale61 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str62 = locale56.getDisplayScript(locale61);
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getNumberInstance(locale61);
        int int64 = numberFormat63.getMaximumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = new org.apache.commons.math.fraction.FractionFormat(numberFormat63);
        org.apache.commons.math.fraction.Fraction fraction69 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction70 = fraction69.negate();
        org.apache.commons.math.fraction.Fraction fraction73 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction74 = fraction69.divide(fraction73);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getPercentInstance(locale75);
        boolean boolean77 = numberFormat76.isGroupingUsed();
        java.util.Currency currency78 = numberFormat76.getCurrency();
        int int79 = numberFormat76.getMinimumFractionDigits();
        int int80 = numberFormat76.getMinimumIntegerDigits();
        java.lang.Object obj81 = numberFormat76.clone();
        java.text.NumberFormat numberFormat82 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat83 = new org.apache.commons.math.fraction.FractionFormat(numberFormat76, numberFormat82);
        boolean boolean84 = fraction73.equals((java.lang.Object) numberFormat76);
        org.apache.commons.math.fraction.FractionFormat fractionFormat85 = new org.apache.commons.math.fraction.FractionFormat(numberFormat63, numberFormat76);
        properFractionFormat11.setWholeFormat(numberFormat63);
        org.apache.commons.math.fraction.FractionFormat fractionFormat87 = new org.apache.commons.math.fraction.FractionFormat(numberFormat63);
        java.lang.Object obj88 = numberFormat63.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "und" + "'", str17, "und");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1" + "'", str21, "-1");
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100 0 / 1" + "'", str26, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "XXX");
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals(locale42.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency50);
        org.junit.Assert.assertEquals(currency50.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode51 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode51.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals(locale61.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(currency78);
        org.junit.Assert.assertEquals(currency78.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(obj88);
    }

    @Test
    public void test09364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09364");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction2.multiply(fraction6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        boolean boolean10 = numberFormat9.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        boolean boolean12 = fraction6.equals((java.lang.Object) properFractionFormat11);
        java.lang.String str13 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction6);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.abs();
        long long24 = fraction22.longValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction18.multiply(fraction22);
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        long long36 = fraction34.longValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction34);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction22.subtract(fraction37);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction6.subtract(fraction37);
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.negate();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.abs();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction44.abs();
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.negate();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction50.abs();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction44.add(fraction50);
        int int54 = fraction50.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction50.abs();
        double double56 = fraction55.doubleValue();
        int int57 = fraction55.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction37.subtract(fraction55);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1 / 120" + "'", str13, "1 / 120");
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.008333333333333333d + "'", double56 == 0.008333333333333333d);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(fraction58);
    }

    @Test
    public void test09365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09365");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction4.divide(fraction23);
        long long25 = fraction24.longValue();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 100);
        java.lang.String str29 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction28);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction24.subtract(fraction28);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction24.negate();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 120L + "'", long25 == 120L);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0 / 1" + "'", str29, "0 / 1");
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
    }

    @Test
    public void test09366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09366");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str8 = numberFormat4.format((double) 0.0f);
        java.util.Locale locale12 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        int int14 = numberFormat13.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13);
        java.text.NumberFormat numberFormat16 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat13, numberFormat16);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException20 = new org.apache.commons.math.fraction.FractionConversionException(0.0d, 10);
        boolean boolean21 = numberFormat13.equals((java.lang.Object) 10);
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23, numberFormat25);
        int int27 = numberFormat23.getMaximumIntegerDigits();
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayScript();
        java.lang.String str31 = locale28.getDisplayCountry(locale29);
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance(locale29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale29);
        java.util.Set<java.lang.Character> charSet35 = locale29.getExtensionKeys();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getIntegerInstance(locale29);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat23, numberFormat36);
        boolean boolean38 = numberFormat23.isParseIntegerOnly();
        int int39 = numberFormat23.getMinimumFractionDigits();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0%" + "'", str8, "0%");
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Japan" + "'", str31, "Japan");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test09367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09367");
        java.util.Locale locale2 = new java.util.Locale("France", "CHINESE (TAIWAN)");
        java.lang.String str3 = locale2.getCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale2);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        boolean boolean11 = numberFormat10.isGroupingUsed();
        properFractionFormat8.setWholeFormat(numberFormat10);
        java.text.NumberFormat numberFormat13 = properFractionFormat8.getWholeFormat();
        java.lang.String str15 = numberFormat13.format((double) 1.0f);
        numberFormat13.setMaximumIntegerDigits((int) (byte) 100);
        numberFormat13.setParseIntegerOnly(false);
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category22 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale23 = java.util.Locale.getDefault(category22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale24);
        java.util.Locale.setDefault(category22, locale24);
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category22, locale27);
        java.lang.String str29 = locale21.getDisplayLanguage(locale27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale27);
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction38 = properFractionFormat34.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition37);
        java.lang.Object obj39 = fractionFormat30.parseObject("214,748,364,700%", parsePosition37);
        java.lang.String str40 = parsePosition37.toString();
        java.lang.Object obj41 = numberFormat13.parseObject("600", parsePosition37);
        java.lang.String str42 = parsePosition37.toString();
        parsePosition37.setIndex((int) (short) -14400);
        java.lang.Object obj45 = numberFormat4.parseObject("java.text.ParseException: Korean", parsePosition37);
        org.junit.Assert.assertEquals(locale2.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CHINESE (TAIWAN)" + "'", str3, "CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "100%" + "'", str15, "100%");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.FORMAT + "'", category22.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "anglais" + "'", str29, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNull(fraction38);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=3]" + "'", str40, "java.text.ParsePosition[index=1,errorIndex=3]");
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=3]" + "'", str42, "java.text.ParsePosition[index=1,errorIndex=3]");
        org.junit.Assert.assertNull(obj45);
    }

    @Test
    public void test09368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09368");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat6 = fractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = fractionFormat2.getNumeratorFormat();
        java.lang.String str9 = numberFormat7.format((long) 2147483647);
        boolean boolean10 = numberFormat7.isParseIntegerOnly();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale11);
        boolean boolean13 = numberFormat12.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.text.NumberFormat numberFormat15 = properFractionFormat14.getWholeFormat();
        numberFormat15.setMinimumFractionDigits((int) (byte) 0);
        numberFormat15.setMinimumFractionDigits(60);
        numberFormat15.setMaximumFractionDigits((int) (byte) 1);
        java.math.RoundingMode roundingMode22 = numberFormat15.getRoundingMode();
        numberFormat7.setRoundingMode(roundingMode22);
        java.util.Currency currency24 = numberFormat7.getCurrency();
        java.util.Currency currency25 = numberFormat7.getCurrency();
        numberFormat7.setGroupingUsed(false);
        java.lang.String str29 = numberFormat7.format((double) 40);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2,147,483,647" + "'", str9, "2,147,483,647");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + roundingMode22 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode22.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(currency24);
        org.junit.Assert.assertEquals(currency24.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "40" + "'", str29, "40");
    }

    @Test
    public void test09369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09369");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat4 = properFractionFormat2.getWholeFormat();
        int int5 = numberFormat4.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        java.lang.String str9 = locale7.getDisplayName();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale7);
        properFractionFormat6.setDenominatorFormat(numberFormat10);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Korean" + "'", str9, "Korean");
        org.junit.Assert.assertNotNull(numberFormat10);
    }

    @Test
    public void test09370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09370");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        numberFormat2.setMinimumIntegerDigits(1728000);
        boolean boolean5 = numberFormat2.isGroupingUsed();
        numberFormat2.setMaximumFractionDigits((int) (short) -14400);
        java.lang.String str9 = numberFormat2.format((double) (byte) 100);
        java.util.Locale locale10 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13, numberFormat15);
        boolean boolean17 = numberFormat15.isGroupingUsed();
        boolean boolean18 = numberFormat15.isGroupingUsed();
        fractionFormat11.setNumeratorFormat(numberFormat15);
        java.util.Locale locale24 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        int int26 = numberFormat25.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25);
        java.util.Locale locale32 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale32);
        int int34 = numberFormat33.getMaximumIntegerDigits();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        boolean boolean37 = numberFormat36.isGroupingUsed();
        java.util.Currency currency38 = numberFormat36.getCurrency();
        numberFormat33.setCurrency(currency38);
        java.util.Currency currency40 = numberFormat33.getCurrency();
        java.math.RoundingMode roundingMode41 = numberFormat33.getRoundingMode();
        java.text.ParsePosition parsePosition44 = new java.text.ParsePosition((int) 'a');
        java.lang.String str45 = parsePosition44.toString();
        java.lang.String str46 = parsePosition44.toString();
        java.lang.Object obj47 = numberFormat33.parseObject("zho", parsePosition44);
        java.lang.Object obj48 = fractionFormat27.parseObject("java.text.NumberFormat$Field(currency)", parsePosition44);
        java.lang.Object obj49 = numberFormat15.parseObject("Italian", parsePosition44);
        java.text.NumberFormat numberFormat50 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat15, numberFormat50);
        java.text.FieldPosition fieldPosition54 = new java.text.FieldPosition(10);
        int int55 = fieldPosition54.getEndIndex();
        fieldPosition54.setBeginIndex((int) '#');
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.lang.String str59 = locale58.getScript();
        java.util.Locale locale63 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str64 = locale58.getDisplayScript(locale63);
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getNumberInstance(locale63);
        int int66 = numberFormat65.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = new org.apache.commons.math.fraction.FractionFormat(numberFormat65);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65);
        boolean boolean69 = fieldPosition54.equals((java.lang.Object) numberFormat65);
        numberFormat65.setGroupingUsed(false);
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getPercentInstance(locale73);
        boolean boolean75 = numberFormat74.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat76 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat74);
        java.lang.String str78 = numberFormat74.format(0.008333333333333333d);
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getPercentInstance(locale80);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        java.util.Locale locale83 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat84 = java.text.NumberFormat.getPercentInstance(locale83);
        boolean boolean85 = numberFormat84.isGroupingUsed();
        properFractionFormat82.setWholeFormat(numberFormat84);
        java.text.NumberFormat numberFormat87 = properFractionFormat82.getWholeFormat();
        java.text.ParsePosition parsePosition90 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number91 = numberFormat87.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition90);
        int int92 = parsePosition90.getIndex();
        java.lang.String str93 = parsePosition90.toString();
        java.lang.Number number94 = numberFormat74.parse("-100%", parsePosition90);
        java.lang.Object obj95 = numberFormat65.parseObject("1,000%", parsePosition90);
        int int96 = parsePosition90.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction97 = properFractionFormat51.parse("java.text.ParsePosition[index=120,errorIndex=-1]", parsePosition90);
        java.lang.String str98 = parsePosition90.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,100" + "'", str9, "000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,100");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals(locale24.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertEquals(locale32.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(currency38);
        org.junit.Assert.assertEquals(currency38.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency40);
        org.junit.Assert.assertEquals(currency40.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode41 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode41.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str45, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str46, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals(locale63.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1%" + "'", str78, "1%");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertNull(number91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str93, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertEquals("'" + number94 + "' != '" + 1L + "'", number94, 1L);
        org.junit.Assert.assertNull(obj95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 5 + "'", int96 == 5);
        org.junit.Assert.assertNull(fraction97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "java.text.ParsePosition[index=5,errorIndex=5]" + "'", str98, "java.text.ParsePosition[index=5,errorIndex=5]");
    }

    @Test
    public void test09371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09371");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.text.NumberFormat numberFormat29 = properFractionFormat28.getWholeFormat();
        java.util.Locale locale33 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        int int35 = numberFormat34.getMaximumIntegerDigits();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        boolean boolean38 = numberFormat37.isGroupingUsed();
        java.util.Currency currency39 = numberFormat37.getCurrency();
        numberFormat34.setCurrency(currency39);
        java.util.Currency currency41 = numberFormat34.getCurrency();
        java.math.RoundingMode roundingMode42 = numberFormat34.getRoundingMode();
        properFractionFormat28.setWholeFormat(numberFormat34);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat44.getWholeFormat();
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance(locale46);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        numberFormat47.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = new org.apache.commons.math.fraction.FractionFormat(numberFormat45, numberFormat47);
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleAttributes();
        java.lang.String str54 = locale52.getISO3Language();
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getInstance(locale52);
        java.util.Locale locale56 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getInstance(locale56);
        java.util.Currency currency59 = numberFormat58.getCurrency();
        numberFormat58.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = new org.apache.commons.math.fraction.FractionFormat(numberFormat55, numberFormat58);
        fractionFormat51.setDenominatorFormat(numberFormat58);
        java.text.ParsePosition parsePosition67 = new java.text.ParsePosition((int) '#');
        parsePosition67.setErrorIndex(600);
        java.lang.Object obj70 = fractionFormat51.parseObject("French (France)", parsePosition67);
        java.util.Locale locale72 = java.util.Locale.forLanguageTag("chinois");
        java.lang.String str73 = locale72.getScript();
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getInstance(locale72);
        fractionFormat51.setNumeratorFormat(numberFormat74);
        properFractionFormat28.setWholeFormat(numberFormat74);
        java.lang.StringBuffer stringBuffer78 = null;
        java.text.NumberFormat.Field field79 = java.text.NumberFormat.Field.DECIMAL_SEPARATOR;
        java.text.FieldPosition fieldPosition80 = new java.text.FieldPosition((java.text.Format.Field) field79);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer81 = numberFormat74.format((long) (short) 0, stringBuffer78, fieldPosition80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals(locale33.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency41);
        org.junit.Assert.assertEquals(currency41.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode42 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode42.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "zho" + "'", str54, "zho");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(currency59);
        org.junit.Assert.assertEquals(currency59.toString(), "TWD");
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "chinois");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(field79);
    }

    @Test
    public void test09372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09372");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Locale locale7 = locale6.stripExtensions();
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.lang.String str12 = locale6.getDisplayName(locale9);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale6.getDisplayLanguage(locale15);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance(locale6);
        fractionFormat2.setNumeratorFormat(numberFormat19);
        java.lang.String str22 = numberFormat19.format((long) 600);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        java.text.AttributedCharacterIterator attributedCharacterIterator27 = numberFormat24.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj28 = numberFormat24.clone();
        numberFormat24.setMaximumFractionDigits(2147483647);
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getInstance(locale32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33, numberFormat35);
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj40 = numberFormat35.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition39);
        java.lang.String str41 = parsePosition39.toString();
        java.lang.Number number42 = numberFormat24.parse("\ud55c\uad6d\uc5b4", parsePosition39);
        int int43 = numberFormat24.getMinimumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19, numberFormat24);
        numberFormat19.setParseIntegerOnly(true);
        numberFormat19.setMaximumIntegerDigits((int) (short) 0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat51 = properFractionFormat50.getDenominatorFormat();
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getInstance(locale53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance(locale55);
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = new org.apache.commons.math.fraction.FractionFormat(numberFormat54, numberFormat56);
        java.text.ParsePosition parsePosition60 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj61 = numberFormat56.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition60);
        java.lang.String str62 = parsePosition60.toString();
        boolean boolean64 = parsePosition60.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        parsePosition60.setErrorIndex(2147483647);
        java.lang.Object obj67 = numberFormat51.parseObject("\u4e2d\u6587\u4e2d\u570b)", parsePosition60);
        parsePosition60.setIndex(10);
        parsePosition60.setErrorIndex((int) (short) 10);
        java.lang.Object obj72 = numberFormat19.parseObject("java.text.NumberFormat$Field(exponent sign)", parsePosition60);
        int int73 = numberFormat19.getMaximumIntegerDigits();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "119_2,857_ita");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "119 (2,857,ita)" + "'", str12, "119 (2,857,ita)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "119" + "'", str18, "119");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "600" + "'", str22, "600");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(attributedCharacterIterator27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str41, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str62, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test09373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09373");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        numberFormat2.setMinimumIntegerDigits(1728000);
        numberFormat2.setMaximumFractionDigits(1);
        numberFormat2.setGroupingUsed(true);
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = locale9.getDisplayCountry();
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.util.Locale locale12 = java.util.Locale.PRC;
        java.lang.String str13 = locale11.getDisplayName(locale12);
        java.lang.String str14 = locale9.getDisplayCountry(locale11);
        java.lang.String str15 = locale11.getISO3Country();
        java.lang.String str16 = locale11.getDisplayLanguage();
        java.lang.String str17 = locale11.getISO3Country();
        java.lang.String str18 = locale11.getDisplayCountry();
        java.lang.String str19 = locale11.getDisplayName();
        java.lang.StringBuffer stringBuffer20 = null;
        java.text.NumberFormat.Field field21 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition22 = new java.text.FieldPosition((java.text.Format.Field) field21);
        int int23 = fieldPosition22.getField();
        java.text.Format.Field field24 = fieldPosition22.getFieldAttribute();
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition(field24);
        java.text.FieldPosition fieldPosition27 = new java.text.FieldPosition(field24, (int) 'u');
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.negate();
        double double32 = fraction30.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.abs();
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.negate();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.abs();
        long long45 = fraction43.longValue();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction39.multiply(fraction43);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction39.abs();
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.negate();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.abs();
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.negate();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.abs();
        long long58 = fraction56.longValue();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction52.multiply(fraction56);
        org.apache.commons.math.fraction.Fraction fraction60 = fraction39.multiply(fraction59);
        java.text.NumberFormat.Field field61 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition63 = new java.text.FieldPosition((java.text.Format.Field) field61, (int) '#');
        java.text.Format.Field field64 = fieldPosition63.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction67 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction73 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction74 = fraction73.negate();
        org.apache.commons.math.fraction.Fraction fraction75 = fraction70.multiply(fraction74);
        org.apache.commons.math.fraction.Fraction fraction76 = fraction67.add(fraction74);
        boolean boolean77 = field64.equals((java.lang.Object) fraction67);
        java.lang.String str78 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction67);
        org.apache.commons.math.fraction.Fraction fraction79 = fraction60.multiply(fraction67);
        org.apache.commons.math.fraction.Fraction fraction80 = fraction33.add(fraction67);
        boolean boolean81 = field24.equals((java.lang.Object) fraction80);
        java.text.FieldPosition fieldPosition82 = new java.text.FieldPosition(field24);
        fieldPosition82.setBeginIndex((-3200));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer85 = numberFormat2.format((java.lang.Object) str19, stringBuffer20, fieldPosition82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str13, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CAN" + "'", str15, "CAN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English" + "'", str16, "English");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CAN" + "'", str17, "CAN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Canada" + "'", str18, "Canada");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English (Canada)" + "'", str19, "English (Canada)");
        org.junit.Assert.assertNotNull(field21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(field24);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-0.008333333333333333d) + "'", double32 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(field61);
        org.junit.Assert.assertNotNull(field64);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "-1 / 120" + "'", str78, "-1 / 120");
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test09374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09374");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 10);
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction8.add(fraction14);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction3.multiply(fraction14);
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.abs();
        long long30 = fraction28.longValue();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction24.multiply(fraction28);
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        long long42 = fraction40.longValue();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction36.multiply(fraction40);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction28.subtract(fraction43);
        org.apache.commons.math.fraction.Fraction fraction45 = fraction43.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.abs();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.negate();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction18.add(fraction47);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction18.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction53 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.negate();
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.negate();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.abs();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction64.abs();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction58.add(fraction64);
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.negate();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction67.divide(fraction70);
        int int73 = fraction67.intValue();
        org.apache.commons.math.fraction.Fraction fraction74 = fraction67.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction75 = fraction67.abs();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction54.add(fraction67);
        org.apache.commons.math.fraction.Fraction fraction77 = fraction76.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction80 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction83 = org.apache.commons.math.fraction.Fraction.getReducedFraction(35, 2);
        org.apache.commons.math.fraction.Fraction fraction84 = fraction80.multiply(fraction83);
        org.apache.commons.math.fraction.Fraction fraction87 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction88 = fraction87.negate();
        org.apache.commons.math.fraction.Fraction fraction89 = fraction88.abs();
        org.apache.commons.math.fraction.Fraction fraction92 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction93 = fraction92.negate();
        long long94 = fraction92.longValue();
        org.apache.commons.math.fraction.Fraction fraction95 = fraction89.subtract(fraction92);
        org.apache.commons.math.fraction.Fraction fraction96 = fraction83.subtract(fraction92);
        org.apache.commons.math.fraction.Fraction fraction97 = fraction76.add(fraction92);
        org.apache.commons.math.fraction.Fraction fraction98 = fraction49.divide(fraction76);
        org.apache.commons.math.fraction.Fraction fraction99 = fraction2.subtract(fraction49);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1 / 1" + "'", str4, "1 / 1");
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction87);
        org.junit.Assert.assertNotNull(fraction88);
        org.junit.Assert.assertNotNull(fraction89);
        org.junit.Assert.assertNotNull(fraction92);
        org.junit.Assert.assertNotNull(fraction93);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
        org.junit.Assert.assertNotNull(fraction95);
        org.junit.Assert.assertNotNull(fraction96);
        org.junit.Assert.assertNotNull(fraction97);
        org.junit.Assert.assertNotNull(fraction98);
        org.junit.Assert.assertNotNull(fraction99);
    }

    @Test
    public void test09375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09375");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str15 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction14);
        long long16 = fraction14.longValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction4.add(fraction14);
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance(locale19);
        boolean boolean21 = numberFormat20.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24, numberFormat26);
        java.text.ParsePosition parsePosition30 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj31 = numberFormat26.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition30);
        properFractionFormat22.setNumeratorFormat(numberFormat26);
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale33);
        boolean boolean35 = numberFormat34.isParseIntegerOnly();
        numberFormat34.setGroupingUsed(false);
        properFractionFormat22.setWholeFormat(numberFormat34);
        numberFormat34.setMinimumFractionDigits((int) 'u');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getInstance(locale43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = new org.apache.commons.math.fraction.FractionFormat(numberFormat44, numberFormat46);
        java.text.ParsePosition parsePosition50 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj51 = numberFormat46.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition50);
        org.apache.commons.math.fraction.Fraction fraction52 = properFractionFormat41.parse("214,748,364,700%", parsePosition50);
        boolean boolean53 = fraction14.equals((java.lang.Object) properFractionFormat41);
        java.text.NumberFormat numberFormat54 = properFractionFormat41.getWholeFormat();
        boolean boolean55 = numberFormat54.isGroupingUsed();
        java.lang.Object obj56 = numberFormat54.clone();
        java.math.RoundingMode roundingMode57 = numberFormat54.getRoundingMode();
        java.lang.StringBuffer stringBuffer59 = null;
        java.text.NumberFormat.Field field60 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition62 = new java.text.FieldPosition((java.text.Format.Field) field60, (int) '#');
        java.text.Format.Field field63 = fieldPosition62.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction66 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction69 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction72 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction73 = fraction72.negate();
        org.apache.commons.math.fraction.Fraction fraction74 = fraction69.multiply(fraction73);
        org.apache.commons.math.fraction.Fraction fraction75 = fraction66.add(fraction73);
        boolean boolean76 = field63.equals((java.lang.Object) fraction66);
        java.text.FieldPosition fieldPosition77 = new java.text.FieldPosition(field63);
        java.text.Format.Field field78 = fieldPosition77.getFieldAttribute();
        int int79 = fieldPosition77.getEndIndex();
        int int80 = fieldPosition77.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer81 = numberFormat54.format((double) 52, stringBuffer59, fieldPosition77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-1 / 100" + "'", str15, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(fraction52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertTrue("'" + roundingMode57 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode57.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(field60);
        org.junit.Assert.assertNotNull(field63);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(field78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test09376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09376");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        numberFormat1.setMaximumFractionDigits(2147483647);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        boolean boolean15 = numberFormat14.isGroupingUsed();
        properFractionFormat12.setWholeFormat(numberFormat14);
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.util.Locale locale18 = locale17.stripExtensions();
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        java.lang.String str23 = locale17.getDisplayName(locale20);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale24.getDisplayScript();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale26.getISO3Language();
        java.lang.String str28 = locale24.getDisplayScript(locale26);
        java.lang.String str29 = locale17.getDisplayLanguage(locale26);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getNumberInstance(locale17);
        java.util.Currency currency31 = numberFormat30.getCurrency();
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        int int37 = numberFormat36.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat36);
        numberFormat36.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode41 = numberFormat36.getRoundingMode();
        numberFormat30.setRoundingMode(roundingMode41);
        numberFormat14.setRoundingMode(roundingMode41);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat9, numberFormat14);
        int int45 = numberFormat9.getMinimumFractionDigits();
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance(locale46);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance(locale49);
        boolean boolean51 = numberFormat50.isGroupingUsed();
        properFractionFormat48.setWholeFormat(numberFormat50);
        java.text.NumberFormat numberFormat53 = properFractionFormat48.getWholeFormat();
        java.lang.String str55 = numberFormat53.format((double) 1.0f);
        numberFormat53.setMaximumIntegerDigits((int) (byte) 100);
        int int58 = numberFormat53.getMaximumIntegerDigits();
        java.util.Locale locale59 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale59);
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getInstance(locale61);
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance(locale63);
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = new org.apache.commons.math.fraction.FractionFormat(numberFormat62, numberFormat64);
        boolean boolean66 = numberFormat64.isGroupingUsed();
        boolean boolean67 = numberFormat64.isGroupingUsed();
        fractionFormat60.setNumeratorFormat(numberFormat64);
        java.lang.Object obj69 = numberFormat64.clone();
        java.lang.Object obj70 = numberFormat64.clone();
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getPercentInstance(locale71);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat72);
        numberFormat72.setMaximumFractionDigits(100);
        java.lang.String str77 = numberFormat72.format((long) 100);
        int int78 = numberFormat72.getMaximumFractionDigits();
        numberFormat72.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale81 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat82 = java.text.NumberFormat.getPercentInstance(locale81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat82);
        org.apache.commons.math.fraction.FractionFormat fractionFormat84 = new org.apache.commons.math.fraction.FractionFormat(numberFormat82);
        java.util.Locale locale85 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat86 = java.text.NumberFormat.getPercentInstance(locale85);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat87 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat86);
        java.util.Locale locale88 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat89 = java.text.NumberFormat.getPercentInstance(locale88);
        boolean boolean90 = numberFormat89.isGroupingUsed();
        properFractionFormat87.setWholeFormat(numberFormat89);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat92 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat72, numberFormat82, numberFormat89);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat93 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53, numberFormat64, numberFormat72);
        java.util.Currency currency94 = numberFormat72.getCurrency();
        numberFormat9.setCurrency(currency94);
        numberFormat9.setMinimumFractionDigits((int) (short) 599);
        numberFormat9.setMinimumFractionDigits((int) (byte) -21);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "119_2,857_ita");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "119 (2,857,ita)" + "'", str23, "119 (2,857,ita)");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "kor" + "'", str27, "kor");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "119" + "'", str29, "119");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(currency31);
        org.junit.Assert.assertEquals(currency31.toString(), "XXX");
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode41 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode41.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "100%" + "'", str55, "100%");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "10,000%" + "'", str77, "10,000%");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(currency94);
        org.junit.Assert.assertEquals(currency94.toString(), "XXX");
    }

    @Test
    public void test09377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09377");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.lang.String str3 = locale0.getDisplayLanguage();
        java.lang.String str4 = locale0.getDisplayScript();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale7 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale10);
        java.util.Currency currency13 = numberFormat12.getCurrency();
        numberFormat12.setMinimumIntegerDigits(1);
        numberFormat12.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition20 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj21 = numberFormat12.parseObject("Japan", parsePosition20);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException25 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str26 = fractionConversionException25.getPattern();
        java.lang.Throwable[] throwableArray27 = fractionConversionException25.getSuppressed();
        java.lang.Object[] objArray28 = fractionConversionException25.getArguments();
        boolean boolean29 = parsePosition20.equals((java.lang.Object) objArray28);
        int int30 = parsePosition20.getIndex();
        int int31 = parsePosition20.getIndex();
        java.lang.Object obj32 = fractionFormat8.parseObject("\ud55c\uad6d\uc5b4", parsePosition20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat33.getWholeFormat();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        numberFormat36.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat34, numberFormat36);
        java.text.NumberFormat numberFormat41 = fractionFormat40.getNumeratorFormat();
        boolean boolean42 = parsePosition20.equals((java.lang.Object) fractionFormat40);
        parsePosition20.setErrorIndex((int) (short) -120);
        org.apache.commons.math.fraction.Fraction fraction45 = fractionFormat5.parse("inglese (canada)_ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT -120 TO FRACTION (-100/96)", parsePosition20);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "France" + "'", str2, "France");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "French" + "'", str3, "French");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "TWD");
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str26, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(fraction45);
    }

    @Test
    public void test09378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09378");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction4 = fraction2.negate();
        java.text.NumberFormat.Field field5 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition((java.text.Format.Field) field5);
        int int7 = fieldPosition6.getEndIndex();
        fieldPosition6.setBeginIndex((int) (byte) 100);
        java.util.Locale locale11 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str14 = fractionFormat12.format((java.lang.Object) 100);
        boolean boolean15 = fieldPosition6.equals((java.lang.Object) fractionFormat12);
        java.text.Format.Field field16 = fieldPosition6.getFieldAttribute();
        int int17 = fieldPosition6.getEndIndex();
        org.apache.commons.math.fraction.Fraction fraction21 = new org.apache.commons.math.fraction.Fraction((double) 2147483647, (double) 'a', 117);
        int int22 = fraction21.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction21.reciprocal();
        boolean boolean24 = fieldPosition6.equals((java.lang.Object) fraction21);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction2.subtract(fraction21);
        java.lang.Object obj26 = null;
        boolean boolean27 = fraction2.equals(obj26);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0 / 1" + "'", str3, "0 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(field5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "100 0 / 1" + "'", str14, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(field16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test09379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09379");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getEndIndex();
        fieldPosition1.setBeginIndex((int) (byte) 100);
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str9 = fractionFormat7.format((java.lang.Object) 100);
        boolean boolean10 = fieldPosition1.equals((java.lang.Object) fractionFormat7);
        fieldPosition1.setBeginIndex((int) (byte) 1);
        int int13 = fieldPosition1.getField();
        int int14 = fieldPosition1.getBeginIndex();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100 0 / 1" + "'", str9, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test09380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09380");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str15 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction14);
        long long16 = fraction14.longValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction4.add(fraction14);
        org.apache.commons.math.fraction.Fraction fraction19 = fraction14.abs();
        java.lang.String str20 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction14);
        int int21 = fraction14.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction14.negate();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-1 / 100" + "'", str15, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1 / 100" + "'", str20, "-1 / 100");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(fraction22);
    }

    @Test
    public void test09381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09381");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        long long4 = fraction2.longValue();
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale14 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        numberFormat15.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency18 = numberFormat15.getCurrency();
        numberFormat9.setCurrency(currency18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        boolean boolean21 = fraction2.equals((java.lang.Object) properFractionFormat20);
        java.text.NumberFormat numberFormat22 = properFractionFormat20.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.lang.String str24 = locale23.toLanguageTag();
        java.lang.String str26 = locale23.getExtension('x');
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale23);
        java.text.NumberFormat.Field field29 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition30 = new java.text.FieldPosition((java.text.Format.Field) field29);
        java.lang.String str31 = fieldPosition30.toString();
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.lang.String str34 = locale33.getDisplayScript();
        java.lang.String str35 = locale32.getDisplayName(locale33);
        boolean boolean36 = fieldPosition30.equals((java.lang.Object) locale33);
        fieldPosition30.setEndIndex((int) '#');
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getCurrencyInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.text.ParsePosition parsePosition44 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction45 = properFractionFormat41.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition44);
        boolean boolean46 = fieldPosition30.equals((java.lang.Object) parsePosition44);
        java.lang.String str47 = parsePosition44.toString();
        parsePosition44.setErrorIndex((int) (short) 10);
        java.lang.Object obj50 = numberFormat27.parseObject("java.text.ParseException: zh_TW", parsePosition44);
        java.util.Locale locale54 = new java.util.Locale("anglais", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]");
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getCurrencyInstance(locale54);
        java.text.ParsePosition parsePosition58 = new java.text.ParsePosition((int) '#');
        parsePosition58.setErrorIndex(600);
        java.lang.String str61 = parsePosition58.toString();
        int int62 = parsePosition58.getErrorIndex();
        java.lang.Object obj63 = numberFormat55.parseObject("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)", parsePosition58);
        java.lang.Object obj64 = numberFormat27.parseObject("java.text.parseexception: zh_tw", parsePosition58);
        properFractionFormat20.setWholeFormat(numberFormat27);
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getPercentInstance(locale67);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat68);
        numberFormat68.setMaximumFractionDigits(100);
        java.util.Locale locale73 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getCurrencyInstance(locale73);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat74);
        java.text.ParsePosition parsePosition78 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction79 = properFractionFormat75.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition78);
        int int80 = parsePosition78.getIndex();
        java.lang.Object obj81 = numberFormat68.parseObject("0%", parsePosition78);
        parsePosition78.setIndex(1728000);
        int int84 = parsePosition78.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction85 = properFractionFormat20.parse("200%", parsePosition78);
        java.lang.String str86 = parsePosition78.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1 / 100" + "'", str3, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh-TW" + "'", str24, "zh-TW");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(field29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str31, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Chinese (Taiwan)" + "'", str35, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNull(fraction45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str47, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertEquals(locale54.toString(), "anglais_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.text.ParsePosition[index=35,errorIndex=600]" + "'", str61, "java.text.ParsePosition[index=35,errorIndex=600]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 600 + "'", int62 == 600);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNull(fraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNull(fraction85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "java.text.ParsePosition[index=1728000,errorIndex=1727999]" + "'", str86, "java.text.ParsePosition[index=1728000,errorIndex=1727999]");
    }

    @Test
    public void test09382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09382");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getNumeratorFormat();
        java.lang.String str4 = numberFormat2.format((double) (-2));
        int int5 = numberFormat2.getMaximumFractionDigits();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        numberFormat6.setMaximumIntegerDigits(2147483647);
        int int9 = numberFormat6.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = new org.apache.commons.math.fraction.FractionFormat(numberFormat6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat2, numberFormat6);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        java.lang.Object obj16 = numberFormat14.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.util.Locale locale22 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        java.lang.String str25 = fractionFormat23.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat26 = fractionFormat23.getNumeratorFormat();
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.util.Locale locale28 = locale27.stripExtensions();
        java.util.Locale locale30 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.lang.String str32 = locale30.getDisplayCountry();
        java.lang.String str33 = locale27.getDisplayName(locale30);
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = locale34.getDisplayScript();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale36.getISO3Language();
        java.lang.String str38 = locale34.getDisplayScript(locale36);
        java.lang.String str39 = locale27.getDisplayLanguage(locale36);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getNumberInstance(locale27);
        fractionFormat23.setNumeratorFormat(numberFormat40);
        properFractionFormat20.setWholeFormat(numberFormat40);
        fractionFormat17.setNumeratorFormat(numberFormat40);
        java.text.NumberFormat numberFormat44 = fractionFormat17.getNumeratorFormat();
        java.text.NumberFormat numberFormat45 = fractionFormat17.getDenominatorFormat();
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition((int) '4');
        parsePosition48.setIndex(0);
        java.text.FieldPosition fieldPosition52 = new java.text.FieldPosition(1);
        boolean boolean53 = parsePosition48.equals((java.lang.Object) fieldPosition52);
        org.apache.commons.math.fraction.Fraction fraction54 = fractionFormat17.parse("it-IT", parsePosition48);
        org.apache.commons.math.fraction.Fraction fraction55 = properFractionFormat11.parse("\ud504\ub791\uc2a4\uc5b4\uce90\ub098\ub2e4)", parsePosition48);
        java.text.NumberFormat.Field field56 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition57 = new java.text.FieldPosition((java.text.Format.Field) field56);
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getInstance(locale58);
        boolean boolean60 = field56.equals((java.lang.Object) locale58);
        java.util.Locale locale61 = java.util.Locale.ITALIAN;
        java.lang.String str62 = locale61.getDisplayCountry();
        java.lang.String str63 = locale58.getDisplayVariant(locale61);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getIntegerInstance(locale61);
        int int65 = numberFormat64.getMaximumFractionDigits();
        int int66 = numberFormat64.getMinimumFractionDigits();
        numberFormat64.setMaximumFractionDigits((int) (short) -100);
        properFractionFormat11.setWholeFormat(numberFormat64);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-2" + "'", str4, "-2");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "100 0 / 1" + "'", str25, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "119_2,857_ita");
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "119 (2,857,ita)" + "'", str33, "119 (2,857,ita)");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "kor" + "'", str37, "kor");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "119" + "'", str39, "119");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(fraction54);
        org.junit.Assert.assertNull(fraction55);
        org.junit.Assert.assertNotNull(field56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test09383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09383");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList7, strMap8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList15);
        java.util.Locale.FilteringMode filteringMode18 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags(languageRangeList7, (java.util.Collection<java.lang.String>) strList15, filteringMode18);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strSet24);
        java.util.Collection<java.lang.String> strCollection26 = null;
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strCollection26);
        java.lang.String str28 = java.util.Locale.lookupTag(languageRangeList7, strCollection26);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str30 = locale29.getScript();
        java.util.Locale locale34 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str35 = locale29.getDisplayScript(locale34);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale34);
        java.util.Set<java.lang.String> strSet37 = locale34.getUnicodeLocaleKeys();
        java.lang.String str38 = java.util.Locale.lookupTag(languageRangeList7, (java.util.Collection<java.lang.String>) strSet37);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap39 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList40 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList7, strMap39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList40, strMap41);
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.util.Locale locale44 = locale43.stripExtensions();
        java.util.Locale locale46 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale46);
        java.lang.String str48 = locale46.getDisplayCountry();
        java.lang.String str49 = locale43.getDisplayName(locale46);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayScript();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.lang.String str53 = locale52.getISO3Language();
        java.lang.String str54 = locale50.getDisplayScript(locale52);
        java.lang.String str55 = locale43.getDisplayLanguage(locale52);
        java.util.Set<java.lang.String> strSet56 = locale43.getUnicodeLocaleKeys();
        java.lang.String str57 = java.util.Locale.lookupTag(languageRangeList42, (java.util.Collection<java.lang.String>) strSet56);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + filteringMode18 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode18.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals(locale34.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(languageRangeList40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "119_2,857_ita");
        org.junit.Assert.assertEquals(locale46.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "119 (2,857,ita)" + "'", str49, "119 (2,857,ita)");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "kor" + "'", str53, "kor");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "119" + "'", str55, "119");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test09384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09384");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        properFractionFormat11.setWholeFormat(numberFormat13);
        java.text.NumberFormat numberFormat16 = properFractionFormat11.getWholeFormat();
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number20 = numberFormat16.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition19);
        parsePosition19.setErrorIndex(0);
        int int23 = parsePosition19.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction24 = properFractionFormat7.parse("\u65e5\u6587", parsePosition19);
        java.util.Locale locale26 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getInstance(locale29);
        java.util.Currency currency32 = numberFormat31.getCurrency();
        numberFormat31.setMinimumIntegerDigits(1);
        numberFormat31.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj40 = numberFormat31.parseObject("Japan", parsePosition39);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException44 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str45 = fractionConversionException44.getPattern();
        java.lang.Throwable[] throwableArray46 = fractionConversionException44.getSuppressed();
        java.lang.Object[] objArray47 = fractionConversionException44.getArguments();
        boolean boolean48 = parsePosition39.equals((java.lang.Object) objArray47);
        int int49 = parsePosition39.getIndex();
        int int50 = parsePosition39.getIndex();
        java.lang.Object obj51 = fractionFormat27.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]", parsePosition39);
        int int52 = parsePosition39.getIndex();
        java.lang.String str53 = parsePosition39.toString();
        java.text.ParseException parseException56 = new java.text.ParseException("\uc911\uad6d\uc5b4", 0);
        int int57 = parseException56.getErrorOffset();
        java.lang.Throwable[] throwableArray58 = parseException56.getSuppressed();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException62 = new org.apache.commons.math.fraction.FractionConversionException((double) 'x', (long) 117, (long) 0);
        parseException56.addSuppressed((java.lang.Throwable) fractionConversionException62);
        boolean boolean64 = parsePosition39.equals((java.lang.Object) parseException56);
        java.lang.Object obj65 = properFractionFormat7.parseObject("org.apache.commons.math.fraction.FractionConversionException: Unable to convert 35 to fraction after 35 iterations", parsePosition39);
        boolean boolean67 = parsePosition39.equals((java.lang.Object) "fr_ca");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNull(number20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(fraction24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(currency32);
        org.junit.Assert.assertEquals(currency32.toString(), "TWD");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str45, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str53, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test09385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09385");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.reciprocal();
        int int4 = fraction3.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction7 = new org.apache.commons.math.fraction.Fraction(0, 11);
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str12 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction11);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.abs();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction16.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction16.add(fraction22);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction11.multiply(fraction22);
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.ONE;
        long long28 = fraction27.longValue();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction11.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction10.subtract(fraction29);
        java.lang.String str31 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction29);
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        long long42 = fraction40.longValue();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction36.multiply(fraction40);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction36.abs();
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.negate();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.negate();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.abs();
        long long55 = fraction53.longValue();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction49.multiply(fraction53);
        org.apache.commons.math.fraction.Fraction fraction57 = fraction36.multiply(fraction56);
        org.apache.commons.math.fraction.Fraction fraction58 = fraction29.add(fraction57);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction7.subtract(fraction29);
        org.apache.commons.math.fraction.Fraction fraction60 = fraction3.multiply(fraction7);
        org.apache.commons.math.fraction.Fraction fraction62 = new org.apache.commons.math.fraction.Fraction(10.0d);
        org.apache.commons.math.fraction.Fraction fraction63 = fraction62.negate();
        org.apache.commons.math.fraction.Fraction fraction64 = fraction60.divide(fraction62);
        org.apache.commons.math.fraction.Fraction fraction65 = fraction62.abs();
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-100) + "'", int4 == (-100));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1 / 1" + "'", str12, "1 / 1");
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1 / 1" + "'", str31, "1 / 1");
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
    }

    @Test
    public void test09386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09386");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        int int5 = numberFormat1.getMaximumIntegerDigits();
        numberFormat1.setGroupingUsed(true);
        numberFormat1.setMinimumFractionDigits((-100));
        int int10 = numberFormat1.getMinimumIntegerDigits();
        java.text.NumberFormat numberFormat12 = null;
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        numberFormat17.setMinimumIntegerDigits((int) (short) -1);
        boolean boolean20 = numberFormat17.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12, numberFormat17);
        java.util.Currency currency22 = numberFormat17.getCurrency();
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        boolean boolean32 = numberFormat31.isGroupingUsed();
        java.util.Currency currency33 = numberFormat31.getCurrency();
        numberFormat28.setCurrency(currency33);
        java.util.Currency currency35 = numberFormat28.getCurrency();
        java.math.RoundingMode roundingMode36 = numberFormat28.getRoundingMode();
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) 'a');
        java.lang.String str40 = parsePosition39.toString();
        java.lang.String str41 = parsePosition39.toString();
        java.lang.Object obj42 = numberFormat28.parseObject("zho", parsePosition39);
        java.lang.String str43 = parsePosition39.toString();
        java.lang.Object obj44 = numberFormat17.parseObject("ko", parsePosition39);
        int int45 = parsePosition39.getErrorIndex();
        java.lang.Object obj46 = numberFormat1.parseObject("French (Canada)", parsePosition39);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.text.NumberFormat numberFormat50 = properFractionFormat49.getWholeFormat();
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean54 = numberFormat52.equals((java.lang.Object) numberFormat53);
        properFractionFormat49.setWholeFormat(numberFormat52);
        boolean boolean56 = parsePosition39.equals((java.lang.Object) numberFormat52);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(currency33);
        org.junit.Assert.assertEquals(currency33.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode36.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str40, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str41, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str43, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test09387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09387");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.lang.String str8 = locale0.getVariant();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale0);
        java.lang.String str10 = locale0.getDisplayScript();
        java.lang.String str11 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc77c\ubcf8" + "'", str5, "\uc77c\ubcf8");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc77c\ubcf8" + "'", str6, "\uc77c\ubcf8");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc77c\ubcf8" + "'", str11, "\uc77c\ubcf8");
    }

    @Test
    public void test09388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09388");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat7.parse("java.text.ParseException: zh_TW", parsePosition16);
        java.text.NumberFormat numberFormat22 = properFractionFormat7.getDenominatorFormat();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24, numberFormat26);
        boolean boolean28 = numberFormat26.isGroupingUsed();
        java.lang.String str30 = numberFormat26.format((double) 100);
        java.lang.String str32 = numberFormat26.format((double) (short) 10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat22, numberFormat26);
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.lang.String str36 = locale34.getISO3Language();
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getInstance(locale34);
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getInstance(locale38);
        java.util.Currency currency41 = numberFormat40.getCurrency();
        numberFormat40.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = new org.apache.commons.math.fraction.FractionFormat(numberFormat37, numberFormat40);
        java.lang.String str47 = numberFormat37.format(0.0d);
        java.util.Locale locale48 = java.util.Locale.JAPAN;
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = locale49.getDisplayScript();
        java.lang.String str51 = locale48.getDisplayCountry(locale49);
        java.util.Set<java.lang.String> strSet52 = locale49.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getIntegerInstance(locale49);
        java.lang.Object obj54 = numberFormat53.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22, numberFormat37, numberFormat53);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction58 = properFractionFormat56.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 100 to fraction (1/-2,147,483,647)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 100 to fraction (1/-2,147,483,647)\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(fraction21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10,000%" + "'", str30, "10,000%");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1,000%" + "'", str32, "1,000%");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "zho" + "'", str36, "zho");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(currency41);
        org.junit.Assert.assertEquals(currency41.toString(), "TWD");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0" + "'", str47, "0");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Japan" + "'", str51, "Japan");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(obj54);
    }

    @Test
    public void test09389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09389");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.lang.String str8 = locale0.getVariant();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale0);
        java.lang.String str10 = locale0.getDisplayScript();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.lang.String str13 = locale12.getDisplayCountry();
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.PRC;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.lang.String str17 = locale12.getDisplayCountry(locale14);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale18.getISO3Language();
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleKeys();
        java.lang.String str21 = locale18.getDisplayLanguage();
        java.lang.String str22 = locale12.getDisplayScript(locale18);
        java.text.NumberFormat.Field field23 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition24 = new java.text.FieldPosition((java.text.Format.Field) field23);
        java.text.FieldPosition fieldPosition26 = new java.text.FieldPosition((java.text.Format.Field) field23, 1);
        java.text.FieldPosition fieldPosition28 = new java.text.FieldPosition((java.text.Format.Field) field23, (int) (short) 100);
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = locale29.getDisplayCountry(locale30);
        java.util.Set<java.lang.String> strSet33 = locale30.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        boolean boolean35 = field23.equals((java.lang.Object) locale30);
        boolean boolean36 = locale30.hasExtensions();
        java.lang.String str37 = locale12.getDisplayLanguage(locale30);
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getInstance(locale30);
        java.util.Locale locale39 = locale30.stripExtensions();
        java.lang.String str40 = locale0.getDisplayLanguage(locale30);
        java.util.Set<java.lang.String> strSet41 = locale0.getUnicodeLocaleAttributes();
        boolean boolean42 = locale0.hasExtensions();
        java.lang.String str43 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc77c\ubcf8" + "'", str5, "\uc77c\ubcf8");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc77c\ubcf8" + "'", str6, "\uc77c\ubcf8");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str16, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertNotNull(strSet20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(field23);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Japan" + "'", str32, "Japan");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Italian" + "'", str37, "Italian");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Japanese" + "'", str40, "Japanese");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\uc77c\ubcf8" + "'", str43, "\uc77c\ubcf8");
    }

    @Test
    public void test09390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09390");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.text.NumberFormat numberFormat9 = properFractionFormat8.getWholeFormat();
        java.lang.String str11 = numberFormat9.format(9600L);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\244 9,600.00" + "'", str11, "\244 9,600.00");
    }

    @Test
    public void test09391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09391");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat16);
        java.text.ParsePosition parsePosition20 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj21 = numberFormat16.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition20);
        parsePosition20.setIndex(119);
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.util.Locale locale26 = java.util.Locale.getDefault(category24);
        boolean boolean27 = parsePosition20.equals((java.lang.Object) category24);
        java.lang.Number number28 = numberFormat4.parse("\uce90\ub098\ub2e4", parsePosition20);
        int int29 = parsePosition20.getIndex();
        int int30 = parsePosition20.getIndex();
        int int31 = parsePosition20.getErrorIndex();
        int int32 = parsePosition20.getErrorIndex();
        parsePosition20.setIndex((-1789569));
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 119 + "'", int29 == 119);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 119 + "'", int30 == 119);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 119 + "'", int31 == 119);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 119 + "'", int32 == 119);
    }

    @Test
    public void test09392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09392");
        java.util.Locale locale3 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.lang.String str5 = locale3.getDisplayLanguage();
        java.lang.String str6 = locale3.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1 / 1" + "'", str5, "1 / 1");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1 / 1" + "'", str6, "1 / 1");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(fractionFormat8);
    }

    @Test
    public void test09393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09393");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode6 = numberFormat4.getRoundingMode();
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale11);
        java.util.Currency currency14 = numberFormat13.getCurrency();
        numberFormat13.setMinimumIntegerDigits(1);
        numberFormat13.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj22 = numberFormat13.parseObject("Japan", parsePosition21);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException26 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str27 = fractionConversionException26.getPattern();
        java.lang.Throwable[] throwableArray28 = fractionConversionException26.getSuppressed();
        java.lang.Object[] objArray29 = fractionConversionException26.getArguments();
        boolean boolean30 = parsePosition21.equals((java.lang.Object) objArray29);
        int int31 = parsePosition21.getIndex();
        int int32 = parsePosition21.getIndex();
        java.lang.Object obj33 = fractionFormat9.parseObject("\ud55c\uad6d\uc5b4", parsePosition21);
        java.lang.Number number34 = numberFormat4.parse("1 / 100", parsePosition21);
        int int35 = numberFormat4.getMinimumFractionDigits();
        numberFormat4.setParseIntegerOnly(false);
        boolean boolean38 = numberFormat4.isParseIntegerOnly();
        java.lang.Object obj39 = numberFormat4.clone();
        java.util.Locale locale40 = java.util.Locale.JAPAN;
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale41.getDisplayScript();
        java.lang.String str43 = locale40.getDisplayCountry(locale41);
        java.util.Set<java.lang.String> strSet44 = locale41.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getIntegerInstance(locale41);
        int int46 = numberFormat45.getMaximumIntegerDigits();
        boolean boolean47 = numberFormat45.isParseIntegerOnly();
        int int48 = numberFormat45.getMaximumFractionDigits();
        numberFormat45.setMinimumIntegerDigits(52);
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat45);
        int int52 = numberFormat45.getMaximumIntegerDigits();
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.lang.String str54 = locale53.getDisplayScript();
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.lang.String str56 = locale55.getISO3Language();
        java.lang.String str57 = locale53.getDisplayScript(locale55);
        java.lang.String str58 = locale53.toLanguageTag();
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance(locale53);
        numberFormat59.setMinimumFractionDigits((int) (short) -19366);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = new org.apache.commons.math.fraction.FractionFormat(numberFormat45, numberFormat59);
        numberFormat59.setMaximumIntegerDigits(1440000);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode6 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode6.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "TWD");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str27, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(number34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Japan" + "'", str43, "Japan");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "kor" + "'", str56, "kor");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "und" + "'", str58, "und");
        org.junit.Assert.assertNotNull(numberFormat59);
    }

    @Test
    public void test09394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09394");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Locale.setDefault(locale5);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale5.getDisplayName(locale8);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("chinois");
        java.util.Locale.setDefault(category0, locale13);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str20 = locale18.getDisplayCountry();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance(locale18);
        java.lang.String str22 = locale15.getDisplayCountry(locale18);
        java.util.Set<java.lang.String> strSet23 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale24 = locale15.stripExtensions();
        java.lang.String str25 = locale15.getDisplayVariant();
        java.util.Locale.setDefault(category0, locale15);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cor\351en" + "'", str10, "cor\351en");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "chinois");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "France" + "'", str22, "France");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test09395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09395");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale2.getDisplayScript(locale4);
        java.lang.String str7 = locale4.getExtension('u');
        java.lang.String str8 = locale0.getDisplayLanguage(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        numberFormat10.setMaximumIntegerDigits((-79));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "anglais" + "'", str8, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
    }

    @Test
    public void test09396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09396");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction7 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        long long19 = fraction17.longValue();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction13.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        long long31 = fraction29.longValue();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction25.multiply(fraction29);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction17.subtract(fraction32);
        org.apache.commons.math.fraction.Fraction fraction36 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str37 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction36);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction17.subtract(fraction36);
        long long39 = fraction36.longValue();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction8.divide(fraction36);
        org.apache.commons.math.fraction.Fraction fraction41 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction2.add(fraction43);
        org.apache.commons.math.fraction.Fraction fraction48 = new org.apache.commons.math.fraction.Fraction((double) 3, (double) 9700L, 599);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction44.multiply(fraction48);
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.negate();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.abs();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction53.abs();
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.negate();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.abs();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction59.abs();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction53.add(fraction59);
        int int63 = fraction59.getNumerator();
        int int64 = fraction59.intValue();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction59.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction44.subtract(fraction65);
        int int67 = fraction65.getDenominator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 / 120" + "'", str4, "-1 / 120");
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1 / 100" + "'", str37, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test09397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09397");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        boolean boolean16 = numberFormat15.isParseIntegerOnly();
        numberFormat15.setGroupingUsed(false);
        properFractionFormat3.setWholeFormat(numberFormat15);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        boolean boolean26 = numberFormat25.isGroupingUsed();
        properFractionFormat23.setWholeFormat(numberFormat25);
        java.text.NumberFormat numberFormat28 = properFractionFormat23.getWholeFormat();
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number32 = numberFormat28.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition31);
        java.lang.Object obj33 = properFractionFormat3.parseObject("2,147,483,647 / 1", parsePosition31);
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance(locale34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat35, numberFormat37);
        boolean boolean39 = numberFormat37.isGroupingUsed();
        boolean boolean40 = numberFormat37.isGroupingUsed();
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj44 = numberFormat37.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition43);
        numberFormat37.setParseIntegerOnly(false);
        properFractionFormat3.setDenominatorFormat(numberFormat37);
        java.util.Locale locale51 = new java.util.Locale("\u4e2d\u6587\u4e2d\u56fd)", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]", "100%");
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getCurrencyInstance(locale51);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getNumberInstance(locale51);
        properFractionFormat3.setNumeratorFormat(numberFormat53);
        numberFormat53.setMaximumFractionDigits((int) (byte) -100);
        int int57 = numberFormat53.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNull(number32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertEquals(locale51.toString(), "\u4e2d\u6587\u4e2d\u56fd)_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]_100%");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test09398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09398");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale5);
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction11.add(fraction17);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction20.divide(fraction23);
        int int26 = fraction20.intValue();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction20.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction20.abs();
        int int29 = fraction20.getDenominator();
        java.lang.String str30 = numberFormat7.format((java.lang.Object) fraction20);
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        double double35 = fraction33.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction(35, 2);
        long long40 = fraction39.longValue();
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.negate();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.abs();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction44.abs();
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.negate();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction50.abs();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction44.add(fraction50);
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.negate();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction53.divide(fraction56);
        int int59 = fraction53.intValue();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction53.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction39.subtract(fraction53);
        org.apache.commons.math.fraction.Fraction fraction62 = fraction33.subtract(fraction39);
        java.lang.StringBuffer stringBuffer63 = null;
        java.text.NumberFormat.Field field64 = java.text.NumberFormat.Field.EXPONENT;
        java.text.FieldPosition fieldPosition65 = new java.text.FieldPosition((java.text.Format.Field) field64);
        java.text.FieldPosition fieldPosition67 = new java.text.FieldPosition((java.text.Format.Field) field64, (int) '#');
        boolean boolean69 = fieldPosition67.equals((java.lang.Object) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer70 = numberFormat7.format((java.lang.Object) fraction39, stringBuffer63, fieldPosition67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 60 + "'", int29 == 60);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2%" + "'", str30, "2%");
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-0.008333333333333333d) + "'", double35 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 17L + "'", long40 == 17L);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(field64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test09399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09399");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getEndIndex();
        int int3 = fieldPosition1.getField();
        java.lang.String str4 = fieldPosition1.toString();
        java.text.Format.Field field5 = fieldPosition1.getFieldAttribute();
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition(field5);
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.clear();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder12 = builder10.setLanguageTag("it-IT");
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale14);
        java.util.Locale.Builder builder16 = builder13.setLocale(locale14);
        java.util.Locale locale17 = builder13.build();
        java.util.Locale locale18 = builder13.build();
        java.lang.String str19 = locale18.getISO3Country();
        boolean boolean20 = fieldPosition6.equals((java.lang.Object) locale18);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(field5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09400");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.getDefault(category7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.util.Locale.setDefault(category7, locale9);
        java.util.Locale locale13 = new java.util.Locale("Chinese (Taiwan)");
        java.util.Locale.setDefault(category7, locale13);
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.lang.String str17 = locale16.toLanguageTag();
        java.lang.String str18 = locale16.getVariant();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.setScript("");
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.lang.String str25 = locale22.getDisplayLanguage(locale24);
        java.util.Locale.Builder builder26 = builder21.setLocale(locale22);
        java.lang.String str27 = locale16.getDisplayVariant(locale22);
        java.lang.String str28 = locale22.getScript();
        java.util.Locale.setDefault(category15, locale22);
        java.util.Locale locale30 = java.util.Locale.getDefault(category15);
        java.util.Locale.setDefault(category7, locale30);
        java.util.Locale.setDefault(category0, locale30);
        java.util.Set<java.lang.Character> charSet33 = locale30.getExtensionKeys();
        java.util.Locale.setDefault(locale30);
        java.lang.String str35 = locale30.getCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals(locale13.toString(), "chinese (taiwan)");
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh-TW" + "'", str17, "zh-TW");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinesisch" + "'", str25, "Chinesisch");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "TW" + "'", str35, "TW");
    }

    @Test
    public void test09401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09401");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.text.NumberFormat numberFormat9 = properFractionFormat8.getWholeFormat();
        int int10 = numberFormat9.getMaximumIntegerDigits();
        boolean boolean11 = numberFormat9.isGroupingUsed();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u4e2d\u6587" + "'", str1, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test09402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09402");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction8.add(fraction14);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.divide(fraction20);
        int int23 = fraction17.intValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction17.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction4.add(fraction17);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.reciprocal();
        int int29 = fraction27.getDenominator();
        java.lang.String str30 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction27.negate();
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 59 + "'", int29 == 59);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-60 / 59" + "'", str30, "-60 / 59");
        org.junit.Assert.assertNotNull(fraction31);
    }

    @Test
    public void test09403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09403");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.util.Locale locale5 = locale3.stripExtensions();
        java.lang.String str6 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale5);
        java.util.Locale locale9 = new java.util.Locale("kor");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        java.lang.String str11 = locale5.getDisplayLanguage(locale9);
        java.util.Locale.setDefault(locale9);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "HI!" + "'", str6, "HI!");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals(locale9.toString(), "kor");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test09404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09404");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale2 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.lang.String str4 = locale0.getISO3Language();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str12 = locale6.getDisplayScript(locale11);
        java.lang.String str14 = locale6.getExtension('a');
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale6);
        java.util.Set<java.lang.String> strSet16 = locale6.getUnicodeLocaleKeys();
        java.lang.String str17 = locale0.getDisplayName(locale6);
        java.util.Locale.setDefault(locale6);
        java.util.Locale.setDefault(locale6);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zho" + "'", str4, "zho");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese (Taiwan)" + "'", str17, "Chinese (Taiwan)");
    }

    @Test
    public void test09405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09405");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance(locale0);
        numberFormat6.setMinimumFractionDigits((int) (short) -19366);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number11 = numberFormat6.parse("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(numberFormat6);
    }

    @Test
    public void test09406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09406");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) (short) 3647);
        org.apache.commons.math.fraction.Fraction fraction8 = properFractionFormat4.parse("-32 / 59,900%", parsePosition7);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(fraction8);
    }

    @Test
    public void test09407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09407");
        java.util.Locale locale1 = new java.util.Locale("java.text.parseexception: zh_tw");
        java.util.Locale locale2 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale2.getDisplayCountry(locale4);
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale6);
        java.lang.String str9 = locale6.getDisplayScript();
        java.lang.String str10 = locale2.getDisplayVariant(locale6);
        java.lang.String str11 = locale1.getDisplayCountry(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        java.text.NumberFormat numberFormat13 = fractionFormat12.getNumeratorFormat();
        java.util.Currency currency14 = numberFormat13.getCurrency();
        org.junit.Assert.assertEquals(locale1.toString(), "java.text.parseexception: zh_tw");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Chinese" + "'", str3, "Chinese");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Taiwan" + "'", str5, "Taiwan");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
    }

    @Test
    public void test09408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09408");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        double double5 = fraction3.doubleValue();
        int int6 = fraction3.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction(35, 2);
        org.apache.commons.math.fraction.Fraction fraction13 = fraction9.multiply(fraction12);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.abs();
        long long24 = fraction22.longValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction18.multiply(fraction22);
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        long long36 = fraction34.longValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction34);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction18.divide(fraction37);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction18.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction41 = new org.apache.commons.math.fraction.Fraction((double) 1L);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction39.divide(fraction41);
        double double43 = fraction41.doubleValue();
        int int44 = fraction41.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction9.multiply(fraction41);
        org.apache.commons.math.fraction.Fraction fraction48 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str49 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction48);
        long long50 = fraction48.longValue();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction48.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.abs();
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction56 = fraction51.divide(fraction55);
        double double57 = fraction51.doubleValue();
        int int58 = fraction51.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction9.divide(fraction51);
        org.apache.commons.math.fraction.Fraction fraction60 = fraction3.multiply(fraction59);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.008333333333333333d + "'", double5 == 0.008333333333333333d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-1 / 100" + "'", str49, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.01d + "'", double57 == 0.01d);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
    }

    @Test
    public void test09409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09409");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale5.getISO3Country();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale locale11 = builder10.build();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale11);
        java.util.Set<java.lang.Character> charSet13 = locale11.getExtensionKeys();
        java.lang.String str15 = locale11.getExtension('u');
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test09410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09410");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.lang.String str9 = locale8.toLanguageTag();
        java.lang.String str10 = locale8.getISO3Country();
        java.lang.String str11 = locale8.toLanguageTag();
        java.lang.String str12 = locale8.getDisplayVariant();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale8);
        java.lang.String str14 = locale8.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator15 = fractionFormat7.formatToCharacterIterator((java.lang.Object) locale8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kor" + "'", str5, "kor");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh-TW" + "'", str9, "zh-TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "TWN" + "'", str10, "TWN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zh-TW" + "'", str11, "zh-TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test09411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09411");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str5 = locale0.getCountry();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale13 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category6, locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.PRC;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.util.Locale.setDefault(category6, locale15);
        java.util.Locale locale19 = java.util.Locale.getDefault(category6);
        java.lang.String str20 = locale0.getDisplayCountry(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat22 = fractionFormat21.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        boolean boolean25 = numberFormat24.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        boolean boolean27 = numberFormat24.isGroupingUsed();
        java.lang.String str29 = numberFormat24.format((double) 10L);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale30.getISO3Language();
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance(locale30);
        boolean boolean34 = numberFormat33.isParseIntegerOnly();
        java.math.RoundingMode roundingMode35 = numberFormat33.getRoundingMode();
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24, numberFormat33);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat22, numberFormat33);
        java.util.Locale locale40 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale40);
        java.lang.String str42 = locale40.getDisplayCountry();
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getIntegerInstance(locale40);
        numberFormat43.setMinimumIntegerDigits(0);
        java.lang.String str47 = numberFormat43.format(1.0d);
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getInstance(locale49);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = new org.apache.commons.math.fraction.FractionFormat(numberFormat50, numberFormat52);
        boolean boolean54 = numberFormat52.isGroupingUsed();
        boolean boolean55 = numberFormat52.isGroupingUsed();
        java.text.ParsePosition parsePosition58 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj59 = numberFormat52.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition58);
        java.lang.Object obj60 = numberFormat43.parseObject("Taiwan", parsePosition58);
        int int61 = numberFormat43.getMinimumFractionDigits();
        java.text.AttributedCharacterIterator attributedCharacterIterator62 = fractionFormat38.formatToCharacterIterator((java.lang.Object) int61);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals(locale13.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str17, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1,000%" + "'", str29, "1,000%");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "kor" + "'", str31, "kor");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + roundingMode35 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode35.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1" + "'", str47, "1");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(attributedCharacterIterator62);
    }

    @Test
    public void test09412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09412");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.getExtension('x');
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale0);
        java.text.NumberFormat.Field field6 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition7 = new java.text.FieldPosition((java.text.Format.Field) field6);
        java.lang.String str8 = fieldPosition7.toString();
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale10.getDisplayScript();
        java.lang.String str12 = locale9.getDisplayName(locale10);
        boolean boolean13 = fieldPosition7.equals((java.lang.Object) locale10);
        fieldPosition7.setEndIndex((int) '#');
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getCurrencyInstance(locale16);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction22 = properFractionFormat18.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition21);
        boolean boolean23 = fieldPosition7.equals((java.lang.Object) parsePosition21);
        java.lang.String str24 = parsePosition21.toString();
        parsePosition21.setErrorIndex((int) (short) 10);
        java.lang.Object obj27 = numberFormat4.parseObject("java.text.ParseException: zh_TW", parsePosition21);
        java.util.Locale locale31 = new java.util.Locale("anglais", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]");
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getCurrencyInstance(locale31);
        java.text.ParsePosition parsePosition35 = new java.text.ParsePosition((int) '#');
        parsePosition35.setErrorIndex(600);
        java.lang.String str38 = parsePosition35.toString();
        int int39 = parsePosition35.getErrorIndex();
        java.lang.Object obj40 = numberFormat32.parseObject("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)", parsePosition35);
        java.lang.Object obj41 = numberFormat4.parseObject("java.text.parseexception: zh_tw", parsePosition35);
        boolean boolean42 = numberFormat4.isGroupingUsed();
        int int43 = numberFormat4.getMaximumFractionDigits();
        org.apache.commons.math.fraction.Fraction fraction45 = new org.apache.commons.math.fraction.Fraction((double) 100L);
        java.lang.String str46 = numberFormat4.format((java.lang.Object) fraction45);
        java.text.NumberFormat numberFormat47 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat47);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh-TW" + "'", str1, "zh-TW");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(field6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str8, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (Taiwan)" + "'", str12, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNull(fraction22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str24, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertEquals(locale31.toString(), "anglais_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.text.ParsePosition[index=35,errorIndex=600]" + "'", str38, "java.text.ParsePosition[index=35,errorIndex=600]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 600 + "'", int39 == 600);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "10,000%" + "'", str46, "10,000%");
    }

    @Test
    public void test09413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09413");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) 'a');
        java.lang.String str8 = parsePosition7.toString();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder12 = builder11.clear();
        boolean boolean13 = parsePosition7.equals((java.lang.Object) builder12);
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = java.util.Locale.getDefault(category14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale16);
        java.util.Locale.setDefault(category14, locale16);
        java.util.Locale locale19 = java.util.Locale.getDefault(category14);
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale19);
        boolean boolean22 = parsePosition7.equals((java.lang.Object) locale19);
        java.lang.String str23 = locale1.getDisplayScript(locale19);
        java.lang.String str24 = locale19.getISO3Language();
        java.text.NumberFormat.Field field25 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition26 = new java.text.FieldPosition((java.text.Format.Field) field25);
        java.lang.String str27 = fieldPosition26.toString();
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayScript();
        java.lang.String str31 = locale28.getDisplayName(locale29);
        boolean boolean32 = fieldPosition26.equals((java.lang.Object) locale29);
        java.util.Locale locale33 = locale29.stripExtensions();
        java.util.Set<java.lang.Character> charSet34 = locale29.getExtensionKeys();
        java.lang.String str35 = locale29.getDisplayLanguage();
        java.lang.String str36 = locale19.getDisplayCountry(locale29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = locale29.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str8, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertNotNull(field25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str27, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese (Taiwan)" + "'", str31, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test09414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09414");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        boolean boolean3 = locale0.hasExtensions();
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.clear();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale9.getISO3Language();
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleKeys();
        java.lang.String str12 = locale9.getISO3Country();
        java.util.Locale.Builder builder13 = builder7.setLocale(locale9);
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.lang.String str15 = locale14.toLanguageTag();
        java.lang.String str16 = locale14.getISO3Country();
        java.lang.String str17 = locale9.getDisplayCountry(locale14);
        java.lang.String str18 = locale14.getISO3Country();
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 52 to fraction (-1/0)");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale20);
        java.lang.String str22 = locale14.getDisplayScript(locale20);
        java.lang.String str23 = locale0.getDisplayLanguage(locale20);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh-TW" + "'", str15, "zh-TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "TWN" + "'", str16, "TWN");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "TWN" + "'", str18, "TWN");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "French" + "'", str23, "French");
    }

    @Test
    public void test09415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09415");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat7.parse("java.text.ParseException: zh_TW", parsePosition16);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.lang.String str26 = fractionFormat24.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat27 = fractionFormat24.getNumeratorFormat();
        numberFormat27.setMaximumFractionDigits((int) (short) -1);
        int int30 = numberFormat27.getMinimumFractionDigits();
        java.math.RoundingMode roundingMode31 = numberFormat27.getRoundingMode();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        boolean boolean37 = numberFormat36.isGroupingUsed();
        properFractionFormat34.setWholeFormat(numberFormat36);
        java.util.Locale locale39 = java.util.Locale.getDefault();
        java.util.Locale locale40 = locale39.stripExtensions();
        java.util.Locale locale42 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale42);
        java.lang.String str44 = locale42.getDisplayCountry();
        java.lang.String str45 = locale39.getDisplayName(locale42);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.lang.String str47 = locale46.getDisplayScript();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale48.getISO3Language();
        java.lang.String str50 = locale46.getDisplayScript(locale48);
        java.lang.String str51 = locale39.getDisplayLanguage(locale48);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getNumberInstance(locale39);
        java.util.Currency currency53 = numberFormat52.getCurrency();
        java.util.Locale locale57 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance(locale57);
        int int59 = numberFormat58.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = new org.apache.commons.math.fraction.FractionFormat(numberFormat58);
        numberFormat58.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode63 = numberFormat58.getRoundingMode();
        numberFormat52.setRoundingMode(roundingMode63);
        numberFormat36.setRoundingMode(roundingMode63);
        numberFormat27.setRoundingMode(roundingMode63);
        properFractionFormat7.setWholeFormat(numberFormat27);
        java.util.Locale locale68 = java.util.Locale.JAPAN;
        java.util.Locale locale69 = java.util.Locale.ROOT;
        java.lang.String str70 = locale69.getDisplayScript();
        java.lang.String str71 = locale68.getDisplayCountry(locale69);
        java.util.Set<java.lang.String> strSet72 = locale69.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getIntegerInstance(locale69);
        int int74 = numberFormat73.getMaximumIntegerDigits();
        boolean boolean75 = numberFormat73.isParseIntegerOnly();
        properFractionFormat7.setNumeratorFormat(numberFormat73);
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat78 = java.text.NumberFormat.getPercentInstance(locale77);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat78);
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getPercentInstance(locale80);
        boolean boolean82 = numberFormat81.isGroupingUsed();
        properFractionFormat79.setWholeFormat(numberFormat81);
        java.text.NumberFormat numberFormat84 = properFractionFormat79.getWholeFormat();
        java.text.ParsePosition parsePosition87 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number88 = numberFormat84.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition87);
        numberFormat84.setMaximumFractionDigits(11);
        java.util.Locale locale91 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat92 = java.text.NumberFormat.getInstance(locale91);
        boolean boolean93 = numberFormat92.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat94 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat92);
        java.text.NumberFormat numberFormat95 = properFractionFormat94.getWholeFormat();
        java.math.RoundingMode roundingMode96 = numberFormat95.getRoundingMode();
        numberFormat84.setRoundingMode(roundingMode96);
        properFractionFormat7.setNumeratorFormat(numberFormat84);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(fraction21);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100 0 / 1" + "'", str26, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + roundingMode31 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode31.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals(locale42.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "kor" + "'", str49, "kor");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "XXX");
        org.junit.Assert.assertEquals(locale57.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode63 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode63.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Japan" + "'", str71, "Japan");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertNull(number88);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(numberFormat95);
        org.junit.Assert.assertTrue("'" + roundingMode96 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode96.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test09416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09416");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency11 = numberFormat10.getCurrency();
        java.lang.String str13 = numberFormat10.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.util.Locale locale18 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        java.lang.String[] strArray20 = java.util.Locale.getISOCountries();
        boolean boolean21 = numberFormat19.equals((java.lang.Object) strArray20);
        java.util.Locale locale25 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        int int27 = numberFormat26.getMaximumIntegerDigits();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        boolean boolean30 = numberFormat29.isGroupingUsed();
        java.util.Currency currency31 = numberFormat29.getCurrency();
        numberFormat26.setCurrency(currency31);
        java.util.Currency currency33 = numberFormat26.getCurrency();
        java.math.RoundingMode roundingMode34 = numberFormat26.getRoundingMode();
        numberFormat19.setRoundingMode(roundingMode34);
        boolean boolean36 = numberFormat19.isParseIntegerOnly();
        properFractionFormat14.setWholeFormat(numberFormat19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19);
        properFractionFormat9.setDenominatorFormat(numberFormat19);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "100%" + "'", str13, "100%");
        org.junit.Assert.assertEquals(locale18.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals(locale25.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(currency31);
        org.junit.Assert.assertEquals(currency31.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency33);
        org.junit.Assert.assertEquals(currency33.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode34 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode34.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test09417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09417");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        java.lang.Object obj14 = numberFormat4.clone();
        java.lang.Object obj16 = numberFormat4.parseObject("-100%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.util.Locale locale22 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        int int24 = numberFormat23.getMaximumIntegerDigits();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        boolean boolean27 = numberFormat26.isGroupingUsed();
        java.util.Currency currency28 = numberFormat26.getCurrency();
        numberFormat23.setCurrency(currency28);
        numberFormat23.setMaximumIntegerDigits((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category34 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale35 = java.util.Locale.getDefault(category34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale36);
        java.util.Locale.setDefault(category34, locale36);
        java.util.Locale locale39 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category34, locale39);
        java.lang.String str41 = locale33.getDisplayLanguage(locale39);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale39);
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getCurrencyInstance(locale44);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        java.text.ParsePosition parsePosition49 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction50 = properFractionFormat46.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition49);
        java.lang.Object obj51 = fractionFormat42.parseObject("214,748,364,700%", parsePosition49);
        java.lang.String str52 = parsePosition49.toString();
        java.lang.Object obj53 = numberFormat23.parseObject("\u4e2d\u6587\u4e2d\u56fd)", parsePosition49);
        parsePosition49.setErrorIndex(0);
        java.lang.String str56 = parsePosition49.toString();
        java.lang.Object obj57 = properFractionFormat17.parseObject("java.text.ParsePosition[index=52,errorIndex=-1]", parsePosition49);
        org.apache.commons.math.fraction.Fraction fraction61 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str62 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction61);
        float float63 = fraction61.floatValue();
        org.apache.commons.math.fraction.Fraction fraction64 = fraction61.negate();
        java.util.Locale locale68 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getPercentInstance(locale68);
        int int70 = numberFormat69.getMaximumIntegerDigits();
        int int71 = numberFormat69.getMaximumFractionDigits();
        java.util.Locale locale72 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getInstance(locale72);
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getPercentInstance(locale74);
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = new org.apache.commons.math.fraction.FractionFormat(numberFormat73, numberFormat75);
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = new org.apache.commons.math.fraction.FractionFormat(numberFormat69, numberFormat73);
        boolean boolean78 = fraction64.equals((java.lang.Object) fractionFormat77);
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getPercentInstance(locale80);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        java.util.Locale locale83 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat84 = java.text.NumberFormat.getPercentInstance(locale83);
        boolean boolean85 = numberFormat84.isGroupingUsed();
        properFractionFormat82.setWholeFormat(numberFormat84);
        java.text.NumberFormat numberFormat87 = properFractionFormat82.getWholeFormat();
        java.text.ParsePosition parsePosition90 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number91 = numberFormat87.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition90);
        parsePosition90.setErrorIndex(0);
        parsePosition90.setErrorIndex(2);
        java.lang.Object obj96 = fractionFormat77.parseObject("taiwan", parsePosition90);
        java.lang.Object obj97 = properFractionFormat17.parseObject("1\240900 %", parsePosition90);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + (-1L) + "'", obj16, (-1L));
        org.junit.Assert.assertEquals(locale22.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertTrue("'" + category34 + "' != '" + java.util.Locale.Category.FORMAT + "'", category34.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "anglais" + "'", str41, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNull(fraction50);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=3]" + "'", str52, "java.text.ParsePosition[index=1,errorIndex=3]");
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=0]" + "'", str56, "java.text.ParsePosition[index=1,errorIndex=0]");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1 / 1" + "'", str62, "1 / 1");
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 1.0f + "'", float63 == 1.0f);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertEquals(locale68.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertNull(number91);
        org.junit.Assert.assertNull(obj96);
        org.junit.Assert.assertNull(obj97);
    }

    @Test
    public void test09418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09418");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str1 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction0);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction5.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction0.multiply(fraction11);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.ONE;
        long long17 = fraction16.longValue();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction0.multiply(fraction16);
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.negate();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.abs();
        long long29 = fraction27.longValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction23.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.abs();
        long long41 = fraction39.longValue();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction35.multiply(fraction39);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction23.divide(fraction42);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction23.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction46 = new org.apache.commons.math.fraction.Fraction((double) 1L);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction44.divide(fraction46);
        org.apache.commons.math.fraction.Fraction fraction48 = fraction18.divide(fraction47);
        double double49 = fraction47.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str53 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction52);
        float float54 = fraction52.floatValue();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction52.negate();
        java.lang.String str56 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction55);
        double double57 = fraction55.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction55.abs();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction47.divide(fraction55);
        org.apache.commons.math.fraction.Fraction fraction61 = new org.apache.commons.math.fraction.Fraction((double) 117L);
        org.apache.commons.math.fraction.Fraction fraction62 = fraction59.multiply(fraction61);
        org.apache.commons.math.fraction.Fraction fraction63 = fraction62.abs();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1 / 1" + "'", str1, "1 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 120.0d + "'", double49 == 120.0d);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1 / 1" + "'", str53, "1 / 1");
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 1.0f + "'", float54 == 1.0f);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-1 / 1" + "'", str56, "-1 / 1");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1.0d) + "'", double57 == (-1.0d));
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
    }

    @Test
    public void test09419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09419");
        java.util.Locale locale3 = new java.util.Locale("TW", "", "\u4e2d\u6587\u4e2d\u570b)");
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str7 = locale4.getDisplayScript(locale6);
        java.lang.String str8 = locale4.getScript();
        java.lang.String str9 = locale3.getDisplayCountry(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale11);
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        numberFormat13.setMinimumIntegerDigits(1728000);
        numberFormat13.setMinimumIntegerDigits(20);
        boolean boolean18 = numberFormat13.isGroupingUsed();
        fractionFormat10.setDenominatorFormat(numberFormat13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction21 = fractionFormat10.parse("java.text.ParsePosition[index=52,errorIndex=-1]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"java.text.ParsePosition[index=52,errorIndex=-1]\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test09420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09420");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.text.NumberFormat numberFormat29 = properFractionFormat28.getWholeFormat();
        java.util.Locale locale33 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        int int35 = numberFormat34.getMaximumIntegerDigits();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        boolean boolean38 = numberFormat37.isGroupingUsed();
        java.util.Currency currency39 = numberFormat37.getCurrency();
        numberFormat34.setCurrency(currency39);
        java.util.Currency currency41 = numberFormat34.getCurrency();
        java.math.RoundingMode roundingMode42 = numberFormat34.getRoundingMode();
        properFractionFormat28.setWholeFormat(numberFormat34);
        java.text.NumberFormat numberFormat44 = properFractionFormat28.getWholeFormat();
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getInstance(locale45);
        java.util.Locale locale47 = java.util.Locale.getDefault();
        boolean boolean48 = numberFormat46.equals((java.lang.Object) locale47);
        java.util.Locale locale50 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale50);
        java.lang.String str52 = locale50.getDisplayCountry();
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getIntegerInstance(locale50);
        java.lang.String str54 = locale47.getDisplayVariant(locale50);
        java.lang.String str55 = locale50.toLanguageTag();
        java.lang.String str56 = locale50.getDisplayScript();
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getNumberInstance(locale50);
        properFractionFormat28.setWholeFormat(numberFormat57);
        numberFormat57.setMinimumFractionDigits(6000);
        java.lang.StringBuffer stringBuffer62 = null;
        java.text.FieldPosition fieldPosition63 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer64 = numberFormat57.format((long) (-120), stringBuffer62, fieldPosition63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals(locale33.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency41);
        org.junit.Assert.assertEquals(currency41.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode42 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode42.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals(locale50.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "und" + "'", str55, "und");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(numberFormat57);
    }

    @Test
    public void test09421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09421");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        java.util.Locale locale9 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12, numberFormat14);
        boolean boolean16 = numberFormat14.isGroupingUsed();
        boolean boolean17 = numberFormat14.isGroupingUsed();
        fractionFormat10.setNumeratorFormat(numberFormat14);
        java.lang.Object obj19 = numberFormat14.clone();
        java.text.ParseException parseException22 = new java.text.ParseException("Taiwan", (int) (byte) 100);
        boolean boolean23 = numberFormat14.equals((java.lang.Object) parseException22);
        java.util.Locale locale25 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale25);
        java.lang.String str28 = fractionFormat26.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat29 = fractionFormat26.getNumeratorFormat();
        numberFormat29.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency32 = numberFormat29.getCurrency();
        numberFormat14.setCurrency(currency32);
        numberFormat8.setCurrency(currency32);
        numberFormat8.setMinimumFractionDigits(14400);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.ParsePosition parsePosition40 = new java.text.ParsePosition((int) (byte) -120);
        int int41 = parsePosition40.getIndex();
        int int42 = parsePosition40.getErrorIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj43 = properFractionFormat37.parseObject("", parsePosition40);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -120");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "100 0 / 1" + "'", str28, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(currency32);
        org.junit.Assert.assertEquals(currency32.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-120) + "'", int41 == (-120));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test09422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09422");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        numberFormat4.setMinimumIntegerDigits(0);
        java.lang.String str8 = numberFormat4.format(1.0d);
        numberFormat4.setMaximumFractionDigits((int) ' ');
        java.lang.Object obj11 = numberFormat4.clone();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(obj11);
    }

    @Test
    public void test09423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09423");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale12 = new java.util.Locale("Japanese (Japan)", "chinois", "-1 / 120");
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.util.Locale.setDefault(category14, locale15);
        java.util.Locale locale18 = java.util.Locale.getDefault(category14);
        java.util.Locale locale19 = java.util.Locale.getDefault(category14);
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        java.lang.String str23 = locale21.toLanguageTag();
        java.util.Locale.setDefault(category14, locale21);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayScript();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale27.getISO3Language();
        java.lang.String str29 = locale25.getDisplayScript(locale27);
        java.lang.String str30 = locale25.toLanguageTag();
        java.lang.String str31 = locale25.getDisplayVariant();
        java.lang.String str32 = locale25.getVariant();
        java.lang.String str33 = locale25.getDisplayCountry();
        java.util.Locale.setDefault(category14, locale25);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale35.getISO3Language();
        java.lang.String str37 = locale35.getDisplayCountry();
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.lang.String str40 = locale38.getISO3Language();
        java.lang.String str41 = locale35.getDisplayScript(locale38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale35);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getCurrencyInstance(locale35);
        java.lang.String str44 = locale35.getDisplayName();
        java.lang.String str45 = locale35.getCountry();
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getCurrencyInstance(locale35);
        java.util.Locale locale47 = java.util.Locale.TAIWAN;
        java.lang.String str48 = locale47.getDisplayCountry();
        java.lang.String str49 = locale47.getDisplayLanguage();
        java.lang.String str50 = locale47.getDisplayName();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getIntegerInstance(locale51);
        java.lang.String str53 = locale47.getDisplayVariant(locale51);
        boolean boolean54 = numberFormat46.equals((java.lang.Object) locale47);
        java.util.Locale.setDefault(category14, locale47);
        java.util.Locale locale56 = java.util.Locale.getDefault(category14);
        java.util.Locale.setDefault(category0, locale56);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals(locale12.toString(), "japanese (japan)_CHINOIS_-1 / 120");
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category14.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "en-CA" + "'", str23, "en-CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "kor" + "'", str28, "kor");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "und" + "'", str30, "und");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "kor" + "'", str36, "kor");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "zho" + "'", str40, "zho");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Korean" + "'", str44, "Korean");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Taiwan" + "'", str48, "Taiwan");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinese" + "'", str49, "Chinese");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Chinese (Taiwan)" + "'", str50, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
    }

    @Test
    public void test09424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09424");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale3.toLanguageTag();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getISO3Language();
        java.lang.String str9 = locale3.getDisplayScript(locale6);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale3.getDisplayCountry(locale10);
        java.util.Locale.Builder builder12 = builder0.setLocale(locale10);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale13.toLanguageTag();
        java.lang.String str19 = locale13.getDisplayVariant();
        java.lang.String str20 = locale13.getVariant();
        java.util.Locale.Builder builder21 = builder12.setLocale(locale13);
        java.util.Locale locale22 = locale13.stripExtensions();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.text.NumberFormat numberFormat25 = properFractionFormat24.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj27 = properFractionFormat24.parseObject("chinese (JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0])");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u4e2d\u6587" + "'", str4, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Taiwan" + "'", str11, "Taiwan");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat25);
    }

    @Test
    public void test09425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09425");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("100 0 / 1");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale3.getISO3Language();
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Locale locale6 = java.util.Locale.US;
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = locale3.getDisplayVariant(locale6);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance(locale3);
        java.lang.String str10 = locale1.getDisplayScript(locale3);
        java.lang.String str12 = locale1.getExtension('x');
        java.util.Locale locale14 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str17 = fractionFormat15.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat18 = fractionFormat15.getNumeratorFormat();
        java.text.NumberFormat numberFormat19 = fractionFormat15.getNumeratorFormat();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        boolean boolean21 = numberFormat19.equals((java.lang.Object) locale20);
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder22.setScript("");
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.lang.String str27 = locale25.toLanguageTag();
        java.util.Locale locale28 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleAttributes();
        java.lang.String str30 = locale28.getISO3Language();
        java.lang.String str31 = locale25.getDisplayScript(locale28);
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.lang.String str33 = locale25.getDisplayCountry(locale32);
        java.util.Locale.Builder builder34 = builder22.setLocale(locale32);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance(locale32);
        java.lang.String str36 = locale20.getDisplayVariant(locale32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale32);
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getNumberInstance(locale32);
        java.lang.String str39 = locale32.getLanguage();
        java.lang.String str40 = locale32.getScript();
        boolean boolean41 = locale1.equals((java.lang.Object) locale32);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "100 0 / 1" + "'", str17, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str26, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "zh-TW" + "'", str27, "zh-TW");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "zho" + "'", str30, "zho");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Taiwan" + "'", str33, "Taiwan");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test09426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09426");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        long long12 = fraction8.longValue();
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale13.toLanguageTag();
        java.lang.String str19 = locale13.getDisplayVariant();
        java.lang.String str20 = locale13.getVariant();
        boolean boolean21 = fraction8.equals((java.lang.Object) str20);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        long long32 = fraction30.longValue();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction26.multiply(fraction30);
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.abs();
        long long44 = fraction42.longValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction38.multiply(fraction42);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction30.subtract(fraction45);
        org.apache.commons.math.fraction.Fraction fraction49 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str50 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction49);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction30.subtract(fraction49);
        org.apache.commons.math.fraction.Fraction fraction52 = fraction8.divide(fraction30);
        float float53 = fraction52.floatValue();
        int int54 = fraction52.intValue();
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.negate();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction62 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction63 = fraction62.negate();
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.abs();
        long long65 = fraction63.longValue();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction59.multiply(fraction63);
        org.apache.commons.math.fraction.Fraction fraction69 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction70 = fraction69.negate();
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.abs();
        org.apache.commons.math.fraction.Fraction fraction74 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction75 = fraction74.negate();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction75.abs();
        long long77 = fraction75.longValue();
        org.apache.commons.math.fraction.Fraction fraction78 = fraction71.multiply(fraction75);
        org.apache.commons.math.fraction.Fraction fraction79 = fraction59.divide(fraction78);
        org.apache.commons.math.fraction.Fraction fraction80 = fraction59.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction83 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction84 = fraction83.negate();
        org.apache.commons.math.fraction.Fraction fraction85 = fraction84.abs();
        org.apache.commons.math.fraction.Fraction fraction88 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction89 = fraction88.negate();
        long long90 = fraction88.longValue();
        org.apache.commons.math.fraction.Fraction fraction91 = fraction85.subtract(fraction88);
        org.apache.commons.math.fraction.Fraction fraction92 = fraction59.divide(fraction91);
        org.apache.commons.math.fraction.Fraction fraction93 = fraction52.divide(fraction91);
        long long94 = fraction91.longValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1 / 100" + "'", str50, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 1.0f + "'", float53 == 1.0f);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertNotNull(fraction88);
        org.junit.Assert.assertNotNull(fraction89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(fraction91);
        org.junit.Assert.assertNotNull(fraction92);
        org.junit.Assert.assertNotNull(fraction93);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
    }

    @Test
    public void test09427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09427");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.setVariant("Korean");
        java.util.Locale locale10 = builder7.build();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        boolean boolean16 = numberFormat15.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        boolean boolean18 = numberFormat15.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13, numberFormat15);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getCurrencyInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.util.Currency currency23 = numberFormat21.getCurrency();
        fractionFormat19.setNumeratorFormat(numberFormat21);
        fractionFormat11.setDenominatorFormat(numberFormat21);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale26.getISO3Language();
        java.lang.String str28 = locale26.getDisplayCountry();
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        java.lang.String str31 = locale29.getISO3Language();
        java.lang.String str32 = locale26.getDisplayScript(locale29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getCurrencyInstance(locale26);
        java.lang.String str35 = locale26.getDisplayName();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getInstance(locale26);
        int int37 = numberFormat36.getMinimumFractionDigits();
        boolean boolean38 = numberFormat36.isGroupingUsed();
        fractionFormat11.setDenominatorFormat(numberFormat36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj41 = fractionFormat11.parseObject("inglese (canada)_ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT -120 TO FRACTION (-100/96)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "kor" + "'", str27, "kor");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zho" + "'", str31, "zho");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test09428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09428");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder8 = builder5.clear();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.lang.String str10 = locale9.toLanguageTag();
        java.lang.String str11 = locale9.getVariant();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.setScript("");
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = locale15.getDisplayLanguage(locale17);
        java.util.Locale.Builder builder19 = builder14.setLocale(locale15);
        java.lang.String str20 = locale9.getDisplayVariant(locale15);
        java.util.Locale.Builder builder21 = builder5.setLocale(locale9);
        java.util.Locale.setDefault(locale9);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getCurrencyInstance(locale9);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.text.NumberFormat numberFormat27 = properFractionFormat26.getNumeratorFormat();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        boolean boolean31 = numberFormat30.isGroupingUsed();
        java.lang.Object obj32 = numberFormat30.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition(120);
        org.apache.commons.math.fraction.Fraction fraction37 = properFractionFormat33.parse("cor\351en", parsePosition36);
        java.lang.Object obj38 = numberFormat27.parseObject("\uc601\uc5b4\ub300\ub9cc)", parsePosition36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23, numberFormat27);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh-TW" + "'", str10, "zh-TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinesisch" + "'", str18, "Chinesisch");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNull(fraction37);
        org.junit.Assert.assertNull(obj38);
    }

    @Test
    public void test09429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09429");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str1 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction0);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction5.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction0.multiply(fraction11);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction0.negate();
        long long17 = fraction16.longValue();
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.add(fraction25);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction16.multiply(fraction19);
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.negate();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction31.add(fraction37);
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.negate();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction40.divide(fraction43);
        int int46 = fraction40.intValue();
        float float47 = fraction40.floatValue();
        int int48 = fraction40.intValue();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction40.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction19.divide(fraction49);
        int int51 = fraction49.getNumerator();
        short short52 = fraction49.shortValue();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1 / 1" + "'", str1, "1 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.016666668f + "'", float47 == 0.016666668f);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 60 + "'", int51 == 60);
        org.junit.Assert.assertTrue("'" + short52 + "' != '" + (short) 60 + "'", short52 == (short) 60);
    }

    @Test
    public void test09430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09430");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category10, locale15);
        java.lang.String str17 = locale9.getDisplayLanguage(locale15);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale9);
        int int19 = numberFormat18.getMinimumIntegerDigits();
        properFractionFormat8.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat21 = properFractionFormat8.getDenominatorFormat();
        boolean boolean22 = numberFormat21.isGroupingUsed();
        java.math.RoundingMode roundingMode23 = numberFormat21.getRoundingMode();
        java.lang.String str25 = numberFormat21.format((long) (-7200));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u4e2d\u6587" + "'", str1, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "anglais" + "'", str17, "anglais");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + roundingMode23 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode23.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-720,000%" + "'", str25, "-720,000%");
    }

    @Test
    public void test09431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09431");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.lang.String str10 = locale5.toLanguageTag();
        java.lang.String str11 = locale5.getDisplayScript();
        java.lang.String str12 = locale5.getDisplayName();
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder13.setLanguageTag("en");
        java.util.Locale.Builder builder18 = builder13.setExtension('a', "Korean");
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale19.getDisplayScript();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale21.getISO3Language();
        java.lang.String str23 = locale19.getDisplayScript(locale21);
        java.lang.String str24 = locale19.toLanguageTag();
        java.lang.String str25 = locale19.getDisplayVariant();
        boolean boolean26 = locale19.hasExtensions();
        java.util.Locale.Builder builder27 = builder18.setLocale(locale19);
        java.util.Locale.Builder builder30 = builder27.setExtension('u', "");
        java.util.Locale.Builder builder31 = builder27.clear();
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("100%");
        java.util.Locale.Builder builder34 = builder27.setLocale(locale33);
        java.lang.String str35 = locale5.getDisplayLanguage(locale33);
        java.lang.String str36 = locale33.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "und" + "'", str10, "und");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "und" + "'", str24, "und");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test09432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09432");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str8 = numberFormat4.format((double) 0.0f);
        java.util.Locale locale12 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        int int14 = numberFormat13.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13);
        java.text.NumberFormat numberFormat16 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat13, numberFormat16);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException20 = new org.apache.commons.math.fraction.FractionConversionException(0.0d, 10);
        boolean boolean21 = numberFormat13.equals((java.lang.Object) 10);
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23, numberFormat25);
        int int27 = numberFormat23.getMaximumIntegerDigits();
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayScript();
        java.lang.String str31 = locale28.getDisplayCountry(locale29);
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance(locale29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale29);
        java.util.Set<java.lang.Character> charSet35 = locale29.getExtensionKeys();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getIntegerInstance(locale29);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat23, numberFormat36);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.util.Locale locale41 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.lang.String str43 = locale41.getDisplayCountry();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getIntegerInstance(locale41);
        java.lang.String str45 = locale38.getDisplayCountry(locale41);
        java.lang.String str46 = locale38.getISO3Language();
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getCurrencyInstance(locale38);
        boolean boolean48 = numberFormat47.isGroupingUsed();
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance(locale49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        numberFormat50.setMaximumFractionDigits(100);
        java.lang.String str55 = numberFormat50.format((long) 100);
        int int56 = numberFormat50.getMaximumFractionDigits();
        java.util.Locale.Builder builder57 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder58 = builder57.clearExtensions();
        java.util.Locale.Builder builder60 = builder57.setVariant("");
        java.util.Locale.Builder builder61 = builder60.clearExtensions();
        boolean boolean62 = numberFormat50.equals((java.lang.Object) builder60);
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale63.getISO3Language();
        java.util.Set<java.lang.String> strSet65 = locale63.getUnicodeLocaleKeys();
        java.lang.String str66 = locale63.getISO3Country();
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getNumberInstance(locale63);
        java.util.Locale locale71 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getPercentInstance(locale71);
        int int73 = numberFormat72.getMaximumIntegerDigits();
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getPercentInstance(locale74);
        boolean boolean76 = numberFormat75.isGroupingUsed();
        java.util.Currency currency77 = numberFormat75.getCurrency();
        numberFormat72.setCurrency(currency77);
        java.util.Currency currency79 = numberFormat72.getCurrency();
        int int80 = numberFormat72.getMaximumFractionDigits();
        java.lang.Object obj81 = numberFormat72.clone();
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat83 = java.text.NumberFormat.getPercentInstance(locale82);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat83);
        numberFormat83.setMaximumFractionDigits(100);
        numberFormat83.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str90 = numberFormat83.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat91 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67, numberFormat72, numberFormat83);
        int int92 = numberFormat72.getMaximumIntegerDigits();
        boolean boolean93 = numberFormat72.isGroupingUsed();
        java.util.Currency currency94 = numberFormat72.getCurrency();
        numberFormat50.setCurrency(currency94);
        numberFormat47.setCurrency(currency94);
        numberFormat23.setCurrency(currency94);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0%" + "'", str8, "0%");
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Japan" + "'", str31, "Japan");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals(locale41.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "France" + "'", str45, "France");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "fra" + "'", str46, "fra");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "10,000%" + "'", str55, "10,000%");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "kor" + "'", str64, "kor");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals(locale71.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(currency77);
        org.junit.Assert.assertEquals(currency77.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency79);
        org.junit.Assert.assertEquals(currency79.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "100%" + "'", str90, "100%");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2147483647 + "'", int92 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(currency94);
        org.junit.Assert.assertEquals(currency94.toString(), "XXX");
    }

    @Test
    public void test09433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09433");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction8.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction23.reciprocal();
        long long26 = fraction23.longValue();
        float float27 = fraction23.floatValue();
        int int28 = fraction23.intValue();
        java.lang.String str29 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction23);
        int int30 = fraction23.getDenominator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 6.9444446E-5f + "'", float27 == 6.9444446E-5f);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1 / 14,400" + "'", str29, "1 / 14,400");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 14400 + "'", int30 == 14400);
    }

    @Test
    public void test09434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09434");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.toLanguageTag();
        java.lang.String str2 = locale0.getISO3Country();
        java.lang.String str3 = locale0.toLanguageTag();
        java.lang.String str4 = locale0.getDisplayVariant();
        java.util.Set<java.lang.String> strSet5 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.String str8 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh-TW" + "'", str1, "zh-TW");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "TWN" + "'", str2, "TWN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh-TW" + "'", str3, "zh-TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "TW" + "'", str8, "TW");
    }

    @Test
    public void test09435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09435");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str8 = locale6.getDisplayCountry();
        java.lang.String str9 = locale3.getDisplayName(locale6);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale10.getDisplayScript();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        java.lang.String str14 = locale10.getDisplayScript(locale12);
        java.lang.String str15 = locale3.getDisplayLanguage(locale12);
        java.lang.String str16 = locale0.getDisplayCountry(locale12);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale18 = locale0.stripExtensions();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale locale21 = builder19.build();
        java.util.Locale.Builder builder22 = builder19.clearExtensions();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.util.Locale.Builder builder25 = builder19.setLocale(locale23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale23);
        java.lang.String str27 = locale23.getDisplayVariant();
        java.lang.String str28 = locale18.getDisplayVariant(locale23);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance(locale23);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ub300\ub9cc" + "'", str16, "\ub300\ub9cc");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(numberFormat29);
    }

    @Test
    public void test09436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09436");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (short) 0, (double) 10, (int) (short) 100);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        boolean boolean6 = numberFormat5.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9, numberFormat11);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj16 = numberFormat11.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition15);
        properFractionFormat7.setNumeratorFormat(numberFormat11);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale18);
        boolean boolean20 = numberFormat19.isParseIntegerOnly();
        numberFormat19.setGroupingUsed(false);
        properFractionFormat7.setWholeFormat(numberFormat19);
        numberFormat19.setMinimumFractionDigits((int) 'u');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        numberFormat19.setMinimumIntegerDigits(97);
        boolean boolean29 = fraction3.equals((java.lang.Object) numberFormat19);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction3.abs();
        int int31 = fraction3.getDenominator();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction32 = fraction3.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The denominator must not be zero");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test09437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09437");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.util.Locale locale30 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.lang.String str33 = fractionFormat31.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat34 = fractionFormat31.getNumeratorFormat();
        java.text.NumberFormat numberFormat35 = fractionFormat31.getNumeratorFormat();
        java.text.NumberFormat numberFormat36 = fractionFormat31.getNumeratorFormat();
        java.lang.String str38 = numberFormat36.format((long) 2147483647);
        properFractionFormat28.setDenominatorFormat(numberFormat36);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getInstance(locale41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = new org.apache.commons.math.fraction.FractionFormat(numberFormat42, numberFormat44);
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj49 = numberFormat44.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition48);
        java.lang.String str50 = parsePosition48.toString();
        java.lang.String str51 = parsePosition48.toString();
        int int52 = parsePosition48.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction53 = properFractionFormat28.parse("214,748,364,700%", parsePosition48);
        java.text.NumberFormat numberFormat54 = properFractionFormat28.getDenominatorFormat();
        java.text.NumberFormat numberFormat55 = properFractionFormat28.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction57 = properFractionFormat28.parse("java.text.ParseException: fr_CA");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"java.text.ParseException: fr_CA\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "100 0 / 1" + "'", str33, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2,147,483,647" + "'", str38, "2,147,483,647");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str50, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str51, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
    }

    @Test
    public void test09438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09438");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        numberFormat1.setGroupingUsed(true);
        java.util.Currency currency6 = numberFormat1.getCurrency();
        java.util.Locale locale7 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str9 = locale7.toLanguageTag();
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str12 = locale10.getISO3Language();
        java.lang.String str13 = locale7.getDisplayScript(locale10);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale10);
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("\u4e2d\u6587");
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.lang.String str18 = locale17.getDisplayCountry();
        java.lang.String str19 = locale17.getDisplayLanguage();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.lang.String str21 = locale20.getDisplayScript();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale22.getISO3Language();
        java.lang.String str24 = locale20.getDisplayScript(locale22);
        java.lang.String str25 = locale20.toLanguageTag();
        java.util.Set<java.lang.String> strSet26 = locale20.getUnicodeLocaleKeys();
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale27);
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleKeys();
        boolean boolean30 = locale27.hasExtensions();
        java.lang.String str31 = locale20.getDisplayVariant(locale27);
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getInstance(locale32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33, numberFormat35);
        numberFormat35.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field40 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition41 = new java.text.FieldPosition((java.text.Format.Field) field40);
        java.lang.String str42 = fieldPosition41.toString();
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.lang.String str45 = locale44.getDisplayScript();
        java.lang.String str46 = locale43.getDisplayName(locale44);
        boolean boolean47 = fieldPosition41.equals((java.lang.Object) locale44);
        fieldPosition41.setEndIndex((int) '#');
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getCurrencyInstance(locale50);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        java.text.ParsePosition parsePosition55 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction56 = properFractionFormat52.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition55);
        boolean boolean57 = fieldPosition41.equals((java.lang.Object) parsePosition55);
        java.lang.Number number58 = numberFormat35.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition55);
        org.apache.commons.math.fraction.Fraction fraction61 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction62 = fraction61.negate();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction62.abs();
        org.apache.commons.math.fraction.Fraction fraction64 = fraction62.abs();
        java.util.Locale locale65 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getInstance(locale65);
        java.util.Locale locale67 = java.util.Locale.getDefault();
        boolean boolean68 = numberFormat66.equals((java.lang.Object) locale67);
        boolean boolean69 = fraction64.equals((java.lang.Object) locale67);
        boolean boolean70 = parsePosition55.equals((java.lang.Object) locale67);
        java.lang.String str71 = locale20.getDisplayScript(locale67);
        java.lang.String str72 = locale17.getDisplayName(locale67);
        java.lang.String str73 = locale16.getDisplayVariant(locale67);
        java.lang.String str74 = locale10.getDisplayVariant(locale16);
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getPercentInstance(locale10);
        java.util.Currency currency76 = numberFormat75.getCurrency();
        numberFormat1.setCurrency(currency76);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Chinese" + "'", str8, "Chinese");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh-TW" + "'", str9, "zh-TW");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zho" + "'", str12, "zho");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Taiwan" + "'", str18, "Taiwan");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinese" + "'", str19, "Chinese");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "kor" + "'", str23, "kor");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "und" + "'", str25, "und");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(field40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str42, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Chinese (Taiwan)" + "'", str46, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNull(fraction56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(number58);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(locale67);
// flaky:         org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Chinese (Taiwan)" + "'", str72, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(currency76);
        org.junit.Assert.assertEquals(currency76.toString(), "TWD");
    }

    @Test
    public void test09439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09439");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale2 = java.util.Locale.CHINA;
        boolean boolean3 = field0.equals((java.lang.Object) locale2);
        java.lang.String str4 = locale2.getCountry();
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale5.getDisplayScript(locale7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.lang.String str10 = locale2.getDisplayVariant(locale5);
        java.lang.String str12 = locale2.getExtension('a');
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale2);
        java.util.Locale locale17 = new java.util.Locale("English", "-119 / 120", "");
        java.lang.String str18 = locale2.getDisplayName(locale17);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale2);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CN" + "'", str4, "CN");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals(locale17.toString(), "english_-119 / 120");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinese (China)" + "'", str18, "Chinese (China)");
        org.junit.Assert.assertNotNull(numberFormat19);
    }

    @Test
    public void test09440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09440");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getInstance(locale30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = new org.apache.commons.math.fraction.FractionFormat(numberFormat31, numberFormat33);
        numberFormat33.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field38 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition39 = new java.text.FieldPosition((java.text.Format.Field) field38);
        java.lang.String str40 = fieldPosition39.toString();
        java.util.Locale locale41 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.lang.String str43 = locale42.getDisplayScript();
        java.lang.String str44 = locale41.getDisplayName(locale42);
        boolean boolean45 = fieldPosition39.equals((java.lang.Object) locale42);
        fieldPosition39.setEndIndex((int) '#');
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getCurrencyInstance(locale48);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        java.text.ParsePosition parsePosition53 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction54 = properFractionFormat50.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition53);
        boolean boolean55 = fieldPosition39.equals((java.lang.Object) parsePosition53);
        java.lang.Number number56 = numberFormat33.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition53);
        org.apache.commons.math.fraction.Fraction fraction59 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.negate();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.abs();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction60.abs();
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getInstance(locale63);
        java.util.Locale locale65 = java.util.Locale.getDefault();
        boolean boolean66 = numberFormat64.equals((java.lang.Object) locale65);
        boolean boolean67 = fraction62.equals((java.lang.Object) locale65);
        boolean boolean68 = parsePosition53.equals((java.lang.Object) locale65);
        org.apache.commons.math.fraction.Fraction fraction69 = properFractionFormat28.parse("zh-CN", parsePosition53);
        parsePosition53.setErrorIndex(0);
        int int72 = parsePosition53.getIndex();
        int int73 = parsePosition53.getIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(field38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str40, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Chinese (Taiwan)" + "'", str44, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNull(fraction54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(number56);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(locale65);
// flaky:         org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(fraction69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test09441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09441");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(category0, locale9);
        java.lang.String str13 = locale9.getScript();
        java.lang.String str14 = locale9.getLanguage();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale9);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getNumberInstance(locale9);
        numberFormat16.setGroupingUsed(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16);
        java.text.NumberFormat.Field field20 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition22 = new java.text.FieldPosition((java.text.Format.Field) field20, (int) '#');
        java.text.Format.Field field23 = fieldPosition22.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction29.multiply(fraction33);
        org.apache.commons.math.fraction.Fraction fraction35 = fraction26.add(fraction33);
        boolean boolean36 = field23.equals((java.lang.Object) fraction26);
        int int37 = fraction26.intValue();
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction26.divide(fraction38);
        org.apache.commons.math.fraction.Fraction fraction43 = new org.apache.commons.math.fraction.Fraction(60, (int) 'a');
        org.apache.commons.math.fraction.Fraction fraction44 = fraction40.divide(fraction43);
        java.lang.StringBuffer stringBuffer45 = null;
        java.text.NumberFormat.Field field46 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition47 = new java.text.FieldPosition((java.text.Format.Field) field46);
        int int48 = fieldPosition47.getEndIndex();
        int int49 = fieldPosition47.getField();
        int int50 = fieldPosition47.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer51 = fractionFormat19.format(fraction40, stringBuffer45, fieldPosition47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str11, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en" + "'", str14, "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(field20);
        org.junit.Assert.assertNotNull(field23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(field46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test09442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09442");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction6 = properFractionFormat2.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        boolean boolean12 = numberFormat11.isGroupingUsed();
        properFractionFormat9.setWholeFormat(numberFormat11);
        java.text.NumberFormat numberFormat14 = properFractionFormat9.getWholeFormat();
        properFractionFormat2.setWholeFormat(numberFormat14);
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        numberFormat20.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str24 = numberFormat20.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20);
        java.text.NumberFormat numberFormat26 = fractionFormat25.getNumeratorFormat();
        java.lang.String str28 = numberFormat26.format(1.0d);
        properFractionFormat2.setWholeFormat(numberFormat26);
        java.text.NumberFormat numberFormat30 = properFractionFormat2.getWholeFormat();
        java.lang.Object obj31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator32 = numberFormat30.formatToCharacterIterator(obj31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: formatToCharacterIterator must be passed non-null object");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNull(fraction6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0%" + "'", str24, "0%");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "100%" + "'", str28, "100%");
        org.junit.Assert.assertNotNull(numberFormat30);
    }

    @Test
    public void test09443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09443");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str8 = numberFormat4.format((double) 0.0f);
        int int9 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale10);
        java.util.Currency currency13 = numberFormat12.getCurrency();
        numberFormat12.setMinimumIntegerDigits(1);
        java.text.NumberFormat numberFormat16 = null;
        java.util.Locale locale20 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        numberFormat21.setMinimumIntegerDigits((int) (short) -1);
        boolean boolean24 = numberFormat21.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16, numberFormat21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat12, numberFormat16);
        java.lang.String str28 = numberFormat12.format((double) (short) 2);
        boolean boolean29 = numberFormat12.isParseIntegerOnly();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0%" + "'", str8, "0%");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "TWD");
        org.junit.Assert.assertEquals(locale20.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2" + "'", str28, "2");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test09444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09444");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.text.NumberFormat numberFormat41 = properFractionFormat40.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction43 = properFractionFormat40.parse("6,000");
        java.text.NumberFormat numberFormat44 = properFractionFormat40.getWholeFormat();
        java.util.Locale locale48 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getNumberInstance(locale48);
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getCurrencyInstance(locale48);
        properFractionFormat40.setNumeratorFormat(numberFormat50);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance(locale53);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance(locale56);
        boolean boolean58 = numberFormat57.isGroupingUsed();
        properFractionFormat55.setWholeFormat(numberFormat57);
        java.text.NumberFormat numberFormat60 = properFractionFormat55.getDenominatorFormat();
        java.text.NumberFormat numberFormat61 = properFractionFormat55.getWholeFormat();
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getCurrencyInstance(locale63);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64);
        java.text.ParsePosition parsePosition68 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction69 = properFractionFormat65.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition68);
        int int70 = parsePosition68.getIndex();
        org.apache.commons.math.fraction.Fraction fraction71 = properFractionFormat55.parse("it", parsePosition68);
        int int72 = parsePosition68.getErrorIndex();
        java.lang.String str73 = parsePosition68.toString();
        parsePosition68.setErrorIndex((int) (byte) -21);
        org.apache.commons.math.fraction.Fraction fraction76 = properFractionFormat40.parse("german", parsePosition68);
        parsePosition68.setIndex((-3200));
        parsePosition68.setErrorIndex((-13));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Korean" + "'", str29, "Korean");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals(locale48.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNull(fraction69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNull(fraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str73, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(fraction76);
    }

    @Test
    public void test09445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09445");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str3 = locale0.getISO3Country();
        java.lang.String str4 = locale0.getDisplayScript();
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayName(locale5);
        java.util.Locale locale9 = new java.util.Locale("en_CA");
        java.util.Locale locale11 = new java.util.Locale("3,500.0000000000000000000000000000000000000000000000000000%");
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getIntegerInstance(locale11);
        java.lang.String str13 = locale9.getDisplayVariant(locale11);
        java.lang.String str14 = locale5.getDisplayCountry(locale9);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale16.getISO3Language();
        java.lang.String str19 = locale16.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale16);
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale21);
        java.util.Locale locale23 = locale21.stripExtensions();
        boolean boolean24 = locale23.hasExtensions();
        java.lang.String str25 = locale23.getDisplayVariant();
        java.lang.String str26 = locale23.getDisplayVariant();
        java.lang.String str27 = locale16.getDisplayName(locale23);
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getCurrencyInstance(locale28);
        java.lang.String str30 = locale28.getISO3Language();
        java.lang.String str31 = locale28.getDisplayName();
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        long long42 = fraction40.longValue();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction36.multiply(fraction40);
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.negate();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.abs();
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.negate();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.abs();
        long long54 = fraction52.longValue();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction48.multiply(fraction52);
        org.apache.commons.math.fraction.Fraction fraction56 = fraction40.subtract(fraction55);
        org.apache.commons.math.fraction.Fraction fraction59 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.negate();
        double double61 = fraction59.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction65 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction66 = fraction59.multiply(fraction65);
        boolean boolean67 = fraction56.equals((java.lang.Object) fraction59);
        java.util.Locale locale68 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str69 = locale68.getDisplayLanguage();
        java.lang.String str70 = locale68.toLanguageTag();
        java.util.Locale locale71 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleAttributes();
        java.lang.String str73 = locale71.getISO3Language();
        java.lang.String str74 = locale68.getDisplayScript(locale71);
        java.util.Locale locale75 = java.util.Locale.ITALIAN;
        java.lang.String str76 = locale68.getDisplayCountry(locale75);
        java.text.NumberFormat numberFormat77 = java.text.NumberFormat.getPercentInstance(locale68);
        boolean boolean78 = fraction59.equals((java.lang.Object) locale68);
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale68);
        org.apache.commons.math.fraction.FractionFormat fractionFormat80 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale68);
        java.lang.String str81 = locale28.getDisplayName(locale68);
        java.lang.String str82 = locale23.getDisplayVariant(locale28);
        java.lang.String str83 = locale23.getCountry();
        java.lang.String str84 = locale23.getDisplayScript();
        java.lang.String str85 = locale9.getDisplayCountry(locale23);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "TWN" + "'", str3, "TWN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh-TW" + "'", str6, "zh-TW");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str7, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals(locale9.toString(), "en_ca");
        org.junit.Assert.assertEquals(locale11.toString(), "3,500.0000000000000000000000000000000000000000000000000000%");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Taiwan" + "'", str14, "Taiwan");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zho" + "'", str18, "zho");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zho" + "'", str19, "zho");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str27, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "eng" + "'", str30, "eng");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\uc601\uc5b4" + "'", str31, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-0.008333333333333333d) + "'", double61 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str69, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "zh-TW" + "'", str70, "zh-TW");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "zho" + "'", str73, "zho");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Taiwan" + "'", str76, "Taiwan");
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(fractionFormat79);
        org.junit.Assert.assertNotNull(fractionFormat80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u82f1\u6587" + "'", str81, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "CN" + "'", str83, "CN");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test09446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09446");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        numberFormat2.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj11 = numberFormat2.parseObject("Japan", parsePosition10);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException15 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str16 = fractionConversionException15.getPattern();
        java.lang.Throwable[] throwableArray17 = fractionConversionException15.getSuppressed();
        java.lang.Object[] objArray18 = fractionConversionException15.getArguments();
        boolean boolean19 = parsePosition10.equals((java.lang.Object) objArray18);
        int int20 = parsePosition10.getIndex();
        int int21 = parsePosition10.getIndex();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        boolean boolean27 = numberFormat26.isGroupingUsed();
        properFractionFormat24.setWholeFormat(numberFormat26);
        java.text.NumberFormat numberFormat29 = properFractionFormat24.getWholeFormat();
        java.util.Currency currency30 = numberFormat29.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat29);
        boolean boolean32 = parsePosition10.equals((java.lang.Object) numberFormat29);
        int int33 = numberFormat29.getMaximumIntegerDigits();
        java.lang.StringBuffer stringBuffer35 = null;
        java.text.FieldPosition fieldPosition37 = new java.text.FieldPosition(1);
        java.text.NumberFormat.Field field38 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition39 = new java.text.FieldPosition((java.text.Format.Field) field38);
        java.text.FieldPosition fieldPosition41 = new java.text.FieldPosition((java.text.Format.Field) field38, 1);
        int int42 = fieldPosition41.getEndIndex();
        boolean boolean43 = fieldPosition37.equals((java.lang.Object) fieldPosition41);
        int int44 = fieldPosition41.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer45 = numberFormat29.format((double) (short) 3, stringBuffer35, fieldPosition41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str16, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(field38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test09447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09447");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale3);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        boolean boolean6 = numberFormat4.equals((java.lang.Object) locale5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str10 = locale8.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.lang.String str12 = locale5.getDisplayVariant(locale8);
        java.lang.String str13 = locale5.getDisplayCountry();
        java.util.Locale.setDefault(locale5);
        java.lang.String str16 = locale5.getExtension('u');
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.lang.String str18 = locale5.getDisplayVariant(locale17);
        java.lang.String str19 = locale0.getDisplayCountry(locale5);
        java.lang.String str21 = locale5.getExtension('u');
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23, numberFormat25);
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj30 = numberFormat25.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition29);
        parsePosition29.setIndex(119);
        java.util.Locale.Category category33 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale34 = java.util.Locale.getDefault(category33);
        java.util.Locale locale35 = java.util.Locale.getDefault(category33);
        boolean boolean36 = parsePosition29.equals((java.lang.Object) category33);
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        java.util.Locale locale40 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale40);
        java.lang.String str42 = locale40.getDisplayCountry();
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getIntegerInstance(locale40);
        java.lang.String str44 = locale37.getDisplayCountry(locale40);
        java.util.Locale.setDefault(category33, locale40);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale40);
        java.lang.String str47 = locale5.getDisplayName(locale40);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.lang.String str49 = locale48.getDisplayScript();
        java.lang.String str50 = locale48.getScript();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale51);
        java.util.Locale locale56 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str57 = locale51.getDisplayScript(locale56);
        java.util.Set<java.lang.String> strSet58 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.Category category59 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale60 = java.util.Locale.getDefault(category59);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale61);
        java.util.Locale.setDefault(category59, locale61);
        java.util.Locale locale64 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category59, locale64);
        java.lang.String str66 = locale64.getISO3Language();
        java.util.Locale locale69 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getIntegerInstance(locale69);
        java.lang.String str71 = locale64.getDisplayScript(locale69);
        java.lang.String str72 = locale51.getDisplayLanguage(locale64);
        java.lang.String str73 = locale48.getDisplayCountry(locale51);
        java.lang.String str74 = locale48.getDisplayName();
        java.lang.String str75 = locale5.getDisplayName(locale48);
        java.lang.String str76 = locale5.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en" + "'", str2, "en");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.FORMAT + "'", category33.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale34);
// flaky:         org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "France" + "'", str44, "France");
        org.junit.Assert.assertNotNull(numberFormat46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Korean" + "'", str47, "Korean");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + category59 + "' != '" + java.util.Locale.Category.FORMAT + "'", category59.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "fra" + "'", str66, "fra");
        org.junit.Assert.assertEquals(locale69.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Korean" + "'", str75, "Korean");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test09448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09448");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction13 = properFractionFormat9.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition12);
        java.lang.Object obj14 = numberFormat1.parseObject("zh-TW", parsePosition12);
        numberFormat1.setMinimumIntegerDigits((int) (byte) 0);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        boolean boolean19 = numberFormat18.isParseIntegerOnly();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.lang.String str23 = locale20.getISO3Country();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale20);
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        int int30 = numberFormat29.getMaximumIntegerDigits();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        boolean boolean33 = numberFormat32.isGroupingUsed();
        java.util.Currency currency34 = numberFormat32.getCurrency();
        numberFormat29.setCurrency(currency34);
        java.util.Currency currency36 = numberFormat29.getCurrency();
        int int37 = numberFormat29.getMaximumFractionDigits();
        java.lang.Object obj38 = numberFormat29.clone();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        numberFormat40.setMaximumFractionDigits(100);
        numberFormat40.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str47 = numberFormat40.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat29, numberFormat40);
        numberFormat40.setMinimumIntegerDigits(600);
        numberFormat40.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat18, numberFormat40);
        numberFormat18.setParseIntegerOnly(true);
        java.lang.String str57 = numberFormat18.format((double) 14400);
        int int58 = numberFormat18.getMinimumFractionDigits();
        java.lang.String str60 = numberFormat18.format((double) (-1.984127E-4f));
        java.lang.String str62 = numberFormat18.format(600L);
        int int63 = numberFormat18.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNull(fraction13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100%" + "'", str47, "100%");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "14,400" + "'", str57, "14,400");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-0" + "'", str60, "-0");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "600" + "'", str62, "600");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test09449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09449");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleKeys();
        boolean boolean10 = locale7.hasExtensions();
        java.lang.String str11 = locale0.getDisplayVariant(locale7);
        java.lang.String str12 = locale0.getLanguage();
        java.util.Locale.setDefault(locale0);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale0);
        numberFormat14.setMinimumFractionDigits((int) (byte) -2);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = numberFormat18.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj22 = numberFormat18.clone();
        numberFormat18.setMaximumFractionDigits(2147483647);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getInstance(locale26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27, numberFormat29);
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj34 = numberFormat29.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition33);
        java.lang.String str35 = parsePosition33.toString();
        java.lang.Number number36 = numberFormat18.parse("\ud55c\uad6d\uc5b4", parsePosition33);
        java.lang.Object obj37 = numberFormat18.clone();
        numberFormat18.setMaximumFractionDigits((int) (short) 1);
        java.math.RoundingMode roundingMode40 = numberFormat18.getRoundingMode();
        numberFormat14.setRoundingMode(roundingMode40);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str35, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + roundingMode40 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode40.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test09450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09450");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.lang.String str1 = field0.toString();
        java.lang.String str2 = field0.toString();
        java.util.Locale locale4 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.lang.String str7 = fractionFormat5.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat8 = fractionFormat5.getNumeratorFormat();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.lang.String str15 = locale9.getDisplayName(locale12);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale16.getDisplayScript();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale18.getISO3Language();
        java.lang.String str20 = locale16.getDisplayScript(locale18);
        java.lang.String str21 = locale9.getDisplayLanguage(locale18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getNumberInstance(locale9);
        fractionFormat5.setNumeratorFormat(numberFormat22);
        numberFormat22.setMinimumIntegerDigits(2);
        boolean boolean26 = field0.equals((java.lang.Object) numberFormat22);
        java.text.FieldPosition fieldPosition27 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int28 = fieldPosition27.getBeginIndex();
        fieldPosition27.setBeginIndex((int) (byte) 97);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str1, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str2, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100 0 / 1" + "'", str7, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test09451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09451");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.util.Locale locale5 = locale3.stripExtensions();
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        boolean boolean9 = locale6.hasExtensions();
        java.lang.String str10 = locale3.getDisplayScript(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=1,errorIndex=3]");
        java.lang.String str14 = locale13.getDisplayScript();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getNumberInstance(locale13);
        java.lang.String str16 = locale6.getDisplayVariant(locale13);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test09452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09452");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Language();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale4);
        java.util.Currency currency7 = numberFormat6.getCurrency();
        numberFormat6.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat6);
        int int12 = numberFormat3.getMinimumIntegerDigits();
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale14.getDisplayScript();
        java.lang.String str16 = locale13.getDisplayCountry(locale14);
        java.util.Set<java.lang.String> strSet17 = locale14.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        boolean boolean19 = locale14.hasExtensions();
        java.lang.String str20 = locale14.getDisplayLanguage();
        java.lang.String str21 = locale14.getDisplayScript();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale14);
        java.lang.Object obj23 = numberFormat22.clone();
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayScript();
        java.lang.String str27 = locale24.getDisplayCountry(locale25);
        java.util.Set<java.lang.String> strSet28 = locale25.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getIntegerInstance(locale25);
        int int30 = numberFormat29.getMaximumIntegerDigits();
        int int31 = numberFormat29.getMaximumFractionDigits();
        int int32 = numberFormat29.getMaximumIntegerDigits();
        numberFormat29.setMinimumIntegerDigits((int) (short) 1);
        numberFormat29.setMinimumFractionDigits(0);
        numberFormat29.setMaximumFractionDigits((int) (byte) 60);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat40 = properFractionFormat39.getWholeFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Japan" + "'", str16, "Japan");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Japan" + "'", str27, "Japan");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(numberFormat40);
    }

    @Test
    public void test09453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09453");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        numberFormat4.setMinimumFractionDigits(0);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayScript();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getISO3Language();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        java.lang.String str13 = locale8.toLanguageTag();
        java.util.Set<java.lang.String> strSet14 = locale8.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale8);
        java.lang.Object obj16 = numberFormat15.clone();
        numberFormat15.setMaximumFractionDigits((int) ' ');
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance(locale20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21, numberFormat23);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj28 = numberFormat23.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition27);
        java.lang.String str29 = parsePosition27.toString();
        java.lang.Object obj30 = numberFormat15.parseObject("hi!", parsePosition27);
        java.lang.Number number31 = numberFormat4.parse("-\24460.00", parsePosition27);
        int int32 = parsePosition27.getErrorIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "kor" + "'", str11, "kor");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "und" + "'", str13, "und");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str29, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(number31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test09454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09454");
        java.util.Locale locale1 = new java.util.Locale("Japan");
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        boolean boolean5 = numberFormat3.equals((java.lang.Object) locale4);
        java.util.Locale locale7 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.lang.String str9 = locale7.getDisplayCountry();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.lang.String str11 = locale4.getDisplayVariant(locale7);
        java.lang.String str12 = locale1.getDisplayScript(locale4);
        java.util.Set<java.lang.Character> charSet13 = locale4.getExtensionKeys();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14);
        boolean boolean16 = numberFormat14.isParseIntegerOnly();
        org.junit.Assert.assertEquals(locale1.toString(), "japan");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09455");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.lang.String str3 = locale0.getLanguage();
        java.lang.String str4 = locale0.getScript();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale0);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.text.NumberFormat.Field field7 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition8 = new java.text.FieldPosition((java.text.Format.Field) field7);
        java.util.Locale locale9 = java.util.Locale.CHINA;
        boolean boolean10 = field7.equals((java.lang.Object) locale9);
        java.lang.String str11 = locale9.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.lang.String str15 = locale12.getDisplayCountry(locale13);
        java.util.Set<java.lang.String> strSet16 = locale13.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.lang.String str18 = locale9.getDisplayLanguage(locale13);
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str23 = fractionFormat21.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat24 = fractionFormat21.getNumeratorFormat();
        java.text.NumberFormat numberFormat25 = fractionFormat21.getNumeratorFormat();
        java.util.Locale locale26 = java.util.Locale.ITALY;
        boolean boolean27 = numberFormat25.equals((java.lang.Object) locale26);
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder28.setScript("");
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.lang.String str33 = locale31.toLanguageTag();
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.lang.String str36 = locale34.getISO3Language();
        java.lang.String str37 = locale31.getDisplayScript(locale34);
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.lang.String str39 = locale31.getDisplayCountry(locale38);
        java.util.Locale.Builder builder40 = builder28.setLocale(locale38);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getInstance(locale38);
        java.lang.String str42 = locale26.getDisplayVariant(locale38);
        java.lang.String str43 = locale9.getDisplayScript(locale26);
        java.lang.String str44 = locale0.getDisplayName(locale9);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ko" + "'", str3, "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(field7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Japan" + "'", str15, "Japan");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinese" + "'", str18, "Chinese");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "100 0 / 1" + "'", str23, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese" + "'", str32, "Chinese");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "zh-TW" + "'", str33, "zh-TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "zho" + "'", str36, "zho");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Taiwan" + "'", str39, "Taiwan");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u671d\u9c9c\u6587" + "'", str44, "\u671d\u9c9c\u6587");
    }

    @Test
    public void test09456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09456");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        boolean boolean47 = numberFormat45.equals((java.lang.Object) strArray46);
        java.lang.String str49 = numberFormat45.format((double) (byte) -1);
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale50.getDisplayCountry(locale51);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getNumberInstance(locale50);
        numberFormat54.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36, numberFormat45, numberFormat54);
        int int58 = numberFormat45.getMaximumFractionDigits();
        int int59 = numberFormat45.getMinimumFractionDigits();
        boolean boolean60 = numberFormat45.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        java.util.Locale locale63 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale63);
        java.lang.String str66 = fractionFormat64.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat67 = fractionFormat64.getNumeratorFormat();
        numberFormat67.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency70 = numberFormat67.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat71 = new org.apache.commons.math.fraction.FractionFormat(numberFormat67);
        java.text.NumberFormat numberFormat72 = fractionFormat71.getNumeratorFormat();
        java.util.Locale locale73 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getInstance(locale73);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getPercentInstance(locale75);
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = new org.apache.commons.math.fraction.FractionFormat(numberFormat74, numberFormat76);
        int int78 = numberFormat74.getMaximumIntegerDigits();
        numberFormat74.setGroupingUsed(true);
        java.lang.String str82 = numberFormat74.format((long) 119);
        fractionFormat71.setNumeratorFormat(numberFormat74);
        java.util.Currency currency84 = numberFormat74.getCurrency();
        properFractionFormat61.setNumeratorFormat(numberFormat74);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-100%" + "'", str49, "-100%");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Japan" + "'", str53, "Japan");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals(locale63.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "100 0 / 1" + "'", str66, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(currency70);
        org.junit.Assert.assertEquals(currency70.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "119" + "'", str82, "119");
        org.junit.Assert.assertNotNull(currency84);
        org.junit.Assert.assertEquals(currency84.toString(), "XXX");
    }

    @Test
    public void test09457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09457");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale3.toLanguageTag();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getISO3Language();
        java.lang.String str9 = locale3.getDisplayScript(locale6);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale3.getDisplayCountry(locale10);
        java.util.Locale.Builder builder12 = builder0.setLocale(locale10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale10);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction16.multiply(fraction20);
        java.lang.String str22 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction16);
        java.lang.String str23 = numberFormat13.format((java.lang.Object) fraction16);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction16.abs();
        float float25 = fraction24.floatValue();
        int int26 = fraction24.intValue();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction24.abs();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Chinese" + "'", str4, "Chinese");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Taiwan" + "'", str11, "Taiwan");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "20 / 7" + "'", str22, "20 / 7");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2,857" + "'", str23, "2,857");
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 2.857143f + "'", float25 == 2.857143f);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(fraction27);
    }

    @Test
    public void test09458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09458");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.lang.String str8 = locale0.getDisplayLanguage();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale0);
        java.lang.String str10 = locale0.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Japan" + "'", str5, "Japan");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Japan" + "'", str6, "Japan");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Japanese" + "'", str8, "Japanese");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Japanese" + "'", str10, "Japanese");
    }

    @Test
    public void test09459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09459");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.lang.String str4 = locale3.getScript();
        java.util.Locale locale8 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str9 = locale3.getDisplayScript(locale8);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getNumberInstance(locale8);
        java.util.Set<java.lang.String> strSet11 = locale8.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet12 = locale8.getExtensionKeys();
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale locale14 = java.util.Locale.PRC;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = locale8.getDisplayName(locale13);
        java.util.Locale locale17 = locale13.stripExtensions();
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale19.getDisplayScript();
        java.lang.String str21 = locale18.getDisplayCountry(locale19);
        java.util.Set<java.lang.String> strSet22 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str23 = locale17.getDisplayVariant(locale19);
        java.lang.String str25 = locale17.getExtension('a');
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getIntegerInstance(locale17);
        numberFormat26.setMinimumFractionDigits((int) (byte) 100);
        int int29 = numberFormat26.getMaximumFractionDigits();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        boolean boolean36 = numberFormat35.isGroupingUsed();
        properFractionFormat33.setWholeFormat(numberFormat35);
        java.text.NumberFormat numberFormat38 = properFractionFormat33.getWholeFormat();
        java.text.ParsePosition parsePosition41 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number42 = numberFormat38.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition41);
        parsePosition41.setErrorIndex(0);
        int int45 = parsePosition41.getErrorIndex();
        java.lang.Object obj46 = numberFormat26.parseObject("", parsePosition41);
        java.lang.Object obj47 = numberFormat1.parseObject("it-IT", parsePosition41);
        java.util.Locale locale50 = new java.util.Locale("0%");
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale50);
        java.util.Locale locale53 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getInstance(locale53);
        java.util.Currency currency56 = numberFormat55.getCurrency();
        boolean boolean57 = numberFormat55.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        java.text.ParsePosition parsePosition61 = new java.text.ParsePosition(2);
        java.lang.Object obj62 = properFractionFormat58.parseObject("java.text.ParsePosition[index=97,errorIndex=97]", parsePosition61);
        int int63 = parsePosition61.getIndex();
        java.lang.Object obj64 = fractionFormat51.parseObject("2,147,483,647 0 / 1", parsePosition61);
        parsePosition61.setIndex((int) (byte) 87);
        java.lang.Object obj67 = numberFormat1.parseObject("\u4e2d\u6587\u4e2d\u56fd)", parsePosition61);
        int int68 = numberFormat1.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(locale8.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str15, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str16, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Japan" + "'", str21, "Japan");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNull(number42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertEquals(locale50.toString(), "0%");
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(currency56);
        org.junit.Assert.assertEquals(currency56.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
    }

    @Test
    public void test09460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09460");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 1.0256411f);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.negate();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.abs();
        long long16 = fraction14.longValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction10.multiply(fraction14);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.negate();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.abs();
        long long28 = fraction26.longValue();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction22.multiply(fraction26);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction14.subtract(fraction29);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction29.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction4.subtract(fraction33);
        float float35 = fraction33.floatValue();
        org.apache.commons.math.fraction.Fraction fraction37 = new org.apache.commons.math.fraction.Fraction((double) 60);
        org.apache.commons.math.fraction.Fraction fraction39 = new org.apache.commons.math.fraction.Fraction((double) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction40 = fraction37.add(fraction39);
        boolean boolean41 = fraction33.equals((java.lang.Object) fraction37);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction1.subtract(fraction37);
        java.lang.String str43 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction1);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + (-14400.0f) + "'", float35 == (-14400.0f));
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "40 / 39" + "'", str43, "40 / 39");
    }

    @Test
    public void test09461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09461");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(1);
        int int2 = fieldPosition1.getField();
        fieldPosition1.setEndIndex((int) '4');
        fieldPosition1.setBeginIndex(0);
        java.lang.String str7 = fieldPosition1.toString();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str11 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction10);
        float float12 = fraction10.floatValue();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction10.negate();
        float float14 = fraction13.floatValue();
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str16 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction15);
        long long17 = fraction15.longValue();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction15.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction21.multiply(fraction25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        boolean boolean29 = numberFormat28.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        boolean boolean31 = fraction25.equals((java.lang.Object) properFractionFormat30);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction15.subtract(fraction25);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction13.add(fraction15);
        boolean boolean34 = fieldPosition1.equals((java.lang.Object) fraction15);
        fieldPosition1.setEndIndex((int) (short) 599);
        java.text.Format.Field field37 = fieldPosition1.getFieldAttribute();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.text.FieldPosition[field=1,attribute=null,beginIndex=0,endIndex=52]" + "'", str7, "java.text.FieldPosition[field=1,attribute=null,beginIndex=0,endIndex=52]");
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1 / 1" + "'", str11, "1 / 1");
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-1.0f) + "'", float14 == (-1.0f));
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1 / 1" + "'", str16, "1 / 1");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(field37);
    }

    @Test
    public void test09462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09462");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj8 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition7);
        parsePosition7.setIndex(119);
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale13 = java.util.Locale.getDefault(category11);
        boolean boolean14 = parsePosition7.equals((java.lang.Object) category11);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str20 = locale18.getDisplayCountry();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance(locale18);
        java.lang.String str22 = locale15.getDisplayCountry(locale18);
        java.util.Locale.setDefault(category11, locale18);
        java.util.Locale locale24 = java.util.Locale.getDefault(category11);
        java.util.Locale locale25 = java.util.Locale.getDefault(category11);
        java.lang.String str26 = locale25.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "France" + "'", str22, "France");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test09463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09463");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getEndIndex();
        int int3 = fieldPosition1.getField();
        fieldPosition1.setEndIndex(0);
        int int6 = fieldPosition1.getField();
        java.text.Format.Field field7 = fieldPosition1.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.abs();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.getDefault();
        boolean boolean17 = numberFormat15.equals((java.lang.Object) locale16);
        boolean boolean18 = fraction13.equals((java.lang.Object) locale16);
        org.apache.commons.math.fraction.Fraction fraction19 = fraction13.abs();
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale20);
        boolean boolean22 = fraction19.equals((java.lang.Object) locale20);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale20);
        java.lang.String str24 = locale20.getVariant();
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale locale26 = java.util.Locale.PRC;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        java.util.Set<java.lang.Character> charSet28 = locale25.getExtensionKeys();
        java.util.Locale locale31 = new java.util.Locale("Overflow trying to convert {0} to fraction ({1}/{2})", "anglais");
        java.lang.String str32 = locale25.getDisplayName(locale31);
        java.lang.String str33 = locale20.getDisplayName(locale31);
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str35 = locale34.getDisplayLanguage();
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str37 = locale34.getDisplayCountry(locale36);
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getInstance(locale38);
        java.lang.String str41 = locale38.getDisplayScript();
        java.lang.String str42 = locale34.getDisplayVariant(locale38);
        java.lang.String str43 = locale20.getDisplayLanguage(locale38);
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale20);
        boolean boolean45 = field7.equals((java.lang.Object) numberFormat44);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(field7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str27, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertEquals(locale31.toString(), "overflow trying to convert {0} to fraction ({1}/{2})_ANGLAIS");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "English (Canada)" + "'", str32, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Chinese (China)" + "'", str33, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Chinese" + "'", str35, "Chinese");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Taiwan" + "'", str37, "Taiwan");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u6587" + "'", str43, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test09464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09464");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str3 = locale0.getDisplayCountry(locale2);
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Locale.setDefault(category4, locale6);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category4, locale9);
        java.lang.String str11 = locale9.getISO3Language();
        java.lang.String str12 = locale0.getDisplayLanguage(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        boolean boolean18 = numberFormat17.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        boolean boolean20 = numberFormat17.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        fractionFormat13.setDenominatorFormat(numberFormat17);
        java.util.Currency currency23 = numberFormat17.getCurrency();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getCurrencyInstance();
        int int25 = numberFormat24.getMaximumFractionDigits();
        java.util.Locale locale29 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        numberFormat30.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str34 = numberFormat30.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = new org.apache.commons.math.fraction.FractionFormat(numberFormat30);
        java.text.NumberFormat numberFormat36 = fractionFormat35.getNumeratorFormat();
        java.lang.String str38 = numberFormat36.format(1.0d);
        java.util.Locale locale39 = java.util.Locale.getDefault();
        java.util.Locale locale40 = locale39.stripExtensions();
        java.util.Locale locale42 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale42);
        java.lang.String str44 = locale42.getDisplayCountry();
        java.lang.String str45 = locale39.getDisplayName(locale42);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.lang.String str47 = locale46.getDisplayScript();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale48.getISO3Language();
        java.lang.String str50 = locale46.getDisplayScript(locale48);
        java.lang.String str51 = locale39.getDisplayLanguage(locale48);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getNumberInstance(locale39);
        java.util.Currency currency53 = numberFormat52.getCurrency();
        numberFormat36.setCurrency(currency53);
        numberFormat24.setCurrency(currency53);
        numberFormat17.setCurrency(currency53);
        java.lang.Class<?> wildcardClass57 = currency53.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Taiwan" + "'", str3, "Taiwan");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fra" + "'", str11, "fra");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "chinois" + "'", str12, "chinois");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertEquals(locale29.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0%" + "'", str34, "0%");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "100%" + "'", str38, "100%");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals(locale42.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "kor" + "'", str49, "kor");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "XXX");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test09465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09465");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Locale.setDefault(category4, locale6);
        java.util.Locale locale9 = java.util.Locale.getDefault(category4);
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale10.getDisplayCountry(locale11);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getNumberInstance(locale10);
        java.lang.String str15 = locale9.getDisplayCountry(locale10);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getNumberInstance(locale9);
        java.lang.String str17 = locale9.getISO3Country();
        java.util.Locale.Builder builder18 = builder0.setLocale(locale9);
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=35,errorIndex=600]");
        java.lang.String str21 = locale20.toLanguageTag();
        java.util.Locale.Builder builder22 = builder18.setLocale(locale20);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder22.addUnicodeLocaleAttribute("TW");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: TW [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Japan" + "'", str13, "Japan");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "und" + "'", str21, "und");
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test09466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09466");
        java.util.Locale locale3 = new java.util.Locale("Japanese (Japan)", "java.text.NumberFormat$Field(currency)", "\uc911\uad6d\uc5b4");
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str5 = locale3.getScript();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        numberFormat7.setMaximumFractionDigits(100);
        java.lang.String str12 = numberFormat7.format((long) 100);
        int int13 = numberFormat7.getMaximumFractionDigits();
        numberFormat7.setMinimumFractionDigits((int) (short) 0);
        int int16 = numberFormat7.getMaximumFractionDigits();
        boolean boolean17 = numberFormat7.isGroupingUsed();
        numberFormat7.setMaximumFractionDigits((int) (short) 100);
        int int20 = numberFormat7.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode21 = numberFormat7.getRoundingMode();
        boolean boolean22 = locale3.equals((java.lang.Object) roundingMode21);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "10,000%" + "'", str12, "10,000%");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode21 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode21.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09467");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj8 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition7);
        java.util.Locale locale11 = new java.util.Locale("1%", "\ub300\ub9cc");
        java.lang.String str12 = locale11.getDisplayScript();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale11);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance();
        numberFormat14.setMaximumIntegerDigits(2147483647);
        numberFormat14.setMinimumIntegerDigits(10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3, numberFormat13, numberFormat14);
        java.lang.StringBuffer stringBuffer21 = null;
        java.text.NumberFormat.Field field22 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field22);
        int int24 = fieldPosition23.getEndIndex();
        fieldPosition23.setBeginIndex((int) (byte) 100);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale27.getISO3Language();
        java.lang.String str29 = locale27.getDisplayCountry();
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        java.lang.String str32 = locale30.getISO3Language();
        java.lang.String str33 = locale27.getDisplayScript(locale30);
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale27);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getCurrencyInstance(locale27);
        boolean boolean36 = fieldPosition23.equals((java.lang.Object) numberFormat35);
        int int37 = fieldPosition23.getField();
        java.lang.String str38 = fieldPosition23.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer39 = numberFormat3.format(3L, stringBuffer21, fieldPosition23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNull(obj8);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "\ub300\ub9cc");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "kor" + "'", str28, "kor");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zho" + "'", str32, "zho");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]" + "'", str38, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]");
    }

    @Test
    public void test09468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09468");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction8.add(fraction14);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction3.multiply(fraction14);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ONE;
        long long20 = fraction19.longValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction3.multiply(fraction19);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction2.subtract(fraction21);
        java.lang.String str23 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction21);
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.negate();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.abs();
        long long34 = fraction32.longValue();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction28.multiply(fraction32);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction28.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.negate();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.abs();
        long long47 = fraction45.longValue();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction41.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction28.multiply(fraction48);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction21.add(fraction49);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction49.abs();
        long long52 = fraction51.longValue();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction51.abs();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1 / 1" + "'", str4, "1 / 1");
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1 / 1" + "'", str23, "1 / 1");
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(fraction53);
    }

    @Test
    public void test09469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09469");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((int) (short) 0);
        int int10 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        java.lang.String str19 = numberFormat17.format((double) 10L);
        java.util.Currency currency20 = numberFormat17.getCurrency();
        numberFormat1.setCurrency(currency20);
        java.lang.String str23 = numberFormat1.format((long) 97);
        java.lang.String str25 = numberFormat1.format(0L);
        int int26 = numberFormat1.getMaximumIntegerDigits();
        int int27 = numberFormat1.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1,000%" + "'", str19, "1,000%");
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0%" + "'", str23, "0%");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0%" + "'", str25, "0%");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
    }

    @Test
    public void test09470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09470");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.lang.String str12 = locale11.getISO3Country();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale11);
        java.util.Locale.setDefault(category0, locale11);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getNumberInstance(locale11);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale11);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18, numberFormat20);
        java.util.Locale locale22 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getInstance(locale24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25, numberFormat27);
        boolean boolean29 = numberFormat27.isGroupingUsed();
        boolean boolean30 = numberFormat27.isGroupingUsed();
        fractionFormat23.setNumeratorFormat(numberFormat27);
        java.lang.Object obj32 = numberFormat27.clone();
        java.lang.Object obj33 = numberFormat27.clone();
        boolean boolean34 = numberFormat27.isParseIntegerOnly();
        boolean boolean35 = numberFormat27.isGroupingUsed();
        java.lang.Object obj36 = null;
        boolean boolean37 = numberFormat27.equals(obj36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18, numberFormat27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16, numberFormat18);
        numberFormat18.setParseIntegerOnly(false);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test09471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09471");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat6 = fractionFormat2.getNumeratorFormat();
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.util.Locale locale8 = locale7.stripExtensions();
        java.util.Locale locale10 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str12 = locale10.getDisplayCountry();
        java.lang.String str13 = locale7.getDisplayName(locale10);
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale14.getDisplayScript();
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale16.getISO3Language();
        java.lang.String str18 = locale14.getDisplayScript(locale16);
        java.lang.String str19 = locale7.getDisplayLanguage(locale16);
        java.lang.String str20 = locale7.toLanguageTag();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance(locale7);
        int int22 = numberFormat21.getMinimumFractionDigits();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        java.util.Currency currency37 = numberFormat36.getCurrency();
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = new org.apache.commons.math.fraction.FractionFormat(numberFormat42);
        numberFormat42.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode47 = numberFormat42.getRoundingMode();
        numberFormat36.setRoundingMode(roundingMode47);
        java.math.RoundingMode roundingMode49 = numberFormat36.getRoundingMode();
        numberFormat36.setMaximumFractionDigits(0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat21, numberFormat36);
        java.text.ParsePosition parsePosition55 = new java.text.ParsePosition(119);
        int int56 = parsePosition55.getIndex();
        java.lang.Object obj57 = null;
        boolean boolean58 = parsePosition55.equals(obj57);
        java.lang.Number number59 = numberFormat36.parse("java.text.ParsePosition[index=0,errorIndex=3]", parsePosition55);
        int int60 = numberFormat36.getMinimumIntegerDigits();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "und" + "'", str20, "und");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(currency37);
        org.junit.Assert.assertEquals(currency37.toString(), "XXX");
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode47 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode47.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + roundingMode49 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode49.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 119 + "'", int56 == 119);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(number59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test09472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09472");
        java.util.Locale locale1 = new java.util.Locale("zh_tw");
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.lang.String str3 = locale2.getScript();
        java.util.Locale locale7 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str8 = locale2.getDisplayScript(locale7);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getNumberInstance(locale7);
        java.util.Set<java.lang.String> strSet10 = locale7.getUnicodeLocaleKeys();
        java.lang.String str11 = locale1.getDisplayScript(locale7);
        java.lang.String str12 = locale7.getDisplayVariant();
        java.util.Locale locale13 = locale7.stripExtensions();
        boolean boolean14 = locale7.hasExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_tw");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals(locale7.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "10,000%" + "'", str12, "10,000%");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(fractionFormat15);
    }

    @Test
    public void test09473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09473");
        java.text.NumberFormat numberFormat0 = null;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        numberFormat5.setMinimumIntegerDigits((int) (short) -1);
        boolean boolean8 = numberFormat5.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat5);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency11 = numberFormat10.getCurrency();
        java.lang.String str13 = numberFormat10.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.text.NumberFormat numberFormat15 = properFractionFormat14.getWholeFormat();
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale16);
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        numberFormat18.setMinimumIntegerDigits(1728000);
        boolean boolean21 = numberFormat18.isGroupingUsed();
        properFractionFormat14.setWholeFormat(numberFormat18);
        fractionFormat9.setDenominatorFormat(numberFormat18);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        java.lang.String[] strArray29 = java.util.Locale.getISOCountries();
        boolean boolean30 = numberFormat28.equals((java.lang.Object) strArray29);
        int int31 = numberFormat28.getMinimumIntegerDigits();
        int int32 = numberFormat28.getMinimumFractionDigits();
        fractionFormat9.setNumeratorFormat(numberFormat28);
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "100%" + "'", str13, "100%");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test09474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09474");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        double double4 = fraction2.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.abs();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayScript();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale8.getISO3Language();
        java.lang.String str10 = locale6.getDisplayScript(locale8);
        java.lang.String str11 = locale6.toLanguageTag();
        java.util.Set<java.lang.String> strSet12 = locale6.getUnicodeLocaleKeys();
        java.util.Locale locale13 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale13);
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleKeys();
        boolean boolean16 = locale13.hasExtensions();
        java.lang.String str17 = locale6.getDisplayVariant(locale13);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19, numberFormat21);
        numberFormat21.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field26 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition27 = new java.text.FieldPosition((java.text.Format.Field) field26);
        java.lang.String str28 = fieldPosition27.toString();
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = locale29.getDisplayName(locale30);
        boolean boolean33 = fieldPosition27.equals((java.lang.Object) locale30);
        fieldPosition27.setEndIndex((int) '#');
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getCurrencyInstance(locale36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.text.ParsePosition parsePosition41 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction42 = properFractionFormat38.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition41);
        boolean boolean43 = fieldPosition27.equals((java.lang.Object) parsePosition41);
        java.lang.Number number44 = numberFormat21.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition41);
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.negate();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.abs();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction48.abs();
        java.util.Locale locale51 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getInstance(locale51);
        java.util.Locale locale53 = java.util.Locale.getDefault();
        boolean boolean54 = numberFormat52.equals((java.lang.Object) locale53);
        boolean boolean55 = fraction50.equals((java.lang.Object) locale53);
        boolean boolean56 = parsePosition41.equals((java.lang.Object) locale53);
        java.lang.String str57 = locale6.getDisplayScript(locale53);
        java.lang.String str58 = locale53.getLanguage();
        boolean boolean59 = fraction2.equals((java.lang.Object) locale53);
        java.lang.String str60 = locale53.getDisplayLanguage();
        java.lang.String str61 = locale53.getISO3Language();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-0.008333333333333333d) + "'", double4 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(field26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str28, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (Taiwan)" + "'", str32, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNull(fraction42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(number44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test09475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09475");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        java.lang.String str3 = numberFormat0.format(1.0d);
        int int4 = numberFormat0.getMinimumIntegerDigits();
        numberFormat0.setMaximumIntegerDigits(2147483647);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList15);
        java.util.Locale.FilteringMode filteringMode18 = null;
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList15, filteringMode18);
        java.util.Collection<java.lang.String> strCollection20 = null;
        java.util.Locale.FilteringMode filteringMode21 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, strCollection20, filteringMode21);
        java.lang.StringBuffer stringBuffer23 = null;
        java.text.NumberFormat.Field field24 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition((java.text.Format.Field) field24);
        int int26 = fieldPosition25.getEndIndex();
        java.lang.String str27 = fieldPosition25.toString();
        int int28 = fieldPosition25.getBeginIndex();
        int int29 = fieldPosition25.getEndIndex();
        java.text.Format.Field field30 = fieldPosition25.getFieldAttribute();
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.lang.String str33 = locale32.getDisplayScript();
        java.lang.String str34 = locale31.getDisplayCountry(locale32);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getNumberInstance(locale31);
        java.util.Locale locale38 = new java.util.Locale("hi!", "org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (0/-1)");
        java.util.Locale locale39 = java.util.Locale.getDefault();
        java.util.Locale locale40 = locale39.stripExtensions();
        java.util.Locale locale42 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale42);
        java.lang.String str44 = locale42.getDisplayCountry();
        java.lang.String str45 = locale39.getDisplayName(locale42);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.lang.String str47 = locale46.getDisplayScript();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale48.getISO3Language();
        java.lang.String str50 = locale46.getDisplayScript(locale48);
        java.lang.String str51 = locale39.getDisplayLanguage(locale48);
        java.util.Locale locale54 = new java.util.Locale("hi!", "org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (0/-1)");
        java.lang.String str55 = locale48.getDisplayVariant(locale54);
        java.lang.String str56 = locale38.getDisplayName(locale54);
        java.lang.String str57 = locale31.getDisplayLanguage(locale38);
        boolean boolean58 = fieldPosition25.equals((java.lang.Object) locale38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer59 = numberFormat0.format((java.lang.Object) strCollection20, stringBuffer23, fieldPosition25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
        org.junit.Assert.assertEquals(currency1.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100%" + "'", str3, "100%");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + filteringMode21 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode21.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(field24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str27, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(field30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Japan" + "'", str34, "Japan");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals(locale38.toString(), "hi!_ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1)");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals(locale42.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "kor" + "'", str49, "kor");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals(locale54.toString(), "hi!_ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi! (ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1))" + "'", str56, "hi! (ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1))");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Japanese" + "'", str57, "Japanese");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test09476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09476");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale0.getDisplayName(locale1);
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale4.toLanguageTag();
        java.lang.String str6 = locale4.getVariant();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder7.setScript("");
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.lang.String str13 = locale10.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder9.setLocale(locale10);
        java.lang.String str15 = locale4.getDisplayVariant(locale10);
        java.lang.String str16 = locale10.getDisplayName();
        java.lang.String str17 = locale10.getDisplayName();
        java.lang.String str18 = locale1.getDisplayScript(locale10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "francese (Francia)" + "'", str3, "francese (Francia)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Chinesisch" + "'", str13, "Chinesisch");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str16, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str17, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
    }

    @Test
    public void test09477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09477");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        boolean boolean6 = numberFormat4.equals((java.lang.Object) strArray5);
        java.math.RoundingMode roundingMode7 = numberFormat4.getRoundingMode();
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        boolean boolean11 = numberFormat10.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) '4');
        org.apache.commons.math.fraction.Fraction fraction16 = properFractionFormat12.parse("0%", parsePosition15);
        parsePosition15.setErrorIndex((int) (short) 120);
        int int19 = parsePosition15.getErrorIndex();
        java.lang.Object obj20 = numberFormat4.parseObject("000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,001", parsePosition15);
        java.lang.String str21 = parsePosition15.toString();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + roundingMode7 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode7.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(fraction16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120 + "'", int19 == 120);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.text.ParsePosition[index=52,errorIndex=411]" + "'", str21, "java.text.ParsePosition[index=52,errorIndex=411]");
    }

    @Test
    public void test09478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09478");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        long long9 = fraction7.longValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction4.subtract(fraction7);
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction13.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction19 = fraction10.add(fraction17);
        java.lang.String str20 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction10);
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.lang.String str23 = locale21.getISO3Language();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale21);
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction30.multiply(fraction34);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction27.add(fraction34);
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.negate();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.abs();
        long long47 = fraction45.longValue();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction41.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.negate();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.abs();
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.negate();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.abs();
        long long59 = fraction57.longValue();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction53.multiply(fraction57);
        org.apache.commons.math.fraction.Fraction fraction61 = fraction45.subtract(fraction60);
        org.apache.commons.math.fraction.Fraction fraction62 = fraction60.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction62.abs();
        org.apache.commons.math.fraction.Fraction fraction64 = fraction36.add(fraction62);
        org.apache.commons.math.fraction.Fraction fraction65 = fraction62.abs();
        java.lang.String str66 = numberFormat24.format((java.lang.Object) fraction65);
        org.apache.commons.math.fraction.Fraction fraction67 = fraction10.subtract(fraction65);
        org.apache.commons.math.fraction.Fraction fraction68 = fraction65.abs();
        org.apache.commons.math.fraction.Fraction fraction69 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str70 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction69);
        org.apache.commons.math.fraction.Fraction fraction73 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction74 = fraction73.negate();
        org.apache.commons.math.fraction.Fraction fraction75 = fraction74.abs();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction74.abs();
        org.apache.commons.math.fraction.Fraction fraction79 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction80 = fraction79.negate();
        org.apache.commons.math.fraction.Fraction fraction81 = fraction80.abs();
        org.apache.commons.math.fraction.Fraction fraction82 = fraction80.abs();
        org.apache.commons.math.fraction.Fraction fraction83 = fraction74.add(fraction80);
        org.apache.commons.math.fraction.Fraction fraction84 = fraction69.multiply(fraction80);
        org.apache.commons.math.fraction.Fraction fraction85 = fraction80.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction86 = fraction68.divide(fraction85);
        java.lang.Class<?> wildcardClass87 = fraction85.getClass();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1 / 60" + "'", str20, "1 / 60");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zho" + "'", str23, "zho");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "14,400" + "'", str66, "14,400");
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1 / 1" + "'", str70, "1 / 1");
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test09479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09479");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.negate();
        double double7 = fraction5.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction2.multiply(fraction5);
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction(35, 2);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction12.multiply(fraction15);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        long long26 = fraction24.longValue();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction21.subtract(fraction24);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction15.subtract(fraction24);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.abs();
        long long40 = fraction38.longValue();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction34.multiply(fraction38);
        org.apache.commons.math.fraction.Fraction fraction44 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str45 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction44);
        long long46 = fraction44.longValue();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction44.abs();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction34.add(fraction44);
        int int49 = fraction44.intValue();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction28.subtract(fraction44);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction9.subtract(fraction50);
        double double52 = fraction9.doubleValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-0.008333333333333333d) + "'", double7 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 / 100" + "'", str45, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 6.944444444444444E-5d + "'", double52 == 6.944444444444444E-5d);
    }

    @Test
    public void test09480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09480");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat2.getWholeFormat();
        java.util.Locale locale12 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        int int14 = numberFormat13.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13);
        numberFormat13.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode18 = numberFormat13.getRoundingMode();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency20 = numberFormat19.getCurrency();
        numberFormat13.setCurrency(currency20);
        java.lang.Object obj22 = numberFormat13.clone();
        boolean boolean23 = numberFormat13.isParseIntegerOnly();
        properFractionFormat2.setNumeratorFormat(numberFormat13);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getCurrencyInstance();
        int int26 = numberFormat25.getMaximumFractionDigits();
        boolean boolean27 = numberFormat25.isParseIntegerOnly();
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getIntegerInstance();
        java.util.Locale locale30 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.lang.String str33 = fractionFormat31.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat34 = fractionFormat31.getNumeratorFormat();
        numberFormat34.setMaximumFractionDigits((int) (short) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25, numberFormat28, numberFormat34);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        numberFormat39.setMaximumFractionDigits(100);
        java.lang.String str44 = numberFormat39.format((long) 100);
        int int45 = numberFormat39.getMaximumFractionDigits();
        numberFormat39.setMinimumFractionDigits((int) (short) 0);
        int int48 = numberFormat39.getMaximumFractionDigits();
        java.math.RoundingMode roundingMode49 = numberFormat39.getRoundingMode();
        numberFormat39.setGroupingUsed(false);
        java.lang.Object obj52 = numberFormat39.clone();
        properFractionFormat37.setNumeratorFormat(numberFormat39);
        java.text.NumberFormat numberFormat54 = properFractionFormat37.getDenominatorFormat();
        properFractionFormat2.setNumeratorFormat(numberFormat54);
        org.apache.commons.math.fraction.Fraction fraction57 = properFractionFormat2.parse("000000000000000000000000000000000000000000000000000000000000000000000000000000001000000%");
        java.text.NumberFormat numberFormat58 = properFractionFormat2.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction61 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) ' ', (int) (byte) 88);
        java.lang.StringBuffer stringBuffer62 = null;
        java.text.NumberFormat.Field field63 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition64 = new java.text.FieldPosition((java.text.Format.Field) field63);
        java.text.FieldPosition fieldPosition66 = new java.text.FieldPosition((java.text.Format.Field) field63, 1);
        java.text.FieldPosition fieldPosition68 = new java.text.FieldPosition((java.text.Format.Field) field63, (int) (short) 100);
        java.lang.String str69 = field63.toString();
        java.text.FieldPosition fieldPosition70 = new java.text.FieldPosition((java.text.Format.Field) field63);
        java.lang.String str71 = fieldPosition70.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer72 = properFractionFormat2.format(fraction61, stringBuffer62, fieldPosition70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode18 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode18.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "100 0 / 1" + "'", str33, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "10,000%" + "'", str44, "10,000%");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertTrue("'" + roundingMode49 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode49.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(field63);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "java.text.NumberFormat$Field(grouping separator)" + "'", str69, "java.text.NumberFormat$Field(grouping separator)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=0,endIndex=0]" + "'", str71, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test09481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09481");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale3.getISO3Language();
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.getDefault(category7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.util.Locale.setDefault(category7, locale9);
        java.util.Locale locale13 = new java.util.Locale("Chinese (Taiwan)");
        java.util.Locale.setDefault(category7, locale13);
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.lang.String str17 = locale16.toLanguageTag();
        java.lang.String str18 = locale16.getVariant();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.setScript("");
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.lang.String str25 = locale22.getDisplayLanguage(locale24);
        java.util.Locale.Builder builder26 = builder21.setLocale(locale22);
        java.lang.String str27 = locale16.getDisplayVariant(locale22);
        java.lang.String str28 = locale22.getScript();
        java.util.Locale.setDefault(category15, locale22);
        java.util.Locale locale30 = java.util.Locale.getDefault(category15);
        java.util.Locale.setDefault(category7, locale30);
        java.lang.String str32 = locale3.getDisplayName(locale30);
        java.util.Set<java.lang.String> strSet33 = locale30.getUnicodeLocaleKeys();
        java.lang.String str34 = locale0.getDisplayVariant(locale30);
        java.lang.String str35 = locale30.toLanguageTag();
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str37 = locale36.getDisplayLanguage();
        java.util.Locale.setDefault(locale36);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getIntegerInstance(locale36);
        java.lang.String str40 = locale36.toLanguageTag();
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale41.getDisplayScript();
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = locale43.getISO3Language();
        java.lang.String str45 = locale41.getDisplayScript(locale43);
        java.lang.String str46 = locale41.toLanguageTag();
        java.util.Set<java.lang.String> strSet47 = locale41.getUnicodeLocaleKeys();
        java.util.Locale locale48 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale48);
        java.util.Set<java.lang.String> strSet50 = locale48.getUnicodeLocaleKeys();
        boolean boolean51 = locale48.hasExtensions();
        java.lang.String str52 = locale41.getDisplayVariant(locale48);
        java.lang.String str53 = locale36.getDisplayVariant(locale48);
        java.util.Locale locale57 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.lang.String str58 = locale57.getDisplayName();
        java.lang.String str59 = locale36.getDisplayName(locale57);
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale36);
        java.util.Locale.setDefault(locale36);
        java.lang.String str62 = locale30.getDisplayLanguage(locale36);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zho" + "'", str6, "zho");
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals(locale13.toString(), "chinese (taiwan)");
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh-TW" + "'", str17, "zh-TW");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinesisch" + "'", str25, "Chinesisch");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str32, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "zh-TW" + "'", str35, "zh-TW");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinese" + "'", str37, "Chinese");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "zh-TW" + "'", str40, "zh-TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "kor" + "'", str44, "kor");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "und" + "'", str46, "und");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals(locale57.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1 / 1 (zh-tw)" + "'", str58, "1 / 1 (zh-tw)");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Chinese (Taiwan)" + "'", str59, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u4e2d\u6587" + "'", str62, "\u4e2d\u6587");
    }

    @Test
    public void test09482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09482");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale locale6 = builder4.build();
        java.util.Locale locale7 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.util.Locale locale9 = locale7.stripExtensions();
        boolean boolean10 = locale9.hasExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.lang.String str12 = locale9.getDisplayVariant();
        java.lang.String str13 = locale9.getDisplayName();
        java.util.Locale.Builder builder14 = builder4.setLocale(locale9);
        java.util.Locale.Builder builder15 = builder4.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str13, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test09483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09483");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) '#');
        java.text.Format.Field field3 = fieldPosition2.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction9.multiply(fraction13);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.add(fraction13);
        boolean boolean16 = field3.equals((java.lang.Object) fraction6);
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition(field3);
        int int18 = fieldPosition17.getField();
        java.lang.String str19 = fieldPosition17.toString();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21);
        java.util.Locale locale25 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale25);
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance(locale27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat28, numberFormat30);
        boolean boolean32 = numberFormat30.isGroupingUsed();
        boolean boolean33 = numberFormat30.isGroupingUsed();
        fractionFormat26.setNumeratorFormat(numberFormat30);
        java.util.Locale locale39 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        int int41 = numberFormat40.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = new org.apache.commons.math.fraction.FractionFormat(numberFormat40);
        java.util.Locale locale47 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        int int49 = numberFormat48.getMaximumIntegerDigits();
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale50);
        boolean boolean52 = numberFormat51.isGroupingUsed();
        java.util.Currency currency53 = numberFormat51.getCurrency();
        numberFormat48.setCurrency(currency53);
        java.util.Currency currency55 = numberFormat48.getCurrency();
        java.math.RoundingMode roundingMode56 = numberFormat48.getRoundingMode();
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) 'a');
        java.lang.String str60 = parsePosition59.toString();
        java.lang.String str61 = parsePosition59.toString();
        java.lang.Object obj62 = numberFormat48.parseObject("zho", parsePosition59);
        java.lang.Object obj63 = fractionFormat42.parseObject("java.text.NumberFormat$Field(currency)", parsePosition59);
        java.lang.Object obj64 = numberFormat30.parseObject("Italian", parsePosition59);
        java.lang.Object obj65 = numberFormat21.parseObject("600", parsePosition59);
        java.util.Currency currency66 = numberFormat21.getCurrency();
        boolean boolean67 = fieldPosition17.equals((java.lang.Object) currency66);
        int int68 = fieldPosition17.getField();
        fieldPosition17.setBeginIndex(0);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str19, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals(locale39.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertEquals(locale47.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency55);
        org.junit.Assert.assertEquals(currency55.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode56 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode56.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str60, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str61, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(currency66);
        org.junit.Assert.assertEquals(currency66.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
    }

    @Test
    public void test09484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09484");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.setVariant("Korean");
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale locale11 = builder9.build();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        java.util.Set<java.lang.Character> charSet14 = locale12.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str17 = locale12.getCountry();
        java.util.Locale.Category category18 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale19 = java.util.Locale.getDefault(category18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale20);
        java.util.Locale.setDefault(category18, locale20);
        java.util.Locale locale25 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category18, locale25);
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.PRC;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.util.Locale.setDefault(category18, locale27);
        java.util.Locale locale31 = java.util.Locale.getDefault(category18);
        java.lang.String str32 = locale12.getDisplayCountry(locale31);
        java.lang.String str33 = locale11.getDisplayVariant(locale31);
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("France");
        java.lang.String str37 = locale35.getUnicodeLocaleType("87");
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale35);
        java.lang.String str39 = locale31.getDisplayScript(locale35);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getNumberInstance(locale35);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.FORMAT + "'", category18.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals(locale25.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str29, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "france");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(numberFormat40);
    }

    @Test
    public void test09485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09485");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("zh-TW");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        java.lang.String str7 = languageRange1.getRange();
        java.lang.String str8 = languageRange1.getRange();
        double double9 = languageRange1.getWeight();
        java.lang.String str10 = languageRange1.getRange();
        org.apache.commons.math.fraction.Fraction fraction13 = new org.apache.commons.math.fraction.Fraction(0.016666666666666666d, (int) (byte) 1);
        long long14 = fraction13.longValue();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getInstance(locale15);
        java.util.Currency currency18 = numberFormat17.getCurrency();
        numberFormat17.setMinimumIntegerDigits(1);
        int int21 = numberFormat17.getMaximumFractionDigits();
        numberFormat17.setParseIntegerOnly(true);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17);
        java.util.Locale.Category category26 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale27 = java.util.Locale.getDefault(category26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale28);
        java.util.Locale.setDefault(category26, locale28);
        java.util.Locale locale31 = java.util.Locale.getDefault(category26);
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale31);
        numberFormat33.setMaximumIntegerDigits((int) 'x');
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getCurrencyInstance(locale36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.text.NumberFormat numberFormat39 = properFractionFormat38.getWholeFormat();
        numberFormat39.setGroupingUsed(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33, numberFormat39);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        boolean boolean49 = numberFormat48.isGroupingUsed();
        properFractionFormat46.setWholeFormat(numberFormat48);
        java.text.NumberFormat numberFormat51 = properFractionFormat46.getWholeFormat();
        java.text.ParsePosition parsePosition54 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number55 = numberFormat51.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition54);
        parsePosition54.setErrorIndex(0);
        parsePosition54.setErrorIndex(1728000);
        java.lang.Object obj60 = numberFormat39.parseObject("\ub300\ub9cc", parsePosition54);
        java.util.Locale locale65 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance(locale65);
        numberFormat66.setMinimumIntegerDigits((int) (short) -1);
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getPercentInstance(locale70);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getPercentInstance(locale73);
        boolean boolean75 = numberFormat74.isGroupingUsed();
        properFractionFormat72.setWholeFormat(numberFormat74);
        java.text.NumberFormat numberFormat77 = properFractionFormat72.getWholeFormat();
        java.text.ParsePosition parsePosition80 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number81 = numberFormat77.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition80);
        parsePosition80.setErrorIndex(0);
        parsePosition80.setIndex(1);
        parsePosition80.setErrorIndex(32);
        java.lang.Object obj88 = numberFormat66.parseObject("\u53f0\u6e7e\u5730\u533a", parsePosition80);
        java.lang.Object obj89 = numberFormat39.parseObject("\u4e2d\u6587\u4e2d\u570b)", parsePosition80);
        java.lang.Object obj90 = numberFormat17.parseObject("", parsePosition80);
        boolean boolean91 = fraction13.equals((java.lang.Object) parsePosition80);
        boolean boolean92 = languageRange1.equals((java.lang.Object) boolean91);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-tw" + "'", str2, "zh-tw");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh-tw" + "'", str3, "zh-tw");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-tw" + "'", str7, "zh-tw");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zh-tw" + "'", str8, "zh-tw");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh-tw" + "'", str10, "zh-tw");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.FORMAT + "'", category26.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNull(number55);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertEquals(locale65.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNull(number81);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test09486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09486");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale0.getDisplayCountry(locale3);
        java.lang.String str8 = locale0.getISO3Language();
        java.lang.String str9 = locale0.getDisplayName();
        java.lang.String str11 = locale0.getExtension('x');
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction15.abs();
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale18);
        java.util.Locale locale20 = java.util.Locale.getDefault();
        boolean boolean21 = numberFormat19.equals((java.lang.Object) locale20);
        boolean boolean22 = fraction17.equals((java.lang.Object) locale20);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction17.abs();
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale24);
        boolean boolean26 = fraction23.equals((java.lang.Object) locale24);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale24);
        java.lang.String str28 = locale0.getDisplayScript(locale24);
        java.lang.String str29 = locale24.getCountry();
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getNumberInstance(locale24);
        numberFormat30.setMinimumFractionDigits(60);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "France" + "'", str7, "France");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u6cd5\u6587\u6cd5\u570b)" + "'", str9, "\u6cd5\u6587\u6cd5\u570b)");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CN" + "'", str29, "CN");
        org.junit.Assert.assertNotNull(numberFormat30);
    }

    @Test
    public void test09487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09487");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction(0.0d, 2.0d, 10000);
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str8 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction7);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction12.add(fraction18);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction7.multiply(fraction18);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.ONE;
        long long24 = fraction23.longValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction7.multiply(fraction23);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction6.subtract(fraction25);
        org.apache.commons.math.fraction.Fraction fraction29 = new org.apache.commons.math.fraction.Fraction(0.016666666666666666d, (int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction25.subtract(fraction29);
        java.text.NumberFormat.Field field31 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition32 = new java.text.FieldPosition((java.text.Format.Field) field31);
        java.text.FieldPosition fieldPosition34 = new java.text.FieldPosition((java.text.Format.Field) field31, (int) (short) 0);
        java.text.Format.Field field35 = fieldPosition34.getFieldAttribute();
        java.util.Locale.LanguageRange languageRange37 = new java.util.Locale.LanguageRange("zh-TW");
        java.lang.String str38 = languageRange37.getRange();
        java.lang.String str39 = languageRange37.getRange();
        double double40 = languageRange37.getWeight();
        boolean boolean41 = fieldPosition34.equals((java.lang.Object) double40);
        boolean boolean42 = fraction29.equals((java.lang.Object) boolean41);
        double double43 = fraction29.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction3.subtract(fraction29);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1 / 1" + "'", str8, "1 / 1");
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(field31);
        org.junit.Assert.assertNotNull(field35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zh-tw" + "'", str38, "zh-tw");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "zh-tw" + "'", str39, "zh-tw");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(fraction44);
    }

    @Test
    public void test09488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09488");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat14 = properFractionFormat3.getNumeratorFormat();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.Object obj18 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat19 = properFractionFormat17.getWholeFormat();
        int int20 = numberFormat19.getMaximumIntegerDigits();
        java.lang.Object obj21 = numberFormat19.clone();
        properFractionFormat3.setNumeratorFormat(numberFormat19);
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        int int28 = numberFormat27.getMaximumIntegerDigits();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        boolean boolean31 = numberFormat30.isGroupingUsed();
        java.util.Currency currency32 = numberFormat30.getCurrency();
        numberFormat27.setCurrency(currency32);
        java.util.Currency currency34 = numberFormat27.getCurrency();
        int int35 = numberFormat27.getMaximumFractionDigits();
        java.lang.Object obj36 = numberFormat27.clone();
        numberFormat27.setMinimumFractionDigits((int) (short) 1);
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.lang.String str40 = locale39.getScript();
        java.util.Locale locale44 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str45 = locale39.getDisplayScript(locale44);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getNumberInstance(locale44);
        int int47 = numberFormat46.getMinimumIntegerDigits();
        java.util.Locale locale51 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        int int53 = numberFormat52.getMaximumIntegerDigits();
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        boolean boolean56 = numberFormat55.isGroupingUsed();
        java.util.Currency currency57 = numberFormat55.getCurrency();
        numberFormat52.setCurrency(currency57);
        java.lang.Object obj59 = numberFormat52.clone();
        boolean boolean60 = numberFormat52.isGroupingUsed();
        int int61 = numberFormat52.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27, numberFormat46, numberFormat52);
        numberFormat27.setMinimumIntegerDigits(120);
        numberFormat27.setMinimumIntegerDigits((int) (byte) -1);
        properFractionFormat3.setDenominatorFormat(numberFormat27);
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getPercentInstance(locale68);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat69);
        java.text.AttributedCharacterIterator attributedCharacterIterator72 = numberFormat69.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj73 = numberFormat69.clone();
        numberFormat69.setMaximumFractionDigits(2147483647);
        numberFormat69.setParseIntegerOnly(true);
        int int78 = numberFormat69.getMaximumFractionDigits();
        properFractionFormat3.setNumeratorFormat(numberFormat69);
        int int80 = numberFormat69.getMinimumFractionDigits();
        java.lang.Object obj81 = numberFormat69.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(currency32);
        org.junit.Assert.assertEquals(currency32.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals(locale44.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals(locale51.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(currency57);
        org.junit.Assert.assertEquals(currency57.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(attributedCharacterIterator72);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(obj81);
    }

    @Test
    public void test09489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09489");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        numberFormat4.setMinimumIntegerDigits(0);
        int int7 = numberFormat4.getMaximumFractionDigits();
        boolean boolean8 = numberFormat4.isParseIntegerOnly();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction16 = properFractionFormat12.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition15);
        java.lang.Object obj17 = numberFormat4.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition15);
        java.util.Locale.Category category18 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale19 = java.util.Locale.getDefault(category18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale20);
        java.util.Locale.setDefault(category18, locale20);
        java.util.Locale locale23 = java.util.Locale.getDefault(category18);
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale25.getISO3Language();
        java.util.Locale.setDefault(category24, locale25);
        java.util.Locale.setDefault(category18, locale25);
        java.util.Locale locale29 = java.util.Locale.getDefault(category18);
        java.util.Locale locale30 = java.util.Locale.getDefault(category18);
        java.util.Locale locale34 = new java.util.Locale("119", "2,857", "ita");
        java.util.Locale.setDefault(category18, locale34);
        java.util.Locale.Category category36 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale37 = java.util.Locale.getDefault(category36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale38);
        java.util.Locale.setDefault(category36, locale38);
        java.util.Locale locale41 = java.util.Locale.getDefault(category36);
        java.util.Locale.Category category42 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = locale43.getISO3Language();
        java.util.Locale.setDefault(category42, locale43);
        java.util.Locale.setDefault(category36, locale43);
        java.util.Locale locale47 = java.util.Locale.getDefault(category36);
        java.util.Locale locale48 = java.util.Locale.getDefault(category36);
        java.util.Locale locale52 = new java.util.Locale("119", "2,857", "ita");
        java.util.Locale.setDefault(category36, locale52);
        java.util.Locale.setDefault(category18, locale52);
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale52);
        boolean boolean56 = numberFormat55.isGroupingUsed();
        java.util.Locale locale60 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getPercentInstance(locale60);
        int int62 = numberFormat61.getMaximumIntegerDigits();
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance(locale63);
        boolean boolean65 = numberFormat64.isGroupingUsed();
        java.util.Currency currency66 = numberFormat64.getCurrency();
        numberFormat61.setCurrency(currency66);
        java.util.Currency currency68 = numberFormat61.getCurrency();
        java.util.Locale locale70 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getInstance(locale70);
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getPercentInstance(locale72);
        org.apache.commons.math.fraction.FractionFormat fractionFormat74 = new org.apache.commons.math.fraction.FractionFormat(numberFormat71, numberFormat73);
        java.text.ParsePosition parsePosition77 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj78 = numberFormat73.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition77);
        java.lang.String str79 = parsePosition77.toString();
        java.lang.Number number80 = numberFormat61.parse("Chinese", parsePosition77);
        java.util.Locale locale84 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat85 = java.text.NumberFormat.getPercentInstance(locale84);
        int int86 = numberFormat85.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat87 = new org.apache.commons.math.fraction.FractionFormat(numberFormat61, numberFormat85);
        int int88 = numberFormat61.getMaximumFractionDigits();
        numberFormat61.setParseIntegerOnly(true);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat91 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat55, numberFormat61);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNull(fraction16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.FORMAT + "'", category18.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals(locale34.toString(), "119_2,857_ita");
        org.junit.Assert.assertTrue("'" + category36 + "' != '" + java.util.Locale.Category.FORMAT + "'", category36.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category42 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category42.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "kor" + "'", str44, "kor");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals(locale52.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals(locale60.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(currency66);
        org.junit.Assert.assertEquals(currency66.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency68);
        org.junit.Assert.assertEquals(currency68.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str79, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number80);
        org.junit.Assert.assertEquals(locale84.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2147483647 + "'", int86 == 2147483647);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test09490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09490");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat4 = properFractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency6 = numberFormat5.getCurrency();
        java.lang.String str8 = numberFormat5.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        java.lang.String[] strArray15 = java.util.Locale.getISOCountries();
        boolean boolean16 = numberFormat14.equals((java.lang.Object) strArray15);
        java.util.Locale locale20 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        int int22 = numberFormat21.getMaximumIntegerDigits();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        boolean boolean25 = numberFormat24.isGroupingUsed();
        java.util.Currency currency26 = numberFormat24.getCurrency();
        numberFormat21.setCurrency(currency26);
        java.util.Currency currency28 = numberFormat21.getCurrency();
        java.math.RoundingMode roundingMode29 = numberFormat21.getRoundingMode();
        numberFormat14.setRoundingMode(roundingMode29);
        boolean boolean31 = numberFormat14.isParseIntegerOnly();
        properFractionFormat9.setWholeFormat(numberFormat14);
        java.text.NumberFormat numberFormat33 = properFractionFormat9.getWholeFormat();
        java.lang.String str35 = numberFormat33.format(96L);
        boolean boolean36 = numberFormat4.equals((java.lang.Object) numberFormat33);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100%" + "'", str8, "100%");
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals(locale20.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(currency26);
        org.junit.Assert.assertEquals(currency26.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode29 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode29.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "9,600%" + "'", str35, "9,600%");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test09491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09491");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet4);
        java.util.Collection<java.lang.String> strCollection6 = null;
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap8);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strSet18);
        java.util.Locale.FilteringMode filteringMode20 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags(languageRangeList13, (java.util.Collection<java.lang.String>) strSet18, filteringMode20);
        java.lang.String str22 = java.util.Locale.lookupTag(languageRangeList11, (java.util.Collection<java.lang.String>) strList21);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList11, strMap23);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strSet29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap31 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, strMap31);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap33 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList32, strMap33);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strList40);
        java.util.Locale.FilteringMode filteringMode43 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags(languageRangeList32, (java.util.Collection<java.lang.String>) strList40, filteringMode43);
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale locale48 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strSet49);
        java.util.Collection<java.lang.String> strCollection51 = null;
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, strCollection51);
        java.lang.String str53 = java.util.Locale.lookupTag(languageRangeList32, strCollection51);
        java.util.Collection<java.util.Locale> localeCollection54 = null;
        java.util.Locale.FilteringMode filteringMode55 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList56 = java.util.Locale.filter(languageRangeList32, localeCollection54, filteringMode55);
        java.util.List<java.util.Locale> localeList57 = java.util.Locale.filter(languageRangeList11, (java.util.Collection<java.util.Locale>) localeList56);
        java.util.Locale locale58 = java.util.Locale.lookup(languageRangeList9, (java.util.Collection<java.util.Locale>) localeList57);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList9, strMap59);
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        java.util.List<java.lang.String> strList68 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.lang.String>) strList66);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap69 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList70 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, strMap69);
        java.util.Locale locale71 = java.util.Locale.ROOT;
        java.lang.String str72 = locale71.getDisplayScript();
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.lang.String str74 = locale73.getISO3Language();
        java.lang.String str75 = locale71.getDisplayScript(locale73);
        java.lang.String str76 = locale71.toLanguageTag();
        java.util.Set<java.lang.String> strSet77 = locale71.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode78 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.lang.String>) strSet77, filteringMode78);
        java.util.Locale.Category category80 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale81 = java.util.Locale.getDefault(category80);
        java.util.Set<java.lang.String> strSet82 = locale81.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList83 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.lang.String>) strSet82);
        java.lang.String str84 = java.util.Locale.lookupTag(languageRangeList60, (java.util.Collection<java.lang.String>) strSet82);
        java.util.Locale locale85 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat86 = java.text.NumberFormat.getCurrencyInstance(locale85);
        java.util.Locale.setDefault(locale85);
        java.lang.String str88 = locale85.getISO3Language();
        java.lang.String str89 = locale85.getScript();
        java.lang.String str90 = locale85.getDisplayCountry();
        java.lang.String str91 = locale85.getDisplayName();
        org.apache.commons.math.fraction.FractionFormat fractionFormat92 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale85);
        java.util.Set<java.lang.String> strSet93 = locale85.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList94 = java.util.Locale.filterTags(languageRangeList60, (java.util.Collection<java.lang.String>) strSet93);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + filteringMode20 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode20.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + filteringMode43 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode43.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + filteringMode55 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode55.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList56);
        org.junit.Assert.assertNotNull(localeList57);
        org.junit.Assert.assertNull(locale58);
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(languageRangeList70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "kor" + "'", str74, "kor");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "und" + "'", str76, "und");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertTrue("'" + filteringMode78 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode78.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertTrue("'" + category80 + "' != '" + java.util.Locale.Category.FORMAT + "'", category80.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "eng" + "'", str88, "eng");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "English" + "'", str91, "English");
        org.junit.Assert.assertNotNull(fractionFormat92);
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertNotNull(strList94);
    }

    @Test
    public void test09492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09492");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str10 = locale8.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.lang.String str12 = locale5.getDisplayCountry(locale8);
        java.lang.String str13 = locale5.getISO3Language();
        java.lang.String str14 = locale5.getDisplayName();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale18 = new java.util.Locale("France", "CHINESE (TAIWAN)");
        java.util.Locale locale19 = locale18.stripExtensions();
        java.lang.String str20 = locale19.getDisplayCountry();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getNumberInstance(locale19);
        java.util.Locale.setDefault(category0, locale19);
        java.util.Locale locale23 = java.util.Locale.getDefault(category0);
        java.util.Locale locale24 = java.util.Locale.getDefault(category0);
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = locale25.getDisplayCountry(locale26);
        java.util.Set<java.lang.String> strSet29 = locale26.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getIntegerInstance(locale26);
        int int31 = numberFormat30.getMaximumIntegerDigits();
        numberFormat30.setMinimumFractionDigits(2147483647);
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getIntegerInstance(locale34);
        boolean boolean36 = numberFormat30.equals((java.lang.Object) locale34);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        boolean boolean43 = numberFormat42.isGroupingUsed();
        properFractionFormat40.setWholeFormat(numberFormat42);
        java.text.NumberFormat numberFormat45 = properFractionFormat40.getWholeFormat();
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number49 = numberFormat45.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition48);
        parsePosition48.setIndex((int) ' ');
        java.lang.Number number52 = numberFormat30.parse("English (Canada)", parsePosition48);
        java.util.Locale locale56 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance(locale56);
        java.util.Locale locale58 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str59 = locale58.getDisplayLanguage();
        java.lang.String str60 = locale58.toLanguageTag();
        java.util.Locale locale61 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleAttributes();
        java.lang.String str63 = locale61.getISO3Language();
        java.lang.String str64 = locale58.getDisplayScript(locale61);
        java.util.Locale locale65 = java.util.Locale.ITALIAN;
        java.lang.String str66 = locale58.getDisplayCountry(locale65);
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale58);
        java.text.NumberFormat numberFormat68 = fractionFormat67.getDenominatorFormat();
        java.math.RoundingMode roundingMode69 = numberFormat68.getRoundingMode();
        numberFormat57.setRoundingMode(roundingMode69);
        numberFormat30.setRoundingMode(roundingMode69);
        boolean boolean72 = locale24.equals((java.lang.Object) roundingMode69);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "France" + "'", str12, "France");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fra" + "'", str13, "fra");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "French (France)" + "'", str14, "French (France)");
        org.junit.Assert.assertEquals(locale18.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "CHINESE (TAIWAN)" + "'", str20, "CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Japan" + "'", str28, "Japan");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNull(number49);
        org.junit.Assert.assertNull(number52);
        org.junit.Assert.assertEquals(locale56.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Chinese" + "'", str59, "Chinese");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "zh-TW" + "'", str60, "zh-TW");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "zho" + "'", str63, "zho");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Taiwan" + "'", str66, "Taiwan");
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertTrue("'" + roundingMode69 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode69.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test09493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09493");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getEndIndex();
        fieldPosition1.setBeginIndex((int) (byte) 100);
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str9 = fractionFormat7.format((java.lang.Object) 100);
        boolean boolean10 = fieldPosition1.equals((java.lang.Object) fractionFormat7);
        fieldPosition1.setBeginIndex(2147483647);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.abs();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction16.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction16.add(fraction22);
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction25.divide(fraction28);
        boolean boolean31 = fieldPosition1.equals((java.lang.Object) fraction30);
        java.text.Format.Field field32 = fieldPosition1.getFieldAttribute();
        int int33 = fieldPosition1.getField();
        fieldPosition1.setBeginIndex(14400);
        java.text.Format.Field field36 = fieldPosition1.getFieldAttribute();
        java.text.FieldPosition fieldPosition37 = new java.text.FieldPosition(field36);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100 0 / 1" + "'", str9, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(field32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(field36);
    }

    @Test
    public void test09494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09494");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.lang.String str8 = locale0.getVariant();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean10 = numberFormat9.isGroupingUsed();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Japan" + "'", str5, "Japan");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Japan" + "'", str6, "Japan");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test09495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09495");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale locale17 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.lang.String str20 = locale14.getDisplayName(locale17);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale14.getDisplayLanguage(locale23);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale14);
        fractionFormat10.setNumeratorFormat(numberFormat27);
        properFractionFormat7.setWholeFormat(numberFormat27);
        fractionFormat4.setNumeratorFormat(numberFormat27);
        java.text.NumberFormat numberFormat31 = fractionFormat4.getNumeratorFormat();
        java.text.NumberFormat numberFormat32 = fractionFormat4.getDenominatorFormat();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        numberFormat33.setMaximumIntegerDigits(2147483647);
        java.lang.String str37 = numberFormat33.format((long) 'a');
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale38);
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        numberFormat40.setMinimumIntegerDigits(1728000);
        numberFormat40.setMaximumIntegerDigits(600);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32, numberFormat33, numberFormat40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        org.apache.commons.math.fraction.Fraction fraction48 = properFractionFormat46.parse("-92 / 1");
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str50 = locale49.getDisplayLanguage();
        java.lang.String str51 = locale49.toLanguageTag();
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleAttributes();
        boolean boolean54 = locale52.hasExtensions();
        java.lang.String str55 = locale52.getDisplayScript();
        java.lang.String str56 = locale49.getDisplayName(locale52);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getCurrencyInstance(locale52);
        java.math.RoundingMode roundingMode58 = numberFormat57.getRoundingMode();
        properFractionFormat46.setWholeFormat(numberFormat57);
        java.lang.String str61 = numberFormat57.format((double) (byte) 108);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "English" + "'", str20, "English");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc601\uc5b4" + "'", str26, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "9\240700 %" + "'", str37, "9\240700 %");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Chinese" + "'", str50, "Chinese");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "zh-TW" + "'", str51, "zh-TW");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "chinois (Taiwan)" + "'", str56, "chinois (Taiwan)");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertTrue("'" + roundingMode58 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode58.equals(java.math.RoundingMode.HALF_EVEN));
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u20ac" + "'", str61, "\u20ac");
    }

    @Test
    public void test09496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09496");
        java.util.Locale locale1 = new java.util.Locale("Japan");
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        boolean boolean5 = numberFormat3.equals((java.lang.Object) locale4);
        java.util.Locale locale7 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.lang.String str9 = locale7.getDisplayCountry();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.lang.String str11 = locale4.getDisplayVariant(locale7);
        java.lang.String str12 = locale1.getDisplayScript(locale4);
        java.util.Set<java.lang.Character> charSet13 = locale4.getExtensionKeys();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14);
        java.util.Locale locale16 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale16);
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance(locale19);
        java.util.Currency currency22 = numberFormat21.getCurrency();
        numberFormat21.setMinimumIntegerDigits(1);
        numberFormat21.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj30 = numberFormat21.parseObject("Japan", parsePosition29);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException34 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str35 = fractionConversionException34.getPattern();
        java.lang.Throwable[] throwableArray36 = fractionConversionException34.getSuppressed();
        java.lang.Object[] objArray37 = fractionConversionException34.getArguments();
        boolean boolean38 = parsePosition29.equals((java.lang.Object) objArray37);
        int int39 = parsePosition29.getIndex();
        int int40 = parsePosition29.getIndex();
        java.lang.Object obj41 = fractionFormat17.parseObject("\ud55c\uad6d\uc5b4", parsePosition29);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat42.getWholeFormat();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        numberFormat45.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = new org.apache.commons.math.fraction.FractionFormat(numberFormat43, numberFormat45);
        java.text.NumberFormat numberFormat50 = fractionFormat49.getNumeratorFormat();
        boolean boolean51 = parsePosition29.equals((java.lang.Object) fractionFormat49);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance(locale53);
        boolean boolean55 = numberFormat54.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.lang.String str58 = numberFormat54.format(0.008333333333333333d);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getPercentInstance(locale60);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance(locale63);
        boolean boolean65 = numberFormat64.isGroupingUsed();
        properFractionFormat62.setWholeFormat(numberFormat64);
        java.text.NumberFormat numberFormat67 = properFractionFormat62.getWholeFormat();
        java.text.ParsePosition parsePosition70 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number71 = numberFormat67.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition70);
        int int72 = parsePosition70.getIndex();
        java.lang.String str73 = parsePosition70.toString();
        java.lang.Number number74 = numberFormat54.parse("-100%", parsePosition70);
        org.apache.commons.math.fraction.Fraction fraction75 = fractionFormat49.parse("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=1,endIndex=0]", parsePosition70);
        java.lang.StringBuffer stringBuffer76 = null;
        java.text.NumberFormat.Field field77 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition79 = new java.text.FieldPosition((java.text.Format.Field) field77, (int) '#');
        java.text.Format.Field field80 = fieldPosition79.getFieldAttribute();
        java.text.Format.Field field81 = fieldPosition79.getFieldAttribute();
        fieldPosition79.setBeginIndex(52);
        fieldPosition79.setBeginIndex(600);
        int int86 = fieldPosition79.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer87 = fractionFormat15.format((java.lang.Object) fractionFormat49, stringBuffer76, fieldPosition79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "japan");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "TWD");
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str35, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1%" + "'", str58, "1%");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNull(number71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str73, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertEquals("'" + number74 + "' != '" + 1L + "'", number74, 1L);
        org.junit.Assert.assertNull(fraction75);
        org.junit.Assert.assertNotNull(field77);
        org.junit.Assert.assertNotNull(field80);
        org.junit.Assert.assertNotNull(field81);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 600 + "'", int86 == 600);
    }

    @Test
    public void test09497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09497");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        boolean boolean19 = numberFormat18.isGroupingUsed();
        properFractionFormat16.setWholeFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat11, numberFormat18);
        java.lang.Object obj22 = properFractionFormat21.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj22);
    }

    @Test
    public void test09498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09498");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = properFractionFormat2.clone();
        java.text.NumberFormat.Field field4 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field4);
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        boolean boolean8 = field4.equals((java.lang.Object) locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale6.getISO3Language();
        java.lang.String str11 = locale6.getLanguage();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale6);
        properFractionFormat2.setWholeFormat(numberFormat12);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(field4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "eng" + "'", str10, "eng");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en" + "'", str11, "en");
        org.junit.Assert.assertNotNull(numberFormat12);
    }

    @Test
    public void test09499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09499");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str1 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction0);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction5.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction0.multiply(fraction11);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction0.negate();
        long long17 = fraction16.longValue();
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.add(fraction25);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction16.multiply(fraction19);
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.negate();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction31.add(fraction37);
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.negate();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction40.divide(fraction43);
        int int46 = fraction40.intValue();
        float float47 = fraction40.floatValue();
        int int48 = fraction40.intValue();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction40.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction19.divide(fraction49);
        org.apache.commons.math.fraction.Fraction fraction52 = new org.apache.commons.math.fraction.Fraction((double) 10.0f);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.abs();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction50.add(fraction53);
        java.lang.String str55 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction53);
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.negate();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.abs();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction59.abs();
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.negate();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.abs();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction65.abs();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction59.add(fraction65);
        int int69 = fraction65.getNumerator();
        int int70 = fraction65.intValue();
        org.apache.commons.math.fraction.Fraction fraction71 = fraction65.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction53.add(fraction65);
        org.apache.commons.math.fraction.Fraction fraction73 = fraction53.negate();
        org.apache.commons.math.fraction.Fraction fraction74 = fraction73.abs();
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getPercentInstance(locale75);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        numberFormat76.setMaximumFractionDigits(100);
        java.lang.String str81 = numberFormat76.format((long) 100);
        int int82 = numberFormat76.getMaximumFractionDigits();
        numberFormat76.setMinimumFractionDigits((int) (short) 0);
        int int85 = numberFormat76.getMaximumFractionDigits();
        boolean boolean86 = numberFormat76.isGroupingUsed();
        numberFormat76.setMaximumIntegerDigits((int) (short) 0);
        java.util.Currency currency89 = numberFormat76.getCurrency();
        boolean boolean90 = fraction73.equals((java.lang.Object) currency89);
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1 / 1" + "'", str1, "1 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.016666668f + "'", float47 == 0.016666668f);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "10 / 1" + "'", str55, "10 / 1");
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "10,000%" + "'", str81, "10,000%");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 100 + "'", int82 == 100);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(currency89);
        org.junit.Assert.assertEquals(currency89.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test09500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09500");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8, numberFormat10);
        boolean boolean12 = numberFormat10.isGroupingUsed();
        boolean boolean13 = numberFormat10.isGroupingUsed();
        fractionFormat6.setNumeratorFormat(numberFormat10);
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        int int21 = numberFormat20.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        boolean boolean32 = numberFormat31.isGroupingUsed();
        java.util.Currency currency33 = numberFormat31.getCurrency();
        numberFormat28.setCurrency(currency33);
        java.util.Currency currency35 = numberFormat28.getCurrency();
        java.math.RoundingMode roundingMode36 = numberFormat28.getRoundingMode();
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) 'a');
        java.lang.String str40 = parsePosition39.toString();
        java.lang.String str41 = parsePosition39.toString();
        java.lang.Object obj42 = numberFormat28.parseObject("zho", parsePosition39);
        java.lang.Object obj43 = fractionFormat22.parseObject("java.text.NumberFormat$Field(currency)", parsePosition39);
        java.lang.Object obj44 = numberFormat10.parseObject("Italian", parsePosition39);
        java.lang.Object obj45 = numberFormat1.parseObject("600", parsePosition39);
        java.util.Locale locale47 = new java.util.Locale("Chinese (Taiwan)");
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance(locale49);
        java.util.Currency currency52 = numberFormat51.getCurrency();
        numberFormat51.setMinimumIntegerDigits(1);
        numberFormat51.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj60 = numberFormat51.parseObject("Japan", parsePosition59);
        int int61 = numberFormat51.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat48, numberFormat51);
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str65 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction64);
        int int66 = fraction64.getNumerator();
        long long67 = fraction64.longValue();
        java.text.AttributedCharacterIterator attributedCharacterIterator68 = properFractionFormat63.formatToCharacterIterator((java.lang.Object) long67);
        java.text.NumberFormat numberFormat69 = properFractionFormat63.getNumeratorFormat();
        java.text.NumberFormat numberFormat70 = properFractionFormat63.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction72 = properFractionFormat63.parse("4,937,100.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000%");
        java.text.NumberFormat numberFormat73 = properFractionFormat63.getWholeFormat();
        numberFormat73.setMinimumFractionDigits((int) (byte) 119);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(currency33);
        org.junit.Assert.assertEquals(currency33.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode36.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str40, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str41, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertEquals(locale47.toString(), "chinese (taiwan)");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "TWD");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1 / 1" + "'", str65, "1 / 1");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(attributedCharacterIterator68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(numberFormat73);
    }
}
